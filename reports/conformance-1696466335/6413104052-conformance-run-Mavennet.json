{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "de5d1ac3-c675-4a1f-b460-3497f2010c57",
        "name": "Clear Cache",
        "item": [
          {
            "id": "43943580-03ff-4a3a-87e9-1ba5b2e2c60e",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "44401855-4d05-4bd4-a705-2dfe57507d32",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "bd0b2550-bbe3-4f0c-8d1c-d6eaeda77875"
                }
              }
            ]
          },
          {
            "id": "ae8bd013-7ad7-4b31-ad89-4efc25072679",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d409a9c3-6778-4e8e-b8ea-c928ad76a125",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "67e08575-919f-4d2a-9d5a-bf36456b3d4d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5f2c350c-758b-45b4-8537-d7efd1dfe7d6",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e19664c6-5ae6-45bd-8cd3-cf2061edbf88",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ddec4637-c446-48a9-ab7e-74e359df390c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7617300e-a56b-4a2f-a174-ef0a3b0ab283",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ed13f535-6b27-4534-8132-c0eccab0de1b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1d62b529-da53-4470-983b-6651b3e74c07",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4f8ef08f-e3e4-4aa4-be03-019206a96d51"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b297fb6c-2741-4a5f-8228-dc48692a3041",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "98a02298-0748-4a8e-9c79-cf16c5420451"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "32441963-2fef-40b2-b249-eb5d91e4dbdf",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "85bf34b8-b883-4a38-b099-04213ea4c205"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "618c4b92-ad81-41b3-b8f7-17a0d75de64f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d50eed01-0fe6-486d-ab2c-d78b4af8669b"
            }
          }
        ]
      },
      {
        "id": "4d6f9336-0133-4bbc-adb7-b794458e839c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "fa38094d-ff52-4e71-9545-4929f3f06d34",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c67d1620-2326-49cc-a6a6-c46ecb4e7beb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "04f818a7-0fb0-4ae5-8c9d-286c5c047962",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8e9e5d6-c2e8-4b02-beed-44ee9dd0b0af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "44c737c1-a45b-4e46-be38-11e79d14edd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04e47f02-36c9-454c-a89b-353ab274b84f",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd05085-6e0f-443b-baa5-64dc60e85293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce07a2b9-cd65-434c-b855-c29998eb6ae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0582a7e-9267-4bf8-b456-ea4915e1bebd",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fee8a0d6-b165-4f8c-a706-1b28be6c8eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e0e89671-52a4-4049-9967-93b45e7265cb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "800ca2f3-2c1d-4a12-adbd-46e4fd213a53",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "af01c8c7-f2df-4e95-94e8-394b0816af79",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "053af0e2-8adb-48ed-b8dc-57872f0bc096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0643066c-9d16-4c1e-909f-0b8ab9fc4567"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf14bab3-fffd-4277-a4ae-2c4f41f711ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b36ba4df-1821-4e2c-a607-93fc026f12db"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "09976f0f-616b-42f1-ba62-62e4ce3dc4c6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e9e50fc4-47b1-4f86-b27b-11fad98d925a",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "62cf83cc-4d21-41df-b835-4b2c4adc62aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6ebdd5bf-8b1a-460a-ae6f-d89583a37313"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1830dace-9506-43b7-a6ea-41100c175f2c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "3b18d779-19a5-49f1-b67b-91c31e35eaf4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "031d0fb8-18f8-448a-b88c-d7048d9b4ec7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b0dd8fd0-bbdf-4395-97ad-ab9e0fb5358b"
            }
          }
        ]
      },
      {
        "id": "1f8511dd-892a-4ca6-a5c3-dc87d66080c9",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "11023833-dce7-4074-bfd1-35a390187d59",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ca003397-371c-43d4-b207-986de4ab6e3b",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "2f360aa2-8624-483f-9f3e-9049bcfaf1e7",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac72c82-a470-4334-8d7f-a33dac5203fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e21c09a4-80ce-43de-b577-162321638a08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "759034d6-b31c-445c-b43d-60ea77e8ac3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "367113f4-386c-4e35-bfa0-19a54f18c52d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc209e5d-e77d-4a3e-9a1b-69fa32bc0125",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c5f789-8658-474d-a5e8-7b884f73cb4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd53f0de-1d7e-4b65-82be-eb2460007a14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ecc728a-a7a9-48bb-8220-478bd952176c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce42975b-59db-41bf-b53f-1fcb7f273567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34d1c4e7-2b0a-44ad-a59f-63c437dbb535",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b15ef871-02ad-46e5-9f8d-8ccf5fcdd6ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b46282fa-fd3f-4892-8444-05a3b5deb1fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cc4e442-9a21-4a10-9ea6-d5445e8245ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2502ae4-caa0-4b1d-9831-94f813bc0778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb5aee8d-d484-4c72-9b60-dfc9ee2306c1",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64da918e-c12b-4f07-aa54-6c393101b303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bfc5eae-b232-4b58-b1dc-09338fb5c437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "936212b1-fc6a-45de-90ae-a7ee5fbc8a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe405b52-d618-4ed1-8c2c-01ababd4a15d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be834696-bf14-4271-a803-2e527cc06164",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "173acf46-4935-429c-ba9a-cac67bee1f6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a880f79c-cdfd-4dc5-bf35-f54c15d2716d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdb17da2-a84c-4125-b7c4-de04f2d4fd87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7df9f5e-789e-476a-88ac-01483b1a0dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b7b5123-e6a7-4053-84d7-b739b8085c9c",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1beec845-eaa0-4de6-b630-8b912e396266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "295515a6-e9c8-46fc-843c-7202b9ee4e1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f5a7a63-97b5-4244-be37-b7c97f4c73f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "538ad4b5-332f-4003-a5ae-3afad6b8b27d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6879f6b-fc9c-4a6d-bf1b-5deb0c91e0b0",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a9c4e4b-892f-4381-97e7-3d29b289c419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a544c42f-bfc6-4eb4-809c-ac0e35dd89d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5a71ad9-ec97-4673-a4fc-16ceb207e190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c054459b-9fec-48e5-ab1b-707ecbe531a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af22a6b3-ef5d-4d20-962e-dfed9022c949",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ebca31-918e-4925-9fc9-6a288cc39180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c310f3d2-e3d7-46a5-9707-6809ea8c50a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dcc6c0a-ebdb-472d-a3af-5fc1785b0274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24a6a853-53ea-4d24-8cb7-55ce1ef7519f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6f0ba3-24b0-4ef6-8373-b1e009c97670",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c1909b-4bfe-4688-a01b-80825d10f9c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "978ed75c-72f5-48bf-892e-cdccc7940838"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c4299fb-8739-4199-abd6-b191150c0479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "492b08d1-8e2e-4e0e-b908-b5a319b8fd4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f875f0d0-5834-4e7e-b8fe-081aa7e71762",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b4f18d-885d-444d-9735-117b02534515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10116ed1-1c88-424e-9d95-158af995eb22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78c4a273-b0d3-41b6-93e8-9072fe64ae91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67ed2df8-b715-464e-8a84-cd187e1bd5ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ece51cec-921b-4f3a-b571-682c8593dfaf",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c93a8ff-4711-4ea3-9d01-676db73227d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f27eded1-edf0-4e7c-8c61-6fe17b980ba4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c079f689-0ecf-4f71-a2ea-0f946cce6a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "743c79dc-d42c-4de9-881a-7170a992ffd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a5a521d-a170-43d0-b2a0-65a85ec33509",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e7a6f1-9336-433f-a9a1-db8bb3e03462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a3c1ecf-987c-4e54-a03c-a621b5fc83d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82906c2-5bbb-4a6e-92fd-9a4481ce4d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4bce2932-00ab-4273-89fa-04737db73bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aea6f33-c52f-40de-9ae1-e6fc223e18d5",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bb818e5-8fb7-4189-9e07-7555786aaf6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24f2630a-345c-4ec1-830d-bb29ea59c50b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d6ec910-72fd-4da4-841d-3d4b66f5cc54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f000f4a-e833-4af4-90e4-c302511dc712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e0b2f57-6327-42e1-8778-f8c35681c9a3",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7787ec9d-e69a-441e-a1ed-d89a3e6e9284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c18b352d-8261-47d0-ace9-f26884011f42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1046a5ca-2bda-48e2-a4f6-2e0518a279fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "346e4a8b-5b70-4c0c-9126-c24d05013f6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d7b063f-8d28-4c88-873f-2a726e705030",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22e55a5c-3bef-4b37-96ff-099e1ab6b52b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5327e920-03b1-473f-813e-9844a9f62070"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aadfa93-2d9d-4d28-b57e-4a46a0b9f05a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5a38d3f3-c214-4a73-ae4d-e2174a13d2cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d97e35f-b43f-4d3c-86e6-c1e11da31ddb",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bcdd5c5-8d6f-4bf1-af66-b53e755b02c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "390e6515-808d-486c-bb06-09a3081f6d4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "105946db-548e-48d1-94a2-7adf0b7e89f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d34e5d30-2cb3-44ff-b2d0-9b2b2f9fa371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dc2c933-b9a7-48e1-b4b9-c5c612654d33",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37538229-7636-4f77-8631-58dacf571372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e36f645-7530-4316-8771-e8bfcaa26108"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afd8e23c-666b-4a8c-ab89-7db374bb8d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6baf678f-30b7-4c71-855c-ef3af02e28c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adf8b976-0b2b-4330-a8cf-3da8179b74b5",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2fe19ac-1918-4734-84d3-4584a5057320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0cfd402-85d5-4838-8cbc-a2c432b921ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a54ff58-cedd-4892-97de-b10a786b79c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "22a65152-9732-49c2-bc2c-50d3e4a551a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afe75ddd-8b9a-4501-ae9b-6f2be6439807",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dfc5c59-bc65-4859-867e-eb2247eb3071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26a6d8fc-b5a1-4db0-ad9d-a13f32f2a4c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2cd63a3-e0aa-4c2e-8a9e-00441fe118bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a36afca-a8b1-4eda-832c-295ddd1f1525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccec49b1-af36-479f-8418-1494ec7c14ce",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fcbf5bd-36eb-4832-93ba-1c026a811eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1641359e-dc73-4c4b-8bae-5e3c35ff86af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6779cd7c-e5de-46fd-987f-f21e472572f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bec6e3b-249d-4867-9b18-8fbcb170b9a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7054fa0-23ea-4b46-a545-3300353ea1d8",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d0bbf86-cf7e-4de5-b6c2-310c7d14c08a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85c3fa3d-ef51-4647-adca-20e0df1a8239"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "111d768c-e53c-4178-8541-8a9a2d154819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b90d2ad-fb23-4100-945b-167dda33cfb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2e4a413-aa00-4747-8285-435425814dbf",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29ee9bad-ac7c-4924-8459-6181dd1271e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "162c3290-faec-4ac3-88e3-bbae738626bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7df239c-cca3-4f3c-9f0e-61656eb79ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "52a74a1b-8918-47c7-9540-ae14a63c41ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afb817e7-7c58-463d-aedc-3e3fb5794efb",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be6e82b-7660-4cae-89c5-c0a2417b1218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2421409f-c767-473d-bd11-2853b1999c5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d826fb3-6df3-4a43-9969-cf5b1f8030b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "70e1c36f-47ad-4b87-a0e6-9c5ddd3d4380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ae936b7-5401-40f8-bb16-2f2d37e903e1",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4985329-b66c-4483-9b84-a4f21a19844a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f76e2a43-03bb-4d52-bae8-0b856470dc0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7246784c-14d6-4b75-bc0b-8122d0520001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "363de3ea-8dcf-49e5-94e4-b266a2ac8a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05c454ce-7a1c-44a5-b04c-71203d8ed609",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e20d2bc-fead-471f-82c1-e5655dec06f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20ab5ef7-5f55-422c-9df5-1127c9b076a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86724329-1ff5-4ed9-acb2-ee92f435c4e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5292fca8-486a-49bf-80c9-0a4da6d119c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85ca6321-f6f8-4805-b6ea-6221213d4cf6",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcfaae9d-5671-48af-ae89-fd8d38d0a801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7012420-1040-4926-a2b0-e86885ba3711"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f07926-965f-4d6b-858b-07ed57f4c129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "645a0cce-28ec-4333-a686-a259a120711f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8793d275-7e7d-4bc7-9510-4daa6d4d595a",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6660540b-8760-4348-a52e-d33f8e9b26f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "189c7821-27d5-41dc-b67f-8173db94477e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61c23d13-5adf-4d02-a377-c0909e5f989b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "95322cf8-834f-4787-8287-af53a520cca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f7e9bb1-a789-4952-b3b5-db8fc941045d",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd856b1-a5a8-4bb0-ada7-7bc8936b7e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d40178a-c4b5-4b96-8284-343497d359c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f05111-de04-4236-90ae-026000a32013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1847dda7-6ec4-4ee0-a985-e87e7ceb79d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98088992-29d2-49c1-8196-cefe6b5af91b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d332a2b-e6a3-484b-957c-a43acd5f8018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1fd0e8a-16a2-49e4-a7c3-30533f0fa213"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20cd565a-6ae0-4d98-bc33-91a844a60c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "81881bbc-515b-4ab5-a52b-d820dca02a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "671decc7-9037-4e84-94ba-96cca4af49fa",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ab684ed-2b55-4b49-967f-382563c0b5c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f63224a7-6fda-4ed1-813a-4b01c56cc700"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5aa87a3-c889-4919-9567-5044827b80dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2e623f1-2eba-4158-8234-6e520e731c58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a90839c-3f4e-4d45-b3f6-6184762e1258",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1423d559-8a12-433b-87b3-647e7c58661e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf6f3471-b1af-4481-a9c8-abac52107046"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "523a71b6-a571-4a3e-91ab-80b4e3f90afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a56a17b8-e64f-4639-b9b4-875a2efcd1db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55e1fed4-f34c-4814-9750-d9fe3aa402b1",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbbd53fc-f144-474a-9e1a-cf25ce9a30ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cffe6a74-46bc-498f-a0e7-d87ca39166c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a7ce412-32c8-4fa1-a204-ef4cb5e318f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "158edc5a-4cb2-43b2-aedb-465104a81a3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acae183e-551d-459c-9981-c1168ebcb04d",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d1d5633-5327-4e0e-a670-1969c3bab249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80e716ff-3de7-4c12-aa56-9e7af955dafe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1799d2ff-55eb-4d6a-92a6-bde9b65860b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "887d0d87-2b60-42e0-b245-090e2e7d821b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ca1cd2a-72d3-4f70-92a2-c226e3f965d8",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3745e05-5a1a-4e01-861f-86e5ad11cd9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64158f9e-b15b-466d-8bee-8ad350aa36d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "432dc120-a436-426b-b241-e357f93684c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfa4de1c-2e2e-4d44-908c-c09450246f3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b21c850-e245-4794-b206-6d676f1b9231",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea359596-7c97-4527-800b-baef64fdbfa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65200a9c-f61e-4b89-b965-071c89bb8df5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98d6af5f-7cba-4d0f-8720-a2eddfa67563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "c1e5de2f-c7e9-48bb-8f8f-6838966472dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "320af95e-a2ec-4424-808a-6fbd3be89676",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b7e37c8-58cb-4581-8c70-7263537d93d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cb75f11d-f2d9-4efd-9dc6-9cc89ac458b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b5c2ad5-c4fb-48ab-a183-f90c208b35e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f587ddca-1e1e-4fb7-ae67-17fbc6e7990f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0650300-865f-43fb-b575-08c72947c354",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6871354b-832d-42a2-9909-388ae752cc28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f02e7b1-e1e8-49c6-852c-e8efa0f47f2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aebc2093-fdb1-4683-81d1-aa7ccf912eed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "124cf5f1-2351-4a13-86a5-f3422388528b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "965c91fd-f10d-4cf1-b5c8-f286ee51b5a2",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b146c2-46b9-48f1-b315-f9e685eb08aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "691c6ca3-24a5-416d-8c24-73573399422d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d61f8263-ee87-47a2-83be-417efc3ede6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a808cef-5849-4617-825b-fb7be0d6076b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1a9f509-052b-4c47-8983-6ae03f95913e",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf713a4c-d7f5-40cf-8d96-a2a64276c33d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fc4151d-6b1c-48f1-999c-221637496fb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c118d3-f8d2-4eda-8ee9-e3af1b75e465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "66d9451d-13d0-4f34-82bc-f8512d58fb9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd867a6c-4d29-4989-961a-f55062f0a413",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fcdf9dd-ea73-4547-b1fa-5cd9f0338b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "706440c2-d9c0-42cb-8739-462037a2af7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "663dff12-50aa-4b9d-aacd-46d178063797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5aa99e5-4298-41d2-9e28-71e1148bd77d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe86bfec-cb1f-408b-8ce0-69e92b7e96d3",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14b6e317-472e-4a83-8c58-4b4c4389b186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9afb5fd1-1072-493c-b786-b066aa71c0bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1cfa651-dbca-4db8-9d3b-44f03c003408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "facf7e9f-d86f-441d-ba11-2770385457fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a605b34-8ec4-4031-b579-1fab8880d051",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7549977-ecef-4418-97de-30cc53bc1ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb900f87-7652-42a8-977e-070a7cbdc402"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "040efcd9-5d47-42b8-bf4d-b51a3c0f417d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "2af68913-634b-46a5-9e54-8535692bd1f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e1f4efc-45d3-470e-afbb-1a93f3d2fd4a",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e25565e-cfb2-4a88-b272-41ce80ab578d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7902d75-bc72-4eb6-8205-9f87fdaa2eac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5d81d37-d08a-45ae-84c6-02c7d5ab61a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a010d34f-e175-4da9-bd85-6acc6a18be8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8f1a164-2194-42a8-b0fc-42793307bdf8",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b66040d-cd18-4051-8229-926be8503f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7063ff67-a384-4765-9319-878f14d40ec0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc9a0a74-7102-41b9-a28a-5cee8b9c7b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "13562041-e13b-4da5-b49e-359e489d03bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5efcf52-3cdc-435f-b53e-cef2f2ea4471",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31fef1a6-16f3-42f2-bc81-d6fd93278c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4a2f9ea-252b-4cd3-a3e3-4be64e916beb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f58137-bbaf-4d67-bd87-088488b4c259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b472dc3-69d5-43c0-acea-470ae0658bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "318e505b-764e-4414-848a-4333d8557152",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9413717a-12ab-4d74-a14b-b40e981fc5b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65f20b8c-dd3f-43dd-a4bc-d8806647f431"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69b56f26-2af6-46c9-9e4f-7d98e51303f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a77790d8-ac46-4789-9778-6a567a009665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c1b5b03-2bef-4730-8a2d-5efd46a56a1a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e440e33-4f53-43c8-8c8b-3aba8b2fb924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc92d526-f9a8-4b14-84ab-fd69fbd31e9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36385c5e-5986-4614-96a0-604c5ca20298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "65e1b43b-54d1-4d1d-b8b2-e4a4317d86a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "609be1b9-5027-498c-838a-c363c068f367",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2345c295-482c-455e-9bd7-f550fd73d774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02f67857-e82c-43ba-bcec-5472c373860f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e29c600-c957-415e-8da2-d9cb539a7d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0d7c53a-9a1a-4ed0-a96a-062ea9b7eeb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a091631a-15f2-4c75-a578-067da06b9dcf",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4939de14-ddeb-406e-95f6-7666abccf1b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2d8c32b-725c-44ae-8135-51e4351848da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af782f6c-79b3-4bff-b03c-68186e6f46c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3172eb5-1ffb-469a-9c94-81638744e27a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0f408cf-b4ec-418f-84e8-52085d211441",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78015458-a7e5-4ed9-aae1-64d0140afeef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb2fecd0-4891-4b41-bea4-677ba22eb3a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8238e32f-d574-47da-9819-0674d1707acb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "518f2761-3660-4884-914d-8a9bd815ecd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8da3a346-6b4c-45d1-807a-d4d2a0072099",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "016b6bb7-8faf-4dcc-8281-abe6c65d0df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "630562a8-f0ff-4829-b19e-41bc17fbdf09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75f92a9d-11a2-4fb7-aa85-0476d1c35166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "4946f47d-b47e-4825-a8d6-f83bc1368a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90e96378-7414-4b3f-b89d-6bcdb5668f17",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8496d568-0a4b-477f-b600-416cc77019db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dc8dffe-d04b-4a73-b6c6-16f2ae7d03c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e32a0f8f-0800-4140-b506-8873de6de3be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fe4c1d2-8924-4de9-ac36-fdc5474300b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84db80e7-c4ec-40e5-b3c9-38ab69dadf9d",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f85de8cb-bc3e-46a2-aa45-a6cef9eb8cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58ac451b-ce23-4738-b49d-b10c656bb054"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a35354-cbf8-496f-b69e-9ae6bd64f284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "51981be4-2ff9-4349-adae-1bd67f8761c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "057887d4-27f1-42ef-99bf-079320495a36",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4c32697-02eb-4a2e-8905-6751a97ded3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41270b22-ad93-4e4d-b069-827c0df9acc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f279ebe9-f2d7-4c61-b7b7-33ec77bc756a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b99cd6cf-7abb-495a-b89a-ec2a6402cc32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1592d31-8cf7-4ffa-8bd1-4a5e2a27b31b",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ebec9d0-e30a-43e7-80e0-2367cfaa64fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16a0c245-dffd-46df-8b3b-b3f104c57848"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f782578e-9343-4e12-a097-89781615a7ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d01227d3-ebe3-45a3-b180-82817f2eacbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea33965b-70d8-4529-bc81-b35d1c18effa",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae9219b-c365-44fd-9195-60c16decb57b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a61485d2-a187-4717-8ee3-e389461902d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d0e7c9-c940-46f4-8020-2b6c213c3da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "b6641bf5-d22d-4072-abb5-fc7fb0a7a519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ef56c2-8015-4f9f-8548-059fdfef3852",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc466d3b-76d7-4462-9658-fd6ad5377350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "435b6030-20a7-4824-ade5-b044d2d9fd90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "554cf155-0b69-42ff-952d-9defa07e0fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4be15b04-21fb-4b20-9025-ad1fd8d9e3b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc3fe60-0db3-4d10-b5ff-1f7019dd7fb9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b59e9515-f3f2-4655-abc5-9c47e1463013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "949c82c3-1368-4ca3-bbb2-4b8dc52a0f66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7cb67d1-3830-4d89-bf92-f7670051cce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b49de780-a7fe-4f71-8332-8d740824c0ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01e5e056-69fa-436e-87e0-cbc742398ee8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b99178ff-15ad-41cd-a243-0ebcf69a8c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ae49fe9-90f1-4d86-a98f-ffacd61bd456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55216879-ffcd-47cc-874e-076a41cf67a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d671a9f2-4ae3-43de-ad8b-9e15fdfe81a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65a5450b-0373-41ce-84f2-b1efc6494e57",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0379eb3-6478-4bff-9867-7dab2017fd1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82fe4e8d-d0a3-469a-9769-ad366e1c90af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "312b2ac8-5ab8-4a07-8917-8ee4e02bf2bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "671a6b09-0471-478d-b6ce-6c80c51e9655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4347b007-dc73-43a0-968e-f8d050a01e98",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66b4504a-4ad0-499f-9ea2-1a173f7dfc30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acb63e07-2233-4b9a-a8eb-3a16780a9b0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9abf310f-4fc2-404a-80a8-60efd2a72333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a55e883-96e8-4991-bc8f-8837802d9e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d3cfa1f-b57c-4baf-a54f-a94de03509e4",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec1195a9-b16c-46d7-a2b1-e2c8270156d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01db43b6-57dc-40bb-ac9d-736f8ae7cc89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bcc1c4e-b5b2-4f58-ae95-97c91c351a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "81a639dd-cb89-4f45-af89-cc6517419db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4b14b1c-a683-47a0-8e8f-dbc74659d6e8",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1abc2b5c-6aa3-4107-9f31-ef1fc4312d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f425190-b41a-4296-9d40-bf0eaa241cb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8d480be-296f-40af-9151-1e939f550e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c54a8c52-f9b1-41cc-b147-353e64e4a4a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf176049-7ca6-4f96-9e2e-c5f0ff54ee76",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "455e4245-9af9-464a-815a-56a4510e93d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e41d09b4-c8dd-45d0-965c-e7d5aa6d0544"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb9d4e53-319a-4273-917d-4d19b6595246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8dcbaa5a-8c43-4589-9adb-9c400719699c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632b95c7-ded6-496e-a8a1-b2394091d8e1",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "930b0c40-9d62-4e04-9cde-860ed1d03374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb8f3293-c0cf-4edb-83a8-756a3364d10a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2930df1-4e8f-42c7-b6f5-ca062a48e9cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a48a8520-3972-443a-9425-770fe080ba8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74b79398-58db-4ec1-b7f4-f4bbab6b3074",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e28afa8-1796-4355-be53-e342e4b148da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "083527dd-35ba-4dfa-8da3-07a3a7c73172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c69553a1-3e4c-4d3c-aca7-53b0e7a2d44a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4035b9e2-77be-469b-95e4-20b539b142b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dc87c76-75f5-419c-9259-1ce609da101e",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a3fa1f-5ac4-45a4-a421-5b2b7ff0db17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "539e8a2a-6c31-4fe3-b13a-a9e3e09b4e78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af958c6-63df-48fd-9ea7-98a472fcbc6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b85828f9-acf7-470f-8b57-061f7b372480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc20e19d-924f-4de8-8e63-01d749d8fe28",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5418e7f5-a181-4af4-9b34-5b0bcb1b55a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a25949d-a7fd-43f4-83a9-52eafe0cd849"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "493da280-a713-4fed-8426-b6df66bdc1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cddcce62-71e9-4879-b0c1-208d27fe7741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d483e9f-9caa-45f7-9f2d-279063aaaae1",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60fb520a-c940-420a-9ac6-9220a976abd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbee52e2-54c0-4289-a56d-27ae4783f8de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "454b0b21-df7d-4643-a162-21645cb17308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c096328-422d-4df7-90a7-02b9aaa2a875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5064b70-1f95-4290-b427-078ad9398acd",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b161fd-2ca5-4cbc-8ef3-285896746eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e03be2f0-e8d2-412f-ab68-43ce52bbca37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde4838b-c765-4d10-9b5b-117d348bf7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c05b00c-97a8-4e2b-9b6d-ed90cfaa1950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e4a0fd-d8d3-4238-b056-0c4907430395",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dcc34f2-0bf8-452c-9755-97839e75c1bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a46592c9-896c-4248-a1fb-c560f40e91f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a93fa8da-35bc-458b-9ab5-8925702e5d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7373b42d-e856-46f9-89f9-656ab1b1e00f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5585657-2644-4b0d-8929-3e6c266f9825",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ead5399b-08cc-4d95-a54a-2fb6c93aa012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad780cec-1533-4ae2-95e3-02d2ae68fe2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1587d113-4fc1-4ca5-a10e-eccc926be18d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "995f34ea-460b-4477-9a27-24181a213afb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11c51461-8b1e-48c7-96b6-9bbb978c92c2",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c708bd28-f400-4d20-b6b6-ca529210ac81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4b53b5b-ed40-4818-a130-0fb5c87b4f02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8deafd4-1fbb-41b1-8ecd-b77b32f3bec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2e4e1a0-be89-40f0-8893-52a45c7e8b80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b348181-4346-429e-8d34-f1090c1c0cfe",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "384a5759-e4e3-4f30-8381-f547a66028d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d0eab4a-2006-4e90-922f-7f4b4fe97307"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c6e453-d937-45ac-a701-194a2e0a4753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "21b7c3b3-5b4e-4220-abd5-88c95385e899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee907159-ad98-4036-a01e-8844c3f51cc8",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c7a2b9-257d-464d-81fe-b520c698a4b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6478e53c-804f-49d7-9b50-b4d3763637a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1271b509-30be-47d3-86ea-34bec08da7aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "190de76d-513d-4777-ab10-79a97f0ac93c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da5a47c-154f-4029-880b-c9088808a3e0",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b9f1f09-72d7-49ef-85be-22b43ea9491b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68ccf3a8-5d9d-428d-8f9b-bdc47125a0e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a45d561-6222-4757-9dab-4af490302cd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9f5625b-c42d-4d4d-9691-1c9c730aba42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da4124a1-6b45-48bc-8425-0a130f352d2d",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e3964c3-3012-4909-9931-a32f2c32950e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b295ef1a-f99a-4899-9c54-98ab8c465c94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d6d19e-28d0-4fbe-a34d-be38a6505d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "24d5000a-d5c4-4e98-8956-aa1afece482d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9d5a51d-3561-4a99-ad0b-830356e05687",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5c29c54-f6c4-4f8d-ae84-80cf36105398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06904798-446d-4fdf-8580-0a97571c1b27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da2d78ab-2c55-4ee9-ad38-c81bb525d626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "99eb7d3f-bc4e-42c4-8e35-adf346ffef64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ef637d-261f-402a-a1c7-8556d52ea575",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14700ae6-9724-4732-9d58-c8a7dbdcf7cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e004d34-ffd3-4e24-908e-ab1628992c43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be30b9a-c832-40c9-85c7-71d73c551782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0644d1f6-dd02-41fd-bbd4-d492f4abade2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40c80d02-e454-40b2-b195-64b020cce757",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff22eb35-b25c-4492-8530-e37bf4d4708a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7abfd73c-7c39-400b-9f41-cddb74f876e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2995074-38e4-4bc9-baa6-a5740cf993d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8bd82966-486a-4bf8-be93-82085b8e8224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "473a134b-eae5-4bf6-a269-b41375e6eb1b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0593f30d-1690-4d43-aae6-da62d02c4588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbabc2a3-7925-41db-ab4d-ed89e70bc9b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ccf54b-3baf-4904-8d3c-da2a706758d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea683451-bb36-4c2d-9b7a-a26f1e9e0943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a69d42d0-c3d5-4257-9139-4c47d0e2261c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f1ee004-67b3-454a-acbf-69f95b2fb9f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e736d2f-996f-44cd-9447-7985bd2ad893"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de9c9202-1b14-4a59-89b3-1dc8b9f39fce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "797bffe9-a2b0-42ec-bf28-59ef8727a042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aed55d9c-808f-4cca-99de-e9e2fdea4193",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca92d700-8dc5-453c-8db5-49c1b4258cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b5ea625-7920-4202-a9b7-5678d7058005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82e498fd-be7c-4e49-a665-fd365295f253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3de5e76a-54b6-4575-8ed8-e2b9f70ab4f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "941059d8-5254-4257-8925-ca67036d077d",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8b12d96-62e6-41f7-8a1e-b9932f8cbbf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6894d4a1-7573-4b7c-a2bc-a4501d961201"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52c2f4cd-267e-4b68-8669-69aaaae8a348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ca99ad5-a56e-443b-bb41-136d7717cc9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87c84455-f6d3-4f58-b29d-abda1744a363",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a08d0841-bb3e-493e-a3cb-7b6aef8c0929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "179bc723-4f6f-4cf9-ac87-e309172f92cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83a402f8-9c61-43d4-b3d8-3baa6e5f4476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "823c284a-8c8e-4060-aaad-3ced00801ee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abb3ebad-c5be-4761-a030-dc9f2ea3227f",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46a83d7c-33e2-4f1e-af50-e659f0f00b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eb7081f-79c7-4cf6-ba38-08ce0033152b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd4e2c0-b2ec-4af6-9196-90b81d5db6af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb1ea1d7-f8c5-4c73-bc9b-891f5da241ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "824b41e8-b171-4406-8471-abdbe1cb2efe",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c932f83d-4816-48ac-96ee-ef97d78a9c62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c2154c1-e533-43f9-baa3-916820916d86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59a540be-5a1f-40d4-89df-7982a44e9c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "332a619a-d96f-477b-a9d0-bedcca1ca01e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21c29e93-f262-402d-be57-0954be9e5bcd",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c76642-78b4-4581-a0fa-c4c556d96264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "929eee0a-a4d0-4a6c-9aba-5abb3a48ace0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cf1216c-d302-4d28-b383-9e4a23aba9d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ff84d16-c5a0-4388-aef8-15b398ce9061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f28340-4af7-4f1e-8bae-253854ff3124",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8455b9bd-42ed-4410-b816-853dbfa2dba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24d9ba13-dff4-43c9-b874-be11bea1e88b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd053516-8267-44b1-935d-42e5e0c2ecd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b60ad5e6-aa18-4b4e-a9b9-c81f3d45ffb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca8bfc6c-f21e-4cc8-9866-34cdbd4b4ad2",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eee7e14-9364-4efb-b5c1-f685395ee467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "719c7362-0196-4692-96f9-21168fc2a59a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cd0079c-9488-4fa3-a539-4de1ca1ed4cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5fe9c0e4-8650-4a47-8fdf-89c21d65e929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f6f5dc-7fe3-49a6-9f16-0d7158014217",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58bca15c-39fb-49d9-a530-acfb39962dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d6988bf-09e5-4237-9884-ec1d9e5dac91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a17cb4c-2d1a-4fad-9dba-97d752fc61c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c1d0e6e-487e-44ca-a312-740f39568f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a80e166d-71cb-4192-8713-1119dacc7804",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cdece29-80e2-4107-adf0-39065192e606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "51a7d417-e058-4d0b-bc5a-f39dad46cd48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d70e66-ba00-41be-829e-2a4ded6d3933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d008b3e8-032e-4dad-a2a4-62dc615cc133"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f085e20b-1063-420f-bf49-e0ade4a309d9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8d8ec390-008a-4da8-ab74-922cde6b2db0",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af202f75-7a67-4527-a663-e3a44b255787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fb8b8cb2-87e7-40a7-8e5f-b4fd35c73966"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "574cdfac-81c1-408b-8cc7-eb6ee184331c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23c4d66f-5fa5-42d4-bd17-ccf8df8528d4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "12485c0d-93f5-47bc-ba20-0b6eb95f4e39",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cecc8b03-742b-49b5-86d4-ca4d6c42f8de"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5e5c4ee4-e3c5-4e43-bb56-0678aab72df9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8fe25178-dc7a-495b-aa1d-d27b0b417bed"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e9561e14-a88a-435e-b8ba-6a0672fa7fc7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0b14341c-3b48-4c74-9e53-ab599d7e3eae"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4fed3e58-19e7-49a7-ada6-18365f4c23d1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ad328217-482a-451d-be97-edcedfbe593a"
                }
              }
            ]
          },
          {
            "id": "e6c565dd-4e02-48c8-b297-bcac48736d32",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dc7ae99e-d650-43f7-9ebe-13ccdacbb2db",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eda84aad-834c-4c1a-b6d0-4a00b80d6d9c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6e653a78-43ba-46e1-a39f-ac9c4624f1a0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4808651a-2db7-4235-a808-66c02218041b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bf2acb26-8b76-44f4-9070-f61a7af7b720"
                    }
                  }
                ]
              },
              {
                "id": "7d518547-5744-4b61-b300-163602953a52",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "75a3ce42-e9e6-4324-99d4-b21fb5f655e6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1e1f6b9c-e435-4894-8136-6bad890fffdd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6d1e18e0-0d93-45c6-9e87-35ce33b1db40",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e0ee18ca-35c1-4c91-94a1-ea4ce6a3b9e0"
                    }
                  }
                ]
              },
              {
                "id": "7bd02f3c-69ac-403e-b6fc-7a3ee2fa5cc0",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab1e0914-37eb-45ab-87f2-d7f91829489b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "27ecdef7-0924-43a3-b3b9-d7fd9b5b67ac"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "14b54d6c-32a3-4007-8ea6-3f019095e4fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c53760f8-f423-4da5-ae26-d3e0e3903040"
                    }
                  }
                ]
              },
              {
                "id": "b9c2d23c-1b9a-4551-8b7c-2bb3aff4d186",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf00431c-b463-4a93-a2bd-73ec891ce506",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4957c328-0ca4-48b5-a915-0c4aafea17d1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "436f4cb0-66ce-451d-8bc2-ca8c5d1356b0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "9b8401b2-ab40-4d2b-baa2-07c2d95056ab"
                    }
                  }
                ]
              },
              {
                "id": "d0e4b6ac-d449-405f-8685-1a1e5697623a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b86edeb4-0495-407d-9d82-e6fc5c33959a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "96098bd6-98f5-4834-87b6-7c8a2afa1dcb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "37ca369a-4f6e-478a-bfeb-2a51979bafba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "9d10f6f9-0a8d-40a7-856c-4f263d97cc79"
                    }
                  }
                ]
              },
              {
                "id": "72fcc623-5f43-4d0b-b41e-d09f9277b885",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "81a0e30d-4ff1-4b23-b898-5d9cd6384dc5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2a680439-4efc-44b3-a92b-57cbace35534"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "943ffb7f-86f6-4cd7-be80-38307bc14ead",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "74c706ee-b662-47bf-83f5-690ea8a7a923"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cbc71f1d-8b59-4b3b-a946-0ffe42a1504e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f247349a-424f-4c71-a25f-e1dfb5b71009"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "435dc2fc-dd27-4730-b689-1f3d023f372f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "35bf6460-130e-4972-9f39-3f936181286a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a0e39c83-7363-4e85-b607-e93b32ea32c4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "7567ebff-444b-4763-9001-75352edfaf06"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "df67d33a-9d27-4732-96e9-a6d4cb9d2e8f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1f76ff4b-0ef0-4834-8938-759ed4b73921"
            }
          }
        ]
      },
      {
        "id": "6302dd63-fdff-4632-b74a-c30b7b482a89",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "5e1e043d-5571-415c-9df1-95247b776f6c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "64fd45cd-c628-48f5-8287-b58cc70e31cf",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c028551f-f3d2-43cd-aeb8-c478ed94ccd2",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbfa727f-4170-4542-ac47-f1af69382956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7540101d-bd87-4bd6-b6ab-da33398f78cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "014e32ff-5546-46ef-b4cc-57aec4ae7a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "425fd767-a43b-49ae-932d-2f836ce977fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ec74d4f-c1d7-4c24-9468-518709eaa0b1",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "532ab35c-b889-4747-ad35-2d2fd05bc0b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f5036ea-19e1-4a38-a56e-e632659c5162"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf6da575-c00d-458c-b2da-2fdaf2a13377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d40353d8-6d1d-4145-bb3f-fddffbf1bcfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0abd36ca-b214-4209-ac41-2bdeb721e7ca",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eecc5c09-d752-41c2-bb52-c3ba975f8911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53da538a-d115-4e18-a16e-3ec50131524c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0201729-067d-401d-9e50-10a797b04143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "62dad967-e7b7-44cb-848f-a8da6d0aa9c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44c51571-4b23-4df1-a166-bef0b3c18f2f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "029a6519-ca5c-42ca-842f-e8437f646f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dee17021-e0ff-442f-9e9c-73142d7f45da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db91a91d-775e-4ae7-8977-fe775d9a7b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "13d832ab-87c5-42ea-9946-42398a3e9c0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c510773a-7ae9-4f57-b8a9-568bf8b64fc9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "149eea6c-cf30-4135-ae98-2e413d7139f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c55e075-3e9f-42ea-a4f8-892858a57c4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fcc9522-76da-4f9f-a4df-2e614c66ed94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f15ef66-6977-453c-93c0-04c2df979866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e21ddfa1-8303-4ade-99c8-da1266f74876",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eee8db2-f39f-4866-ace9-eec82ec46de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29bb27e5-d6ae-43fa-b837-156fb89600f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18dcd06c-1eb2-4fee-8329-4b7a4fa63bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c488e4a2-6815-478c-ac8f-b823e02aa62e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be099efe-c3c9-48ba-b702-c08f11020945",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff73b37e-658d-44db-a560-080d38970069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "166b6398-bff3-4f2e-ba7f-218793a7e28c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f0f9bf9-fefd-49d1-8f14-328d887d207b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "430a8d90-02de-44ce-ac63-d4919267ae54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d14f796e-55b5-4453-a5b2-03dd5eb62f04",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f9ca9a3-758c-43c7-922b-86c6bffe4e67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "884fcdba-a11b-4128-8fef-7acad383b3a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc79059a-4369-404d-bd31-1d59dd188a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d299d52b-8229-4c14-bafe-d248ea9ab815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40743a82-2a31-45e9-8538-09210ea79f02",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff5c3dad-c256-4826-b3dd-dc0152a6dcd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a3a138c-72b1-4f15-8f19-ab7dde804775"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47d8c001-71b1-46b3-966f-3711524255c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc097f17-52ec-4d06-b6ad-8451a6223580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d66e8a47-9da4-4298-bb1e-0098a02da17a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "011435a6-9600-4a86-a6cc-aa9dd41e7cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d4bbbf2-b393-48f0-89c5-76f56afa2ab2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c261e9ec-61dd-4a8d-9b7c-fca0691e06ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "42b6d7cd-4293-4065-90ca-56359220362e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a43a6004-7c7c-439c-affe-1e477e33666b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3449da32-222b-4892-ae6a-02b6056c52cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a36b2173-3806-4b7b-a240-b62a82f349b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0235a1bf-1840-4a30-bb80-d53f2e7af51c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3463676a-00e9-41a7-998d-59161ce140ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5e84c75-57d4-4c79-b7bb-1f235a1d1c43",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e41b52c7-f90d-4e87-aa57-01832770d80f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f1a1db0-2f2e-4c5c-97a1-67827e15a381"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bac45dbd-960e-402f-81ce-adc78130da3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ba77c9b0-d12f-4c7b-9b19-7cf2ca2f761e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "702b5062-eedc-4fae-8aec-013a53453cc8",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28003f5b-ae8a-4120-86e8-e0a7374dd67b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4393bf5-9b58-4d3f-8ac2-48bb61919e61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19ddf9fd-f23d-4924-a7a5-58c09f0a96d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "041381b0-39e9-4b44-b382-69d57ad53361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "606304d8-686b-4625-a336-180714916f45",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c652b92-b4e5-46db-ac2c-2da8f2d6c221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f1863d3-7434-43fc-b76a-685ce027901a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1785d455-c46c-4537-bb03-7425ec77d16f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1a7ca15-d4e4-45eb-88c4-93983ef480e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efacd641-f612-4cb5-9fd1-0c4f8a9c0037",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "463e70d7-c196-418a-8393-509b5d129339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c2b3a7f-893a-40f6-81cd-15f7440f8979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc8a8c0-fed6-4d26-bab6-8a2435cc2457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "14ae8b2b-7ef0-4187-859e-07b1e6de87e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d58e683-eddb-47c3-8099-a7a51dfd8265",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc4576a-485d-4d2c-80e5-eb35100165c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e41024a-8f00-4e4d-aced-974f84cfbc44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0fcc4a2-e473-475e-b75b-0dff63f8e994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "08da8392-5777-45f2-8bda-9ed233e3ea00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66399cfe-4a63-4c91-9326-15c0243be2f3",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba98f9dc-a6de-4c8f-917f-e193fc15cef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a33b7ef-1fe7-4737-b595-ff3ae29649eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f7eda22-d80c-400b-bab2-28e59aec03ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef4a46a8-6216-4c87-8868-131f0fb9cd11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5512e2e9-f584-48c3-9a92-64717ea78827",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb18dc0e-4d54-485e-a391-5364ced42263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8433d784-3dd7-42df-aa17-9600af77da3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f059e803-d6ac-437d-b58f-c5be0f5745eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4352bab-661c-4c45-93e8-f1a20a07c92c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6788c12c-528b-4082-b55a-e240eafaf13c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb32414c-e2fc-43d8-976a-dfafba819456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df805ad8-6fc9-47b8-a75e-561a102a9cae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82fe1e6a-533a-48d9-b9a6-4a70f23a55b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e1d8821-6b5b-42be-9a33-eb1263f923cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a4e9604-9ffd-4398-aefc-395be2fdcdef",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "745d6dc0-0845-4e9c-99b0-448872f0977f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a3bf6d9-19db-48fc-aa05-89c07af13384"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e8d8ffb-71b9-4ee9-9b8f-336c635ec68a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5a5f102-9d59-4961-84c4-6a7c0e5319df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5e45da3-1158-42f1-8da6-bdce2205167f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7562addc-f6b6-41e1-a6a7-dcb1b05133a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5beb6637-e673-445a-afa1-9cf049cbfaca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b95e7a-9d42-4b35-8a36-82958066d280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40ff79aa-471e-4046-aff3-e344b2ad0eec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1734a6da-4a18-4049-a0d5-54e904662790",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a966378-63e9-409a-94e1-d734eaf92cbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d5c8790-f6ba-4424-a4df-4dfa19cd1c1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdb656ef-79d5-4961-8573-c82331a78ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebce6233-3fc0-4e44-a120-0c7c30c5e207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee081d22-2670-4412-b5e4-811f65295f2d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7870645-800f-4710-a3c1-82922faece4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81f2b7e9-48f9-4259-9c7d-3773a739c050"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eacd2fa2-72aa-4145-93ad-ddcf7f846cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7cc024ec-7571-44ac-9882-7a814f0fcf2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81fe5b11-69ee-4a53-82f9-39877aa4b3a8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c2bd980-80fe-48bd-b026-fba4591bfaa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af4c1724-6070-439f-8486-cc00c4106014"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af708acb-0044-48f8-8879-d6a76ca8871b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36a490ad-a2c9-4fab-8ed1-c1120d18d24d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cec19b8-de76-4e90-992c-9e1358056e2f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0538e99-c60d-40e9-9346-be5dfe0cebb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe8ee7b6-2941-4c3e-869b-f07783d3773c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a67fa9e-7d1d-4e3d-b7ec-974bbc9a6901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e97dc11-6e61-419c-bc7c-607fa76133a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f4f5cab-8adf-43d8-af5e-bbccd25e5b9f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f96921c6-67c1-4782-b0df-13db1cca7e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "185444b6-4532-4a2f-997e-39db5f9e89cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c9f789c-3b19-4593-8744-583ff273fd74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5071b287-0191-4177-9d28-afdcd0f6fe79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e57f87-c267-46ec-a130-d5fff48e2995",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "590d8a27-06e6-4ecf-8f82-0666187f2e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5de4b1ed-93cf-4f89-a459-5c7174d2c8ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b605b0d-57b7-450e-8029-f8397978abc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "20ce5ea7-21de-4a20-8602-ce3fbce2ab8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cd0e3c1-24b7-423b-bd00-24b4868b48b2",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9acaceb-b7f3-437a-bfef-121d726bd26a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a50adbbd-58ad-4d28-95b8-081de9af3105"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "363d47e8-4653-415f-96f1-a5d1971bf816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "258137bb-d889-4872-a3a9-60fed8c9c9bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f74a187-77e8-4c69-b297-356631e49c61",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9c87f0f-329d-4688-b0d0-a0dd22372fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5824ff3a-588f-416d-bd7e-e75948f3e3d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e20cb280-ce51-4458-aa35-1dd583f8e2d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97546ada-6f6a-4e17-8cc5-ea4417103d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4599930-f3a3-49f9-be63-fd6e7ecfdf69",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b4176bf-6cc8-49a7-b466-fd71a2eebb18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd86d8fa-73c6-48be-8a86-a9a0ce7f82f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6239692e-ec59-49ee-a092-48d4c2564da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb7745f6-7189-4483-b251-f48e05062315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d168a6ad-7a56-4746-97d9-05217e421a50",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe06afff-ed5c-46d9-a77c-c191851970de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83713e7f-c565-4a32-ade7-620dfba4d168"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa5c3eb9-0cad-446c-bda5-fa31bffb2af7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48f1ac01-a71c-4886-9938-9795a55ef597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29abe145-9ad0-458f-96f8-2a66b7edfd00",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43df0574-6f5b-447a-945a-e08d150b7716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4416fd33-f893-4494-85ed-01d0888314fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c2c2673-3ce8-4913-885a-cb2c9b5f88a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e59cb985-7701-4ecc-953d-b82093b94126"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "04c09b66-7068-44f6-a378-58d30cb6121a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a0d4d890-4e25-433b-8e6e-451dab3a47e2",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeea0cbb-2868-4252-a871-4948ed793967",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d6f07761-801a-4239-83e4-79a215a2af83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f423fdf0-51e7-494e-8a1c-21eea450072d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "22238842-03fe-485d-b6d9-07550eca1e1f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8be52300-abcc-4750-9dbd-7c869d3f0f2f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "50c83785-2a81-4aa7-9d3b-b92493750367"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab1df28c-85f2-4c0d-bc8b-9f293da8a55e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e261e77b-dfbb-4821-878c-84becb446296"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c4c582c6-0f61-4dfb-b1f4-48b8aff51934",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "46ee2f96-e5ae-4ab7-b22a-057fffbc5dfc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9466b386-8a7d-4342-8075-c79d2181dd91",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "44a5e885-9147-4ee7-982d-61f17e9949f9"
            }
          }
        ]
      },
      {
        "id": "65c17784-bf6c-455b-a1e0-2124d101e9ef",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "decd8ce1-da12-4e58-9ef2-63887f49212f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "60642a42-c3b2-46f3-a46b-3ff81860188a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "058c64c9-c6ab-44bd-8045-d12a57e398f3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c22c5e14-ae02-4bc3-b931-02c175b44469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7768359c-731d-495b-96f3-11c36981aa68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb855cf4-3e47-456a-951d-f1f78abbb212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "23ea21e3-5e97-4100-bca2-eff150f477b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60cafc7c-16d3-452d-9b8f-83d3f932e594",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e795cbf-7b66-4d8a-b745-bbfa7266e9ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c481a0f-50c8-48b9-9c0b-98f43da86e43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f91bb158-6670-4306-b5df-b2db82f1cdbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "593660e1-adf9-4023-9d33-baf1092c9a32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f25f551-a261-4f0d-b951-379cfe7312a8",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e3d6b1-e9dd-4e00-9810-bbe03afb64b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cc55883-4bc2-41d3-bfd5-5fc5f38c7315"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bf8848c-ddbd-4d1f-b4b9-4e05822547b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "36a1730f-a743-4bc2-88a4-9f8cd05e84ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fad29af4-139b-4be3-ac37-bf721e9b23d4",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bbd5c53-8770-4783-b98e-f85b5605a37c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5992f83d-a0e1-4e33-8a0a-8af0a2b73e51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf0df193-54a1-4ba4-a907-77de038a56fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fb53228-cb15-44a4-b0ac-5f237a7f62e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac54cead-b6c5-4abc-8d6b-f68729159f30",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c1db3d7-eed1-4e1f-90e6-2781681852f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a133b6c4-792c-4bc9-8134-5550345e5e42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d20cadd4-0ef1-4ee7-8077-b94d9718d42e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "30bea18e-ab18-46fd-bae8-70d40f15e73d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feb7c426-da8b-47d9-810b-dba7533f6ecf",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f64635ec-3f3e-4f18-894d-0a2a21d7b723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c87e14d4-7881-497d-9f06-4ae8645333ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb4212ea-b639-4fd2-95cc-d3def4b3649d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0937220a-8a32-4d48-a95b-00ebf7e3ff4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4010bcc-579f-430a-8461-08dc57d7c2b0",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e88c6d9-8cb7-4804-ad00-cec863e19464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cd5e1a4-bc74-40b4-9350-11502354c0c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c895ca37-588c-4406-9632-be1de8ebabfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f475d54-f47e-4415-9b73-1207ce8438cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0caa3869-49ca-4ae8-97b8-a3859d83ed7e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c8bec5-5b20-47ec-be13-280a36192720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9008b9a-94dc-4849-a959-7ab15bf43af0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92eee368-73ad-4622-b006-140fd6cf5269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6f6f1fa-8bf4-4ebc-b823-0ae916f5a146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e922c39d-37be-4cb8-b6c5-2e20d3c12b5a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a21b45a-2232-4c99-9b67-20dacf90ae87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a7f2577-4c1b-4b40-b342-301a59cfca63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cee91b7-c8b6-4e08-936b-c19a08ddbbfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c08f0bdb-ef02-4c9c-be84-a2b9badba5f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34171b8e-e918-4299-96ea-bae96d43e678",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37e4c55f-e98c-4b68-b954-b3a31527e0bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "509afb97-5db8-4cdf-8c8d-a5bb0651a910"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14412f3c-83b8-44b1-8df3-807f5ac57ba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb59379f-6f60-465a-b309-a27de80bb14b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc1c20d3-ef91-413c-b5d6-fdb19905f69a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c9dd784-8924-41fc-a4d0-910f3480f5b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70610a23-5cbf-4ad5-811b-ab1ed90619bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f89095-4bcc-451f-a172-b13f6fc27637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "584c06fb-679f-4cc8-be38-fc62df95b52a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d83f57-d68c-4ff4-94d3-8952f7cf81a8",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e6b8ccd-f09a-4359-8e8b-deb3637461e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbd2af4d-85e4-42d9-9d37-7f096fd0c1ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f31391-4364-4dd8-b879-5c1d2cb9106b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cc53409c-08c5-4e9f-b65f-c2290a352349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7b181a1-1360-42c6-a1a4-900640ff4658",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9680a8c-c33c-4f77-8871-c612ad648494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae38475c-fbaa-4745-868a-ffe868f85a5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b5c4ea-6475-4cd4-9d6c-8f1b3627c60e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b08fbce-a37c-4cc5-974f-87596271bb1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f262685-29f5-4e8e-81a5-e0900e9c2b3b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "568f6f26-6b4c-427f-a595-17bd83ba9b77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "693d93bc-4ed4-4b02-96ae-249174a8bf63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcbedf04-b1e7-4c71-bc0f-0e8433b7be66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5095af9e-6637-4a00-b557-fc5afc11a01a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b7afacd-97ab-47c5-bcde-64f5a4c8616e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f98eab-4bad-4b31-9d6a-efcd5c643e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adf11688-efd3-4bbe-91b4-f1f8a5a87399"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "294c0205-5832-485a-93fb-cfeddc6ace35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "695b2c10-6bd4-4f32-b28f-6112b61ca01b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9af5166-5735-4c06-8845-a35a1a8d9b57",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a4e0055-8d15-4a34-b056-b227a3e6dc4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db31a770-056a-43ed-9020-d63a34945b60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b7a713-d3d0-4f84-ba17-0125517273a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "65d92e5b-d1e8-4760-9f40-519e52795a04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f8ab72-e80f-46c3-913c-41bcae3bc298",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e5b197-3d00-487d-9c26-3d0f3b73cbe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75abce8b-d4cc-4976-8cdb-a3897bf2ec59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1cd359e-84f8-4c25-ac25-0904c580464d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7ee6442-72b0-4854-93f7-ae3b07667808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e68c2e3c-ef41-4051-9bff-654d4b3083c7",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64264995-967b-4cdc-946e-86c977788961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7027d32-410b-456b-9e4c-6b264fe09a1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "374e4323-6844-4e56-a717-c1e93a0f0647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f00ffe77-eda1-48b4-9c43-8a447e463d47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2896cbb6-c3a3-448f-84c8-b8e276c060a9",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "323fc995-66e9-4e91-a49f-78f27c141d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "606438b3-0d38-4f3e-b1cc-edaa30ed48b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03dec804-6f3a-48b7-b3b2-28715d7532de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "79cc587d-6e89-427f-93c1-dd82588a6121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "061305d8-d10a-4bb1-b917-3a8854946e89",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3edd427f-a248-48f1-8b1a-d4c933c686e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06e7e5e7-136b-47f9-9b58-f5697110ea9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "144cd2d8-b77d-4677-842f-7cacfae9c7a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c5f8d4c-6f5e-4f46-8068-3448453417ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f33e69ea-0515-44c9-a32d-6843c9aafe4c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1758fdc4-b9ec-432f-9c9f-d2d1e8b026ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d394dbf9-19ce-41d9-947b-13a28b14a475"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c68ab6aa-b395-476d-ac07-a7ce5e039f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6f06cec-350b-4257-a7ff-aaf6496d911a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba9390e2-14ee-49ef-b77f-59c89f79ba0d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1cf3ee0-d5fe-4635-b84d-6b8d2388add5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "330c4606-d0d0-4d34-84f1-04b9ed3933bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b3993d3-9d4a-4c8c-8599-0011a991fd42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17ddeb20-23cc-4383-a6b6-a3aa38524fde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a773786-03b4-4d42-a9d6-31daa8ec1cdb",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c08ab89a-41b2-4c44-acde-6ce695b2074d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89e48d7e-9a2f-44c2-b0f9-8fc15e7bc865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9604a67e-d178-4939-9914-e033517d3c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c08560ec-84bb-4f65-9794-a2e1c9910b6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45829eb0-e400-4998-975a-268091a5ab90",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce294849-b956-4228-a7da-62ec9824cc3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "153b3774-8732-4026-825d-e453b3bf00f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a144366-9aa1-4e5d-a2f2-2c79b554543f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c00161e-1272-442d-b1f0-8133ac72de71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a11a31-e26b-4443-8f9d-ac157fc54c14",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df9b29a0-2a1c-4a50-b4d9-05529dad7cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ece10e08-34a0-4c5d-8670-5f22d8eca643"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a66b365c-6fab-497d-8b0c-153ec351fdd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd1aa8b1-e351-433e-bb5b-fa12341f0751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30eeff3f-d77b-4981-b745-f2eb9b5aa680",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a099aa2-745f-4614-a92a-03df41d5fb48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "428003b3-6603-4f3d-b7f0-9a4ae6802271"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "decbfc6f-d65e-4077-b701-74f97b6fa235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e4075fc-7a2f-4817-8844-1ffab97141fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ab61532-4aac-4d6d-8053-cf9f5730d7fe",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc44952-a4c7-4fb4-a041-eefa7053441b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cec6909b-eee2-47b4-9133-d4c136ba5622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d98993a1-71be-4b85-b36e-55d170c6581c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a47f986-bff1-4f0b-92b0-bf37f89175eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9aec9bd-8d6c-4f11-a474-fc58b4df78c6",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "236a8180-8bd6-4fd1-b974-e2baac0050a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27f3a1ef-fa98-4468-9953-6e1c98932163"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "077d52ae-2033-4dec-b1bc-7d45586268f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3484398-e029-4b0f-87f0-f5387eb97145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52355540-c542-4748-8719-c28328d377ce",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec6fc5be-03a5-43ee-9848-d901fec69ad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4a04afd-eb9f-427e-8e60-0a4058da9c56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "008b20f8-8497-4a7d-b23e-dc871a9d24d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9904b860-1a09-46a2-9001-486870b6b4c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c01d4d2a-0c17-450a-a62f-af0bb9123bfb",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9600d4e-45bb-494d-ad48-c96fe5099f93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72a18a30-f346-4d04-991c-6006b9eae6d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7f91fe5-021a-4573-b4f4-c128d1674285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35e17dd9-8aab-4940-98bb-2ea5716fbb0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcae6fe7-95a0-45a8-b736-3db8aae5b4f8",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efdf4dc2-87b7-4999-8c1d-0ca1de53c3ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b44173ae-d80e-40db-bb80-c5c5f8a3b924"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "547dd55f-5406-4096-8cca-906123da0d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6afcd822-5c1a-4f15-a5d3-24a3bd1cc48d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42e378c5-5555-438f-8cf8-2f849a3827d5",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3db0ae-9baf-433b-ad62-cbf9a7ea2500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2f23ae0-d709-4990-ae32-4cd723b7f4a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cbb1c28-966e-4ee4-823e-36e521789e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4553a14c-5d81-4f10-944a-5e8aefab1cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "321af511-cc78-4dce-b572-f772fa2d686c",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de29e8b-9503-451a-ba85-27b93d1f12b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a276b28-afe4-41c3-872f-88c045552245"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f2fa5ec-138d-45cc-938e-8612081e9d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6164621-7bef-4352-9157-f80aab5102c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8e3f1a7-d1cc-45f3-9902-6f218ceea95c",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0094292f-c4d3-43c5-b840-dbfab647fbe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3be9c520-450e-464a-8b43-c7baae21d8d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9d89d99-0327-4159-9147-914003de9448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13fd65b8-d924-42f3-a0fd-61ffa51fbbc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be492907-b035-417d-9185-6aabb794af14",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ec32f90-47ed-4f26-95b3-0c5e530f5555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eca1e8f-ece9-462d-af1a-8166f8fde95b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f0d60b9-9c23-4bc1-af19-93d8c3b6f046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e024b38-9edb-4438-b7f5-bddd07e10ce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4814fb08-4222-4708-bddd-61a5aba38d6a",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37c8d3ef-5787-4e0b-baf3-35015709bebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a1bc178-3f45-4cd6-be9e-6ccc7c2ee3fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d572312-ebae-42f9-9c3a-62dcb8eefe81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e9bb43e-ae4f-40b2-bc4f-3310a33f9480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b3866d7-cc49-480d-8f21-18ec49a05151",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf4dd239-faa6-4def-804f-af4ff9a7afb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d82e232-8694-4f2b-a178-80eb1450d80d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70ebf71d-f54b-447e-8132-fcbd1a6f727f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f4b4903-8b15-40d7-bd4d-2bd6970704eb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f69cac2c-be95-4b5d-a5c1-3c6e5ecec249",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "17270193-d203-43f8-9a8d-1e584e6e945f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07cf0197-a224-4eca-a9d2-a569a2f11043",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "2ec5054a-6d2a-4d8e-9d9f-0abce2683bc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "417e9417-abc1-4dd1-b2c0-cbc021351ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8504de26-5dea-46b9-910c-ae37cba9bfa6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "70312e9a-36f4-438c-91b2-16140096290b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4a818408-c99c-4676-b2b4-6dec290c78d2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "39ab4115-1050-4ed5-96d3-e2a2aa487278",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4f481dfa-2733-4e18-8d35-7027a1f6aac4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b85fce43-a1c1-49d6-883e-6b4ad716c4d3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f465bea4-f16d-485f-80fd-d9743900dea0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "336cb968-a68a-4bd0-be40-3c95aa7555ec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a64f1f91-0d80-471b-8432-64ae60afceb9"
            }
          }
        ]
      },
      {
        "id": "31c83e47-adfd-4f90-b696-987c04026b25",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "3c8b87de-c30f-48a3-ad2a-519378827a93",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d4f63e0b-60da-4f16-a75b-221968ae7d5e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bda59f69-9541-4807-920e-010a7e246dea",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb59ebb-3381-4327-b7f9-fbe60a1a2ea1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a94e58b5-cc98-44d0-9366-bc13be1fa4ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2238d90-9936-4847-af86-c052e33655a3",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "617bc58f-ccb0-4336-9452-428d1f465e2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04b02bab-f04f-4ae4-b223-f0315b011b25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74777183-7b86-478a-9f85-92683eb0ccb4",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30bf71a4-b859-4731-a1d3-1770e22e3244",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a2d6bb3-104d-4405-9dda-eacfbeb9be2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec16441e-8db8-4517-8a1b-55b379d8c734",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae900b1a-eadc-46cb-a91e-dd989c1899e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23fe88d8-4f5f-4855-b758-a8c38ffef345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a786d7-5785-4230-86f2-15a61ba9b25f",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55235e90-eead-4a48-ad00-eb50d1d719c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18671ca2-812e-4385-9589-4c4f7deed405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63a51b4c-8459-4e64-b67f-2b3e3547d271",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77a32f16-740d-4538-8a10-46e0536ea645",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9536c1e7-a447-4f08-863a-cbb5b7fc7c89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55009eb2-cff7-42cb-9f79-48817fdb1b85",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "881515f0-37b8-45a0-af92-5cb79e7dbe68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f259fec-0665-4e59-b7dc-d5e5ba60bdf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5516edc-1b40-4c84-b7cd-73c09d1057f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0777a5d4-3140-4123-8a9a-b8744181d90e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c612bc-3895-4f68-bcbd-4c8ae2653bf7",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7cbd10-bc06-4513-b71f-11940d9441be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a09d097-2bc0-44ce-8c6f-54b8a175d0f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0ca3af9-db4f-411f-b6a1-7a645303e2ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41714a7f-887a-48bb-a59f-63a66d3504a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f89a24a-63fa-4c9c-83d0-8f6ae8689fa9",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5afd40b6-19d5-4edd-b9f9-cda16a4df47e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee2f1dfb-e836-463c-8f6f-81df60b7a7fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1154fc-c341-4894-81c7-56820fe5f112",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d54cba33-4f44-4fd2-91a4-e30cb3c88770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1391874f-57c8-4f98-8341-1aabe8d975cc",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "479a68d5-52c4-4d14-a622-65cf7ab50616",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9df1c3cf-f10f-4dbf-b97d-67e1add31e61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7129b53b-4998-4aaa-b1f0-df0c8cc3fe37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "526113a2-ea9d-491b-9148-566591449a3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "824bbaea-195a-429f-90a8-141832479517",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "818d2311-03f6-4114-9b32-29351d4de7b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68456c05-4cfa-4f51-b9a8-9c28ffc35242"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e762897f-1803-451c-b8e0-81e0af8be075",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b530a58-1cb4-448d-96ca-48a7bdef9401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "976fd250-150b-4cd5-96ed-ac0829f55903",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04a72c51-9ae4-4e15-87c1-2b33967e1663",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff747e2f-ddbc-4bcf-afd7-ca089d93a73a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8da80f15-f484-49f4-b992-ec68d1e3fa6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f28971df-3bf1-4df1-9f30-7e85d03c77bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eb8b477-569d-42f0-be22-14f1e9b5c138",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37b87273-20f5-4bcc-b30e-35cfe0ea201f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72ee1c1d-eda5-4ec2-9015-28383da1269f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb699aa4-cd01-4ae1-be97-6c3c7406690e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1e1c016-fbb1-46e4-a553-7c16ce817b0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "984ac824-6754-4e7f-b630-5a93a6e5c9f6",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb2420e-3096-4d4d-99a0-4f28bcb94474",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60ce28f8-689e-46e1-900a-098e490eeb2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b9c1d29-1b8e-47fd-a926-20ac123445d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4ea2990-04a0-4e0e-8213-1707d1dd2b20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1df689b6-1eb3-449c-b838-5e455c2f51c5",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6cdf29f-97b8-4655-907c-c72ce578550d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20ef49cc-ea27-4335-8664-f69d44962e31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf8b14cb-2727-4990-96d0-70f727f03e67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "082393ac-a5ab-4fc1-b514-3d10afd0c648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "635b1280-f121-4db6-8f91-b9dd6f574512",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a4ceb7-8df2-4975-9b5b-ccc553cd5abc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd3fc2c6-11ca-494f-9b3f-e5649266581a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aab45bd-a5da-4756-9922-548c8d51e79a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d784e8d6-bcbc-4de1-95d7-d31a03e1d326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a20eca1f-e9b9-4103-9174-69eaad486487",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4330a25d-b5ca-4985-aca1-ebc1bb6ebafa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d9b921a-35c7-46d2-b40e-0e0aa1eb0f80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0df1dd6-44c1-439e-85ea-677ebe94462b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36c1adf8-951c-4083-b197-98e98d440cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "515f0d24-6b9d-410a-a173-de6c30c8c95d",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "776bdbc0-6848-464b-99fd-c0bf4ed13227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e16b6aa7-514f-4325-8257-4eff6369e352"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5643fe73-a445-4285-97f9-17d0fa97c4ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdee348f-74b9-492e-b515-18c5d85c08ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1550b965-1d84-45e9-ab75-9ca4d509d9e8",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ec82cc-9203-42e9-8e3d-dcff95f721f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2783c82a-b619-4a8b-80f9-e13b96ba50e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8a02ef4-3c45-4b9d-bd93-95469bbf4fb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e934f80f-ba2a-4f70-9079-c467f156aacc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb303a0b-a730-4fe3-9b9a-fff8ec8fa5cc",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33922e14-4759-4541-b24b-f698c52dad14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe3873a5-0b06-4db4-9c5a-0b35ce536954"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff170cd-f16a-455f-86ea-9af9ae03e82f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4e56c84-abe6-430a-85ff-e8aa03e2312c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e5d7169-d552-4421-84b8-7dae98860ba6",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "290dfaf1-5ddb-4558-b039-6849f13734fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ac14d49-9cb7-4c1f-8d39-c66f39a90058"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab2ba7ee-fd5b-4ca9-b2e9-05fc70c5a928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b6e4c92-f3a3-4088-8f51-2f808d86b263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d2cc6f6-90c5-4bac-b6bb-c60a3a8e660d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5ba5c42-92ee-4ac2-8e7e-259a43175c7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0637cb6-60d2-48ea-9aec-50398f369a48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f95b01c-1933-45c8-9783-31250c12b1dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33044196-430b-4354-9d0b-620807cb51bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "730a13c5-0adc-4fb8-b9ca-40b9c590362a",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a57394db-1430-42ad-ba2f-3b92512e38d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5b3108a-d45f-4223-89ce-77febece979c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35aa58fa-9e1b-4826-91da-f66b9b0007c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9363f1e7-99cf-44db-ac82-fa4cc354af10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eec4f49b-a080-4db9-a182-57820764bf07",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "206a5f30-adc3-4025-945c-d1d10d1e7195",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c730665-e446-4aa3-b6af-27b3594257af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d213973-cdc5-4200-a425-5630d8010a9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e140368-bcc5-4d6a-a4ba-c93487384b58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1ecd92e-c354-457c-a85d-7275e885f107",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70569e8-0e2d-45af-860c-3ea4b2da8437",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3605d017-1783-47b6-b801-30a5da2a7846"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c30dc10-81ed-45e3-a47c-749e66ef8198",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1846c884-5baf-420b-9fe0-785e1f0c0a21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aed95ca-3f44-4cd2-8477-0113f0050d14",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b64e58-94c4-48f8-a123-e66a37ad944f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05600d87-b74c-4b18-b633-dce809705802"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "362dfc66-233b-4972-8348-73c621de9316",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52101175-bc27-4bef-bf19-646f143c2a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dfd8e09-f87c-48f4-9904-a0d33af7686b",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd35ba0b-dd52-4dd0-b825-a73d4ce1c814",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8832e4b-0e8e-4d5b-9501-0303ee0954ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c00cbac1-04ca-44d1-83a9-199faf6f8171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dade7088-c6ba-49bf-a711-45088e0dc274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "513e489d-65ff-4e3d-95bf-81c8e73593de",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adcd9b3d-bca7-4227-9ca8-c10d4c450490",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8272af9c-f8fd-4ed4-b93a-f8aa67379253"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "849297c6-e81b-4de3-bcd2-155e1cec5c52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f7e5c78-572a-4793-a798-a69dd09d9348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b07000a-6d28-467f-a12f-9b2e42df7960",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8669f213-03d8-42ad-830e-3daadd1d81f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b98395bb-e134-418c-a34b-4a5af6d8ac8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37b4d6f9-68f1-4b8b-92f0-9d51e5235cfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9429a22-8bff-41bc-adf7-ad8d603f0a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f1cadac-f7fc-4903-8b4a-9ebb9c8da04b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81786c6c-0b0f-49b7-9cc7-0f605cb034d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77a6a9b9-4837-45f9-b8db-5b6e9d6a68d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d4fadd-f2c4-4f2f-8621-549feb044e43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ea4e926-2448-4d90-8792-154eae7052aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65027045-bef1-4828-a12f-3c5a896159b2",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac68b11-e75d-4b2e-b42b-30436b663cb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e50835f-1e71-4e2c-b87a-b572740a2eec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8132bc2b-0537-4db0-97b6-ee47f6b5d930",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c44de91e-a28f-486a-b6ff-09a40a3e9f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "907ac7e3-986f-43de-8393-531868d77fdc",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "769f3f8c-5d9a-475c-b6ad-50c33b618900",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b10fc443-6cce-4d97-913f-e0bd6d474a45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cba265e1-170d-4e92-b010-5c2c7077416c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "171a5b4d-66d4-48e7-b7b8-102842b034aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c31c246-cd70-4bbd-8cb6-a956146e6aea",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9860661d-76ac-4cc9-ba67-9f87598e6474",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41ac1771-d1e5-47ba-834f-e582ef8c9e31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44bb012b-493c-427d-bf90-fdfd9714d401",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae97291b-ea09-411b-9d0a-cb0699e97f70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "439bdd9d-6356-48c8-8e45-57d7519bfc3a",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6089e72b-435e-4f52-915b-5a07d267303f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0399f96-62bd-4b20-a87a-181346df7ba6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eeb55fe-d304-4323-90de-3bfd3dd875c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "881bdcf2-2738-471b-a413-4e75083266b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0772bd8-9323-4cd0-9985-cf8ec0c55b10",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ef9fbc-1435-4768-bc19-82829f8b3485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3595de2b-436b-4f46-b05a-6faab4c00f58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ca3d5e-09af-4cb8-a594-bf821c767ba7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b0c6bba-516a-445c-94b2-4c9894e44834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bd06e9d-346d-42a4-af6b-7b534c0ae9b3",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fde055e-a7b8-48d2-bc64-4c83e722a869",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e09ec01-ef3c-4102-abf7-6c56c7c107c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "056e6188-c5a2-4b35-9c23-f28add156801",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cfb459f-a65c-454d-aa59-86473ef10b5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "330830ae-7d12-49a2-b805-d77c50daf7ab",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bb89d22-7536-4a09-ae1f-fe7809f45370",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fab28e5-5584-4651-af3a-17e25aff7058"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee7aa85-73d7-44f0-bc1f-cd7c869c053a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2e23439-5b77-4c10-95f3-89dd44e0e01f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ecab4b8-d2f3-4433-a45a-71442aa273b1",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15169900-ba6a-4a82-a32d-41e81d80a6cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f265214-eaad-42e6-86a3-49832eb5e109"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d83f9d4-2651-44d1-a4a8-360cb9af436e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5086d20f-769e-4371-b984-4787646c6bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f41b21ed-158a-42f7-8854-9e244c1ff324",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f53035-08c7-42a2-b48d-202f4226bd72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3945f13-725d-431d-a59b-23201a0dead4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a4d29d8-330e-4d36-8091-7eaf35898a5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fddd7ebe-ca03-443f-80df-89f0d83f6178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "989674c0-b7d3-4473-b769-f848413b4de1",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f56a42e6-5277-40f3-bb97-db0f4d03b4f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b58e6c4c-dc26-4323-b058-f39980c6919f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccbc8ed7-1381-4476-8e2f-d3bbe11eb4de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9645a8e-2746-44ee-bc04-7a783db91ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2df515a-42ed-418a-9901-47f15278cf3f",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c6a1975-55d1-4540-a12f-7d6ecf9fadcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7740cad-8167-47c7-9179-283b5096915b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a78e048c-bae3-4d29-a414-d4a1f8118a31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c023c4d2-91e6-452e-b902-cd14d15657b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "919231cc-6e17-4dc7-8109-fe87d349427f",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57d8ffdf-2b0a-4d52-85fa-c3d6e1bfc219",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e24e2605-22ae-4b99-9324-28dde568ae02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5821b11-28d6-4f5c-9cbd-8cf3c9121a61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2e8d8a2-cc7f-4f1b-9785-9f08f9adcb25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "309205a4-cada-4b25-93fe-c8b89b6e45fb",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eb3c90d-f8d5-4483-b602-e57209c3a042",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d574fad0-3c17-4b5d-81cb-7dffbcc6b917"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed6b3038-101d-4858-8088-893969972037",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cd00ff7-ab1e-421c-adb6-012dd5c99c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f4b36a6-b758-42d9-9bec-7bbd78cd7ea6",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a4a5c28-fc73-4787-a34a-b10818c31fcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e356aa0a-ee98-4513-a8bb-154669b400eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9cf6245-76fe-48bd-98c5-d94d71209c27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "829946e7-6ce1-4b7f-8993-906744c74637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bf2792f-af67-4dda-a027-d98dda132e33",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e42969-32f3-476a-b6aa-c3322ceef3d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4de81a1b-3b0d-4820-870d-4fcaf1b14f89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df4f78e1-cf7e-4472-8edf-5fb28bdaa8e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7f7de46-dd46-4503-9682-10cff931582d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c766e88-99a8-4d17-9b57-f2f01297124f",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f91277e4-fc18-434f-8380-1011b69ccf3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83a1fc06-6cef-47de-839a-a50b0750d6c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f18276e-8f71-4142-8169-26a5a7c0de0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "765aadbe-10c4-45f3-a7ef-aa95498e5376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18684ec3-3605-4266-a26a-dc8018c0be1e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c38e73d4-15b4-4e71-9e02-7f818339fa80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31541a46-321d-4ccb-9128-ca71923497fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd926726-3445-4082-a9df-c0982e476e14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75c9aa85-61cf-4467-80c2-f0b2fc94f144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eddb524-677a-45f5-9427-3a6fba4e4570",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eefc6093-9b16-4d45-897c-c6401cae0770",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42a1a38d-a7db-4c62-a766-8c3fcf48aeca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18d1263f-9b4c-49bf-add6-83d225c9bcce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fedfe16-2175-4434-b6e8-2a145a2b0bf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cefc938-7c80-4e08-9c11-ffdb16737e2c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b846452b-4c1a-4797-b2c3-0bcd90657a21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cd6d4ae-eedc-4099-8cf5-c8960f4f465c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36e2e9b0-9e53-4ed9-873b-077ef9053535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89cb39b7-4b09-4874-8840-e2bab62a52dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4402eb0-cc90-4665-bab1-89285ff2e775",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae0230e-87dd-4200-8972-3cac4b2a92f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1879f00-5dc0-4cd6-88ed-27f451db8869"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8ef1de4-a16c-4baf-84c4-7edaf57ad795",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "667585fe-26f5-4199-aa6c-5ba4edcb3c6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb0a86c3-586c-4ed2-a875-681bdbdc71d9",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72079ca7-9cc9-4efa-aeab-564ee7e18794",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70b5747f-41bf-4632-95f4-36d472854fa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d9a600-359c-4837-9afc-5a32f5a8835b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7fee3ad-64cb-4961-a4e6-48650b51fc10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba6c4470-cf15-4207-a432-3c84a3a3a206",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae473912-9359-48bf-b4fb-1263db596f52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "267c1ee1-f2b6-4142-b18f-128c5fbf4456"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7782f28-bb9f-4a85-af1f-90673d1227ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b702ca9-8c69-4947-bc17-09e194cacf4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a183b90a-ad51-4919-8bf8-cd1690c4fece",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a34e98a3-a80a-4fbb-8adb-a2ea34985ccf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f988488b-8cac-47f3-abe2-ed451df300fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb93516-d6fd-4dd1-8fef-f2007be6dea1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c90a92f-d4c5-40d2-971c-d928ebb598dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11040dc5-20a5-49da-bcf4-91262f27d3ba",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "868f95c6-0418-4bc5-a226-1a15fe5cacb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39a7c79a-5a11-415c-b245-05528b5a24e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c20420d-acd8-45bb-aed7-9133ed2e1f08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3b01f47-47b8-4311-9826-183957cecc03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bda2433a-3a37-4533-8cd3-b78f1794e33f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46259587-0455-4a5d-8ab9-2ca3eace770b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8dec8ce-4942-419a-b82d-21af53c69baa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd67a549-0673-4f25-969d-b9e0f69e64a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45cb91e5-63eb-4916-8940-44ad18138655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd2f39cf-805b-4f98-b61f-63d4675f1f8c",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e0f51ee-b9bd-44b1-ab75-55b48ce8af42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e94b7437-ecc1-407c-bafb-93176d2ca603"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d337f91c-1169-4a10-b41e-2d6e33fcdee6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d501f3f-127b-4924-aa33-7b58eeac6f14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb910b05-1c94-4d45-b899-cbeefe9631d6",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db0cfc3b-695e-40de-86e1-e86e197bcf5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fdd60d1-3651-4935-aee7-e9cfee8f7fb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c0dbdc3-76ea-4582-8503-b501e81b745a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccd55bc1-86f4-4cb0-a837-dccd638f8a39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fa16cb1-44f7-47a6-8795-d16b714f3d4c",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06242b55-1ada-4287-9851-25c245a1d8dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56d8b41e-4e92-4ac2-8b22-2f6ea6a2beed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d499fd-b130-45d9-b2a5-7bba673ca2b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7fad907-2f35-407d-aa76-43161a27cfba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "948df0e1-230e-4dc8-84ee-caa971918aed",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5cf4f18-3049-4ee6-8be8-f9e89b6c1167",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29d62074-ed51-48e8-9254-812161224869"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1d316ee-bcc4-415e-9601-25df161774d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f155582-1e90-487e-9772-e599ce228743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dd47860-e934-4d63-9db1-88267d138e51",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08ebaa67-4f58-456e-a13f-1d43dfea20a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc6844a7-0e68-4d95-9c13-1e7c17a5365b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bebd0702-42e1-47a0-a640-019bb704ffea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7391c69a-72d2-4a88-9279-bc11fba14237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "067de113-8521-4ab7-b66d-2eb15845bed0",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4738b71-c86b-4db4-9831-5d9b590d536d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1434a1c7-03f3-44a8-adac-73c2077dc5a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52612a4a-5f22-40df-be36-3f0cf278e91e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74c887b8-436f-4ddb-ac95-bdecb513305c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7496bb2-5e0e-488d-845b-067117588c5a",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79eaef64-15d8-4871-8c1b-650619360a28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af9afc9a-42d0-4f0f-be12-7653b3f27b59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c2d11f3-b2c6-488e-9331-559e4850b402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "141cad55-a882-42ad-966c-8229c7e5656f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d1a4267-f35c-40ec-9e33-0a4bc33b15ff",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5918b7b3-c014-4ce8-a8ed-4685b8f4427f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10fda616-ec35-4e49-8d68-6a40657646d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cd176e6-e608-4c2b-8bff-6491bbc4d158",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e945fa0-7bc8-4524-b0f7-ab4de8210ecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d81a5889-ac5a-4d1a-836b-446bba8f1e42",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24f9b2f8-32f2-4cbc-8d11-cddbbd04c2a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "518633da-3993-4605-bafe-1eea11acd499"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d25ec05b-34aa-4588-9490-a5b9a88723f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "868065a0-b1fa-4e61-95b3-ab33a7b0ad5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2264aeb-63ce-4414-9c28-51d3c2cfe2e6",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3793e0f-a5ad-4f1e-9f94-ebbf0a511864",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce8c0862-fe6f-4290-9f70-9eb3947d87ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8feedce5-c905-45b2-adc6-2566da7df55d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "441a0d1c-2f3d-42cb-9ed8-625e4b651213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a35daae7-9014-40ee-b364-bb6058384c04",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fee97dfa-5d21-4a9d-9204-041a5cd13a68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a046269e-2570-4496-810c-4f347c262ac2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4326fbdf-999f-4902-b61a-d1e08b02c4dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b266a7b7-d7bf-4d25-afab-4db10daf23bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2120c3b2-64b6-47eb-99d3-eae6a2aac476",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7599a4b5-ad4f-462e-86d6-217f93d1942a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f434aa2-789d-4404-98c3-512c6f5e6d52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72987de8-076a-4a6f-8ed7-46f9365c2d3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32e407c2-2373-4348-a010-6d1c5acd03ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e921e7-5212-4cd6-bdaa-90d3c9134564",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f25899-0ad6-4039-b77c-50759fb09819",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9d28c16-3a80-461b-947e-f3e8c2023ad1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a170cc03-2ec0-491c-b438-62b5a314db74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3c3c69c-5d42-4068-ad5e-820848e2a3be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9055fd4-2cf6-450c-82ea-3f77891f2e4c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69af72e4-f650-40ac-984b-9a3c165eb7e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d1daacc-b011-4973-af00-7288fbace7ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c444967a-edf0-4984-a0ad-904962727a5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa520954-b01c-4269-a23b-b460b4f8182f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b865670-9cf6-4d68-8e6b-96e410a5501d",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab2c6e97-9ec4-4fed-a03a-cf48d7feb49c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d1001bd-7c61-43e4-adf8-c835a76234a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0abbceb3-4839-43e4-9fc1-b204973f66eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d16a2937-d9fd-47d8-8f4f-9f95ce71ce12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f89529e0-c097-4699-894c-9e37461d4156",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5abd9e8e-07af-424e-9c89-fd9cf2a13c3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70bb4e44-cd58-4460-bc58-a1e9df4429d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde441d0-c162-4eec-932d-da0f7fc8fda6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1baa32c-2553-4412-bf16-be92fc779e0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d80fb67-8bbb-4264-97b6-7267e9f452db",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13b433f5-b996-4e18-88b6-45a81f26444d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2dffcfec-e111-4aea-8b29-ed47b813817f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "465db18b-e99e-42c8-ac19-06ccb651aa32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d053063d-5d9b-4ee6-9ec8-b3990a2812f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b5933e5-f6a1-459a-abcc-ec5c99a6017a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01a52316-5e19-492a-89a2-f9c3bb05ba80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c107156-bfb2-46bc-ab9f-c00c1a03163f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72d669ed-ba58-4064-890a-ea1547b77415",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4d0ef39-db2d-45dd-8bfb-a4a31186a28d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b888b37f-fe0a-433d-8724-be52e15494f4",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c62497-c413-432c-9b3f-9f1b2b5e4362",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "142e307d-2ae1-4ae2-a350-0ea27f1a15dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48f75b5f-1214-4e18-9674-bd65174cd444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d05d597-4239-4e28-8047-3cc908069316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b3d2c9b-117e-45d1-afb3-9110e0840b5d",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ef0b23-a089-4d7e-83ce-d3f0e29533ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62cc7d8c-c6f4-4c2f-bcf8-e503638ef2cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94bfc2ec-0189-488d-b9dc-4ab0c046ad7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46dea37f-077f-4e13-b264-99a6783eedec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00a82146-13aa-4980-8e02-f76af7598b03",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b5cb88-eed9-452c-8fef-abb5c6095b5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77ddb5fb-3130-4fed-ad79-011ef4b6b764"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98da2bd8-9db2-490d-bcc4-0ba7010c2873",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fbd6082-d9ca-4e79-b609-392b4e3e0d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa8ca345-26fe-4986-80ac-f0d3d97812a5",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c98f5c2a-1d45-4f83-b474-64f23862f7cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a39dd40c-e361-496e-ae95-f84669d075be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "087d9382-e301-423f-a1d1-04f6fc73910b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01edabc6-2581-4dcd-98d2-359b6487c437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "946ce0b7-2dd6-4c6e-b26d-ceaba5a8d28c",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aed62e9a-88a3-4580-a725-618739ac3218",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87957c79-0ff2-477a-b6c0-89de385f15de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dbaa6af-1db6-45de-9687-df5e3d8e8946",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77a665a3-8333-4640-ba64-81e9ac1116f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4c741bc-2a93-4bfd-b448-6f460e1d0820",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6008ee1b-b16d-4b97-9aa8-8051c7bb9d96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66542779-fd55-4c3b-8d87-e43b175d5f5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5def4fcb-94b2-43fc-ab03-a7a032f54f81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e968b29c-48a5-42c4-b4ef-16863ee0fd7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80dadc40-172c-42ed-ac19-a24e814cf271",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d45c2c29-818e-469a-b271-5158b32d921c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aaf0fac1-7bb8-414f-9e37-41d87a5dc307"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd11caae-2a92-4265-8d52-5f2ae08916f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ff53e69-e366-4427-a540-3f06e5561983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f3f3023-42b0-442d-a436-996195897f44",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d3e64b3-d55b-464c-b381-c87cc1651332",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfec93e9-fd7e-40ce-9da1-5968078c0980"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7709427-130a-4bcc-b62b-bce155349d58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "313d3306-a05f-4357-9657-ea6b20cdff70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87bdef04-3afe-465d-b7bd-f52a22ed6fc5",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f7dfb3d-973c-4bcc-9670-acae32675617",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "477944f8-d060-482b-974e-3eaf52d90685"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae84180-1242-4d53-aecd-a6c3708834f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15e82197-4bd6-481b-afbd-75ef29fff8b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "549ff098-f4fc-46db-b51f-37800c9d0de3",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d079f8-cd6b-43e0-b4fd-ea2b9f0f7e1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "266af343-ae7f-4dd8-ac22-4676e0176fbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee3cd6d3-7025-47bb-89f7-261d83d12be8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b896205-7de4-4705-a78e-c825ff3d9aa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88bf6d61-679e-4d50-b67a-45ee6c9143bd",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e88d3bf1-b84a-4ab1-9ae0-ea491d2c1895",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7bc590b-b717-48d3-aee0-a0ce99a18d8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b7538c-ee4f-4e78-b0ec-e23da8ba6822",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b8c8a10-925a-4c2f-8fdb-057e4a04753e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51854d99-408c-42ff-afaf-3c2d5ec1291b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91873f8b-dd83-42f7-adb3-e90673c98e9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e3e6cc4-8c61-44d0-96ac-ec20de8d62cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26c9ae2c-3679-447f-9171-0eea6d3d0545",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9aeb867-6241-4479-bbba-fb69105927f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a92fbefb-c77b-4ec0-8726-68427511cbfc",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b76098e-b45a-409f-8e97-7e266e11b575",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "899e56d6-91c2-42cb-a5e1-62e1d9aba066"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f581c0-8a7f-47b0-ae61-de654500d424",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd98fdae-6e32-49a1-a17e-2b8f9103c676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df3914fa-1872-45a2-9cf7-a0978cdbc2bb",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41fc04a0-08ae-41e4-bc77-dfffd00c468a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97d01811-afc0-4a3c-8214-d4ace1b2147a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0adf6c11-408b-4610-a758-11698edc5507",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2668c635-22b0-4e89-a2b5-c77328a3c641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "292cedd4-6eae-45cc-8e79-0b2b58cc3331",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22c22b86-3899-412a-91e2-65b7c7da5865",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "037d0359-03cc-4e2f-abec-c04c8d1437df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22063e25-dee1-4013-bb96-b1cebc234399",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf4f2217-61a9-4b40-ae83-60374deb9054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "463e4d8b-bad0-409c-9324-4833ab6b4235",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b362fd-1cd2-45bf-8a5c-9ddf0ea3ae8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83095a44-3475-4a3c-81cf-2d265caec0b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d51b32c-ffd1-413a-9772-4d5d179c0430",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d855f21-4064-4eb5-ad1e-7dd77fc7fc73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28d6d8c8-6511-4d10-aba1-e32c3d3bb8df",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c53e38-63b7-4e93-8841-2d2782264fd9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b22a856b-85c4-4cc8-a7d6-2d4b9439196b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc4fb478-ddbb-41ff-bfb4-1018cc5d240f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "736541e6-333c-4ddb-ae88-ef344fcad21c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d193d5f-9e6c-47a9-bda8-bb12d12d3c34",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aa7e903-f2cd-4468-b076-1414242baa90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d741ebfc-437f-4d6e-ab67-c8a0422076c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1f24c93-c5ec-4c79-ba5b-a95c08267288",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0c3552d-376b-4abc-9337-47a1dd67831a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc881615-7283-43d4-812e-07293f37b968",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "330d458f-2f8c-4d66-acb9-e1753889fda4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb01c28b-cc19-4aa9-942a-88f91b284061"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92a1f01e-1f23-4aa7-9aa7-b3b57fd12d94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1055ed43-f757-4073-bbde-dd3451ab297b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afe028a8-4bfa-48f0-8ba2-cd2691b3b22b",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "602d61ad-75b2-49f2-9192-6d810a9b7c34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "506660fa-d8ff-4ff4-82a8-80715a0234eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcc1b7e2-e707-48ee-bf1e-7ad7b7c6e53a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a105347-b77b-4d68-bfd0-16a63f6de6cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b7cb23f-8237-4cf0-a8fa-3a8f160150ba",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c9ce5f-ebc2-436e-929f-86313d8d98c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b312620d-24d7-4b87-95de-2814a692868c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9001336e-e44f-4a02-aa98-1b18c5431ea0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5067d1c0-b305-4b8f-a77c-858a6d3b3507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c5c74ad-ec55-446f-8f88-9eaf1b274dec",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37f4d77f-a21a-43b4-ba23-236b931d1f44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "019cad75-20b6-4ecf-892c-ba1a20b44099"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7035ace-d664-46fa-b746-fb31c6598c11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44c90b13-4221-4270-8351-8c87fdd131f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cb475e6-0fba-46a2-84e6-fe78bbf33a9e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "076cdc59-ef00-44ce-af3e-db955c623842",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32289d44-15ce-4900-95cf-6a36947ad996"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc2b0d07-f3d1-4b92-a327-fe2b4dc0fb59",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a87eb78-bdcc-40a4-a000-4ee9588a6b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24c94325-f549-41d0-9e87-9d88c7bc97f3",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b02020-faf4-4c41-914e-831b1ecadbb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d4ec97b-8ff5-4235-abca-815844f87e2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a7317f8-3c98-4ee9-8096-5e2077d70570",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36492a3b-ed9a-422f-b26c-2fab5450c208"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e22268b-6971-4c92-bc0f-18dc7b12922a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c956ef3d-9ebe-430d-9125-73fe7be91c70"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b28af6d-7462-450c-b8aa-cb9f80b484d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9462c1db-2d5e-48df-84a8-cef9151611de"
                    }
                  }
                ]
              },
              {
                "id": "79c11d6b-25d6-4ae1-87d1-0b052df5a9e9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "da03d622-fc23-42ed-b130-3dc8209dbca6",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f57af73-a703-4223-b79f-8f026e70da10",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "e8334787-90f7-4e30-b9a4-e678da4119a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7d75dd1-b35a-44c9-a9c0-fb0ba3e2b5d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "98ef08a0-ac33-4671-82b4-5d391b8ed633"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "43ba8033-d220-446c-a4ec-981f6ab5ce61",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0613f63a-da65-481a-9af7-6365a8094a3a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dbadc5df-9cd6-49e7-95ec-e553a1cfea4d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "27ad184c-6301-4907-9fef-2f9f9b578457"
                    }
                  }
                ]
              },
              {
                "id": "695d59b5-6a5e-4c25-8505-78e1fce11def",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "bd026a62-1278-4ab8-96bb-2cc3e753dd2a",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e26a6fc2-99dc-4085-a934-e0dcdc146432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "789cb271-9e07-4172-839d-a9d125083677"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "120632d2-3157-458a-9d11-4cfbe53d337f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46708f46-ec19-459e-9d71-1aa90696eaa1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1843f358-89e9-4e73-96be-c997671f7529",
            "name": "Positive Testing",
            "item": [
              {
                "id": "37eaada9-590c-4b4e-8e8d-5db6d6107560",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "58e965b5-bdd6-481b-ad38-aaa03206b4e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "cc76ac0f-4b51-41e2-a66a-1801c6c49c4d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "522251fe-4191-46fd-9ec4-7b7e8f6c9f13",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "501a0882-b1b0-475d-a293-646b629a711d"
                    }
                  }
                ]
              },
              {
                "id": "377ec86c-a78f-448c-bdb0-2b8c6a7167f1",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b5a9d48-6d46-4092-b393-cbb103586ce2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8658f8d3-1664-4f37-af1d-ae4840a80e09"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe7b3755-e06e-40e2-be74-2dcc702f18e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6ba9c10-7620-426c-9d8c-afee8c87e3b2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c73cd36b-16b1-40d8-9c2d-b21c1328f9c1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "191093ce-b657-426a-b152-0e210d40456b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "da4494d3-7a71-410f-be30-e92d1b5a3f6d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cdc81d21-cfea-4887-83e8-f1c09e731a95"
            }
          }
        ]
      },
      {
        "id": "a432e0b5-b9aa-443e-8380-61238b474b5c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1e3dabe4-8f89-4247-9a71-f483c11d02c8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b036ab50-086a-4366-befc-9074ec273d2e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4b0aa687-3b33-4914-9b3b-ea2c5fb842dc",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aba5185-f108-4bad-a1f4-59f22b02a5c9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2198baf7-565a-4d1e-8bd3-676110b8de39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33974f0b-22c7-43a5-a341-b4da83330d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6497bb26-853d-4374-93b3-ef2a71093a9b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b01644cb-13f9-4bd9-a6c2-ea3f4ed10b75",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "455823a9-c15c-4a56-a926-3dcb68761083"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5b57bd5-da4c-4714-9c35-d59deef47914",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "06e3428a-65b8-4b9d-aa12-c0352572b196"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "67b1a7d2-52ac-4a06-a182-d38d36e9a379",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a3c2539d-03de-484a-b1ff-c23a0aee5f1e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bf1b3f4b-e85a-430a-a95e-86dab5260714",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5cc7bb70-d834-44ae-9c07-13872964a35e"
            }
          }
        ]
      },
      {
        "id": "1fb2057d-b56e-4f1a-a219-5740047e3427",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "63782c4a-a9d3-4275-99ba-ddc74d98154e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a0fb0f06-8cf1-49b6-ab3c-3cd7509b9464",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c39707b1-5cf8-406f-ad86-860ccd15eb16",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "654d3333-625e-4ba6-af84-f3836cf1372e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18b532ba-9529-4de9-926e-33ac79d34a04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d878bcde-c4bc-4a3b-838a-8230495805ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f4391c22-ee04-4fd1-8ae6-14ee0c30ff7e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75794b76-60da-41a9-b2fb-6554fc836003",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6debc696-9821-4286-b818-bcbf64d3b2c1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a37873a-ebe2-4c4a-91df-cb9192e23964",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1d936dbb-616a-4f05-b917-2ee9d3d049d3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6799d3f3-2c85-4174-b33d-020b1fe761bd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "32f7ed48-9e22-4a48-887a-9c56317dc58f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5979a816-2ace-4710-aa49-7eaca385cfc5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "34ebd8b6-3839-49ff-8abc-d8c75aae1ad5"
            }
          }
        ]
      },
      {
        "id": "9076dfe2-9d10-4fb1-8246-bff3fa29484a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "270acdbe-7724-429e-9aa3-11fc0e13debc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dfeface0-778d-483e-ae1c-f2802ab1b931",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0e35637e-84c2-4c29-9da1-29c72a9576c4",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28146361-72b8-4000-9305-7d28998b66ea",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3273ced4-95bb-4a73-8594-f7abcaceacc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baaec02f-5e90-4c16-ac6b-0d676faf8189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc790182-7cbb-4e5a-9dd6-7a16a1a3dac9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c3fd929f-fdb0-4a87-af50-2b0a36577694",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f05c701d-8722-4d15-a3a1-5b1554d71e4b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6317bd70-5597-4d9b-858d-21d1ab55f6de",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b96c06a-a9f8-439f-a1ae-ae5e78c31811"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f14f340a-8ff1-4675-94f3-777301c7f909",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f2a503e5-7646-452d-9e53-08007c3aa35a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dc147941-ea00-4035-86f8-eee52eef18b9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1ba1348e-6b0f-40c5-87e4-7255c1aaf70b"
            }
          }
        ]
      },
      {
        "id": "54425078-a221-42d2-9c2e-d0cb752ba8d9",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2d8b30f5-6123-4c13-863a-eb8eea570619",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1cc1ad8c-4ef9-42d5-974d-abd99842cec1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "671fab21-1ffb-4fdb-a260-bbd9d231421c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d36f3bf6-a973-467f-a367-4238659daeb6",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "be5b5fe0-ccf0-4e46-8d97-0aa5e8a9f91d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 3
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 3
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 79
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 3
      }
    },
    "timings": {
      "responseAverage": 80.20284697508899,
      "responseMin": 14,
      "responseMax": 1270,
      "responseSd": 136.3583753934368,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1696466007417,
      "completed": 1696466041985
    },
    "executions": [
      {
        "id": "43943580-03ff-4a3a-87e9-1ba5b2e2c60e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "5dd96510-cefd-45a8-b79d-29a7acfcb5ca",
          "httpRequestId": "21aee6aa-69aa-46e1-ba9b-b8afae584470"
        },
        "item": {
          "id": "43943580-03ff-4a3a-87e9-1ba5b2e2c60e",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "40dbabb0-c530-410a-922f-0dd2358eb4c5",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 0
        }
      },
      {
        "id": "ae8bd013-7ad7-4b31-ad89-4efc25072679",
        "cursor": {
          "ref": "d941ade2-f759-44d8-b35a-0f15ad5a4848",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "77010b4c-6617-4a28-9864-d11eea28c442"
        },
        "item": {
          "id": "ae8bd013-7ad7-4b31-ad89-4efc25072679",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "739e9b5f-0438-4a30-a756-4a283f8f6ac6",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 0
        }
      },
      {
        "id": "ddec4637-c446-48a9-ab7e-74e359df390c",
        "cursor": {
          "ref": "1d500424-c15b-498c-88db-cdd8441767ec",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f0a0ca68-77e2-46ef-a4d2-d636badce884"
        },
        "item": {
          "id": "ddec4637-c446-48a9-ab7e-74e359df390c",
          "name": "did_json"
        },
        "response": {
          "id": "e5ca3978-031b-4701-b032-e564964bf832",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 225,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04f818a7-0fb0-4ae5-8c9d-286c5c047962",
        "cursor": {
          "ref": "836a157d-1aaa-4e4e-b7eb-4be7f9d7de20",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4baad4e1-f6b2-4bb3-ab80-cabcefe0f1fa"
        },
        "item": {
          "id": "04f818a7-0fb0-4ae5-8c9d-286c5c047962",
          "name": "did:invalid"
        },
        "response": {
          "id": "fbd6b4f5-a53b-4b4f-a34f-f81d872f2928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04f818a7-0fb0-4ae5-8c9d-286c5c047962",
        "cursor": {
          "ref": "836a157d-1aaa-4e4e-b7eb-4be7f9d7de20",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4baad4e1-f6b2-4bb3-ab80-cabcefe0f1fa"
        },
        "item": {
          "id": "04f818a7-0fb0-4ae5-8c9d-286c5c047962",
          "name": "did:invalid"
        },
        "response": {
          "id": "fbd6b4f5-a53b-4b4f-a34f-f81d872f2928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04e47f02-36c9-454c-a89b-353ab274b84f",
        "cursor": {
          "ref": "7eecb7a9-ce17-4cf4-bc9f-7bc533d51ae9",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "10449595-a6e9-4142-a6c8-d55cf7ac1f81"
        },
        "item": {
          "id": "04e47f02-36c9-454c-a89b-353ab274b84f",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "6c9d824f-2bad-4d98-a840-8d9d6df72b0d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 118,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0582a7e-9267-4bf8-b456-ea4915e1bebd",
        "cursor": {
          "ref": "bd7076e8-045b-4491-bb37-6546ee77c827",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7cb9c012-d34c-4951-8cc2-81a4f15c1ee7"
        },
        "item": {
          "id": "f0582a7e-9267-4bf8-b456-ea4915e1bebd",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "f88b99e4-12be-450f-a3bd-470ebb7618c6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 60,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af01c8c7-f2df-4e95-94e8-394b0816af79",
        "cursor": {
          "ref": "2855eb85-dc58-4662-b740-d99181638418",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "6ece8749-73ac-4c37-9ab9-7d1e141dd30f"
        },
        "item": {
          "id": "af01c8c7-f2df-4e95-94e8-394b0816af79",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "3930c9a0-c5d0-4ee6-8a67-29719c72875f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9e50fc4-47b1-4f86-b27b-11fad98d925a",
        "cursor": {
          "ref": "76a539e6-2f80-4850-ba7a-97efdcd301ab",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "09ab7ec5-05d0-4341-8352-3ad658de41e1"
        },
        "item": {
          "id": "e9e50fc4-47b1-4f86-b27b-11fad98d925a",
          "name": "identifiers"
        },
        "response": {
          "id": "19e1ccf7-513f-41d8-9c46-0cf8b56829c7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 94,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "2f360aa2-8624-483f-9f3e-9049bcfaf1e7",
        "cursor": {
          "ref": "b61bc0e4-3f00-4b40-8e87-f3e08e01c9e0",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "20d849c2-baad-4850-ab11-1b2a7fba3ce3"
        },
        "item": {
          "id": "2f360aa2-8624-483f-9f3e-9049bcfaf1e7",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "39d45d65-a91a-443f-baa3-86667893e58f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc209e5d-e77d-4a3e-9a1b-69fa32bc0125",
        "cursor": {
          "ref": "4f842a08-419c-4e50-8de0-0ac41fdab8b5",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4d33374c-f5dd-44e0-b647-b4493aedca59"
        },
        "item": {
          "id": "dc209e5d-e77d-4a3e-9a1b-69fa32bc0125",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "776580c3-680d-4bdc-be35-b60118fc1a22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34d1c4e7-2b0a-44ad-a59f-63c437dbb535",
        "cursor": {
          "ref": "bd4234ab-5d6f-4c3e-8634-53f389912d9b",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6270afc0-2126-4476-9496-ee3a6116cd08"
        },
        "item": {
          "id": "34d1c4e7-2b0a-44ad-a59f-63c437dbb535",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c50008c3-f543-4340-b3fe-9c956216e291",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb5aee8d-d484-4c72-9b60-dfc9ee2306c1",
        "cursor": {
          "ref": "5794fa9e-dc05-43e8-b72c-a71821b5a203",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "760223fd-b3e5-4424-9937-c625b543bfa4"
        },
        "item": {
          "id": "fb5aee8d-d484-4c72-9b60-dfc9ee2306c1",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "70cc38b0-8cfe-4d1e-b899-2cb6bb8f65fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be834696-bf14-4271-a803-2e527cc06164",
        "cursor": {
          "ref": "09fef8c6-8d18-486f-804a-2888da4da031",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "c7654749-d5d5-45e2-861d-95eced302b63"
        },
        "item": {
          "id": "be834696-bf14-4271-a803-2e527cc06164",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "535c63e7-4a76-4a48-9b87-cfe665cc046e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b7b5123-e6a7-4053-84d7-b739b8085c9c",
        "cursor": {
          "ref": "6b01657b-8bc1-4358-b304-f1a17bddeb84",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a03a9f8a-b0a9-4118-a1b1-d340e02053e8"
        },
        "item": {
          "id": "5b7b5123-e6a7-4053-84d7-b739b8085c9c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "76ee5c86-ae92-4bbd-b07a-1d80ef636218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6879f6b-fc9c-4a6d-bf1b-5deb0c91e0b0",
        "cursor": {
          "ref": "65380000-93e6-48b4-9bee-0874b61da9a2",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9dc223df-cf09-46df-9ef2-b710dd9016bf"
        },
        "item": {
          "id": "b6879f6b-fc9c-4a6d-bf1b-5deb0c91e0b0",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "1edd1717-1a0c-4c14-8899-58b145972973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af22a6b3-ef5d-4d20-962e-dfed9022c949",
        "cursor": {
          "ref": "dfaa46c4-cfed-4553-a5c8-a69e13f702c3",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b3fe9c1c-b7c9-48c2-8407-43048f759a53"
        },
        "item": {
          "id": "af22a6b3-ef5d-4d20-962e-dfed9022c949",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "f3f5ebe3-37f1-48d7-a58b-cb12ea4e4717",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6f0ba3-24b0-4ef6-8373-b1e009c97670",
        "cursor": {
          "ref": "b972c42a-bcac-4f1c-ad07-c2fb40e5aede",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "857c6ba7-8e2b-441e-b73e-07ff527e4a43"
        },
        "item": {
          "id": "7b6f0ba3-24b0-4ef6-8373-b1e009c97670",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "375c827e-e3d9-4387-9811-6aab8f63e655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f875f0d0-5834-4e7e-b8fe-081aa7e71762",
        "cursor": {
          "ref": "ace6602a-100e-48a7-be00-fb6b9d036f7d",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "64add428-896e-4f94-8b74-e384eadd767f"
        },
        "item": {
          "id": "f875f0d0-5834-4e7e-b8fe-081aa7e71762",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f0b6a9f5-1a69-4576-8057-bb241a44ebf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ece51cec-921b-4f3a-b571-682c8593dfaf",
        "cursor": {
          "ref": "33cebede-93eb-413f-9b64-95b9ea50112e",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7d494594-e21f-4970-9037-392b3585ba1d"
        },
        "item": {
          "id": "ece51cec-921b-4f3a-b571-682c8593dfaf",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ee541c29-24d4-44fd-9295-1599bc716276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a5a521d-a170-43d0-b2a0-65a85ec33509",
        "cursor": {
          "ref": "72a56e1e-550d-44b8-a7f9-d78b3f8ec262",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "0d51fcbf-f7ec-4a1c-8bc9-80c1570b663e"
        },
        "item": {
          "id": "8a5a521d-a170-43d0-b2a0-65a85ec33509",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "6fb406ae-2648-4b4b-b2cf-f30f4844ac9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aea6f33-c52f-40de-9ae1-e6fc223e18d5",
        "cursor": {
          "ref": "caafcb16-b9c6-4bff-9076-7da59e9ac2d0",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "fbd87951-cb68-47e1-9b8d-6f9f257810e8"
        },
        "item": {
          "id": "3aea6f33-c52f-40de-9ae1-e6fc223e18d5",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "0d1e0178-de41-4933-94b6-05a50f0fe319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e0b2f57-6327-42e1-8778-f8c35681c9a3",
        "cursor": {
          "ref": "060538a9-4f90-4474-a9a3-133cde53eee6",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c7c26ce2-5775-47db-9ab0-dd73cc8c6979"
        },
        "item": {
          "id": "2e0b2f57-6327-42e1-8778-f8c35681c9a3",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "9026558b-9f76-48db-bf0c-657530b054bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d7b063f-8d28-4c88-873f-2a726e705030",
        "cursor": {
          "ref": "41c571f2-be04-46ac-99b6-35f6d38980e0",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c4f76825-0853-4d32-8b89-27106141d89a"
        },
        "item": {
          "id": "8d7b063f-8d28-4c88-873f-2a726e705030",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e40dc3f8-c83a-4942-8347-e59872beb1b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d97e35f-b43f-4d3c-86e6-c1e11da31ddb",
        "cursor": {
          "ref": "eb909c41-b72f-472a-b238-01fda4f45da1",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "45d548ad-1668-4325-98a3-ae14ed98a8c1"
        },
        "item": {
          "id": "8d97e35f-b43f-4d3c-86e6-c1e11da31ddb",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "aa9db3ae-e81f-4d84-84e3-0f7026bb99aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dc2c933-b9a7-48e1-b4b9-c5c612654d33",
        "cursor": {
          "ref": "bbc16f50-a4df-417e-be85-c46cb2d1ce61",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "859bbbb5-8804-4b6c-8b46-aaa12bdf956f"
        },
        "item": {
          "id": "1dc2c933-b9a7-48e1-b4b9-c5c612654d33",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "1804aade-2b65-4540-a3e9-90f3a190a9bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adf8b976-0b2b-4330-a8cf-3da8179b74b5",
        "cursor": {
          "ref": "cf16fce3-eb80-42b7-999d-4e0169d6d3c6",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "581f1077-c1ac-4a39-b88c-7b11f7737a6e"
        },
        "item": {
          "id": "adf8b976-0b2b-4330-a8cf-3da8179b74b5",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "aeeab54e-2a41-440d-94d4-bb1e1d56ad10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afe75ddd-8b9a-4501-ae9b-6f2be6439807",
        "cursor": {
          "ref": "211c3c32-6904-4da8-8a33-e2d2401f97ea",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "217ea2ed-1287-49d5-9107-6b9a28685006"
        },
        "item": {
          "id": "afe75ddd-8b9a-4501-ae9b-6f2be6439807",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "fb587f32-1cc9-4e77-9b98-5ef5027a60ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccec49b1-af36-479f-8418-1494ec7c14ce",
        "cursor": {
          "ref": "a3ac78fd-0434-4706-b3fb-f2a92fb47841",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "ce66c544-4360-42c3-84a3-5596f3216dbe"
        },
        "item": {
          "id": "ccec49b1-af36-479f-8418-1494ec7c14ce",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "925e88d2-7c12-42a1-93b2-eebe63a8d9e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7054fa0-23ea-4b46-a545-3300353ea1d8",
        "cursor": {
          "ref": "d91f28c9-fe06-47ab-a609-2381c003b850",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9d4d55c8-acae-4852-9661-fd1c9b6f3e66"
        },
        "item": {
          "id": "d7054fa0-23ea-4b46-a545-3300353ea1d8",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "58711548-7d80-4b8b-ae16-13df6379e777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e4a413-aa00-4747-8285-435425814dbf",
        "cursor": {
          "ref": "b9844169-3451-4667-ad82-c28585d9595c",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "fbb6de8c-2581-49b5-8241-e5ffb49a84ae"
        },
        "item": {
          "id": "f2e4a413-aa00-4747-8285-435425814dbf",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "acd676d1-96a9-47b9-9bf8-73d66c4e2d12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afb817e7-7c58-463d-aedc-3e3fb5794efb",
        "cursor": {
          "ref": "95ea8f8a-d26b-4672-a03e-40a7d8cfe171",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "3b2516a7-0cef-43be-9a39-0a01d15d2491"
        },
        "item": {
          "id": "afb817e7-7c58-463d-aedc-3e3fb5794efb",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e5883219-1ab9-4f66-8458-6ef68e480203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ae936b7-5401-40f8-bb16-2f2d37e903e1",
        "cursor": {
          "ref": "18bf37d1-098d-4816-bd10-4ef60e29eccc",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "85b46f24-64d7-453c-a0e9-2315cbc827a5"
        },
        "item": {
          "id": "3ae936b7-5401-40f8-bb16-2f2d37e903e1",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "dbcdd286-4451-4a77-8eae-9adeaadaf27f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05c454ce-7a1c-44a5-b04c-71203d8ed609",
        "cursor": {
          "ref": "c7a5c216-9a3a-4e56-ad1a-e47bd59de3fa",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4424dc8a-e318-4176-b28f-d5dbc60489fa"
        },
        "item": {
          "id": "05c454ce-7a1c-44a5-b04c-71203d8ed609",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "73297d9e-59d3-4fc3-ad84-ed61227ff817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85ca6321-f6f8-4805-b6ea-6221213d4cf6",
        "cursor": {
          "ref": "b86c8d33-81aa-40d8-9ea2-aec510cec469",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "1b2c9b49-7dcd-4ee1-9349-9b01f822a6bf"
        },
        "item": {
          "id": "85ca6321-f6f8-4805-b6ea-6221213d4cf6",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "3d4c4700-ff7f-4f3f-9bba-5e5dfd96e0bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8793d275-7e7d-4bc7-9510-4daa6d4d595a",
        "cursor": {
          "ref": "ad26d17e-8bfc-4ea2-96c7-cd447b862f74",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "71b6909d-d162-4fe2-a6d4-fe423b81e420"
        },
        "item": {
          "id": "8793d275-7e7d-4bc7-9510-4daa6d4d595a",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "2578a9ba-95e2-45b3-9afa-7989901c0a39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f7e9bb1-a789-4952-b3b5-db8fc941045d",
        "cursor": {
          "ref": "6c37d38a-66a2-4ee9-b789-1a78b048b4c9",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "fb18c97f-30d4-4c74-9ee3-e720b80d2934"
        },
        "item": {
          "id": "0f7e9bb1-a789-4952-b3b5-db8fc941045d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "971cc7cd-cf5d-4cb0-9182-e5f5e6afacbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98088992-29d2-49c1-8196-cefe6b5af91b",
        "cursor": {
          "ref": "4465f826-a237-4d00-ad9e-26a71f4bcba9",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a56fad53-2a47-4104-a74b-79ecc5f913ea"
        },
        "item": {
          "id": "98088992-29d2-49c1-8196-cefe6b5af91b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "484bb312-115f-4192-92ba-9dafa9da8bde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "671decc7-9037-4e84-94ba-96cca4af49fa",
        "cursor": {
          "ref": "3e266c35-78dc-4b4e-88b1-fff090d1a96b",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f2c8cead-0d23-4a2c-92ac-33d3759306af"
        },
        "item": {
          "id": "671decc7-9037-4e84-94ba-96cca4af49fa",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "323ba836-9ce3-4ed4-b866-91161cd95a70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a90839c-3f4e-4d45-b3f6-6184762e1258",
        "cursor": {
          "ref": "cffad413-3cb0-413c-b5a7-0460e51060a1",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d43adbe5-7e87-41a7-a5c7-f52db3e731da"
        },
        "item": {
          "id": "6a90839c-3f4e-4d45-b3f6-6184762e1258",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "014d32b8-6e5f-4952-b7fd-83d50f862bf6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "55e1fed4-f34c-4814-9750-d9fe3aa402b1",
        "cursor": {
          "ref": "cee75f9e-38e7-4e2c-b972-2ffcb3a1fcdc",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "dd7b83d0-5f93-432e-a9df-ceb66cdf5c2c"
        },
        "item": {
          "id": "55e1fed4-f34c-4814-9750-d9fe3aa402b1",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "72d38df4-aeaa-4d22-805e-0b0adc9dcf56",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "acae183e-551d-459c-9981-c1168ebcb04d",
        "cursor": {
          "ref": "fd43c93d-512e-4838-83b8-3e2981156369",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "5d47cbdb-4345-4011-a25b-f0361c772ac9"
        },
        "item": {
          "id": "acae183e-551d-459c-9981-c1168ebcb04d",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f8093afe-f5ed-4e6d-97b3-c2ab01a6f66a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "0ca1cd2a-72d3-4f70-92a2-c226e3f965d8",
        "cursor": {
          "ref": "47a340c2-1643-4349-911e-14ef5ad366d0",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c221ac51-5b67-4a6b-8efc-5153ddf63ed6"
        },
        "item": {
          "id": "0ca1cd2a-72d3-4f70-92a2-c226e3f965d8",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "097a661a-d7b4-40c9-a248-758df71cb997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b21c850-e245-4794-b206-6d676f1b9231",
        "cursor": {
          "ref": "e41e5583-83a2-40e4-8d7a-aafa0503ba2c",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "013b12c7-ce97-4bed-865d-3a4e3c3fe36e"
        },
        "item": {
          "id": "5b21c850-e245-4794-b206-6d676f1b9231",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ab256dc6-855f-49e3-ba07-ad52a403442c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "320af95e-a2ec-4424-808a-6fbd3be89676",
        "cursor": {
          "ref": "ef1f6393-74dd-4197-98fc-9085885334fe",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "6f1f3666-ba11-4d7f-8833-693ba13bd578"
        },
        "item": {
          "id": "320af95e-a2ec-4424-808a-6fbd3be89676",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c966d278-8eaa-4b6d-be62-f32d509f37e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "d0650300-865f-43fb-b575-08c72947c354",
        "cursor": {
          "ref": "7aa65784-48e0-45ce-b49e-d2a298fbb5c8",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "3a08ae6f-eae0-4cab-a40e-8340418d477d"
        },
        "item": {
          "id": "d0650300-865f-43fb-b575-08c72947c354",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a6af2ba5-1ec7-4efa-b310-5cbf0fee8025",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "965c91fd-f10d-4cf1-b5c8-f286ee51b5a2",
        "cursor": {
          "ref": "c1ac849e-47ff-4bc6-ad24-ad373774c26f",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "095a7457-97a3-4651-b9f5-0b3253910142"
        },
        "item": {
          "id": "965c91fd-f10d-4cf1-b5c8-f286ee51b5a2",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "6e3f9934-55a3-4e04-88fb-a6a38716a349",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "e1a9f509-052b-4c47-8983-6ae03f95913e",
        "cursor": {
          "ref": "b6289077-09aa-4899-85e1-8668c01d6f6d",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d2b7ceaa-d444-4a95-8664-b046217b480e"
        },
        "item": {
          "id": "e1a9f509-052b-4c47-8983-6ae03f95913e",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "05a01b72-f5fa-44b2-b798-42b4351ae312",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "bd867a6c-4d29-4989-961a-f55062f0a413",
        "cursor": {
          "ref": "dcdc7f4d-e00a-4c50-9f50-c8d365659135",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "18c5e140-be91-493b-844a-4d9920374726"
        },
        "item": {
          "id": "bd867a6c-4d29-4989-961a-f55062f0a413",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "1410cd53-284a-4d24-8859-79f17755a08c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "fe86bfec-cb1f-408b-8ce0-69e92b7e96d3",
        "cursor": {
          "ref": "2d546720-329c-4f1a-b39c-f47ffbb4fb2e",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "1156c7b7-ed5f-419a-ae25-b0426f9ea586"
        },
        "item": {
          "id": "fe86bfec-cb1f-408b-8ce0-69e92b7e96d3",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "49d54242-0b70-4d5d-9c1d-4e36d9673d68",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "2a605b34-8ec4-4031-b579-1fab8880d051",
        "cursor": {
          "ref": "aab586f9-8194-4add-bef1-fc02c1274706",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e428be7b-1790-4562-9ab6-074f76f2c17c"
        },
        "item": {
          "id": "2a605b34-8ec4-4031-b579-1fab8880d051",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "0f2c4502-c435-49c9-80ac-1b2abed1bbeb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "4e1f4efc-45d3-470e-afbb-1a93f3d2fd4a",
        "cursor": {
          "ref": "e32b4a1b-0296-4e68-b0ca-1ba82d5d06dd",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "1caeed4b-33a9-4ece-a9bf-26a45b3f2a5c"
        },
        "item": {
          "id": "4e1f4efc-45d3-470e-afbb-1a93f3d2fd4a",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "931a7d52-002e-40b9-a3a5-b9207e3090ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "e8f1a164-2194-42a8-b0fc-42793307bdf8",
        "cursor": {
          "ref": "37938be5-8ca9-498c-9dba-5f147d096218",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d654bcc4-7955-4ebe-acfa-ad4072fababd"
        },
        "item": {
          "id": "e8f1a164-2194-42a8-b0fc-42793307bdf8",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "892f702d-135f-4d56-a4d7-147f738bd05b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5efcf52-3cdc-435f-b53e-cef2f2ea4471",
        "cursor": {
          "ref": "1bc44da6-f83f-4558-8a24-8c74f45a4b31",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2b09bc32-8b76-499b-97a2-8e747a326a7a"
        },
        "item": {
          "id": "b5efcf52-3cdc-435f-b53e-cef2f2ea4471",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "1f3b5d91-61b5-4925-b961-977a1e4464e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "318e505b-764e-4414-848a-4333d8557152",
        "cursor": {
          "ref": "af5d61be-5b4d-48e0-b074-7a4a2303ddab",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "880280d7-a3f3-4381-903b-19e60d4fa32d"
        },
        "item": {
          "id": "318e505b-764e-4414-848a-4333d8557152",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "7426bb04-4656-41cf-ba8c-7f4cca89706c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c1b5b03-2bef-4730-8a2d-5efd46a56a1a",
        "cursor": {
          "ref": "fcadbe33-030f-416b-af38-43247fcac852",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6a0b1b7f-7ba8-49ba-9edc-316a53e6e5c6"
        },
        "item": {
          "id": "8c1b5b03-2bef-4730-8a2d-5efd46a56a1a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c18d6414-1d3a-4997-a347-62b0cb646717",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "609be1b9-5027-498c-838a-c363c068f367",
        "cursor": {
          "ref": "752a1771-c5d0-46f1-8c2e-701bdb6ffbce",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "bcc9e2dc-319a-4113-8299-0bc706f63275"
        },
        "item": {
          "id": "609be1b9-5027-498c-838a-c363c068f367",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "864a1d9e-601c-41e3-94e1-e969a1a2dfc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a091631a-15f2-4c75-a578-067da06b9dcf",
        "cursor": {
          "ref": "ec17c1f1-90fb-460e-8efc-ce9446163244",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "0eec8c4b-1ca1-41bc-aac5-b8fcdb866c0f"
        },
        "item": {
          "id": "a091631a-15f2-4c75-a578-067da06b9dcf",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "e034ae71-def7-43a4-88fe-9a2448da21a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0f408cf-b4ec-418f-84e8-52085d211441",
        "cursor": {
          "ref": "6a490378-a0bb-4351-b375-fc8677450eba",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "38003fd5-b55c-4cea-9b0e-4d92fb44f999"
        },
        "item": {
          "id": "f0f408cf-b4ec-418f-84e8-52085d211441",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "de227d9f-9a0a-4bbc-8d88-5de5c099ab23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8da3a346-6b4c-45d1-807a-d4d2a0072099",
        "cursor": {
          "ref": "319024cb-482f-4edd-90d0-9a7e10bacb0e",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ab8ba1c5-3269-4ab9-ad52-b2dd9dd84c76"
        },
        "item": {
          "id": "8da3a346-6b4c-45d1-807a-d4d2a0072099",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "7c1c5401-574f-4138-9124-86da3ded8eeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90e96378-7414-4b3f-b89d-6bcdb5668f17",
        "cursor": {
          "ref": "a3b625bf-3ea8-47f0-ba13-12906083b391",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "fdff67c9-ef00-4089-a5e0-5544a80d4fde"
        },
        "item": {
          "id": "90e96378-7414-4b3f-b89d-6bcdb5668f17",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "c0a5fa48-2fcd-49c0-bd54-18fa71440435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84db80e7-c4ec-40e5-b3c9-38ab69dadf9d",
        "cursor": {
          "ref": "e3d43f5f-0ece-4241-97cb-56c0d915777e",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "120f9092-4be5-4807-8134-efc3e984b45a"
        },
        "item": {
          "id": "84db80e7-c4ec-40e5-b3c9-38ab69dadf9d",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "158c7290-7845-4806-8baf-54e6beaa9f16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "057887d4-27f1-42ef-99bf-079320495a36",
        "cursor": {
          "ref": "5e480787-198e-4a54-a49f-a5f0535b7927",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "1628a73d-496d-42c5-98bb-51471b060cad"
        },
        "item": {
          "id": "057887d4-27f1-42ef-99bf-079320495a36",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "be76b0b6-8ce6-420e-aa9f-df8e5f40eb68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1592d31-8cf7-4ffa-8bd1-4a5e2a27b31b",
        "cursor": {
          "ref": "eec9af1a-89b9-4633-a7c7-e077406c3b02",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "467a124f-4a00-469c-ba33-87fa13f49ee9"
        },
        "item": {
          "id": "e1592d31-8cf7-4ffa-8bd1-4a5e2a27b31b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "2cf70405-532b-4e1d-8538-621c07a618b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea33965b-70d8-4529-bc81-b35d1c18effa",
        "cursor": {
          "ref": "3736585f-cd3f-473c-925d-c02c606f5a0a",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "123a6b50-ac81-4ff9-a395-f2809e74e875"
        },
        "item": {
          "id": "ea33965b-70d8-4529-bc81-b35d1c18effa",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "34387049-5537-4347-b5db-bfdaa5d8ada6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ef56c2-8015-4f9f-8548-059fdfef3852",
        "cursor": {
          "ref": "55b009f4-7e06-4dad-878a-a6b98a9763a7",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "5b551edf-b001-4c73-8564-4f96c50f43b6"
        },
        "item": {
          "id": "a4ef56c2-8015-4f9f-8548-059fdfef3852",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "1e8914ef-ce66-4b3c-a241-30fc232bb094",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "1cc3fe60-0db3-4d10-b5ff-1f7019dd7fb9",
        "cursor": {
          "ref": "cc288038-9508-426c-9197-84481b4542d4",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "a4835058-3dff-4ba4-b555-a73d194e8e21"
        },
        "item": {
          "id": "1cc3fe60-0db3-4d10-b5ff-1f7019dd7fb9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b33acc02-356c-49e8-8449-a5493f4b187b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "01e5e056-69fa-436e-87e0-cbc742398ee8",
        "cursor": {
          "ref": "94f28bfa-0709-4917-b583-b440536eec33",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "efbc4a4e-e3a5-4e38-879e-400934174631"
        },
        "item": {
          "id": "01e5e056-69fa-436e-87e0-cbc742398ee8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "64ca0187-87af-479f-8104-ba04f3b95820",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "65a5450b-0373-41ce-84f2-b1efc6494e57",
        "cursor": {
          "ref": "ee627efb-fcb1-4bf6-a0c8-46797fe96734",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6421e618-c3e2-41a4-b158-f5c9fecde740"
        },
        "item": {
          "id": "65a5450b-0373-41ce-84f2-b1efc6494e57",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "03c5b452-fc6a-462d-8cc9-ad8232908472",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "4347b007-dc73-43a0-968e-f8d050a01e98",
        "cursor": {
          "ref": "419ffb00-40af-4365-95a1-744bea8c0f6d",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "70714937-8b71-46d8-8196-95742a64ea2a"
        },
        "item": {
          "id": "4347b007-dc73-43a0-968e-f8d050a01e98",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c62f9913-a2e0-45af-9d5f-abf30afbbaf2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "7d3cfa1f-b57c-4baf-a54f-a94de03509e4",
        "cursor": {
          "ref": "8ffc73b8-682b-4ca6-9126-f702f8ed4ea6",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "16bac6e7-dde4-41fd-be68-3f260e8876af"
        },
        "item": {
          "id": "7d3cfa1f-b57c-4baf-a54f-a94de03509e4",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f2844ae6-30a9-4056-87d4-f85960f09c62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4b14b1c-a683-47a0-8e8f-dbc74659d6e8",
        "cursor": {
          "ref": "276943b1-f425-4717-9c82-9dd1ebdb5130",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "59668011-284b-4593-99f2-b0dc30c185c7"
        },
        "item": {
          "id": "e4b14b1c-a683-47a0-8e8f-dbc74659d6e8",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "80ce1e4c-4fb3-4ff0-8833-b25981ddfe29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf176049-7ca6-4f96-9e2e-c5f0ff54ee76",
        "cursor": {
          "ref": "4e4de24f-135f-4ab9-b41d-313c45c545e9",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "5591fb6f-90cb-4e6b-ad44-69bde23df6d5"
        },
        "item": {
          "id": "bf176049-7ca6-4f96-9e2e-c5f0ff54ee76",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "447d2c71-7d8e-4e1d-b654-90f429aaa72b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "632b95c7-ded6-496e-a8a1-b2394091d8e1",
        "cursor": {
          "ref": "f41c4906-10d3-417d-b70e-5b984f48c384",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "225b0531-30da-4bfc-bd25-ced1feca8aed"
        },
        "item": {
          "id": "632b95c7-ded6-496e-a8a1-b2394091d8e1",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "1bd79353-80ab-43a2-bc18-3568ef85df54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74b79398-58db-4ec1-b7f4-f4bbab6b3074",
        "cursor": {
          "ref": "eab34bf1-7fd6-4de0-bd57-0e699871ae7f",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "672a73d3-ebe5-4afa-b1db-9f28f8320089"
        },
        "item": {
          "id": "74b79398-58db-4ec1-b7f4-f4bbab6b3074",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "24bc590c-c5e9-4d1b-a9c6-8b941b8a7ba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dc87c76-75f5-419c-9259-1ce609da101e",
        "cursor": {
          "ref": "ccbe0d38-8b9c-4182-b482-cfb48ebe91a9",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "77d9e992-8228-423c-96fd-1bc6dc6ca092"
        },
        "item": {
          "id": "9dc87c76-75f5-419c-9259-1ce609da101e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "5f8b4fb1-3b77-4b62-b5ed-ef2c146e657f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc20e19d-924f-4de8-8e63-01d749d8fe28",
        "cursor": {
          "ref": "8783b5c8-437b-4233-b10e-cbe074532224",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "07b231f2-2e90-4f9d-b82e-7843b0a9ac7c"
        },
        "item": {
          "id": "cc20e19d-924f-4de8-8e63-01d749d8fe28",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c6b168b3-3acd-4f99-a4b5-91f4fe3dc693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d483e9f-9caa-45f7-9f2d-279063aaaae1",
        "cursor": {
          "ref": "f475fcb9-e944-4bea-813a-013f59ef6710",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "eca4c8b4-8d63-435c-99ca-ad84ce7aa0ce"
        },
        "item": {
          "id": "3d483e9f-9caa-45f7-9f2d-279063aaaae1",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "25176568-d4ae-491e-bde3-aa061feb14ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5064b70-1f95-4290-b427-078ad9398acd",
        "cursor": {
          "ref": "374230fe-cb35-48c9-a996-46252cc91983",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "6e673d28-e0aa-4244-973d-9cf5c1a9a585"
        },
        "item": {
          "id": "a5064b70-1f95-4290-b427-078ad9398acd",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "29562d01-2f27-4d9a-94a3-2ff855244030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82e4a0fd-d8d3-4238-b056-0c4907430395",
        "cursor": {
          "ref": "7556b137-8209-4bce-ba20-8bf481eed24e",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "4b798283-a715-4efc-876b-27cfba75d9e6"
        },
        "item": {
          "id": "82e4a0fd-d8d3-4238-b056-0c4907430395",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "b73abf57-9fbf-4d72-8e84-0e2fd22c7e76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5585657-2644-4b0d-8929-3e6c266f9825",
        "cursor": {
          "ref": "267ddeae-7435-4c4e-90be-a5de0153a795",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "1b1d90ee-9086-48b4-88ff-261c8ce99e0e"
        },
        "item": {
          "id": "f5585657-2644-4b0d-8929-3e6c266f9825",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "05b7230c-55c6-4766-a53c-7c2252f66004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11c51461-8b1e-48c7-96b6-9bbb978c92c2",
        "cursor": {
          "ref": "5d5cb841-5f03-402e-a683-45a1e0905355",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "be814315-19f0-409e-8620-f00b7ec95883"
        },
        "item": {
          "id": "11c51461-8b1e-48c7-96b6-9bbb978c92c2",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "c58f51dd-0089-44c1-a326-6bcc0a9034b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b348181-4346-429e-8d34-f1090c1c0cfe",
        "cursor": {
          "ref": "2b0b8225-bc1f-4b96-b59d-fc17d527f4a0",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "cf9af9cc-7dfb-498f-b183-f0b7ba728796"
        },
        "item": {
          "id": "9b348181-4346-429e-8d34-f1090c1c0cfe",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "812e9cb5-83d9-4d84-a8d7-d2a46feae35d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee907159-ad98-4036-a01e-8844c3f51cc8",
        "cursor": {
          "ref": "32afa6d9-d724-4048-ab14-99f0d40b228e",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "ad37782e-2503-4786-8433-2caa8e4207af"
        },
        "item": {
          "id": "ee907159-ad98-4036-a01e-8844c3f51cc8",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "4db80806-8697-4560-9ef0-0effc7b51b3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da5a47c-154f-4029-880b-c9088808a3e0",
        "cursor": {
          "ref": "dde3dcc0-e7e6-49e7-bf54-a9b13a605334",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "6afb4adf-e908-49a3-89cf-224751d67816"
        },
        "item": {
          "id": "7da5a47c-154f-4029-880b-c9088808a3e0",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "dee6448d-1600-4800-abf2-c60394043575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da4124a1-6b45-48bc-8425-0a130f352d2d",
        "cursor": {
          "ref": "7e571db5-0b6b-4eec-9f12-1520e4e97db1",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "cdad79ef-698d-4270-800d-a97a3be8233b"
        },
        "item": {
          "id": "da4124a1-6b45-48bc-8425-0a130f352d2d",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "8ccb3100-3e29-40f1-b18f-0d712b03860e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9d5a51d-3561-4a99-ad0b-830356e05687",
        "cursor": {
          "ref": "3ca93f89-a346-475c-bc7c-75853d89ffb0",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "15eb5b31-8f3d-4bc7-92da-adea3c2efcf0"
        },
        "item": {
          "id": "c9d5a51d-3561-4a99-ad0b-830356e05687",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "14abaddb-e0b6-4927-b165-fca1019420c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83ef637d-261f-402a-a1c7-8556d52ea575",
        "cursor": {
          "ref": "f9b06490-5cf0-446d-a5d2-ac80059b6ee3",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "33bdcb53-ada9-4122-8e30-fdc2f50cd6d9"
        },
        "item": {
          "id": "83ef637d-261f-402a-a1c7-8556d52ea575",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "061a1f51-be61-4243-8d5b-9ab3ab470e79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40c80d02-e454-40b2-b195-64b020cce757",
        "cursor": {
          "ref": "e80ec4a7-9156-4407-aba4-b12294181791",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "926b697e-b975-47bd-9317-049cd5020f21"
        },
        "item": {
          "id": "40c80d02-e454-40b2-b195-64b020cce757",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "22a6bcd9-62a3-4814-8c64-1615f435b48d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "473a134b-eae5-4bf6-a269-b41375e6eb1b",
        "cursor": {
          "ref": "7fad10de-679e-426b-a654-c23ca4c906e1",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "431c21d0-c654-4aa9-ab5d-dcb527dbdf34"
        },
        "item": {
          "id": "473a134b-eae5-4bf6-a269-b41375e6eb1b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "1f280be9-5fd5-44be-b78f-924be36f41e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a69d42d0-c3d5-4257-9139-4c47d0e2261c",
        "cursor": {
          "ref": "7d87f247-a44b-4ab4-8a53-32e0b56cbf6e",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "5eba47c8-4f6b-4b3c-8fe5-776066235027"
        },
        "item": {
          "id": "a69d42d0-c3d5-4257-9139-4c47d0e2261c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "a5e4ae3d-19a6-4a91-a8f5-25e12a030ebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aed55d9c-808f-4cca-99de-e9e2fdea4193",
        "cursor": {
          "ref": "6c6568f6-a048-4059-a2f6-09a4ebe1c546",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ebf89cda-0868-4221-97dd-68979167f84e"
        },
        "item": {
          "id": "aed55d9c-808f-4cca-99de-e9e2fdea4193",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "7a57421e-e201-47b0-9ec3-60f80ff9e660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "941059d8-5254-4257-8925-ca67036d077d",
        "cursor": {
          "ref": "dba2385f-29c0-4ef1-a2f3-ce442a6ca814",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "42022acc-f823-45e0-897c-b2fbaa6ffd01"
        },
        "item": {
          "id": "941059d8-5254-4257-8925-ca67036d077d",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "1f76fbdb-266e-4887-8e64-b5520b60035b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87c84455-f6d3-4f58-b29d-abda1744a363",
        "cursor": {
          "ref": "a3b932fd-3536-4fbe-aa5a-77b76e974bd1",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "63e6188a-ce5b-4e59-b0a4-9eabecd6ba45"
        },
        "item": {
          "id": "87c84455-f6d3-4f58-b29d-abda1744a363",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ca55c39e-9840-4e3c-88ac-059bc4d10f9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abb3ebad-c5be-4761-a030-dc9f2ea3227f",
        "cursor": {
          "ref": "40906213-36b2-48e7-8f29-9c9f24297da6",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ca5d3dd8-6f58-4d24-85a8-23afb8ea7ae9"
        },
        "item": {
          "id": "abb3ebad-c5be-4761-a030-dc9f2ea3227f",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "11f4fcbf-b565-4c97-88b1-0cef5fb7b91f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "824b41e8-b171-4406-8471-abdbe1cb2efe",
        "cursor": {
          "ref": "58f854a1-c308-4335-90c7-4e68cb60f41b",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "af9ff11c-9746-4b8a-b846-7158198b06ba"
        },
        "item": {
          "id": "824b41e8-b171-4406-8471-abdbe1cb2efe",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ddb4f06b-abd2-4389-b7c4-78c5ea9d77b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21c29e93-f262-402d-be57-0954be9e5bcd",
        "cursor": {
          "ref": "f666fc2c-1212-42ef-a849-17fc1fcdd69d",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "3a643f44-4d05-4302-a28e-d69bf904fc0c"
        },
        "item": {
          "id": "21c29e93-f262-402d-be57-0954be9e5bcd",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "811bb707-c020-4a42-908c-92cea32234e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f28340-4af7-4f1e-8bae-253854ff3124",
        "cursor": {
          "ref": "af6c12e1-c70e-41f9-89f0-f8f9032e62e6",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "ccaab81f-5c97-4429-bff5-c77a4aa7a569"
        },
        "item": {
          "id": "c3f28340-4af7-4f1e-8bae-253854ff3124",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "25901f27-7dd8-4cba-b69e-59124148fee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca8bfc6c-f21e-4cc8-9866-34cdbd4b4ad2",
        "cursor": {
          "ref": "ea2c54c4-237a-49bc-9322-a4c42ca3d3b8",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "7b7a85bd-65f6-489d-bc75-6e5afa56bbf3"
        },
        "item": {
          "id": "ca8bfc6c-f21e-4cc8-9866-34cdbd4b4ad2",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ed57d6f7-1bc5-4572-9827-89b5e7bb371d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05f6f5dc-7fe3-49a6-9f16-0d7158014217",
        "cursor": {
          "ref": "b7c233cc-da6a-4541-9a10-399f9f96a6d7",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "84607062-ece7-45df-ab33-9134a5319483"
        },
        "item": {
          "id": "05f6f5dc-7fe3-49a6-9f16-0d7158014217",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "065c0673-f7d2-405d-aca3-64fd106f1309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a80e166d-71cb-4192-8713-1119dacc7804",
        "cursor": {
          "ref": "710bfeaa-ff25-4b87-bcea-32975ab5ed6c",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "8aa2c0d5-87b8-442d-9596-f4afd7fd0e4f"
        },
        "item": {
          "id": "a80e166d-71cb-4192-8713-1119dacc7804",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "7642fdfe-b6f2-43b2-b75b-b5012394f747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d8ec390-008a-4da8-ab74-922cde6b2db0",
        "cursor": {
          "ref": "adf0b243-3aaf-4f71-91be-c1f1e30721bc",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "041512f3-073c-477b-b50b-5cfcb87afd5d"
        },
        "item": {
          "id": "8d8ec390-008a-4da8-ab74-922cde6b2db0",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c253ea27-c474-4643-89ca-ed9a1f6145e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc7ae99e-d650-43f7-9ebe-13ccdacbb2db",
        "cursor": {
          "ref": "484e8d7c-ecc5-419f-85c3-6f16ebd465d9",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "f743b6a8-eda2-47a3-87c8-74d24d98e6d0"
        },
        "item": {
          "id": "dc7ae99e-d650-43f7-9ebe-13ccdacbb2db",
          "name": "credentials_issue"
        },
        "response": {
          "id": "8f13ec80-a831-49ce-8499-1010a74fd9d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:102)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:102)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:102)"
            }
          }
        ]
      },
      {
        "id": "7d518547-5744-4b61-b300-163602953a52",
        "cursor": {
          "ref": "358d3456-f969-4ae8-982d-ab68d2a23f4c",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "2ce60646-41e0-4d34-8808-d09588988a40"
        },
        "item": {
          "id": "7d518547-5744-4b61-b300-163602953a52",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "9e2561ca-e272-4844-9829-8d9d1b07ff3b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:103)"
            }
          }
        ]
      },
      {
        "id": "7bd02f3c-69ac-403e-b6fc-7a3ee2fa5cc0",
        "cursor": {
          "ref": "775ddc2b-72f3-44bb-9c09-e0bb139e10de",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "39323182-4e33-4650-9727-e2750676347f"
        },
        "item": {
          "id": "7bd02f3c-69ac-403e-b6fc-7a3ee2fa5cc0",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0135072a-ad32-451c-86d0-9b4bfe45035c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "b9c2d23c-1b9a-4551-8b7c-2bb3aff4d186",
        "cursor": {
          "ref": "4c861250-2053-4980-b3e7-f3088401c0c5",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "9d77f816-2414-4734-bc0b-ed5649f36389"
        },
        "item": {
          "id": "b9c2d23c-1b9a-4551-8b7c-2bb3aff4d186",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c0e636e1-a107-4c99-9109-ead3debe0d4e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "d0e4b6ac-d449-405f-8685-1a1e5697623a",
        "cursor": {
          "ref": "6015daef-c019-4c62-8251-6c8e9451d2fd",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ad187f08-9405-4a97-abad-99d5287ee0ae"
        },
        "item": {
          "id": "d0e4b6ac-d449-405f-8685-1a1e5697623a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b6e7a694-3a93-495f-b6e6-dba797ffca52",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "72fcc623-5f43-4d0b-b41e-d09f9277b885",
        "cursor": {
          "ref": "e67e7438-79ec-487e-9f1b-f184175f662e",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "36499294-529d-4f5c-a6d9-591492af7b9a"
        },
        "item": {
          "id": "72fcc623-5f43-4d0b-b41e-d09f9277b885",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "2d11f896-8bae-47f9-80b6-925edb4c81f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "c028551f-f3d2-43cd-aeb8-c478ed94ccd2",
        "cursor": {
          "ref": "7d17c6dd-9a6a-4a65-b453-35cfc4e1a9bc",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "85e525e0-07c7-46d3-81c0-3d00edecde7c"
        },
        "item": {
          "id": "c028551f-f3d2-43cd-aeb8-c478ed94ccd2",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2b5ebb97-8b36-456d-8c2d-753a26063970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ec74d4f-c1d7-4c24-9468-518709eaa0b1",
        "cursor": {
          "ref": "5a43b03d-8a13-4cd5-8962-1491db2d719e",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "835e876d-e7fd-458c-b984-8348e3e103ef"
        },
        "item": {
          "id": "2ec74d4f-c1d7-4c24-9468-518709eaa0b1",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "0cd83186-942d-4f46-9556-5ded988e46d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0abd36ca-b214-4209-ac41-2bdeb721e7ca",
        "cursor": {
          "ref": "cad5025f-c45c-4a28-9b40-b039d59b4c33",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f5db77dc-86dc-4cf8-a5d2-2afe83daae31"
        },
        "item": {
          "id": "0abd36ca-b214-4209-ac41-2bdeb721e7ca",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5e8e0996-8add-4072-80eb-7f924bf523aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44c51571-4b23-4df1-a166-bef0b3c18f2f",
        "cursor": {
          "ref": "56b344be-1f41-4ca8-958f-2112a74d9c8f",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "f2de1f62-2453-4b8f-a0ec-5491ee315f5a"
        },
        "item": {
          "id": "44c51571-4b23-4df1-a166-bef0b3c18f2f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "71976607-e235-4da0-8cd2-a2fad827bc6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c510773a-7ae9-4f57-b8a9-568bf8b64fc9",
        "cursor": {
          "ref": "2d9a33bd-23a2-40cd-bf02-a6ce4ba97d60",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ac2f35b3-46b2-4b2d-8493-070a1f308ee1"
        },
        "item": {
          "id": "c510773a-7ae9-4f57-b8a9-568bf8b64fc9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "48feff0b-b248-4aa8-9704-8e8086afeaae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e21ddfa1-8303-4ade-99c8-da1266f74876",
        "cursor": {
          "ref": "57d9a4f7-798c-4a3c-8f4c-91b6307152ba",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "4b22a0f4-3741-46ff-b5b3-2440354ef686"
        },
        "item": {
          "id": "e21ddfa1-8303-4ade-99c8-da1266f74876",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f524dda6-43da-4094-b3dc-8c94c90d173e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be099efe-c3c9-48ba-b702-c08f11020945",
        "cursor": {
          "ref": "7246aeb5-306e-4d62-b68e-32c13240892b",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "8ff921d1-0707-440f-8a86-58e9337965eb"
        },
        "item": {
          "id": "be099efe-c3c9-48ba-b702-c08f11020945",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "121ac099-5f84-4848-a9e8-6af9f69a3655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d14f796e-55b5-4453-a5b2-03dd5eb62f04",
        "cursor": {
          "ref": "33a01de1-95fe-494f-812c-590f6b4c258a",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "1c288232-4e08-450f-97af-dc748e263269"
        },
        "item": {
          "id": "d14f796e-55b5-4453-a5b2-03dd5eb62f04",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "3a8ee666-aa65-447e-9a34-a27b56e3870f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40743a82-2a31-45e9-8538-09210ea79f02",
        "cursor": {
          "ref": "fa786fdf-1fe2-4a04-8a64-64b02247a12e",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "1cc8b0d4-59c2-48e4-a09f-34ebeb29bc77"
        },
        "item": {
          "id": "40743a82-2a31-45e9-8538-09210ea79f02",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8d2d18a5-44b5-4fce-b577-7b7c13991a2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d66e8a47-9da4-4298-bb1e-0098a02da17a",
        "cursor": {
          "ref": "5b851654-27dc-4313-92af-b6daeea534db",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "22891cee-4278-4240-ac32-a3a1ed84a5cb"
        },
        "item": {
          "id": "d66e8a47-9da4-4298-bb1e-0098a02da17a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "cc51b3a0-841d-44da-a3d5-8e20a4e76bd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a43a6004-7c7c-439c-affe-1e477e33666b",
        "cursor": {
          "ref": "444f448a-bf6f-4156-b2c8-4efced737cc9",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "9c54b264-caf2-4f3d-833d-eb0db09d500e"
        },
        "item": {
          "id": "a43a6004-7c7c-439c-affe-1e477e33666b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "930285d6-91eb-4f5f-999f-9635c4f23609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e84c75-57d4-4c79-b7bb-1f235a1d1c43",
        "cursor": {
          "ref": "4e9d1ac6-6f50-4ab5-8504-b8efe9d363d6",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "6d37ec7e-6f35-42f1-974c-aa993a52209c"
        },
        "item": {
          "id": "c5e84c75-57d4-4c79-b7bb-1f235a1d1c43",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "80c48576-29e0-4ef8-8a21-10ad95e0a1d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "702b5062-eedc-4fae-8aec-013a53453cc8",
        "cursor": {
          "ref": "7c9c2cfe-bd17-4237-a73c-2843f02e503d",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "5ccf6587-53b5-4a0d-b645-0b59a327e7b3"
        },
        "item": {
          "id": "702b5062-eedc-4fae-8aec-013a53453cc8",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "00dde317-ddfe-410b-8cd3-3a4e98f250e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "606304d8-686b-4625-a336-180714916f45",
        "cursor": {
          "ref": "6ff55e6b-575f-46cb-a517-148c3d947789",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "5a95f5d5-6cc2-4a26-881c-c8a21cf2d2bb"
        },
        "item": {
          "id": "606304d8-686b-4625-a336-180714916f45",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0fbf9f30-b36e-485f-bbb9-b79e89f29854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efacd641-f612-4cb5-9fd1-0c4f8a9c0037",
        "cursor": {
          "ref": "5592ea8f-04e6-4b4e-b49a-5cca6206d6f3",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ee60784a-c4b8-410a-9ead-e5dcf093099f"
        },
        "item": {
          "id": "efacd641-f612-4cb5-9fd1-0c4f8a9c0037",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "43575e6e-2ca8-4775-9468-15861fb65f4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d58e683-eddb-47c3-8099-a7a51dfd8265",
        "cursor": {
          "ref": "99fae099-d617-49e9-a105-a164beec83f2",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "369b3681-d0a2-4551-935f-bb8c075c3e9e"
        },
        "item": {
          "id": "5d58e683-eddb-47c3-8099-a7a51dfd8265",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f0a84a8c-d987-4d27-9e87-71b9672385f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66399cfe-4a63-4c91-9326-15c0243be2f3",
        "cursor": {
          "ref": "df204b92-0fbf-4df8-a46f-7225beb18bee",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "6a5ce737-1959-40e6-943f-f73c2c1ff735"
        },
        "item": {
          "id": "66399cfe-4a63-4c91-9326-15c0243be2f3",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "acedf890-59f0-403b-bea7-5b105dc680a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 174,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5512e2e9-f584-48c3-9a92-64717ea78827",
        "cursor": {
          "ref": "e0439673-e329-43ec-adcc-abe7b3b90da5",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "ac4665c7-b3e4-4d8e-8d6c-5e77ad09fc7c"
        },
        "item": {
          "id": "5512e2e9-f584-48c3-9a92-64717ea78827",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7f40357d-a798-4d20-bb72-6215630ea2a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6788c12c-528b-4082-b55a-e240eafaf13c",
        "cursor": {
          "ref": "6cd12dcd-65d9-449b-9c61-a75a12d70502",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "61493e98-e3c1-47f2-86f1-af08012e073b"
        },
        "item": {
          "id": "6788c12c-528b-4082-b55a-e240eafaf13c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f47b72bc-cbda-4a25-b066-187b9f7ecf4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a4e9604-9ffd-4398-aefc-395be2fdcdef",
        "cursor": {
          "ref": "b8b2071d-5f50-4ef2-9f45-0f4d2536e4f0",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "6e2a7f52-d881-467c-938c-b7fc41c6f566"
        },
        "item": {
          "id": "5a4e9604-9ffd-4398-aefc-395be2fdcdef",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "fe9efec8-5ea6-42db-bc7f-b3954e169df1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5e45da3-1158-42f1-8da6-bdce2205167f",
        "cursor": {
          "ref": "0c086713-6582-4484-8dfd-20aaaecc99bb",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "a1922279-2325-46c4-a096-cc7044f7b6e9"
        },
        "item": {
          "id": "e5e45da3-1158-42f1-8da6-bdce2205167f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a28193fa-66f8-40bf-aea0-052f9c48fb98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1734a6da-4a18-4049-a0d5-54e904662790",
        "cursor": {
          "ref": "a5270df8-7c82-4145-aebf-895a363c8ea1",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "b56b5490-ba5c-44d2-a63d-e72d234866f0"
        },
        "item": {
          "id": "1734a6da-4a18-4049-a0d5-54e904662790",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "95091873-9462-484b-87d4-7401482ffb17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee081d22-2670-4412-b5e4-811f65295f2d",
        "cursor": {
          "ref": "7d23bd68-af66-4388-ba3b-69f96517a129",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a46fa785-3850-4dc7-a6a5-f1577cfed60c"
        },
        "item": {
          "id": "ee081d22-2670-4412-b5e4-811f65295f2d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "fb45ef11-198f-4457-bad0-386e4691dde5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81fe5b11-69ee-4a53-82f9-39877aa4b3a8",
        "cursor": {
          "ref": "43488da9-ac63-44eb-ad8f-c3fb20d94259",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "36bc55c2-6ba9-4e2e-9ad5-2344ada8f104"
        },
        "item": {
          "id": "81fe5b11-69ee-4a53-82f9-39877aa4b3a8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3b8f42f6-fadc-4fe5-8959-112dcf9cc8cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cec19b8-de76-4e90-992c-9e1358056e2f",
        "cursor": {
          "ref": "597f892a-ac30-42f3-b9e5-234de774e965",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "a9b6e55e-93b9-4d18-8016-295cebf7eb56"
        },
        "item": {
          "id": "6cec19b8-de76-4e90-992c-9e1358056e2f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0a49a75c-aea2-4621-9797-f1397ae546df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f4f5cab-8adf-43d8-af5e-bbccd25e5b9f",
        "cursor": {
          "ref": "a30c126e-bd5d-4888-a0bf-2d7f74662130",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4e0400de-2c2e-497f-b255-dd0f505b7df5"
        },
        "item": {
          "id": "0f4f5cab-8adf-43d8-af5e-bbccd25e5b9f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7e13cffb-9cf9-4245-ad63-d609904b1348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e57f87-c267-46ec-a130-d5fff48e2995",
        "cursor": {
          "ref": "629ae369-4eae-40ab-b4c5-c2203c1e84e3",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "532bf4dd-5202-4b44-8fde-88471e6702c0"
        },
        "item": {
          "id": "08e57f87-c267-46ec-a130-d5fff48e2995",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "494f7b6d-fbf7-47a6-911c-8c90e6b2794b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cd0e3c1-24b7-423b-bd00-24b4868b48b2",
        "cursor": {
          "ref": "240e6055-e0ed-4ecf-955e-131b34fe31dc",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "1886601e-9ed0-4b0d-9c87-54fa5185cdaf"
        },
        "item": {
          "id": "0cd0e3c1-24b7-423b-bd00-24b4868b48b2",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "45e78be8-8fc4-4966-9c6a-5695f09ad07f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f74a187-77e8-4c69-b297-356631e49c61",
        "cursor": {
          "ref": "9a78fda2-b6f8-4064-8229-bafdff540ac1",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "c4d46ff9-83b0-466b-a827-a0abe517234c"
        },
        "item": {
          "id": "9f74a187-77e8-4c69-b297-356631e49c61",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ce3c8e1d-5a9d-483a-9314-6d2fc2e5be03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4599930-f3a3-49f9-be63-fd6e7ecfdf69",
        "cursor": {
          "ref": "3de29c96-ecbb-49fe-90bd-3402868a0859",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "fb3745a0-8245-4ab6-9543-f4220b77254f"
        },
        "item": {
          "id": "a4599930-f3a3-49f9-be63-fd6e7ecfdf69",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "ccce910f-7ad2-4e1b-9e46-453f7fd1870a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d168a6ad-7a56-4746-97d9-05217e421a50",
        "cursor": {
          "ref": "41c665b8-eb35-4cc8-9735-64ca5fdc2a0d",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "e2834656-5b09-48ad-bd31-6d906b2db078"
        },
        "item": {
          "id": "d168a6ad-7a56-4746-97d9-05217e421a50",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d6da162c-08de-4073-9b3d-8162a3ffc4ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29abe145-9ad0-458f-96f8-2a66b7edfd00",
        "cursor": {
          "ref": "d753d48a-283d-4267-82dc-e173c55c7d7a",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "20f3e23a-5314-4fbe-940e-c2e616d85c78"
        },
        "item": {
          "id": "29abe145-9ad0-458f-96f8-2a66b7edfd00",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "dbf0b6a8-257d-46fd-a01b-e4365f01b229",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0d4d890-4e25-433b-8e6e-451dab3a47e2",
        "cursor": {
          "ref": "15c39147-bf47-492d-87d6-49f0d1e4ae80",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "a98fa761-2eb2-4ba3-8f78-bab4b0560341"
        },
        "item": {
          "id": "a0d4d890-4e25-433b-8e6e-451dab3a47e2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b71d7796-fda8-4b0e-b710-47919845451a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "058c64c9-c6ab-44bd-8045-d12a57e398f3",
        "cursor": {
          "ref": "110a3a7b-ff54-4442-9cec-10727abd844a",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c967ddf1-b27f-4ad3-866d-291d8988cd83"
        },
        "item": {
          "id": "058c64c9-c6ab-44bd-8045-d12a57e398f3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1ddee5fd-eb0e-424c-8ca1-a6eb5ab840f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60cafc7c-16d3-452d-9b8f-83d3f932e594",
        "cursor": {
          "ref": "a9a1f928-0408-4b8c-8ef4-67c2daba6b1e",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "05fde9d1-ae9a-47fd-93e2-f2a309d46481"
        },
        "item": {
          "id": "60cafc7c-16d3-452d-9b8f-83d3f932e594",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a1d8084e-2e4c-4210-9292-cf2f3b591b8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f25f551-a261-4f0d-b951-379cfe7312a8",
        "cursor": {
          "ref": "cb02473e-67e4-4681-af76-978f121682be",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "851f87cd-6dc8-40e3-b787-3e52ebeb3025"
        },
        "item": {
          "id": "2f25f551-a261-4f0d-b951-379cfe7312a8",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ad3a5825-cb9a-4f3a-a165-a1e487c1027d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fad29af4-139b-4be3-ac37-bf721e9b23d4",
        "cursor": {
          "ref": "c8d1d8c6-2dea-4ac3-b0f9-46ee0c418c01",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "dbbb1a89-19d9-437d-9ca2-252b2cb3e54e"
        },
        "item": {
          "id": "fad29af4-139b-4be3-ac37-bf721e9b23d4",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5c55b790-49f0-4721-9e8a-93b310a80e69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac54cead-b6c5-4abc-8d6b-f68729159f30",
        "cursor": {
          "ref": "c05786f5-345c-44bf-b30a-597784e383ab",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "6860c74e-1a1f-434b-8fa2-af91c3511415"
        },
        "item": {
          "id": "ac54cead-b6c5-4abc-8d6b-f68729159f30",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ffbcaa10-f1a4-490f-a9d2-6221674522f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feb7c426-da8b-47d9-810b-dba7533f6ecf",
        "cursor": {
          "ref": "778678da-0b2f-42cd-a2c6-8294c6a3488a",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "d343c57c-a39f-4152-a0c0-24ba00f4a01e"
        },
        "item": {
          "id": "feb7c426-da8b-47d9-810b-dba7533f6ecf",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8c948a1c-56aa-47b2-85cb-acf7aabfe56d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4010bcc-579f-430a-8461-08dc57d7c2b0",
        "cursor": {
          "ref": "90b0caff-2a17-47cc-b887-7838270525e2",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "0eef1c20-5565-4cb1-8616-0c6bf2295da5"
        },
        "item": {
          "id": "c4010bcc-579f-430a-8461-08dc57d7c2b0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "caf1abb0-0c1e-499d-84d8-0add9caf487e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0caa3869-49ca-4ae8-97b8-a3859d83ed7e",
        "cursor": {
          "ref": "c24fb624-eb9f-463e-be29-43172f7a610d",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "3711746e-e842-4090-8b2f-7aea6ace2dd7"
        },
        "item": {
          "id": "0caa3869-49ca-4ae8-97b8-a3859d83ed7e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "8608481f-c407-4a2e-aa84-b19e40c9ae32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e922c39d-37be-4cb8-b6c5-2e20d3c12b5a",
        "cursor": {
          "ref": "71245277-f6f0-4a09-9656-1e7023f561c3",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "1b0f51c3-64f4-483c-afcf-76b79c5891e0"
        },
        "item": {
          "id": "e922c39d-37be-4cb8-b6c5-2e20d3c12b5a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e25b3729-f3ae-4643-bce3-8ebd2750e2a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34171b8e-e918-4299-96ea-bae96d43e678",
        "cursor": {
          "ref": "fc6b3e20-d4fa-4ee2-baa0-b719da6e8070",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "f7c832a9-48ab-49d2-9001-1ff5dd6daefc"
        },
        "item": {
          "id": "34171b8e-e918-4299-96ea-bae96d43e678",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3fcf6399-c133-411b-8495-7f7cc7c7851f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc1c20d3-ef91-413c-b5d6-fdb19905f69a",
        "cursor": {
          "ref": "dfdeaf81-131d-458d-b33a-3f052aacc0f3",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "21e29768-5d1f-498c-8a15-f8d056b39ceb"
        },
        "item": {
          "id": "cc1c20d3-ef91-413c-b5d6-fdb19905f69a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "724830e5-be4e-4ca9-bbf4-ca68573d7c77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d83f57-d68c-4ff4-94d3-8952f7cf81a8",
        "cursor": {
          "ref": "e8d8efab-6f80-4741-aed2-fcd6e8d9d410",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "377a5401-3d2e-4292-ab50-4da5a6c385cc"
        },
        "item": {
          "id": "97d83f57-d68c-4ff4-94d3-8952f7cf81a8",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "24663e8f-1265-4188-85fb-b1d4ed184d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7b181a1-1360-42c6-a1a4-900640ff4658",
        "cursor": {
          "ref": "f765c63e-2785-4986-8705-3f38cc616e88",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "9086699e-5abb-4d1a-9496-12d807a83da5"
        },
        "item": {
          "id": "e7b181a1-1360-42c6-a1a4-900640ff4658",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "57123d70-2147-495d-87e0-f293087c8c5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f262685-29f5-4e8e-81a5-e0900e9c2b3b",
        "cursor": {
          "ref": "e7033f62-8f5c-4d76-b558-cc507b3033bd",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "02465bba-f15b-4cae-9904-61e89dd128d2"
        },
        "item": {
          "id": "3f262685-29f5-4e8e-81a5-e0900e9c2b3b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "1ee88b14-db8e-4da5-93fb-9bef34a0b45d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b7afacd-97ab-47c5-bcde-64f5a4c8616e",
        "cursor": {
          "ref": "9e3de1d8-b99e-4c4d-b6c0-1005b37b5a7a",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "bf25f16b-241e-4598-b249-1ce6475dea52"
        },
        "item": {
          "id": "9b7afacd-97ab-47c5-bcde-64f5a4c8616e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2789d03c-3a4c-46ed-b203-b9bc7e45b867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9af5166-5735-4c06-8845-a35a1a8d9b57",
        "cursor": {
          "ref": "bbc18fbb-160a-4b14-830d-98ee785d1ea6",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "87db0c92-2f2e-4f67-8ea0-49049190e53e"
        },
        "item": {
          "id": "a9af5166-5735-4c06-8845-a35a1a8d9b57",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c53923a8-1395-44a1-9820-1a9aa5be4a88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f8ab72-e80f-46c3-913c-41bcae3bc298",
        "cursor": {
          "ref": "a17a3b79-5957-4d64-ae55-0cc2e38d1faf",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "161cf283-5c26-4281-84ba-037106a08eaf"
        },
        "item": {
          "id": "12f8ab72-e80f-46c3-913c-41bcae3bc298",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "dbf00f02-ae75-4910-b121-ba58c05070e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e68c2e3c-ef41-4051-9bff-654d4b3083c7",
        "cursor": {
          "ref": "c7b32900-ef3e-4dd1-84dc-5263dbcb8220",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "0fcd57f6-968a-41c1-b76a-80a7f1fc214b"
        },
        "item": {
          "id": "e68c2e3c-ef41-4051-9bff-654d4b3083c7",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e7490be6-6b64-4dd8-969f-d21be981f6e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2896cbb6-c3a3-448f-84c8-b8e276c060a9",
        "cursor": {
          "ref": "ecc38d83-09e5-4425-979c-4954200385fc",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "b4cfde55-fd07-4c09-8bc9-153bd9d39024"
        },
        "item": {
          "id": "2896cbb6-c3a3-448f-84c8-b8e276c060a9",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7f088813-0966-4dc7-98f0-970e7d94f3f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "061305d8-d10a-4bb1-b917-3a8854946e89",
        "cursor": {
          "ref": "ba9a2bab-9b70-489c-826f-03bf5cd76a95",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "05d16ee9-ec23-4480-891f-87e995559760"
        },
        "item": {
          "id": "061305d8-d10a-4bb1-b917-3a8854946e89",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "86df5bfa-addd-4f73-b58f-3390bb89a584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f33e69ea-0515-44c9-a32d-6843c9aafe4c",
        "cursor": {
          "ref": "3b032bc7-f9a6-4b2d-9b4f-b4fb5f3792e1",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "82c1e037-1d01-4a15-a91c-9d16f9056fd3"
        },
        "item": {
          "id": "f33e69ea-0515-44c9-a32d-6843c9aafe4c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "040c005e-16dd-43f9-82c3-bc3a9b586983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba9390e2-14ee-49ef-b77f-59c89f79ba0d",
        "cursor": {
          "ref": "8bd73027-b1a4-4910-bf19-f483e4ac639a",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "457ad249-a12c-4a9e-b400-03d54ed198ea"
        },
        "item": {
          "id": "ba9390e2-14ee-49ef-b77f-59c89f79ba0d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2e4273db-c8da-44a4-a0cd-2f711dfae513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a773786-03b4-4d42-a9d6-31daa8ec1cdb",
        "cursor": {
          "ref": "35670b89-d4bd-447b-9918-1ff21becb277",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "79be44c4-4ac5-49e2-b0cf-92a2a89e6a79"
        },
        "item": {
          "id": "1a773786-03b4-4d42-a9d6-31daa8ec1cdb",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e84d7ced-ca43-4dec-9706-6c20dd070d27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45829eb0-e400-4998-975a-268091a5ab90",
        "cursor": {
          "ref": "678c8295-1583-46a3-b288-cfc51a979e3c",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "3c159364-8634-428a-9d3e-316661f99072"
        },
        "item": {
          "id": "45829eb0-e400-4998-975a-268091a5ab90",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ee96b868-1c5d-458b-b6cd-2db4620c41a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1a11a31-e26b-4443-8f9d-ac157fc54c14",
        "cursor": {
          "ref": "13a41496-0383-4c92-be21-e804cb666786",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "7abe6fcb-c17e-4375-b0cc-ae456b601852"
        },
        "item": {
          "id": "c1a11a31-e26b-4443-8f9d-ac157fc54c14",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "468ae3de-b611-4cff-a9e1-04dd01c9432c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30eeff3f-d77b-4981-b745-f2eb9b5aa680",
        "cursor": {
          "ref": "d28479f6-46df-4f85-8147-14fdb8afd21f",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "22425f21-d0db-4087-8556-bc0b85afd0e3"
        },
        "item": {
          "id": "30eeff3f-d77b-4981-b745-f2eb9b5aa680",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "2cb5f155-7c2f-4771-963f-c5b2f885a279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ab61532-4aac-4d6d-8053-cf9f5730d7fe",
        "cursor": {
          "ref": "1c5ced0a-f3e7-49f6-8fa6-562e5c80d911",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "fffbfbfe-ac43-40e8-914b-903c55254a6b"
        },
        "item": {
          "id": "1ab61532-4aac-4d6d-8053-cf9f5730d7fe",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "297c1f65-0592-42ae-97c2-00eb75e34c64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9aec9bd-8d6c-4f11-a474-fc58b4df78c6",
        "cursor": {
          "ref": "6abbbe33-71a7-4b56-ac22-7556a7ec3164",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "5a0bf478-6bfc-4ec5-8e52-e3b5d8541614"
        },
        "item": {
          "id": "c9aec9bd-8d6c-4f11-a474-fc58b4df78c6",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0343da5c-fe9c-4de4-bc25-63b48f881592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52355540-c542-4748-8719-c28328d377ce",
        "cursor": {
          "ref": "608c1427-c8a3-4e60-bf63-3976c00608f8",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "9520525c-4393-4af4-a1ce-e38d5662a972"
        },
        "item": {
          "id": "52355540-c542-4748-8719-c28328d377ce",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ed691e2e-72e5-4717-8662-6a2735de68dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c01d4d2a-0c17-450a-a62f-af0bb9123bfb",
        "cursor": {
          "ref": "4a337e43-8f27-4deb-8458-b6ae24ae4172",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6c74d7cd-09aa-453a-8394-966f82d6385b"
        },
        "item": {
          "id": "c01d4d2a-0c17-450a-a62f-af0bb9123bfb",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "cb4d10db-dd31-4b29-ab04-d1f12cde6995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcae6fe7-95a0-45a8-b736-3db8aae5b4f8",
        "cursor": {
          "ref": "46c9a429-2b02-4d94-8603-c3da7ae70697",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "d5cbbd86-3b14-4a2c-982a-9e28cc94e728"
        },
        "item": {
          "id": "fcae6fe7-95a0-45a8-b736-3db8aae5b4f8",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a737c69b-46d3-4df2-b026-da4a747ced09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42e378c5-5555-438f-8cf8-2f849a3827d5",
        "cursor": {
          "ref": "2f90451c-1ae0-4510-a15e-92abb4ff75ba",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "63231ecc-c08a-4b6a-879b-da8aa109a305"
        },
        "item": {
          "id": "42e378c5-5555-438f-8cf8-2f849a3827d5",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "5c731ec0-8e23-4e2a-8101-4d5d283aeb65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "321af511-cc78-4dce-b572-f772fa2d686c",
        "cursor": {
          "ref": "a62b0213-e9b8-4a2f-9729-d980f1ececb3",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a9f5b718-d119-4d9b-b2b5-262a78646314"
        },
        "item": {
          "id": "321af511-cc78-4dce-b572-f772fa2d686c",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "329654a2-d29f-4174-ad62-d43946ac40a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8e3f1a7-d1cc-45f3-9902-6f218ceea95c",
        "cursor": {
          "ref": "6046dd81-3961-4b51-839d-c639853cb417",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "8d47e8a6-fc72-42bc-9cae-5f477b7259fa"
        },
        "item": {
          "id": "e8e3f1a7-d1cc-45f3-9902-6f218ceea95c",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "d503038f-efef-42e0-8376-9ac920b8aef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be492907-b035-417d-9185-6aabb794af14",
        "cursor": {
          "ref": "59aebaa0-8e39-4a0f-812c-ef732375f7af",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "ae6a80d2-313a-4fd9-971d-d3cf67ba3545"
        },
        "item": {
          "id": "be492907-b035-417d-9185-6aabb794af14",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "27008f3f-8fe7-49dc-992b-df8b37840eb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4814fb08-4222-4708-bddd-61a5aba38d6a",
        "cursor": {
          "ref": "d1d5285b-ea0c-4e3c-ac95-5bfb9c3e3fbc",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c7ad6e42-2248-4652-9817-bed9d75db7cd"
        },
        "item": {
          "id": "4814fb08-4222-4708-bddd-61a5aba38d6a",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "6370ddd7-7194-4d98-becf-b2949edad0cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b3866d7-cc49-480d-8f21-18ec49a05151",
        "cursor": {
          "ref": "bd67946f-9e2a-4e86-bded-a852534e8b3c",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "ef87da25-4126-4188-ad7f-3a150f50ce78"
        },
        "item": {
          "id": "9b3866d7-cc49-480d-8f21-18ec49a05151",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "78339854-ecff-4fc8-96db-4558980e0578",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17270193-d203-43f8-9a8d-1e584e6e945f",
        "cursor": {
          "ref": "e8e570b4-5e99-484c-adf5-14f12a532a99",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "99e5550c-4fe0-488a-806c-812ec693450e"
        },
        "item": {
          "id": "17270193-d203-43f8-9a8d-1e584e6e945f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c1d38c64-0a25-445d-930d-3c87066b5ec5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bda59f69-9541-4807-920e-010a7e246dea",
        "cursor": {
          "ref": "9547ace5-9c39-4861-a677-ab6074379b44",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f8051fd7-84e5-4077-9f73-16bfce3bcdf1"
        },
        "item": {
          "id": "bda59f69-9541-4807-920e-010a7e246dea",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "224f2cc2-b864-4a00-a3ad-01bf2c031119",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2238d90-9936-4847-af86-c052e33655a3",
        "cursor": {
          "ref": "f0d36247-de9f-466e-b487-0f68f72054c3",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "0e5161d3-99f0-4297-8f57-53fd0aa8c23d"
        },
        "item": {
          "id": "a2238d90-9936-4847-af86-c052e33655a3",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "3e2e52d6-e96a-498d-885b-2e4e200ac09d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74777183-7b86-478a-9f85-92683eb0ccb4",
        "cursor": {
          "ref": "384d3027-cca6-42c0-8b86-55a754d9ee1c",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "999830a6-3b53-47b1-81f9-ba31216ea9a9"
        },
        "item": {
          "id": "74777183-7b86-478a-9f85-92683eb0ccb4",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b4d28d6b-3931-45e6-8f89-6a47f23b3561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec16441e-8db8-4517-8a1b-55b379d8c734",
        "cursor": {
          "ref": "e462bf92-41e3-4bdc-81ce-89cf85ed45f7",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "2c265cbd-9ef9-4191-b29b-700ce10e24c5"
        },
        "item": {
          "id": "ec16441e-8db8-4517-8a1b-55b379d8c734",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "6beb8472-0ebd-4b49-b18e-bb2dee6ad94b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6a786d7-5785-4230-86f2-15a61ba9b25f",
        "cursor": {
          "ref": "022a3fca-f09b-4b36-b60e-0f984eedd4c4",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "443564ac-e91c-4a5c-9c75-506d69d65ed0"
        },
        "item": {
          "id": "b6a786d7-5785-4230-86f2-15a61ba9b25f",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b7f8fa6d-a09f-4c94-8c22-c919441196c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63a51b4c-8459-4e64-b67f-2b3e3547d271",
        "cursor": {
          "ref": "90c5a778-dddc-4a19-9d62-526f79a2fda3",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "491dbd18-4b95-42cd-9994-2fd20d3ee327"
        },
        "item": {
          "id": "63a51b4c-8459-4e64-b67f-2b3e3547d271",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4b2b667f-4c20-4cb2-9d0d-5de3408f3a89",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "55009eb2-cff7-42cb-9f79-48817fdb1b85",
        "cursor": {
          "ref": "c824c06a-5f2a-4ed7-94a6-db33b21d6e52",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b23f79a9-77f9-4dc9-8a54-7999e508709d"
        },
        "item": {
          "id": "55009eb2-cff7-42cb-9f79-48817fdb1b85",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a23708ff-c486-4e69-80b1-86e1f8b79add",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53c612bc-3895-4f68-bcbd-4c8ae2653bf7",
        "cursor": {
          "ref": "e086a8b1-fde3-41e7-8b88-6a1c4705ec2e",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "acbc01a8-62d6-48f6-b414-7d56c3846f1e"
        },
        "item": {
          "id": "53c612bc-3895-4f68-bcbd-4c8ae2653bf7",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8063e050-8d34-47df-b013-56a8e3319c68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f89a24a-63fa-4c9c-83d0-8f6ae8689fa9",
        "cursor": {
          "ref": "4c66512e-2291-4980-8187-ab1acfc69ef1",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "fca24524-bb85-4193-852a-1f36299e2725"
        },
        "item": {
          "id": "6f89a24a-63fa-4c9c-83d0-8f6ae8689fa9",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "07d9e43c-6cb1-4b42-94cd-91f429f7f945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1391874f-57c8-4f98-8341-1aabe8d975cc",
        "cursor": {
          "ref": "12d12c1b-efa0-48a5-b308-1e0b9c9aec36",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "5ae99307-5457-4c20-9a8a-4bb289f9fa0b"
        },
        "item": {
          "id": "1391874f-57c8-4f98-8341-1aabe8d975cc",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "2432410b-2502-4088-9869-1301418486d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "824bbaea-195a-429f-90a8-141832479517",
        "cursor": {
          "ref": "486fac4e-590a-4aab-b298-ce636374ec19",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0a2a217e-9eb0-4d8e-84e8-ebb1b77798ad"
        },
        "item": {
          "id": "824bbaea-195a-429f-90a8-141832479517",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "ada4ef2e-adc4-4d8f-af9c-9413685ca14f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "976fd250-150b-4cd5-96ed-ac0829f55903",
        "cursor": {
          "ref": "f345a664-3fa2-45f5-8600-f27835fdefef",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "f037f07b-96e3-4a75-a76b-9fdee74bec62"
        },
        "item": {
          "id": "976fd250-150b-4cd5-96ed-ac0829f55903",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e924d8be-452d-445b-8e8a-24160781f6f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eb8b477-569d-42f0-be22-14f1e9b5c138",
        "cursor": {
          "ref": "c60d1ca7-77a6-45d5-b721-844e7ff0b078",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "32d6f851-c62a-416e-a8e2-0df10977f93c"
        },
        "item": {
          "id": "6eb8b477-569d-42f0-be22-14f1e9b5c138",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "03c9455f-fdb9-4bcb-8077-b81563e93624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "984ac824-6754-4e7f-b630-5a93a6e5c9f6",
        "cursor": {
          "ref": "e3c8a47f-b02f-4d00-882c-efeeb5930c94",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "7f195352-f9ba-4f78-93d4-90bb90c27023"
        },
        "item": {
          "id": "984ac824-6754-4e7f-b630-5a93a6e5c9f6",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "9a15d44b-ba19-4d20-a3f5-3855eb7fe683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1df689b6-1eb3-449c-b838-5e455c2f51c5",
        "cursor": {
          "ref": "abf06658-ea45-448c-8a5d-e7f951f09863",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "c33674fc-13e5-4609-bd9f-9b5a08802aaa"
        },
        "item": {
          "id": "1df689b6-1eb3-449c-b838-5e455c2f51c5",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "4a8952f1-e9d3-445a-a026-e34db45767c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "635b1280-f121-4db6-8f91-b9dd6f574512",
        "cursor": {
          "ref": "6f780854-e688-4c35-a9ba-0395191eb1f8",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "8cf45d48-f49e-404a-a1e6-5aebdf7aabd0"
        },
        "item": {
          "id": "635b1280-f121-4db6-8f91-b9dd6f574512",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "9f9bc746-66ab-4864-ae0f-98e4570c67e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a20eca1f-e9b9-4103-9174-69eaad486487",
        "cursor": {
          "ref": "353c5fb6-813b-4714-97a0-2aa794a84944",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b40b7ca3-b546-4929-b2e5-673007a67425"
        },
        "item": {
          "id": "a20eca1f-e9b9-4103-9174-69eaad486487",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "78fa3ad3-7ac4-4667-aea2-a425de60f822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "515f0d24-6b9d-410a-a173-de6c30c8c95d",
        "cursor": {
          "ref": "6a3dc3ee-5491-4ce4-87d1-46a6175eda11",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "9da426d9-f2ba-40d2-a17b-dbee5a8b7242"
        },
        "item": {
          "id": "515f0d24-6b9d-410a-a173-de6c30c8c95d",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "d21ad291-aec5-4531-809f-77f2928d1b0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1550b965-1d84-45e9-ab75-9ca4d509d9e8",
        "cursor": {
          "ref": "63874007-3697-4aec-b687-0ba823a7dc49",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "25e90f32-4ff7-4625-a69f-0b5ffc019d38"
        },
        "item": {
          "id": "1550b965-1d84-45e9-ab75-9ca4d509d9e8",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ac8094b1-8121-462a-aa42-47da9a89540c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb303a0b-a730-4fe3-9b9a-fff8ec8fa5cc",
        "cursor": {
          "ref": "52c1c928-0637-471d-83ba-f61a9b9ae3af",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4a47891c-c662-4c26-adda-f7b673b7c131"
        },
        "item": {
          "id": "fb303a0b-a730-4fe3-9b9a-fff8ec8fa5cc",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "366e5e8f-96d1-49ba-adb6-8fcbf24a201d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e5d7169-d552-4421-84b8-7dae98860ba6",
        "cursor": {
          "ref": "446c88f7-3acb-4287-bcd9-c06cc20be979",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "96ca81cd-1a94-401f-9988-0f3926e6ecef"
        },
        "item": {
          "id": "6e5d7169-d552-4421-84b8-7dae98860ba6",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "369fb01b-08ea-4772-9f8d-1da816015109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d2cc6f6-90c5-4bac-b6bb-c60a3a8e660d",
        "cursor": {
          "ref": "c098b4cb-7853-4e85-b44e-f4cfbd3d40c6",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "7181fb06-6a81-4135-aab6-fac8581512d5"
        },
        "item": {
          "id": "9d2cc6f6-90c5-4bac-b6bb-c60a3a8e660d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "abd4deb9-f07c-4444-938d-a570c5478207",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "730a13c5-0adc-4fb8-b9ca-40b9c590362a",
        "cursor": {
          "ref": "dd116d99-8365-472b-bc0a-a89c02cc07fa",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "354df233-6b66-490d-992b-3c395f53327b"
        },
        "item": {
          "id": "730a13c5-0adc-4fb8-b9ca-40b9c590362a",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "61485c38-9304-4717-a923-1f5b13d96abb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eec4f49b-a080-4db9-a182-57820764bf07",
        "cursor": {
          "ref": "e59e80d3-1efb-4c8b-9c0a-56f1771e4a89",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "98f0f5ca-b409-4caf-9eb1-1977121c3096"
        },
        "item": {
          "id": "eec4f49b-a080-4db9-a182-57820764bf07",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "218fddc6-f6c5-4342-ac57-c4682bc20e33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1ecd92e-c354-457c-a85d-7275e885f107",
        "cursor": {
          "ref": "1646dc32-f55c-43a7-ab01-3836a9277b14",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "105c1ccb-e2f2-40f4-9f85-143a98947a96"
        },
        "item": {
          "id": "b1ecd92e-c354-457c-a85d-7275e885f107",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "2985a507-377d-4344-82a9-e7532269138e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aed95ca-3f44-4cd2-8477-0113f0050d14",
        "cursor": {
          "ref": "8d06c91a-5d31-496f-9ca0-787625b9d77e",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "6f3020a4-39e9-4601-87eb-edcdc5869ab2"
        },
        "item": {
          "id": "4aed95ca-3f44-4cd2-8477-0113f0050d14",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "74d18b76-ae18-4ed6-afea-c7c336a5c83d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dfd8e09-f87c-48f4-9904-a0d33af7686b",
        "cursor": {
          "ref": "1a593a1a-de9c-4f82-85b9-d9c4a4606055",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "33bc6529-91d9-440a-84a2-9ae0ddc34aea"
        },
        "item": {
          "id": "9dfd8e09-f87c-48f4-9904-a0d33af7686b",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d2d251a6-d80d-4056-b20e-a0eeb3e1944a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "513e489d-65ff-4e3d-95bf-81c8e73593de",
        "cursor": {
          "ref": "91568d3e-863d-4391-8e89-7e0561c59852",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "af0e0c6e-c9dd-4696-ac59-41a672b028d2"
        },
        "item": {
          "id": "513e489d-65ff-4e3d-95bf-81c8e73593de",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "3325e306-d3ad-4e4b-b9ba-19f9e8442db6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b07000a-6d28-467f-a12f-9b2e42df7960",
        "cursor": {
          "ref": "e10eda01-b7f6-487b-85a6-284c9c98078e",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6bbaca54-594d-458b-9f14-240f68a24302"
        },
        "item": {
          "id": "7b07000a-6d28-467f-a12f-9b2e42df7960",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "140f3c91-ff9c-4f3e-9fee-d2967cf57d71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f1cadac-f7fc-4903-8b4a-9ebb9c8da04b",
        "cursor": {
          "ref": "b7b43390-cdcc-4bc3-a6bf-1ba41d04bbad",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "81d4cfe7-609c-4aec-bf8e-3dd3235948d8"
        },
        "item": {
          "id": "7f1cadac-f7fc-4903-8b4a-9ebb9c8da04b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "de5c1fb2-be98-4549-a4f7-cfd3b08974aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65027045-bef1-4828-a12f-3c5a896159b2",
        "cursor": {
          "ref": "fc0e6299-0be8-47c3-a0b0-4e8024f916af",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e64ce239-0049-49b7-b3b9-d3f34eef27d7"
        },
        "item": {
          "id": "65027045-bef1-4828-a12f-3c5a896159b2",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "5e62537c-3c9d-40c3-9ff0-735d4f02db7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "907ac7e3-986f-43de-8393-531868d77fdc",
        "cursor": {
          "ref": "f9423bdb-214c-44cb-a8e3-983f52f85aef",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "0503f178-9399-43e9-b6d6-b4b123bf9057"
        },
        "item": {
          "id": "907ac7e3-986f-43de-8393-531868d77fdc",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "19cd14f6-df82-446f-af44-02f054c2aa8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c31c246-cd70-4bbd-8cb6-a956146e6aea",
        "cursor": {
          "ref": "2d0e7bb7-2d16-466d-acfc-59cb3c603b91",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a6346e96-6c18-4988-bb8c-205e8227f75b"
        },
        "item": {
          "id": "1c31c246-cd70-4bbd-8cb6-a956146e6aea",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "1b8e0a4c-b9e0-4a8a-8bcc-7a81f5ed4c15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "439bdd9d-6356-48c8-8e45-57d7519bfc3a",
        "cursor": {
          "ref": "dcd22f57-5138-43c2-9b41-e3ac28562f2b",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "eb6cb5c6-87ed-4124-8ede-86c41a2914e0"
        },
        "item": {
          "id": "439bdd9d-6356-48c8-8e45-57d7519bfc3a",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "e339d2cf-920b-4029-b202-53c73c56fa14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0772bd8-9323-4cd0-9985-cf8ec0c55b10",
        "cursor": {
          "ref": "b7ac3621-1b62-438b-bece-573fc4d861ab",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "cc1f2d53-0b00-440c-9b6f-081e38c2b873"
        },
        "item": {
          "id": "b0772bd8-9323-4cd0-9985-cf8ec0c55b10",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "57d317e8-f6a4-4c56-a463-3c55a82174d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bd06e9d-346d-42a4-af6b-7b534c0ae9b3",
        "cursor": {
          "ref": "167dcec3-7367-4bb6-8ac7-de741dfe327d",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "5d24da41-ee77-4037-848a-41ec1b517568"
        },
        "item": {
          "id": "7bd06e9d-346d-42a4-af6b-7b534c0ae9b3",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "6db35841-b1d9-4336-82b5-7eecf9d2003d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "330830ae-7d12-49a2-b805-d77c50daf7ab",
        "cursor": {
          "ref": "9cb5939b-8b74-47a2-8d6f-caa61f10c968",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "f5f4184f-fdfe-45f6-9dc4-552843fa5f21"
        },
        "item": {
          "id": "330830ae-7d12-49a2-b805-d77c50daf7ab",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "a44f2011-2e94-466b-b8fa-86f403423ebd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "8ecab4b8-d2f3-4433-a45a-71442aa273b1",
        "cursor": {
          "ref": "8b7dde6b-38bd-4e43-be7d-6b4d351be391",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a548114e-cb65-459b-9eef-76fc624578de"
        },
        "item": {
          "id": "8ecab4b8-d2f3-4433-a45a-71442aa273b1",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "1aaefb73-3ab4-4c8c-b6d5-9713f425caf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "f41b21ed-158a-42f7-8854-9e244c1ff324",
        "cursor": {
          "ref": "1cb993f9-e847-4b1e-9e74-bdd2381de7d1",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "01129fd5-693d-4d1e-a836-7b385d9207ce"
        },
        "item": {
          "id": "f41b21ed-158a-42f7-8854-9e244c1ff324",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "78511615-aec1-4ff1-a960-55094d128ed9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "989674c0-b7d3-4473-b769-f848413b4de1",
        "cursor": {
          "ref": "697b4182-3548-47a6-997a-afd2eb82c23a",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "005c7b48-1eea-48e7-95ee-e21282db51f7"
        },
        "item": {
          "id": "989674c0-b7d3-4473-b769-f848413b4de1",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "fe059f2b-74ce-4c13-8bb2-9b9bf29e793d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "f2df515a-42ed-418a-9901-47f15278cf3f",
        "cursor": {
          "ref": "df450325-d64e-426d-b50a-d645cad0e23a",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "8de58626-391a-4e5b-b1b0-fa8d604546d4"
        },
        "item": {
          "id": "f2df515a-42ed-418a-9901-47f15278cf3f",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "7cf6fca7-87a3-4209-b33c-ed06fce23482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1239,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "919231cc-6e17-4dc7-8109-fe87d349427f",
        "cursor": {
          "ref": "041404ae-4f9e-4c8d-aa80-f78ea72ae14b",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "4fe54c76-cce1-4c54-8120-152cf5efc69c"
        },
        "item": {
          "id": "919231cc-6e17-4dc7-8109-fe87d349427f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "37f2c0f1-bcdd-429d-9d61-54a4d2e13edf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 175,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "309205a4-cada-4b25-93fe-c8b89b6e45fb",
        "cursor": {
          "ref": "5458fa49-06ee-4c4d-92c0-c3d57af68998",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "807abf60-ec5b-4cea-9bc1-dedbdcfc22ba"
        },
        "item": {
          "id": "309205a4-cada-4b25-93fe-c8b89b6e45fb",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "30f3823f-e2f3-4f56-9926-b2bc8e027743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "1f4b36a6-b758-42d9-9bec-7bbd78cd7ea6",
        "cursor": {
          "ref": "f6d69018-b95f-4632-802e-1954610876e2",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "2f42f134-fc68-4e3d-b867-fe9508bd1a4d"
        },
        "item": {
          "id": "1f4b36a6-b758-42d9-9bec-7bbd78cd7ea6",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "80dc79f8-3ae7-4177-aed1-4a271ed18771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "1bf2792f-af67-4dda-a027-d98dda132e33",
        "cursor": {
          "ref": "6f957ee6-b1c4-4f26-a53b-4fbd6d415543",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "e6bab563-940b-4686-bf85-e8b6587d9d2a"
        },
        "item": {
          "id": "1bf2792f-af67-4dda-a027-d98dda132e33",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "87253966-928c-435c-a4f8-c1d06a738663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "4c766e88-99a8-4d17-9b57-f2f01297124f",
        "cursor": {
          "ref": "85c4b7be-2c5a-4ff8-852a-15753e5a41b1",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "0b93b43c-9c1f-477d-b1af-87b89d531358"
        },
        "item": {
          "id": "4c766e88-99a8-4d17-9b57-f2f01297124f",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9ccc4d3c-eaee-4d30-9113-e69c5d45480b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18684ec3-3605-4266-a26a-dc8018c0be1e",
        "cursor": {
          "ref": "f080c5c3-f3ee-4c0a-9aa0-cf9945743b2d",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "c29883a5-d6f4-463e-a3d3-03f995af215f"
        },
        "item": {
          "id": "18684ec3-3605-4266-a26a-dc8018c0be1e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a9a5a769-24a3-495d-881f-7319ce1d5eb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eddb524-677a-45f5-9427-3a6fba4e4570",
        "cursor": {
          "ref": "87a3c1d9-6621-48fc-8433-bc3f54d7bc60",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c786f8df-bf07-4bf7-a77e-052b805979ac"
        },
        "item": {
          "id": "4eddb524-677a-45f5-9427-3a6fba4e4570",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "699ac9c2-2e86-4da4-8a0b-7070692c9f22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cefc938-7c80-4e08-9c11-ffdb16737e2c",
        "cursor": {
          "ref": "1ad6971b-8843-47d8-86e3-2a58aa75b2c7",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "16b5ce98-d1b9-45bd-a7b3-91ef6880e803"
        },
        "item": {
          "id": "5cefc938-7c80-4e08-9c11-ffdb16737e2c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d99a7fd5-b66d-4e45-a5de-e950cdf7f081",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4402eb0-cc90-4665-bab1-89285ff2e775",
        "cursor": {
          "ref": "3e28439b-26b9-4955-ae27-b72fe093f32f",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "c032845b-6ee2-47d6-b229-e2e1b6d92d80"
        },
        "item": {
          "id": "b4402eb0-cc90-4665-bab1-89285ff2e775",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "74ec6f94-ffdc-453c-b37b-fb4f5cd73775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb0a86c3-586c-4ed2-a875-681bdbdc71d9",
        "cursor": {
          "ref": "48d0685b-bfc1-4eaf-9861-6dffed9afbec",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1d4f2c6e-2e2b-4272-85d3-55c306a4de81"
        },
        "item": {
          "id": "bb0a86c3-586c-4ed2-a875-681bdbdc71d9",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "608873ca-b35f-40eb-a350-81bcacdde37b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba6c4470-cf15-4207-a432-3c84a3a3a206",
        "cursor": {
          "ref": "861bb2d5-185c-49d5-9fe3-8d014b730f76",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "fd175b2b-4dba-49dd-86f5-18034b5eff4b"
        },
        "item": {
          "id": "ba6c4470-cf15-4207-a432-3c84a3a3a206",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "e5c23194-3bfd-4387-ad1b-79a80a899594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a183b90a-ad51-4919-8bf8-cd1690c4fece",
        "cursor": {
          "ref": "110623a6-0c60-4ea3-ab08-8ea95d0aa771",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "43082854-3248-466f-8cfa-29ac913c42cb"
        },
        "item": {
          "id": "a183b90a-ad51-4919-8bf8-cd1690c4fece",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "cb717b1e-c2e1-4039-a0d7-9f07950e0895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11040dc5-20a5-49da-bcf4-91262f27d3ba",
        "cursor": {
          "ref": "4919ea58-03d9-4abb-bc24-a4a22a9a0232",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "553dc164-a4d0-4c06-8fa6-27be334436a3"
        },
        "item": {
          "id": "11040dc5-20a5-49da-bcf4-91262f27d3ba",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c134d9a5-a238-4636-94c8-bb3c20ec6b29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bda2433a-3a37-4533-8cd3-b78f1794e33f",
        "cursor": {
          "ref": "dd53e7da-87d7-4ce6-a9ef-aafeb40cb0ec",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "38f94ac0-e014-4c5e-a743-837463ea4495"
        },
        "item": {
          "id": "bda2433a-3a37-4533-8cd3-b78f1794e33f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "a1d7e65e-141a-4ccd-ad8a-dec21b5d1702",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd2f39cf-805b-4f98-b61f-63d4675f1f8c",
        "cursor": {
          "ref": "2b2669ac-bc74-42bc-a4e1-571408e78568",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "6283ecf9-1107-4b6c-b618-c50dc0cdec3c"
        },
        "item": {
          "id": "cd2f39cf-805b-4f98-b61f-63d4675f1f8c",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "cc9c7499-dc60-4666-89dc-ccf32c37395c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb910b05-1c94-4d45-b899-cbeefe9631d6",
        "cursor": {
          "ref": "7451314f-3199-4178-b45e-b937a2a2090a",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "0dc71cd1-04e9-4c38-a9cc-fa6463a8fe6f"
        },
        "item": {
          "id": "cb910b05-1c94-4d45-b899-cbeefe9631d6",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "1f4f7015-855b-4e6c-bf4d-4ddb3a1fde4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fa16cb1-44f7-47a6-8795-d16b714f3d4c",
        "cursor": {
          "ref": "b75d731d-084f-4bc7-b935-c44f524168c2",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "2ed3463e-7433-4abc-bf69-86e4fa18ec24"
        },
        "item": {
          "id": "8fa16cb1-44f7-47a6-8795-d16b714f3d4c",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "fce2b955-3281-4a83-9d65-8133e10cfed1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "948df0e1-230e-4dc8-84ee-caa971918aed",
        "cursor": {
          "ref": "56c17895-dbbd-4a3c-a133-fa4d5b6fca65",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "203bd515-e607-431f-9a1b-1cdc9fccfd92"
        },
        "item": {
          "id": "948df0e1-230e-4dc8-84ee-caa971918aed",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "5e5136ef-9170-4026-994c-d99c9f8459b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1270,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "5dd47860-e934-4d63-9db1-88267d138e51",
        "cursor": {
          "ref": "be0019b4-debb-4599-8c8d-79717c0e3c3d",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "5dd96347-419d-4cb2-be96-86c869170e39"
        },
        "item": {
          "id": "5dd47860-e934-4d63-9db1-88267d138e51",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "6d985fa8-2e1e-4103-8b0a-ad65823c845c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 924,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "067de113-8521-4ab7-b66d-2eb15845bed0",
        "cursor": {
          "ref": "be0805f4-f9de-4d32-aaf8-6491b28b705f",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "0dd0ea41-0a51-48ac-8198-52691ee5b844"
        },
        "item": {
          "id": "067de113-8521-4ab7-b66d-2eb15845bed0",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "cfa57cac-951b-4887-abbc-a1db81897780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "f7496bb2-5e0e-488d-845b-067117588c5a",
        "cursor": {
          "ref": "09b33c9c-1365-422a-89af-7a0a73f11c2a",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b0a5afec-dbcf-45cb-af93-0e7e80e00a59"
        },
        "item": {
          "id": "f7496bb2-5e0e-488d-845b-067117588c5a",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "900ce8d1-1297-429f-8787-7c14dcb8f2b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 758,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "9d1a4267-f35c-40ec-9e33-0a4bc33b15ff",
        "cursor": {
          "ref": "5b532d25-b1ed-4f8c-9b3c-b1691e6fac36",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "dc6d65e0-71ab-4d48-9cf0-a8a67bbd2c67"
        },
        "item": {
          "id": "9d1a4267-f35c-40ec-9e33-0a4bc33b15ff",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "164eb7b0-4a14-462b-aa38-0cf0b737e910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "d81a5889-ac5a-4d1a-836b-446bba8f1e42",
        "cursor": {
          "ref": "c7f17cbd-f83f-4054-9853-b4ea6398da25",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "260d9e63-eede-4bf8-a5d8-520dd9db9246"
        },
        "item": {
          "id": "d81a5889-ac5a-4d1a-836b-446bba8f1e42",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "1a5cb42b-8931-497e-b862-86e4253277b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2264aeb-63ce-4414-9c28-51d3c2cfe2e6",
        "cursor": {
          "ref": "a5493cea-4be3-4f30-b421-75f0d2e6a28d",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "b104e5c4-a948-4eab-9fcc-7ab2e561aae1"
        },
        "item": {
          "id": "e2264aeb-63ce-4414-9c28-51d3c2cfe2e6",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "855a5c68-c8f3-41c4-b95e-d1a189f16ecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a35daae7-9014-40ee-b364-bb6058384c04",
        "cursor": {
          "ref": "dc91b1e6-81fd-492b-9cc4-761bffd059de",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "dd0a6adc-4900-4e75-be33-9096164054bd"
        },
        "item": {
          "id": "a35daae7-9014-40ee-b364-bb6058384c04",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "cad2c0a9-a385-4101-a3be-e2a1688d037f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2120c3b2-64b6-47eb-99d3-eae6a2aac476",
        "cursor": {
          "ref": "bff53bff-5cd1-4419-a8e0-f19905142cfe",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "884b95f6-7591-4b14-8cd7-75f7a5d3e31d"
        },
        "item": {
          "id": "2120c3b2-64b6-47eb-99d3-eae6a2aac476",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "bf33f8c0-3601-4728-a786-880004e63db8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2e921e7-5212-4cd6-bdaa-90d3c9134564",
        "cursor": {
          "ref": "047db4f7-5a0a-4579-a289-0016eed1f13b",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8f3b917a-4502-49f2-a8ef-eadbf6256c59"
        },
        "item": {
          "id": "e2e921e7-5212-4cd6-bdaa-90d3c9134564",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "0a8757fc-880c-4787-be96-e89aa433cb17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9055fd4-2cf6-450c-82ea-3f77891f2e4c",
        "cursor": {
          "ref": "01018a83-bef8-45c1-9482-9e7a54bb58e8",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "5718a0e3-d8af-412b-b744-96de77efd3ff"
        },
        "item": {
          "id": "f9055fd4-2cf6-450c-82ea-3f77891f2e4c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "97cafba2-0717-4e8e-b912-b334018af0b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b865670-9cf6-4d68-8e6b-96e410a5501d",
        "cursor": {
          "ref": "64aae92e-8b91-4cbc-a0fc-aebd6356b15a",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f5ef1875-2ae3-4857-b22f-d5dba922cc43"
        },
        "item": {
          "id": "9b865670-9cf6-4d68-8e6b-96e410a5501d",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "dc88945b-2a7a-4c5f-a30e-fce6bb4f7875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f89529e0-c097-4699-894c-9e37461d4156",
        "cursor": {
          "ref": "da301dea-81c2-47c0-b849-f570c4e869c4",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "3389fc80-c94d-47e9-9bcb-b82dd035133e"
        },
        "item": {
          "id": "f89529e0-c097-4699-894c-9e37461d4156",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "47e1b9ad-e1f1-4bdd-af06-5984c87edb47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d80fb67-8bbb-4264-97b6-7267e9f452db",
        "cursor": {
          "ref": "6f39c5c1-bb97-40b9-844b-4256621fe62f",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5e7fd6ea-51ee-4886-9e11-9c0a3a49709c"
        },
        "item": {
          "id": "8d80fb67-8bbb-4264-97b6-7267e9f452db",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "6c11fee8-6806-4597-a391-09ad3cd7010b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b5933e5-f6a1-459a-abcc-ec5c99a6017a",
        "cursor": {
          "ref": "db1efdaa-16d9-4bd5-a3cb-e362240cc6fe",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "c86e0f8c-8c1d-4d91-927d-e4d54e82d935"
        },
        "item": {
          "id": "1b5933e5-f6a1-459a-abcc-ec5c99a6017a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "54a9556d-c808-4b07-801d-ee9acf691c5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b888b37f-fe0a-433d-8724-be52e15494f4",
        "cursor": {
          "ref": "0f869d63-66d7-4caf-8862-f5bb7f211a4c",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "c9f58c50-2c46-4176-be84-191de3959f9d"
        },
        "item": {
          "id": "b888b37f-fe0a-433d-8724-be52e15494f4",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "f111b34b-4d41-4a9e-9d2f-ec6d09edbbf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b3d2c9b-117e-45d1-afb3-9110e0840b5d",
        "cursor": {
          "ref": "600c2ac8-ba51-496e-82eb-f170aa30cb4c",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "613a8bcb-620f-496b-9147-ef079478b03c"
        },
        "item": {
          "id": "2b3d2c9b-117e-45d1-afb3-9110e0840b5d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "24420193-2241-41b2-b0e9-7c9fb17038aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00a82146-13aa-4980-8e02-f76af7598b03",
        "cursor": {
          "ref": "7190a0db-c545-4ce0-abae-549b9b787c29",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "059e7104-ba0d-4608-95c1-c18dcd2cbba7"
        },
        "item": {
          "id": "00a82146-13aa-4980-8e02-f76af7598b03",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "a5e6b6a6-03bf-4f7f-92ec-b81af7f3c359",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa8ca345-26fe-4986-80ac-f0d3d97812a5",
        "cursor": {
          "ref": "0948202a-483b-43e0-9fcf-acb7067f9c43",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "2e1567b7-b077-4496-b17f-2957f1cbef33"
        },
        "item": {
          "id": "fa8ca345-26fe-4986-80ac-f0d3d97812a5",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a3f35124-3bc9-49c8-a6a7-34552f63edb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "946ce0b7-2dd6-4c6e-b26d-ceaba5a8d28c",
        "cursor": {
          "ref": "d6e07221-4330-445d-b818-20426e979b76",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "8538223d-c046-483b-8ce5-ee7b924b0982"
        },
        "item": {
          "id": "946ce0b7-2dd6-4c6e-b26d-ceaba5a8d28c",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "8c37eb26-00f8-4458-bbd4-8146156029e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4c741bc-2a93-4bfd-b448-6f460e1d0820",
        "cursor": {
          "ref": "1eada62b-37cd-4214-998c-85bf72ac7b15",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "2ed79375-81a5-4617-80db-793bf6e22081"
        },
        "item": {
          "id": "c4c741bc-2a93-4bfd-b448-6f460e1d0820",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "2db38060-012d-4699-a341-d6a6a95d9334",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80dadc40-172c-42ed-ac19-a24e814cf271",
        "cursor": {
          "ref": "3becf985-cc4f-4f49-9d3a-0e99933fbcce",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "87b685ce-1529-4853-bf81-4ec038ceb713"
        },
        "item": {
          "id": "80dadc40-172c-42ed-ac19-a24e814cf271",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "4801baaa-bcce-42b4-86a5-cf83f21c28af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f3f3023-42b0-442d-a436-996195897f44",
        "cursor": {
          "ref": "a84167ba-7796-4aa8-adc8-afc00188f1de",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "ac29f3f7-2d43-4ceb-9086-006effd74511"
        },
        "item": {
          "id": "6f3f3023-42b0-442d-a436-996195897f44",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "068c48c7-d205-4a43-8020-945e3fb1e681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87bdef04-3afe-465d-b7bd-f52a22ed6fc5",
        "cursor": {
          "ref": "f68013cd-2c82-40d8-9de7-7dd059b43cee",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "d1f46126-48eb-4cfe-a985-cc995e9c2833"
        },
        "item": {
          "id": "87bdef04-3afe-465d-b7bd-f52a22ed6fc5",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "925b7340-fcf6-4190-a101-271825475c7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "549ff098-f4fc-46db-b51f-37800c9d0de3",
        "cursor": {
          "ref": "b5264e52-9166-4e5a-b046-b8bb0a527373",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "e473ef17-5c46-4975-8886-273679134e76"
        },
        "item": {
          "id": "549ff098-f4fc-46db-b51f-37800c9d0de3",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "594c5420-144d-47ec-83ab-658b4d3171ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88bf6d61-679e-4d50-b67a-45ee6c9143bd",
        "cursor": {
          "ref": "e765880c-8a79-4cd6-8c63-f5300b4f15b0",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "6ac395ce-3c01-4deb-bae4-898c15e5395e"
        },
        "item": {
          "id": "88bf6d61-679e-4d50-b67a-45ee6c9143bd",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "4027d518-22a4-4838-b53c-f951fec0c7d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51854d99-408c-42ff-afaf-3c2d5ec1291b",
        "cursor": {
          "ref": "0f650b89-cf25-49c8-ba67-ed04e34f07fc",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "e52298a2-75b3-42cb-8bd1-b834d888d4d4"
        },
        "item": {
          "id": "51854d99-408c-42ff-afaf-3c2d5ec1291b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "870bced7-bc0e-4696-bce1-4126d22a7023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a92fbefb-c77b-4ec0-8726-68427511cbfc",
        "cursor": {
          "ref": "fe259fea-c65d-4849-8c4d-a451401ce1c4",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "15e2c3a3-5797-4416-89b0-31ac0edc27aa"
        },
        "item": {
          "id": "a92fbefb-c77b-4ec0-8726-68427511cbfc",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "3d84a0f4-c946-44d9-95b5-9e2370f2b94a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df3914fa-1872-45a2-9cf7-a0978cdbc2bb",
        "cursor": {
          "ref": "c2734a39-9433-4a5d-98d2-fc1039c905e4",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "39c2bae0-62a6-4e44-9b4a-56bff08115d4"
        },
        "item": {
          "id": "df3914fa-1872-45a2-9cf7-a0978cdbc2bb",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "847cb03d-a75d-4381-9654-216f28e8976e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "292cedd4-6eae-45cc-8e79-0b2b58cc3331",
        "cursor": {
          "ref": "5591b9fa-19f1-40ef-b52d-19b7f48add0b",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "c41766bc-934d-44dd-ab0f-4f6fd284c3cf"
        },
        "item": {
          "id": "292cedd4-6eae-45cc-8e79-0b2b58cc3331",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "ddcc3550-5099-4d96-8600-63be668142df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "463e4d8b-bad0-409c-9324-4833ab6b4235",
        "cursor": {
          "ref": "7292933a-aa06-43b5-829e-d88950484a8a",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "bb662fa7-c276-4678-ae6f-d7bf0c4e6197"
        },
        "item": {
          "id": "463e4d8b-bad0-409c-9324-4833ab6b4235",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "563d5162-adca-43ea-951b-eb674e96e23e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d6d8c8-6511-4d10-aba1-e32c3d3bb8df",
        "cursor": {
          "ref": "b14897af-375e-4a4c-962a-ec8e8971341f",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "ac81be4b-67e3-49df-acfc-0504b22b6086"
        },
        "item": {
          "id": "28d6d8c8-6511-4d10-aba1-e32c3d3bb8df",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f9d41556-a561-4cb9-9716-e085fcc980a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d193d5f-9e6c-47a9-bda8-bb12d12d3c34",
        "cursor": {
          "ref": "909347fe-c588-4fc9-93e4-9b765c8382d7",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "3684ea2a-ba98-44c6-89ba-88390db9e946"
        },
        "item": {
          "id": "3d193d5f-9e6c-47a9-bda8-bb12d12d3c34",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b6d85d5a-2f0e-468a-a0c1-d98af7d222aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc881615-7283-43d4-812e-07293f37b968",
        "cursor": {
          "ref": "ebff8035-1587-40e0-90f9-41ecd55e937c",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "9d183f3b-3c54-4150-b3cf-ca18237281b4"
        },
        "item": {
          "id": "dc881615-7283-43d4-812e-07293f37b968",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "9e493e5e-2d1e-4165-a140-074f7f6c7887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afe028a8-4bfa-48f0-8ba2-cd2691b3b22b",
        "cursor": {
          "ref": "9ed69b37-2840-4971-b6ba-7e967d9ff964",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "76039e6c-b1fc-4331-885b-7af69a7a6286"
        },
        "item": {
          "id": "afe028a8-4bfa-48f0-8ba2-cd2691b3b22b",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "fcbca051-9d36-43bc-9563-2806d7baf7f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b7cb23f-8237-4cf0-a8fa-3a8f160150ba",
        "cursor": {
          "ref": "0b51e186-8768-4ec3-8ea8-e2eb4e06295b",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "13a97ade-d88b-4bdc-9273-70b2dc697fee"
        },
        "item": {
          "id": "1b7cb23f-8237-4cf0-a8fa-3a8f160150ba",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "f6214e01-9439-4cb6-b64e-727de587b79f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c5c74ad-ec55-446f-8f88-9eaf1b274dec",
        "cursor": {
          "ref": "daf3db74-0616-42b9-aaf9-09e091e1d5b7",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "49c96d22-49ab-4d41-aea5-3f191e206b44"
        },
        "item": {
          "id": "7c5c74ad-ec55-446f-8f88-9eaf1b274dec",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ca8b7fe4-d69c-4a83-9409-e7bd5b70179c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cb475e6-0fba-46a2-84e6-fe78bbf33a9e",
        "cursor": {
          "ref": "3175f2fc-d6fd-4b0b-a5a8-b5eb9f52ea73",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "9572d320-55f7-426d-9167-882a975dcc22"
        },
        "item": {
          "id": "7cb475e6-0fba-46a2-84e6-fe78bbf33a9e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "4eed70a2-3d91-4448-9243-5f9c14e0d2c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24c94325-f549-41d0-9e87-9d88c7bc97f3",
        "cursor": {
          "ref": "7b835166-d8d8-4253-9207-745333fbe2b5",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "d545d9cf-95f9-4a39-ba9c-fdb5235cee0c"
        },
        "item": {
          "id": "24c94325-f549-41d0-9e87-9d88c7bc97f3",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d4b9b64c-2384-4bc3-a1c2-7c72da0beeb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da03d622-fc23-42ed-b130-3dc8209dbca6",
        "cursor": {
          "ref": "aee8e707-2cdd-408d-b0ea-2e9126e04bf2",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "aa2d80ca-970f-44e0-beec-fdfb44c30183"
        },
        "item": {
          "id": "da03d622-fc23-42ed-b130-3dc8209dbca6",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "74db82db-4613-4baa-aeaf-c91c11de8cb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd026a62-1278-4ab8-96bb-2cc3e753dd2a",
        "cursor": {
          "ref": "b4c996a1-d49f-40ef-9a41-bdf585e25597",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "aa5301da-5974-4618-9cea-828b11d65422"
        },
        "item": {
          "id": "bd026a62-1278-4ab8-96bb-2cc3e753dd2a",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "ea7f6506-7918-428c-873e-d16384e84ab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "37eaada9-590c-4b4e-8e8d-5db6d6107560",
        "cursor": {
          "ref": "751b34c3-d0c1-4842-8d53-45877c390ac9",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "818b5083-004d-472a-a8f9-e4eb44a27b02"
        },
        "item": {
          "id": "37eaada9-590c-4b4e-8e8d-5db6d6107560",
          "name": "credentials_verify"
        },
        "response": {
          "id": "70fe3e81-960e-44d9-a9e6-dbb25826e313",
          "status": "OK",
          "code": 200,
          "responseTime": 898,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "377ec86c-a78f-448c-bdb0-2b8c6a7167f1",
        "cursor": {
          "ref": "d2c8a073-162b-44fb-a66f-163cb3af288a",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "4eefea9c-24cb-49fe-9aa2-ea94a781332b"
        },
        "item": {
          "id": "377ec86c-a78f-448c-bdb0-2b8c6a7167f1",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "f19a7bc1-468e-4274-bc9c-9660eaf8abe4",
          "status": "OK",
          "code": 200,
          "responseTime": 739,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b0aa687-3b33-4914-9b3b-ea2c5fb842dc",
        "cursor": {
          "ref": "3afc6c21-f9be-401a-a3c6-890a6386c3a5",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "b7044490-2d19-471a-bcb9-9c661c3771b0"
        },
        "item": {
          "id": "4b0aa687-3b33-4914-9b3b-ea2c5fb842dc",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "4b0aa687-3b33-4914-9b3b-ea2c5fb842dc",
        "cursor": {
          "ref": "3afc6c21-f9be-401a-a3c6-890a6386c3a5",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "b7044490-2d19-471a-bcb9-9c661c3771b0"
        },
        "item": {
          "id": "4b0aa687-3b33-4914-9b3b-ea2c5fb842dc",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "c39707b1-5cf8-406f-ad86-860ccd15eb16",
        "cursor": {
          "ref": "e0a0b2fd-9484-4ad9-9bae-3e06f0c86b64",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "7f275137-adce-4dc5-af0b-d8697fae3dc2"
        },
        "item": {
          "id": "c39707b1-5cf8-406f-ad86-860ccd15eb16",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:281)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "0e35637e-84c2-4c29-9da1-29c72a9576c4",
        "cursor": {
          "ref": "8ba0a0d7-f970-40bd-87e4-1c67f0e12bdd",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "db7982d8-032c-4943-afd6-c44f83beeb80"
        },
        "item": {
          "id": "0e35637e-84c2-4c29-9da1-29c72a9576c4",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:282)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}