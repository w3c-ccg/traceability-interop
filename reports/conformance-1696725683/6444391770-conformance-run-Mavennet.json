{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "5092ec3e-f2c7-4735-a11b-4444aa6c3f1c",
        "name": "Clear Cache",
        "item": [
          {
            "id": "18c5cb0e-883b-417a-ba45-814602db469b",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "052ecde3-afd2-4b2f-b630-e3e7607d8d93",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4c2d546f-f33f-4e5f-971a-1b4cd90429c9"
                }
              }
            ]
          },
          {
            "id": "aaa33e1e-d2f9-4e0d-9ca5-39a935c3add5",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fce0f328-e3d3-4812-a70a-f867bf8c754f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a21ef29f-06dd-4bb9-b51f-0ceea64bebd1"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "4f1970d6-6b94-4d59-a7e7-e8bb7bf0f7fc",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d7a994b6-5a40-4db3-9e4f-40a16e8ea5ab",
            "name": "Positive Testing",
            "item": [
              {
                "id": "457bdf1e-4fbc-4f43-91a6-f8adb5994713",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c07650e2-da85-4fef-bf46-5d265c9ab51d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "88344e1d-a713-45ec-a306-cd650f5e7e88"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ebd29282-ea2f-404d-8cbc-f5833b8306c2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "296673c1-e893-46fd-92a4-299ba9d70d40"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "84dfde19-c992-45ae-b1e1-0398a1a999a1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "504ce8bd-c365-48bc-8e26-c211c2f98cb6"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ab44912e-cc83-43b7-833d-d886ba0487dd",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "9652fa01-70c7-4b9e-96b4-13e6f425183f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e58b823d-8ae6-42f7-b046-58d6701d3b0a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "03078f39-dc1a-4a26-84e5-3774803dd3ff"
            }
          }
        ]
      },
      {
        "id": "9eddf7ec-b080-495d-b317-bb4aa15d9599",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "18b86b34-8dbf-4d70-9e6e-689758ea9686",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5526de6e-4050-4691-bbd1-fca0086bcc77",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e0d04018-03bc-4f77-beb2-350e890de93a",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac985c4-86d2-4d03-ba68-9db33a316f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1ac2b002-8ae3-42f6-88a8-cac3b480b46c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f631c499-73d1-4c11-8d50-35441600cdfe",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8be0733-2f3f-429f-bc38-f40eb130a78d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4a44edd8-5e73-42d1-9ab9-3ee586b333dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee0bf0a9-2162-4bdf-8859-b5869679ca92",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0227e15-4e82-4639-9e69-e6ad7d270228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d5c57c2d-6778-444f-83ce-8890968aeaa5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1dfd9ebc-924b-494e-9560-35335f3760e7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4a6adcaf-1306-43b0-a008-200e78f7d7e5",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faf5a457-2025-45dd-a3b9-00edf26698a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5068a17a-8eec-4a51-aef5-12de55c9e416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4856d04-1510-4e08-9ed3-d851b840b712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c7388c7-5b9d-4249-a00d-82a4f4773d29"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "98d4371c-6e61-4357-a7d4-b2d6aa2ab809",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d41a394b-3bd5-48fc-83c1-fc52a63a4bea",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d85412d-3855-4d19-9bf9-e13d83232b52",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5462ce0c-2cf9-45cb-8782-ab6888f0a64b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "be620141-ab2d-419b-a9eb-53371869bf2e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "1e0f2f37-1d29-4b89-bee7-bfd999bb4b65"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ead5da28-1d1c-4e9e-9bca-a0a74a51a26b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2ab2d6b9-fd91-41d6-8134-519a3ad5520e"
            }
          }
        ]
      },
      {
        "id": "eb0797e5-9e5e-4627-a85e-e825c25f9d83",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "c414261a-feae-4f04-b793-ef4fcdc3c95e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9b2ad662-79e3-413a-9cb2-d00b39589b86",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "5377ae0d-f9d9-4217-b509-2868f5ec38be",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d82077-468f-4034-b3db-741fd7e94f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0417a32c-26f6-4c4b-819f-cba073cce0c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1141094-c32f-4b00-a39c-d2b54830cbe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fcfbb3bd-e460-42f7-8c33-3b8eec5e1024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "800cfc94-c0d8-4999-b258-8e0f768951de",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6888776b-1efe-45b3-99b6-b53d19809edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eca10c3-c8b7-4018-adce-cca7e686d0cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a81b4e9b-d248-485a-a130-ede909cf8241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2bc809ae-7edd-4ede-aed3-043d52688c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbcb25b5-91ce-451d-a95a-8a57fbc775cf",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c15a918-643c-48ea-878e-57879030b958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17238b5e-1b7b-4e19-9f47-7914e8ab7f43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2476d0b5-1daa-4b43-9105-e052e9c3b857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f878abdf-712c-4052-a066-6f028a4ebde2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72eb8845-918a-4feb-aaae-0b66052b9224",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dec5425-d718-470f-b933-a2414cabef33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33cacced-218c-4eb2-8d6a-44171b33d6fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77e380ae-0faf-408a-b17e-bf2e845cc4f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4fa3fcbf-0189-46be-894c-c4cfa325802b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bfc1304-0c36-4364-8d5f-f3d635958d34",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b71836a9-76d4-4b63-8970-3f8a3cb74a6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9080382-1642-4b97-8f08-11baa77b681b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30b6679a-a585-4176-bac9-58097746a6c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "680dea8d-bca1-4ce3-a340-7cedbcbe82ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d855ae0-d124-4c45-89a6-8b82ba0c0559",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ab7ab93-cb10-4472-a49a-cd0dca8f0151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57769c7f-9518-4a19-9e5d-38b45bd225ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb2ca371-5633-4307-90e9-720cd102f1b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "722e7214-04cc-4f0c-b71b-20cec0f2a38e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc86b42d-ce72-42fd-bf32-938222380916",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc3ec99b-7775-47cb-8ad9-8b935d244cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68fea746-874a-4c8b-9c9c-97c9ae2c81d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e79a047-b595-4e15-963e-96167cdb99ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "71d0cfa1-0af4-4fe0-8039-7ea707355157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c28e0b-383b-46f8-bc1f-a0e087aeca0f",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e24766ef-6275-420d-bf17-301543845b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a807f345-e607-4cb5-9de3-b885631a3032"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a29e26-152d-42b6-9afb-4d4c094a2a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c9dca7a1-21df-42af-bdea-1bea472e0944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fc4d56a-1c29-4696-827e-9c0dfc0a074f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0081b4e8-3e18-49c7-ac57-5399f0eda90b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e378889a-36ee-4367-9e84-f7843860fad1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a5426a3-8e62-42d0-aa36-8a16f1c2ad9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3aad915-b099-451f-aabc-7665e330533a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fad84555-9f81-4240-9d18-1450e8610230",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9acd7c1a-b193-4e14-82e2-cabec887967e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "254774b6-4c66-41bf-9599-07b8a29c17fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c86b585-7278-4132-afad-60f52b8aa616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f71313cd-7732-49d7-a89e-db6fe75096c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca5308d-f323-4dc7-b94c-0ab073c6bd58",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeec9869-8f25-4ea4-868f-c5a3b15ffbb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9870d17d-f133-403e-8ee0-03d773a9a204"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0370c13-bab9-4eed-94f3-eaf24c97131b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ea057a9-6879-4b16-a903-40b43b80479b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d0dd716-2c3a-4116-8800-184624a77b39",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8c8035b-674c-4e19-b801-8f2abf7f563b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebb94700-5b1c-4e06-957e-71e15160b8ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b5aed9e-495a-44c9-92c6-388a9784aede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "61d88aa3-d4f1-4c89-b218-dbedecf5d81b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae1ef69-bae0-4707-815b-62f8d42f5c79",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e46a261-8092-492c-a9d0-7554e7d6504f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63b1f1f2-0066-4d50-8059-fe06687f6f94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6047ff02-3e84-4158-a237-f2b0209fac63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5da0778b-2dee-4b86-95ac-902f3a056faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e5a09c-1d0a-4fc2-955b-42e694241ad3",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "886b8ad6-8b61-446e-a7a0-f24f083aef05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56f8347b-01c1-43cc-97d2-a809b6544e64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ace1c7c-c0c0-48c1-a5af-26ada25b2bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "35dd9324-1e37-49a5-b0ed-2b531e77a46a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01be11f6-2d38-455e-89bd-0b25c42564c3",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd2e044-966b-44ee-9fc1-23170e90cf7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9d72648-415d-4fc5-a55d-d5d20373f59a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb53b358-7c9f-4574-bb00-16293db22f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e196b31-9096-4192-936e-bfc0b72b2a93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b92cb3a-af9b-4ad3-b0f6-2c037ca107fb",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f541680-703a-4be6-871d-eb336afb730c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bab2758-d7e9-43eb-95ab-fc34e37f6339"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd739744-e28f-48fa-9cc6-fe0a745a720c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90506bba-a2a5-42fc-a187-86c9ad8f494e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8537a308-e195-4835-ad80-482eaa43e380",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "315eb311-fe15-4f0c-a63f-6a19e317bbaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54e2d214-b54a-488b-9fa8-ee15605590dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "276356bd-0103-4956-8d21-ef8eb42f7533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "657fcf95-a049-404a-9cbe-19a50cfda187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d6e9a80-2b6e-48b6-b437-394068e897a7",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff49b9e-0440-43ce-ad50-fc09f39d8c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba5855fa-db49-4c86-9915-506d0fa05e71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5ae56ee-489e-4a33-b7e2-bffcb7f7da37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b04dfa76-a073-4fa3-9cdb-28428e2f0dc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42081a0d-6246-4d5c-8987-0b9a9a555d8c",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df102acf-6581-4fdc-b37d-64200b76081e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dc7b8a1-c11d-4bc4-b14a-14057878209a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d58b39ff-6ddf-45be-af5c-431ac714c3cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4865a70f-37b6-459e-b894-808d4e0b13f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb8ddee0-91c0-4bb9-bd2b-4619670d96a0",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31bdac66-158b-45a7-aa3c-242fc36f0caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a7b24f8-8769-445d-b3f0-baf2bb69774a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64726614-3187-4fbc-aa2f-d2d6ef7430aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebcc5d2c-8627-4565-89df-e4dd087b4243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa4deb1-7516-412d-a064-5376ae4d5c04",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bce93da-eb20-49b0-bdf3-331ccd2b2182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be04ae30-5a4e-4144-97aa-05554ddb01b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5813a364-063a-4dec-8c1a-1bca5f1f2eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "54a5e3a2-105a-41ae-9f1d-d04be6e956cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b877beac-6c81-4e5a-a68c-a160d5e0c5f0",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84f06b13-006a-4594-900d-8f7b9d2bcd6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb4f816a-39a6-4217-9bfd-564188c4a53d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eff86e0-772d-46d6-abb3-9c182a845cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d75ba54c-4272-4785-8ebe-a5954307479f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd870c07-451d-439e-bac3-20caa3c53132",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5ec5236-5e33-4079-9f4d-e7bacb0b0009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdc6f894-43a9-4916-b513-316be24040c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f573136-4770-4e9d-a52e-c3ee8b786f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d122b6a2-aa2d-453c-82e5-60106b27532e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e08a1be0-89e0-430b-9af1-bddbd98d401f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8be1299-f7cd-444e-8889-ebb084509434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ff25459-dc34-4045-86b9-9d3ed3755af1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc96ed9c-75ed-4b7c-a4e8-daa3ddb10082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5653afb-fa35-49f1-85f8-f512bcf32598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78664f3e-9b88-425a-a362-3b0d24068fee",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a418d011-54ff-4cce-91ed-4b68d77eb85d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31b28873-7ed4-4559-940a-9c41b4328614"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "748d49e7-f0c7-4fc3-9374-37f348d9ab10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e89f5e3-4b9c-48d3-8b07-05378b1aee16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b809e10-dbd4-49cc-867e-04e3d5acddb9",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "765699ea-a36e-4b1c-94b2-f95827e6201a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adaadcab-d140-421c-a784-bb700871c758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c14d5d8-9f05-4a6a-add2-3f366926a3ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "39eeb688-66fe-4bbc-8ded-94f11f82d3be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f2a870b-3e93-4623-a0d1-aaf7f5c99ba6",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "295f4817-d347-47b8-bab6-aa250efcf907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2c08961-6f6a-403a-8fd4-bf2615dcb2ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bf91faf-a539-4f6b-a010-d30f445c158e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8083e472-58c2-433d-89ee-43325940608d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3740a6db-dc21-4537-8309-ed59ad338368",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deeb5bff-eeb3-4fd4-b88d-a1598f5272c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5048ba2f-948f-45c0-b487-970a466c0e0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94e63ba5-e2f0-4755-ac25-869ccf05c81e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0d51cf1-7635-4d75-9168-89ce5395c525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcc2a23c-bb65-4978-9c72-f58f17450c1f",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f849a086-b411-4758-ade5-69dc334e44b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86a1a549-2a7f-4e13-9b09-d04f0b8ab4ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5544ec8f-12ae-4629-a036-defe27135722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2828632-1980-4889-90de-7d9ccde3e9aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4c59378-abd9-46d8-9993-0d23b409694c",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c6fc7e-699e-4606-8d82-9c037d39be95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdd01579-8cb9-41da-8ac7-135ccfbe9c3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f9515de-a669-4fab-ba9f-32907a2de05c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "46427484-674c-4ab8-b62e-46a3d7659ef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dc1b0b9-07f2-4114-b6ba-19125a2cd918",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7694b12e-399e-4574-b0dd-a26aba336402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02df44da-7d46-47f2-9d55-bd854760bc60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05182acf-6f0a-43d2-99e7-07d609194d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b31bec1f-c8e3-4c08-90dd-6f3c3587665b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a42c5bb2-654f-4027-a386-c32b52f0f955",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b3adb2e-e03f-4fcd-b2e5-61c594aeaded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "937e2bce-2bea-442e-8bfa-09d880d83002"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b64f0c12-33dc-40c1-ad39-f01108e2057c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d89245ab-6464-434f-a6e8-4435b516d901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db28494-1e49-4e8e-8c09-cd73bda0a468",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f14dbb7b-40d9-4112-ab9f-98f06627d2a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bbe43ba-1eec-42b1-9f54-7a5d6c7f8c54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c07f20e6-52cf-413f-841e-aac66521c80b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1068bd1-f539-425c-92fb-204c49e6808d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07c80e38-4daa-467b-ae96-d128ef4ee91a",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64fd118e-f312-4f44-b54e-309d5b8a9601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65fd5d4d-2bd2-4a95-b5e3-f49069785c2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96604f53-bceb-4093-8850-ed394f9776e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "46d2c2e0-3191-43a3-8897-aaf6504592ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0957b8fe-ebe7-4875-9ccb-ab982db047dc",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f8776eb-f667-4e55-9bb4-b053bed8719d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59e84990-0075-4b9a-a0e6-0e2bc50433fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c3d2599-dacb-486d-9d35-ca20be7abf58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "f04efbd8-cb98-4d3c-bef2-70627e154985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b69c3f8-87eb-497f-9c11-18d9366c9b9b",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45cfb7ef-cf13-4fcc-8cde-dca5143e9384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe7a17fc-7b0e-4380-9aa3-c695701b67dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94a97804-74eb-4620-a3f4-b8a54d512900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0a73a5e6-6cbf-4b38-b960-00f2bd252276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "664c8be1-d7f9-4d49-a018-2113609903e3",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32f9df2d-affc-472e-868a-b26029241bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4f5f31e-571e-42db-8b44-4c820964a5fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d62886-7bf8-4579-96dc-51319b83f94b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "97226709-7f60-4a2e-9e6c-7522c50ef857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a394bc9-04a5-41bb-8f02-b5c2a62db998",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bbbe23b-288f-4b88-8031-4720fb97c4a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e31d054d-fcf7-48b9-afff-c11ba8ea2b2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "479d8156-3b0d-400f-9a6c-37b0db2a9084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd6591e8-a604-4e81-9eaa-3ab25e0b4c41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b95e01d0-a3b4-4016-a72e-75301a6c3e2d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2298921d-328f-46ca-9b0d-f8999d3e1fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39c36d0f-273c-4b0b-9360-dc2a08c9660e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad08f7cf-cfbc-4065-bf0c-197aa6141c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "78eb8650-9860-4410-a95b-86b69e0e289f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3502e2ef-c35f-413a-9387-6375b72adb6b",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ebb004-a183-420e-bacb-ef1824953308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84c7635f-cef1-46df-85db-3b72d99e521b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1600026e-0d43-41a2-b4cf-915fe34a18d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7fa4960e-02b4-49f1-81b3-1c01de68f7a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e451eff-1631-47d1-876a-dcb582f0dcf5",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0a7c1de-728f-4ed6-8068-5092df6adb12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8726ff7-7a65-482b-9bbd-24588c5fcfa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4cea350-1cac-4ad6-80b6-524aea44675a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd476280-dea5-4df5-8d47-f3391fcff9ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e0de9a8-fdcb-4169-ab64-66442d39784f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0431aac-4d93-40fb-ac3f-b2e53cc81b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9c313f8-022b-4c5b-98af-61d9b31c8a2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd05a79-3b07-4830-9fe4-4afa5eead08e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "7692efe9-1586-4358-b119-afe1f656ad27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "361b5c73-7b72-42f1-998a-5dc46c5f9b70",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e941a496-75ab-4982-b25d-2b24639ef789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d7fae47-c487-4fd9-97ac-265bc9bcb41f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "918420ad-f1c2-478d-98c8-b20968aa60eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad9e7324-d346-41aa-aa77-6c1747257f96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f40cf76-e744-4dc6-a76c-bd8d2e069786",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd8e52da-b2a9-481d-ad9e-f2f3795de950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac182f10-c31f-4335-b9ad-1e6306213a1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fb08d32-eac1-4818-aded-ff648bcc5f4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff662ade-1dd0-4e6a-91a7-b0096a37e5af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "316b62af-15ec-49fa-bda0-352a9ac72a47",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae44cd3d-2208-4be9-a07c-31ba5b60fadb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7438e57a-d30d-406d-8ccc-da070f9d6c43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be8006b8-031e-4787-89cd-e6becc24ac08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5e02961-b311-4ecb-a5b1-408d344c73ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1933fbe7-ee3c-4f72-bfc4-44a5b4cfa54f",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "812c7d63-a886-4c5a-b450-c14d10556f5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c789b7c-9380-4597-ba62-eb0f97035c8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e762e69-236f-4a86-ae1d-33fc7d5f7364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fdaa9b59-94a8-4603-9dd3-4528e80d4cf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aa52551-e72e-4207-94a9-4d0f731c1e11",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae9afd33-e038-4c1a-9946-ed911882136d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4529bf9-b6bc-490d-bcc9-3e0d8237f206"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5bb53e4-29fc-4868-ad84-de16f0b4a1cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6dee8db1-3734-4d35-951d-56955e78d453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b3619e-195b-458b-a7dc-4d7eb40eea67",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a30a1890-46c1-482a-ad3c-092a5ec8d1c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f8131ec-00fe-4425-9bfa-0115562ba3a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f1d3f45-bd5c-467d-b964-3adc6f87b17f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f460254e-8ca3-409b-aa64-d6d0a24e7133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad5c911c-ecfe-4da2-9ca9-b62d5170a8c5",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b0e9447-0a0d-4846-8e9f-a12ff9677cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ce2ce8a-717c-45e5-b325-5ee9fbe7e391"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d96bf0e6-9a3d-48da-b107-746ef6559f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7358911-3700-4475-b198-d045e94a955a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0555fbc1-2b23-444e-9b93-083bea6a51b0",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c18cc5b-a3b2-4810-a53d-9322ba4a9dfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fed6fc3a-bd9d-4d5b-8442-072138c77648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc8f36a-cca6-4251-b59a-6af554602d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dfaa5232-4e0b-4d98-b4f5-c16563f9a1a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cd69df1-766b-445a-b7bc-b23735c0399e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "897bc73d-0ba6-4ade-a4c7-1f3c0307db68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5c4d40e-45ed-4b7c-bce1-0da99014e733"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e19d20b8-266d-4841-8683-4056fd2b3190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2d1556a-2697-450f-8c9d-a2e8122c796b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4546f8d0-955e-4ec2-b5ab-54ada2a9f20a",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff94b5b-4a43-4fdb-8ca4-1ef0add20c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3d5c44d-b2fc-4358-81cd-c1e1eb561fd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97dd4e96-dc8c-448d-ace2-188131aa233e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "915665f3-5ffb-4105-9139-fcc536a7c4ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07477f0d-6f6b-4de6-9169-a7b07e90e3c4",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0265f6e-39c3-4070-9495-9a244ef7abbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a5139a9-d464-47fe-af9b-de7df7f0a7ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "761457a1-d565-4487-b444-50056be93a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "95160ea1-17fa-4be6-80c1-17e16cbceedc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad4c3134-c86f-4540-9966-62053a49983d",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a80602-6eea-406a-83b8-088bdb7ab3f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "760254a9-caa8-472b-b444-cfa0cc5b2e3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "245a90c3-bcd7-40a7-9bca-f8c6684481f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c04ac947-64c8-4e9e-bd09-f44dca35d042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6e03be1-f811-4382-8fe4-88c47ed32087",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "012d95c2-840d-4b7e-a182-f956ae00fec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32d8c6eb-0fc5-4095-96ac-b08eb1a5feb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fb74941-5bec-4ba7-93cc-2f3d7ffb54d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d77b1c12-c568-4d05-9b03-78bf3fb80ecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94b56ff2-cfca-41e8-b2e2-e60d478bd93b",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e8f98a8-2617-4cac-810b-a33d7aa186d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e674f842-d309-43f5-b45a-239b468060dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cf632ee-281e-4684-9ad3-66c5c6bcaf97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "fffc1f6a-852a-4e79-9eac-d947d730a31e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c4b93fe-7884-45af-9a00-3656e39affb1",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e093906-e628-4a16-868d-39369e348845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44eeb3b5-73bc-4a38-a05b-46a2a27b893d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbca35d3-39b2-4bef-b910-0c1ef3442e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c73fdb3-8431-45a7-b5c5-ad13c434b2c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "326eef14-fd1d-4af3-aa20-62453b59da54",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f3b77ef-167d-419f-8c78-08df349ed577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24447fb5-2591-427f-a1e4-e0f140c2dd71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f70046-8a58-462d-a162-d9325029d5d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bdb185a4-6e1a-42fc-9c48-24649bf9dac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd9c9af8-5ee2-4a2a-84bf-b9e11458f46a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4dde04b-7767-4302-b252-92e24662350b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be8858eb-89c4-4c28-9490-d5fba81611b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f260395-7fdb-4469-91a2-23e43c21832f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b56c87ad-0d5e-432d-8285-8e01df328054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1637b7ae-65c9-4625-b149-110d8fa7d75c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cfdafb1-e960-4cf1-a34e-e89744b41897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf6d0bc2-3a35-466b-aed9-23879c9cd55d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93688de1-d9c8-4594-9f22-4091b0c4815a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9163b16c-1a37-4a32-ba3a-60a15ae46605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01d81604-04d7-4b9a-9bce-ba84bcabe665",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da8c365a-9bc5-457d-a0aa-a81717d0005a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c2efa28-d124-4a3f-8df4-d447088ce7a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed9f1b46-3979-430e-a60b-a6e99f38f504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2a336c1-29ce-4489-b8bd-182ce7a848dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcff0c60-c8e8-4483-b442-ebe355372106",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21a439b2-3235-4418-acb5-7974f7a69038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e66829cf-9c6c-400e-afc4-ac1a53950f6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcc27c04-8747-458d-ba36-f5d2fc073f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "50f22060-d1af-4b1f-901f-6dc2060017e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "756e6a99-d9e4-4a79-92ef-13f636656df3",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "424f91a6-1e44-4570-bc34-6850f8a0d085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d66faa62-f966-4b19-a80b-cb4ee8134461"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "715f00a8-d5f8-4631-a64b-8d96f29266e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "77d0e5ea-fc5c-441b-ad02-b373e44cd303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6731af5f-b4d5-40cb-b374-dae817440524",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d5841d2-5edb-4220-bfee-edae11a87c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0bcf994-6ceb-45ef-9ef4-e0208f5cf467"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b00df9b-bc5a-4ea2-920e-418e113d2c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ae735c4-ed79-42ee-80ca-d368aa8a21ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7a8a00e-4f8d-4cee-9492-dcda56f8cc77",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f9f03e-4402-42e3-b074-a6bc876f85dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa7d357f-022e-4ba4-867d-3bc5bbc93ae4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b94618e5-a643-4679-840f-d22864a96915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "31ce948a-108e-45b5-b640-ba7f58a52ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8b3113c-d34c-421b-88bf-ee5a2adb5afe",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74c35622-3f7d-4a07-8776-70e5a92d147d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cdba98d-9eba-4a4e-bde7-e33d163ab409"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c3f1f19-fa50-4d9c-bcf3-0afa22fb2d3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "40e085b8-96c5-44b5-881b-9df7f08d33dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64fc17c7-582f-468f-8277-e49c188c0104",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58198d4c-f099-4cc4-9e0f-136ea5711262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd2ab6bc-5e66-4e1a-9dc8-726bec1d594d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f23eb9a0-cd52-4653-9abb-a8d0851ac932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5d4876f5-fc71-4535-8c54-dea8ec5fe591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3866b90e-0965-48ce-8ea2-b889ae9ec9e0",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "769e275b-3d40-460d-9c44-a6f722565dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab59e681-07e3-4007-8b84-422e65e5c844"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08fc74c4-9b20-4204-a3ed-8cc7caaf7ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f58919cf-e50f-42db-bebd-7f6cdd64f4d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6faf8e78-ca2c-436a-a8b7-e0483a1f7151",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da3073a5-ed0c-4bce-8e89-043f00485e7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25c6f660-cd36-41d8-af6c-3f2c9d238569"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e0550a1-39f4-44c7-81c5-a0fac617e054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a6952ef-80d1-407e-99a1-999bcc4b1346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ffe78e5-49a5-4347-8867-1688d07b2494",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac1c0d1-7f5b-4f75-9914-20974bed1202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc8d45f0-8163-45c5-971c-fa9d855cb156"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "459489e5-6d4d-48fb-ba05-8d6a1f01102d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "59d1264a-058c-435f-8384-4b77492e3fa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84090a66-27c3-492b-83ec-4f600c38b42d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75364a7e-2c4a-41c7-9527-142e0dcc4d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e000b96-7cf1-4977-8b17-6ba0df89d466"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de5c946e-e8f5-4518-b3ee-fde867d6eb0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "33d53b73-425f-4acb-9c1d-43b77baaa8a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0876620f-faf3-420b-a74e-99da47177177",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "536d6357-5597-4b08-956e-b1e77832b7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c6dd056-3337-490d-96b7-c75098b5f720"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a71b16-9aec-4899-9965-a2cf1134edbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "938b87a7-4abf-459a-a0ac-7e7d7259005a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01e9d8fe-604b-4eec-af6d-e6e7f585c6e8",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "389fddab-4b5d-4059-8d8d-ab62e4f785d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd3040bc-6934-47c9-b315-9c6d3ab19d7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04001637-2334-423e-a02e-38ddad9b9770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2e8600d-0936-47d2-8ded-343420826aa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e4e8738-d953-44ad-85fd-b6df631d8fb4",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef17de1a-f239-4760-abb4-e745b28000dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "413e04f5-3423-4a14-ab96-47eab3db57e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "007f00f0-471c-4924-9c92-24721d2d85e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "39f53320-38d1-4288-bdeb-b168fb3de143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d46b13b2-86e9-4eb6-a970-15c8c52dc3a7",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3cd06f0-8423-4f9d-b9f8-b8829e866e23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c816fd35-bba8-458c-a4ad-840056eaddd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1448879-cd1d-42c5-a896-d2039a55225b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "07f94bad-8315-41f0-887f-fc3946c7f283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da78a3a7-f691-444a-9ae1-9935d6e36eee",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48152f9d-935c-4447-9e4e-82c4bffe093b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66e2bf63-1510-4b20-9601-17915d041916"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5457c65b-02e5-4044-a98a-16a8e640d456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9180ddd-32ab-499a-a3d1-5ca80310014d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbee3891-dec0-4bd5-9fe1-0d2a67130314",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd5192ae-a15b-46bb-9b3d-b10d55ea6b82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f72e6d22-92e7-41f6-a155-bc1c89627d9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e1bbb47-d3af-4c1d-bb15-d6d85b88a487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4d12c45-79ec-4a8b-97aa-dc4ca3e20c66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "966b2699-69cb-4af2-9228-cfa5d9d33794",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e69ca31-a12d-42bd-b72f-bd23b7de1dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2a95876-7599-4583-9e12-8e896d6b5e54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8492d44b-d370-4df2-97ed-73af00531149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0443297c-15b4-4216-bdbd-9bf28e7d9417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a512e99b-e683-4a1f-95ac-4103358f0598",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e543bf-8c52-4f29-be12-592f5b6e3e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43ef740c-b43f-4e2c-a801-7938678145f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2852917-b7ab-4f8b-92fc-ddd4972843a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e81e2fe6-a033-4beb-a3d9-f34ccdfb8a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f02f1b8-a2ed-42e7-9d00-a8a4e41e8887",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59395037-13af-4207-915b-a9587bc2a004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b712d3e-7720-415c-9f7b-093ccacb7592"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7625a233-865a-40c1-8018-14417b81c095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "00a4267c-b42e-4286-a73d-bbd6639bbb1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c3b994c-02a2-4c31-9ca9-067ea22fbdd2",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9acfd79-a907-4580-8e7f-2feb9212df37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1dea50d-59a7-4794-ad9c-a491ad38dac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9c3e08e-6bf4-4d8d-9cb9-383c5ed93455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd3d49fd-23ce-4d6e-af34-24a4aeb6776f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7fe96a5-a422-43a7-8284-292510294c93",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb074b2c-719f-4486-abe1-cc53d3b5b688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f059e86b-e1e2-45c5-9de0-1603ecaa8d5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d870a832-1e24-4018-aa7a-b50e98d5f1ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d4afc91-fe1f-4376-9a12-745c648ca57e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b169d515-cf3d-4290-88d3-a4cf63a05891",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ccb1a5-eb9d-4516-aea4-c10924e57536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e334b29e-4517-4b93-8379-178d429d4d56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec1da126-3e32-48d0-8bce-bb44f19e41ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3dfec9f-9748-4046-ac29-ce8d3cae0c46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f71c8779-51d4-4bcd-b737-f93775a10d98",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df685dd3-22cc-4c1d-8633-44205e6f6a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "806e2fc7-e500-4220-a0c1-08f63943fd0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cf30b5e-60aa-4911-aaa6-4e5852e51c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e742c24-54d6-4cbd-9720-d80e37a00df7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fe89d7d-6f40-40a5-8b6b-d8339f72c6a8",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f9c026a-3286-44a8-8361-6224faef4b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53c089f2-bd51-430e-bc9d-49d95e0a07bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9916fe48-0496-4484-bb3b-5744ba00a562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e01f2a8c-050c-41b3-8928-4c2e230bc2a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb57ad0-17c9-4aa4-960a-7f415e3e7f61",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b9dc6e6-947c-4a17-bbaf-abdd4a234132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c551419-c8e3-4cfe-8678-85c35646d873"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "547054a5-98cc-4726-abf4-9b5587355d0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ce37a42-b9d5-45c0-b834-c1cb1a127e71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca06845d-20bf-4e74-be27-ac33ca1fa144",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eedb9fb3-fbbc-4a98-a52c-5e17b5089621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62789007-cf4e-41ce-84e6-36055c3072f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a32d3b8-9105-427c-a85e-1db91dcf265b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9c356c8-c90a-4746-90ed-78091bfd9a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e2eb85d-e875-402d-b7f7-abd0ba7a2ac2",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b35b052-0e14-427f-b29b-903a2226b2e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4be300a-d94e-498d-ab2d-5401802e001b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97d76827-204a-4434-a7e3-879db4063eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "128543a7-2093-4fe6-a366-39a9fba583c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9c24c1a-7e69-4fa8-a4cb-04670211f711",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46721656-372e-4157-a817-0059cb08939c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7856844-7f75-4540-b0a2-232d2db60a1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc12144-63d2-434c-b1f9-d27d11a7c020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7354691e-764f-4287-ae7e-8efde54e0b59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68ce5a1b-dd1c-4751-9304-cdf66701b2d6",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e008076-8e79-4f4f-80fa-381ef429a999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60e884ee-9bcb-47bf-a372-8beed9bdbadf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "866375aa-825c-4fa7-9369-f7fda78dbd32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "df9050fe-f4a8-4946-aaef-e2c50af824d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2cce084-5526-4ddc-bf0c-7429d5454d6d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9c122d2-8e41-4292-a5f4-fd7b44b01a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad1fa596-2918-4f64-9f7a-03bb81ced61c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27689560-fc12-468b-b421-200f9c5525f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3bb6a784-e3a6-45ff-b77e-189c56d508e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb453a4b-3eaf-4ee4-8b1b-a32d7e581f09",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ea58377-a2d6-49bf-90a3-71ccf48db650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9249a8eb-d4b2-404e-8744-143441e702b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c57aa4dd-a4b5-4b51-9da0-a1f109d14d3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "99c1d9ee-7f25-462d-8966-d89ba5244688"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6ac84d51-0a7a-4c33-8a8a-4c793812cecb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e4cb964f-50d5-4e6d-8add-3e3ee864c3e3",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ca2157-459d-46ba-a6c4-b2a8e905e832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f8bd7355-34bd-4572-a58f-10c3e89953bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0cb8940-48cd-4fc8-be89-84a693c419fc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e42d405-875e-4566-ad89-d9d9ea2bc208"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d29f675-38af-4c50-8a4b-cb68ebf480f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a6a8096-c908-4057-88d3-fd526a7599db"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ccf7606b-ab30-422f-b557-6a5ba16d212f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af288a9b-0c37-4cc4-beb4-dd33f6fd5273"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e254ce9a-dbb7-4a57-afd6-0a4d5739c951",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4dbff60f-a909-461f-8716-d520b641d08c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "27d1847c-5fa7-464d-a588-3bafbacad6ce",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "02c71947-c805-4877-b20a-d2c09dd5b869"
                }
              }
            ]
          },
          {
            "id": "6b7d2a16-bb98-4a4c-aabe-17b1e6ed76c0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "21fbef50-d108-40e3-a4bb-a81b9d243bde",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "75a75b0d-893c-49aa-94d2-be3172a3088e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9d6218be-e6a1-4f72-8288-4371ec976dc2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a3f9530-36f1-4e01-9e22-2f1b1c2d162a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ad56c776-023f-4500-9206-99808a7ec6d0"
                    }
                  }
                ]
              },
              {
                "id": "79b34fb3-cf25-4597-8e09-bf6c70a35802",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "949864bb-4d55-4cf8-926e-2d6c6dc06c90",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "088ef76a-99fe-44f5-991c-42e57db0ec7e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9e925367-d2ae-4f31-b0f7-6718e8186386",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "796cca4f-4aa2-46a0-802d-e63925cfd0d3"
                    }
                  }
                ]
              },
              {
                "id": "c42455a4-f53b-4f65-977b-2295930768fa",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ad4bb2a-da39-4ece-be30-68d492a72281",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2c0b95c2-777c-42a0-ac5d-c414d00ecaeb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7f7dcef-e519-4a86-86be-1ab1af0da7ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9e336ffb-babe-493e-a6b8-f7ca20805dd1"
                    }
                  }
                ]
              },
              {
                "id": "34914811-7e73-4f99-a754-ab6d9e59e82e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6fff85a-eba4-40a3-bab6-a73b37ecfc24",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8e7a8f47-225e-4233-be46-0a8593b9d66a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b777e74-1994-4a32-9972-992ac15269e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "f5aeed98-bd4d-4f54-a76a-2c67d22603a6"
                    }
                  }
                ]
              },
              {
                "id": "14c3d469-e15e-4868-8fda-3ee6e55ed646",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b5f71940-b9ab-47d6-ac12-8dcbf176322c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0f468028-6883-4a3c-a6d4-2d99b9183f3d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2653a7fb-0e79-4723-8dea-73335a332e40",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2ebf7c0f-f29d-4e43-a801-97f40bb06633"
                    }
                  }
                ]
              },
              {
                "id": "d0ca8081-74c5-4fb2-9ee9-e54dcc72baa0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c3f4a19-817b-4e29-8f12-2595b6bc2e82",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8af4a283-09e5-4193-b152-103a3848dfda"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c62e355a-554f-4347-a12b-2cc34e60bc71",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a8f9c420-6f17-44e4-9593-dfd5d982d438"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "20e48611-7b71-4222-910c-6f42a89aeac1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "28dc84cd-2221-4391-8849-5923c60e31eb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "53dde3b4-529d-4c0f-9a24-f16170e6b3f3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7b1c2e91-6a3b-417b-8083-c03a61ba031e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e40fd9fb-f52b-4686-8551-2dfcc5d54be8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2c274ef8-681f-46b6-ab21-3afde4d2785c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "42dbf501-732f-4616-a962-9662a3639a6b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1be7be5b-8b15-4208-a851-dc4a29d2194e"
            }
          }
        ]
      },
      {
        "id": "39be96c3-eff2-4f29-b125-7da79825ce5c",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c22742ef-9689-4048-9f8b-7a89a181bc00",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3652e044-5187-418f-85c8-b261cc56fa30",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "df17f4fa-3a40-4d39-8bad-144fe7ef9122",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ace0af3-e471-4ada-8920-3b448fe2a4f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70e94e48-8f06-4d37-9e14-3597888ed08a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82dcaeb6-6ed9-4b8e-8f4e-4dd28666bd3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2a5fe91-305a-4214-9b3d-6e9a52b8ca6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91fdb650-6f59-45d6-9d6a-c4b508286dce",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7b7f1eb-a613-4ccd-acf3-e10d22fbc2d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71e2d66a-70ab-472c-aad4-b698c498e027"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57e41dad-37a0-4c0c-a998-6dc2ec616b90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "72b61e23-2efa-4ca4-a06e-716a20d91314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c3e688-8c9e-495a-adaf-0438d6bff225",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b49d0663-87d1-4928-b262-fda35a208987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf6a79a6-527b-485c-80ac-975551a9e59d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17572518-4b34-420d-b47a-db8be3529cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fcbb4ad3-0fc9-4ed2-8284-5b2083f7061d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46270c60-0175-4443-a179-82ca514a90f3",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8342637b-2e51-4cc4-8052-74963889431f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d8f2991-ac06-4d5c-af9f-3a26bbecab63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af53a121-8d48-4cc7-be91-a49fed735ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bb27eb3-f030-4cd9-8d38-bb57e35b0a19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d404e56-2579-4b9e-a30a-6ee4bdfc93c5",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8816edaa-3afa-454f-ae69-675b48b88c0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e448e62c-3181-457a-bdcc-14c76640eccc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e6f246b-de42-4c7c-bda2-6da7d1d2083e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "993add99-5483-4a3d-8fdc-8565a9eead88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88765cc1-d56e-454b-b4ba-276ea3371690",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3650035-2902-48cd-888a-1ea96ee5f576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3299594c-2359-4bd4-b2c0-a9a08550b226"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2427a30b-eeaa-4738-998c-ea38daa60e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "16a409d6-5f63-442a-9dd9-cd076fb3a1e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b74629b7-25e3-48c4-9cb4-f6c9216f544c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f574550-cef3-4bc7-b599-2685fe52272c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a87c2ae-7aa3-4726-9d4e-e289c6609a41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d984cb38-1e1c-483a-9c07-ea3905e7454b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "bad94ccf-1582-40aa-9020-7aaaa416006e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db8fb80a-b175-4062-9db5-0385adf5470e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "800db3df-2c12-47d3-8743-ce186a2abbb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23aaeb5e-a341-4b9c-b0e1-092e1cd0a1d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b107708-58c6-4556-af01-3b5c98511319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "acfe7869-7a5e-47fd-b531-b550505b54c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d9aa5ec-6a84-4768-84c0-ab17e553c213",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc4f6fc-f16b-4946-9a69-afd691ba1fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17dca072-e20c-4da0-8b4c-b4e9a768c517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d10eb62-ca59-438d-a194-2d6ddffde261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c8d4c65-1021-4946-8cc7-8389830b843d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0639e120-930b-4af1-9936-c4214c67e4d8",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "324e8109-c3f5-43c5-b11a-cd0d2c911452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3aac9b6-152c-4a45-9e10-e5a0c0dba8c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91893e3-c898-4ee2-a108-8a9a82ce0747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e743fd78-2c02-4e18-addc-17222e0a6353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a148ccc-a954-4d31-8ff9-199d3dc29a64",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb96ffa6-ab8c-41a7-b178-9bc021afea24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e924f4f5-040f-4431-b5af-088bd74aa43e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c876d250-e11f-4557-8b11-fe35a0d433a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "824e8fc2-9e42-421b-934e-9f11b57b6c44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ea3481-3c83-4c45-91e4-c1191a6561e3",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90e61f0c-0ce9-4a20-8f8e-bdb61c9781c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bdaf4d0-a785-48ec-ab6e-b9c50e968be6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "241f7398-fdac-4dd9-ab35-6055e29e4503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a9adb848-a143-4b4d-8a85-a84e9a9852e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b56dbf8-d95a-42c3-949e-c41a04717dd9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce23337c-fde4-4593-8365-d2f297c3511d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c4492ea-1f61-4bdc-b951-b3411aec8bbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "216ae3b5-7db2-4b02-bef2-5e8fe01c0785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7e538ba-6597-4b35-8638-9bd3c29ab633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa21b43-8c56-45ee-8771-0d5eda7df7ad",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cefb0eb4-8276-41ed-b702-353dddfaab8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38741744-02b0-4e76-bc25-b9d45c83fd1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b78d58ff-b37e-41b4-9cda-91101c5335d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6955e885-884f-4208-8ab1-d7f2a2c23be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f32dc403-b776-4714-966f-af26b7dd7f01",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d0bfed-1cea-46cf-b133-fa3ef87cd664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "193f55e0-e0d6-4b48-9496-ea1e7bc07476"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d522868-202b-44ba-8a92-948aeae4cb0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0377eebf-763e-47f4-95a8-1e2071d2658f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d94a536-97a9-43d3-90a1-65c767bc8ec6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baedad5a-4923-46b3-b329-4d7fa611bac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8a444f3-edd4-4c4c-9222-e525b4db6de2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02a07ddf-c40b-4d97-a296-f967c32a6e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "24478763-94ce-4a59-bd2c-4ccac0117497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89e9b5fe-bcae-425c-b1e8-29693f604385",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f0f0c74-62d4-4a7e-ad1d-cfabbc6bb664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef10a58f-f120-463d-a2d7-05c33f523742"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ab2d7f3-8313-46bb-911d-738f11759f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "4df5c644-fe85-4c3c-b229-fcc6104c1e12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02af496c-31e0-4d91-9ee2-2c5f5442b3cb",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa1fca4a-f25e-47b7-a96e-f3ac5cf25db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0731e51-3ec0-4096-9f98-d0bf71bbadb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b78314e-a7f8-4ddb-88b1-1a1a2a96f6a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "166d9e45-54a8-487e-8dad-8ba23944f2dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b28e1aa-fd48-4c29-9a1b-fe2e457960a1",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f89e14ff-5aa4-4ecb-90f0-ec28b813fe3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1523cc3-670c-4122-98f6-66f29558b4ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a16cda14-aab0-4121-ba51-f41b6c832634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a912648-ad42-4ee4-a329-2b57dc0bd8b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a73ff35-9dfa-4b2b-8328-a14c9a9a4799",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2764a22-7935-46f7-a864-dba5c34d2fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d830bf5-744c-4f31-b86c-bae2936d8c84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fd7db5e-1508-48ec-919c-c5a05efb2245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "342a0764-9fcf-4d23-b39e-16009c1d0f97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45f8fee1-0bc5-4907-8e4c-35dd472aeae6",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1997416-4f55-415e-9466-11e869e7c45e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fccc797-9529-4662-b443-ee81bf3a84dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f83ec568-3846-48e5-8cfb-ecbdaa65a0d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c06c3b60-2510-422c-b47d-b459b784f77d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8dec6bd-f529-40cc-b3bc-8a8bc0451d1e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97a4c7ac-be04-4394-bc3c-b65c0756e608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c969888-f4bd-45b2-86ab-f77a87fa5081"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53778503-8424-4edf-b06e-07ce522f5758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bf9baac-c2eb-4607-a569-d57e97675991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "780f3105-972a-4d6c-be7e-f94feca14088",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "365903cc-3ff8-4dab-97cc-e94dcee858e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52750ab6-0951-4757-a18f-d70d97f4cc43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ca6742b-d72f-45ba-886d-5d2f3bad37ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "833952a4-33ec-4e34-9142-dca5452dc039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d4b7364-d956-44c4-8298-1dfde83446fb",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe8d2e6-73b5-4e6c-b450-3eb55c4aecf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77156923-26bf-439c-8ad8-6ddd1c1d55e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a9ca6d-4c62-44bd-bd98-a4551a69b679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "635e9415-3747-454c-ae90-423bce77bdcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88972d04-5f67-4f3b-8a4e-cb9b1201c64e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43122846-ba62-4e67-b710-9413770835ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ea0b75c-8dfa-4bc6-9a22-060d6c732d68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "369b08a7-9c1d-46b5-919c-8900a62f9b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd5efe04-b30e-4aaf-ba85-03645b40279f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43e64dba-2d33-41dc-9d83-568f9b760249",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5383a3a-72bc-410b-a92b-5fe3c1f298af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c2eadd3-e9fc-433b-be89-0ad64424e6f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0424a4d-bdf5-400b-aabe-e57769e6d2c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de1be76a-71be-46e1-b1a2-a806b6246c64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4624c04-efa4-49eb-956d-8de1c728b1f7",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e224c5c3-ecb1-410e-88c7-c65389e120b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9780cc6f-6f90-4283-860a-1953e2d74055"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d339df3-644f-490e-b492-4a519685adba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53ab8919-8615-4d3f-a4a1-5c7be29e5670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63c1e961-4c26-44fe-b26b-a0f81662e311",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4944a4a6-3e44-47db-b674-e56870012c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dabd79d-64b5-40a7-9658-6d6bc10ea559"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49bb87ae-aadd-4347-8871-ce402a677c40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f5a7f14-4128-45fd-8f10-b6408798b3ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca9a6fcf-339b-475e-9f59-9b4aa552f649",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63154743-81ab-4979-834c-998391a126e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28f26d0f-da4a-462e-aa3a-f08ae0dbfb65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b110f02a-80b8-4f00-ba31-afed8bb82b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b837d40-9156-442e-985c-8ce633148cb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a52e5edd-d0a8-4c34-be5b-a98d60c04d55",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2434a37-4fcf-47a3-ba5a-fc9e54dd0242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0be1c8d-b947-4423-800a-04bd23c27295"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "044565f1-8be5-4509-ad94-61f4bc4f9946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "243e7974-ff9c-4497-950a-2b1209c89530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26578ff3-ca18-4dbe-93b1-46877499930c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2a80acd-7a4b-4e13-95c0-e39dd9707b69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "891a0252-69e4-47ca-b84b-38e0eb469c58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e90441ec-c3e8-4514-b9a2-b205a93f1864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e3f0663-93af-4ea3-abec-760510df899d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4977c259-2e7b-464b-b104-95639dd1dde6",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03b9cae4-7e8b-4f50-9c55-822836c4d34e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb539d30-4341-4895-8339-70a8e57bc21d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df581e2-620a-4e66-acea-a4f92b09b378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "873645c4-0e4f-42d5-920a-b2ef9559db70"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b3a1acd7-24bb-40da-b88a-35e81062cc87",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "385da30c-ed72-4e1f-bfa5-46c67624efd6",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "273bd39d-2058-44dc-849e-88995ef3135a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a281bf11-66f3-49c1-bb48-1a190c4dd940"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0ddd8c3-d8b0-498a-a609-318af05ace2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b172238-bb51-4e0c-99df-cc8b3d52e340"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0a7d6ffa-649b-43d8-85ae-bf8edc5cd181",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "65a509af-cc69-4bf1-83d7-db8cc0d8008b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1a46ecf-8105-43e0-8723-8efef913f804",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "962af5bc-9db5-4d48-94a7-b889349d12e7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b27370c7-78e1-4570-b2b1-606c37555842",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "16ab9b5d-84b1-48c7-a957-1b5f9746158b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e0991c38-6f07-43e5-8241-0432f3fe1c03",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "613ed35a-789a-48f7-a091-4ba9fc4cac12"
            }
          }
        ]
      },
      {
        "id": "37ba4f39-1666-4a39-b56a-393ec8b0f603",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "bc0d9bed-c95e-4a67-bbb7-7f8e4e99c360",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5346c307-5a66-4d6d-8c0a-b40d525440aa",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "54fb3287-f400-49b3-ad28-97a092be7ed2",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec26fc5-80c5-4a7e-b6ac-297eeb0444d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "716f1f71-aa3a-41e3-bf48-c5ec0de6fa64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a05ee250-de0b-471b-aa8f-e771d2a8a154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cf00cce-eb5b-45f0-a501-1af362a7175e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff95dc30-1668-4ea6-be42-2c406d4eb5af",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccec67c2-ac26-4686-9f13-4f6c9e3dbf15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0a8c451-3b96-4e50-aaed-79f5020bd77a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0becea7e-97df-4c62-ac12-a7f20c122e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6495beb9-8625-4176-9088-8cb2b7a5c0fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca7a3395-e9df-4bf7-83ec-689bf33523bc",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf2d3196-4927-4924-9a64-9cc66e29064b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62f37243-0190-4f86-984f-8051becc27be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c57fabd-99c8-40ca-8729-f69206b53c8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6d5080e-d70c-4287-b9be-3a85fc154dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78224733-2ad6-403a-8444-2c00ed67d229",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fbb74bc-dc44-4881-b483-b3fbf90f1259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f183d307-0b25-4a48-83ea-709585bb9bd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d0cd3a4-8adc-4a17-b3f3-8d63b4ee17e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "93b3df01-855b-432e-89b6-8b554c94df91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "429faa99-0871-4129-b22e-e492f3b777a3",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6078d55f-a932-4b01-b2f8-1e4777bacbff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e7d38cd-8210-4194-abe9-981181889228"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ce84471-8ca1-4cb4-9ae2-f9c5da27b3eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd34dcbd-7e9e-4474-ab56-1ac3fba27b4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee9a834-4850-4a45-a798-09cc3722e348",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9acf3912-4b42-40fc-b56d-97c0d89e38b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b37409a8-e8f6-46c1-8c99-8a94f7b93944"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ef9358c-61cb-4f57-a898-62a33c3b411c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d5958bf-8f6e-4275-a53b-ec6c5318d1a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab229bc-6d9b-4daa-9619-6f17c58cb56b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0acd22e2-19f6-4ec3-8eeb-b2c8ae337297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58c3fc2c-ca8b-4008-ad19-b1f587e17525"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d1c2884-1913-4801-abff-c79da2abdd2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3951a02-3b20-4979-aab6-fb657ed1935d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa91bef-a99e-4212-aef6-aeaac53c5640",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "051f46a8-9bd8-4311-80de-957828bb1789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bebc588-38b1-42f8-a554-9a05626c19a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa0c5bc4-43d1-4906-bfb2-af09ad6cce17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a955e718-5c00-4482-97cc-f1c34ae62240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a65c55a8-ba7c-4a6c-9473-421a6d036f14",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c0b58f7-d6b1-4633-a786-3bc4172a4532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0ff1f36-20c2-43f3-8cbd-5013d7565a82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a53b64-2d0e-4279-976e-2adbbf90d30f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b950ac60-fd4b-4e28-a8fe-e98d140cdca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c9e71cb-19b1-48e9-a768-d9b4e81517fc",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de5f0417-29eb-435e-a097-4f4344b1332b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3c030a2-6ac7-46c9-b598-4f8f3213f528"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "612d4fcd-ebd1-4cda-bcb2-8b83ff7173ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c0d6f8d-d9bf-44ea-9f15-1f5faf76659b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b1d3497-9985-432b-877d-a4ccf68f8c08",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "772476b5-db51-4d0b-b987-91559bc7bd4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f3e0020-0ea6-4257-acad-ed345e068968"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bad26777-1beb-4e66-9c65-7c0876d29649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "804b9a66-4017-4d8a-8dd4-038e6f3ed442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b1c86af-4405-47a1-8957-5128dd427d15",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ec304c9-0711-4ae6-8c2e-988eb20648b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34086484-b052-423c-86b8-5cf91ac17465"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26bfdebf-296a-4cd0-81b3-b995f84b437c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c8d219d8-1138-4f9c-91d0-5e15b2458dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e6e37a0-664b-46f0-8eac-c8543ed8e897",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf16db5-1127-44ef-a91e-f563bbd73ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eae579fc-b2e8-485c-a5d6-c2c7d21c8cc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebd2f34b-a9e6-4ae2-8176-97b78b71db6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ac8884d-2c0b-4b21-9243-e057175ef109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca8b59a-3fb9-4906-9b34-afeecdcfd3ec",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f16143c3-f0b0-4c8d-9f0a-43c762065e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e87b7f16-414e-4f54-97ec-bd33a0e8ac7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37094370-1daf-45b1-8218-c2651c758934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "92d6cf72-2eea-4f67-9785-7965563312fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be77538d-dcd5-466f-a48e-adf1812d523a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02a034b2-456d-4e9f-bc12-3863640442a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3d4a695-3a0f-4ca4-b128-949c8f1138db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ac2aa53-4c79-4ef4-bc0b-014178d4a9e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "02880a88-67c9-4664-b83a-d1213dc87927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57fc0c19-0e1f-4339-8da6-3e7bed329dac",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9615bcb0-0fc6-49b3-a997-4d25efb6c38e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c654473c-e89b-4fc7-b58b-6e7e6a21ad8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69156341-019e-4128-beab-29c7547989ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2357fbe-22e9-4d9a-842e-8179f6daa555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2488c980-8b65-44f5-befa-bfe6c62c5582",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eecc6038-4e7c-48f8-b136-0b912383ad7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a1b294c-34c8-4194-9448-7ae00acf0de4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aefe6b8a-5cb4-458b-a1d9-d80777ad9a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ce97851-fb62-4ebe-b812-0455a7fa83b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3acede-c354-4e9b-8c74-9f38925c92f5",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47776802-d069-40fd-9903-614c00fda30d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7adefa1f-1d15-48ab-bff7-c240a7a895de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc52a072-ffee-43c9-847f-f4d93bb3ddd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "aaa9e24e-3b9d-4f87-966e-7a6a89cd0188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4c7d23a-06ea-4413-8ba0-7a2ed8c7963a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2012473-73f8-41a0-bada-013dbb4ea902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd9ce0fc-0ff7-49e8-b592-812d51a6c0d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bac90fb0-3422-497c-a8c5-ff0a7e05e838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8b334dd-c0bd-48e2-9798-78cfc4630238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f73490-7fe1-4509-87ae-3dde451aa531",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70f1f7a4-1345-47bc-bb56-147a78fd6d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9154989e-1022-45f6-9981-4d2295102da4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97642fa9-30b9-408d-ac1b-3b4e8242937c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "588eb00b-ced9-4281-b2cb-55ed87776561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7e63fed-31cf-4d33-93f6-55f58ba8fc7a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53959a6b-a083-4c35-a172-bd012a40fbe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33dcccc7-8586-479c-bc41-1c10d04193c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed796f87-24fc-4ec1-994f-a3444507154b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ea64f29-8a2a-4d9b-b5c6-1c106c8f2872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "829cf5a1-8a1c-49e8-b424-8f9574e63d44",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57e8d88a-9c22-4c70-b5b8-a64107cfbd32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0befc9d8-60b3-47e7-ac1d-6bf04a5dac69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceafc9ae-f89c-4d66-aa11-c6ebc00c469d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0890cd59-0191-4f06-abee-d8577e035137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a5875c-74da-4a95-9681-71b31effd592",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c94c3373-ed8d-42f9-bd66-e29702a88dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b410a60e-b8d0-4aed-9753-1226cc813f8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f26b24-b2bd-4d79-91b1-d7c0a89abb7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b675352-e93d-4d1b-ad29-5f7285fb8df4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06d8ce82-7125-4a03-8a2f-4d8bbdf4a9c3",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdcb57f2-32e6-413c-b914-f79d48b6705a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa916842-dd8a-4ed9-8da8-3ebeb0e88e1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "745dc10d-50f1-455c-9ec4-023f03561003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce0c0053-5f33-47e0-9658-929115abfadc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac379ff2-9a1a-4f70-aace-b3698e91df83",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24a21fdf-7ea3-47a1-a3a0-93c6b6c8b951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f9c4d38-3b8d-4032-bbf0-8c4b0918125b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66ec127b-756a-482e-9349-07134b073c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77c68459-c8e4-45e9-a1f4-385e2c8abc90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b3f459c-730b-459e-9a01-5de2c481681c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63c78ad6-cae6-49e9-ab8b-464969bdb204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf5da0b4-41ec-4e3d-9ba6-438909be281c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d044811-89b4-4617-a691-104801573561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfa73e0c-298b-4515-9949-e6b488dc9c95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cca66207-492f-446e-8585-18d230314024",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f062602-1e00-4b53-91c2-249c2d57a826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "733123ca-cc02-4111-ac6c-cd837846ab70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d600ba-d95f-47b4-ae30-1178718bb11c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72577d5a-e95f-4259-85a0-e18b1b6da408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "516e344b-6533-4ec5-afb9-f8694f447377",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed86c58-e654-4ba1-9741-698b16e6c811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b6be9a5-11de-40fd-8a94-5facb75d84c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41269c2e-1a14-486d-b179-2c52a9cfb886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07deb46a-4582-4128-89e4-019fa844b3fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8980e3eb-65d8-4101-9917-7f6c1e19521d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1d6abeb-e77c-492b-a6dc-1cdd8a41540f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a152ff4-254b-4a6c-89fd-4b165bd74d68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bfa5593-2536-4902-9861-663c6ba9754f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bca26217-1d96-42b0-aae3-a39a81e55824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679849d6-a92e-4d64-931c-0c5de8300b99",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28555a0f-a9d8-4d23-b449-fa16fad12d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92eca51f-d767-49bb-aa79-3ae2994cf5ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75389d39-8752-43bc-a7fb-bd6597cf57ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce4a3962-d726-453e-b2c2-dbe35c5de0ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b1c50ac-bc64-49e6-98aa-d8e6b879ea49",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00137efe-0a33-4dcf-a417-e6ed0f024072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c562ddd7-224e-4405-9d13-555ac450f452"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1528b7a-155e-413e-803f-25e52ef98ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46685622-32b3-4eb5-8b5b-7e193cf88281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5285a6b-815f-4e03-80d9-45fa009c04ee",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d21c2f21-344c-45aa-88a6-a89a6464e367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24bd4104-d76b-4f41-9239-82aa5f58e9a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ed3b52-43d2-48f3-9728-4acaec54ab1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8ed5cf6-3c1e-49c4-9de2-a8fd1b14b5bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f9a7177-f1f4-48e0-a501-3bed70fe2984",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d08a3209-bb65-40b1-bf6a-40b797cff297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14bb675c-2a04-4c49-ac87-62e9ebcd3882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86e13ce5-8d02-49fa-b115-0438208ee8d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecf382ba-93c3-4e30-ac74-42893acf56c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e947f2d-c434-4531-b7fa-c12526370bb7",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1275e2e7-3236-4d5a-a641-80ceea502c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f260c0a2-635e-407d-8e3b-b78f9b9717dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44032195-26a5-4756-8836-f985db589aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43aa441f-5640-4a7b-86b8-47f1e0fcd3d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "629e4827-013d-43c2-88af-df7beafb55f5",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c0bf53c-03f8-4c94-bd9c-ef3958846624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1df2a886-89c6-4596-bfd4-e933b3920faf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa891bb5-8dd3-4ce0-9591-22ebee415703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66be1ef2-d849-424d-937b-94a35d90c7ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1589f07e-f8b0-416e-827c-e0495b376cfc",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca580e6-9f7f-4b76-b962-75f2fa2de52a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e75adc4c-8e93-4651-936d-b5335be6aef5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5892287f-1314-46bf-941f-50f5ec3253d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c19e3c15-54f9-4cfe-a82f-d7880fef7537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5662221-44ff-47e4-8480-c6f49aa8969e",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "743e6eb9-6776-48c1-8edd-d7827bb81624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c71f86a-c1ea-48c3-8e33-0334ae5cb4f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ea2981-49fe-4cd0-a259-ed85f0ee5d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7a3892a-ad4c-47fc-9daf-4384282d9e80"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0d60f914-3d5e-4572-9914-5f2f5161930c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4f944371-780c-4e0b-a6d8-b04d82533f98",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a15eee3f-c939-4242-9414-f9eeadb4a962",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c55f7b2a-d58f-4cab-9061-71fb2675ac18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c846b1bc-6195-4324-8238-2b43562ecf5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "26a1dfa0-9c0c-4d19-b232-ce162da4ac79"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d7b3f5f-b0b4-43ac-8387-91a73d2a0a8c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3130a821-a366-473e-96cb-bd272bce749f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "180086cb-b03a-4f33-83ae-9ecb4240a1f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c13da27e-8300-4baa-86c1-6b83e8deac22"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "25659216-4441-41d7-8c1d-d6c37a624369",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4ddd7d39-5b1e-46a1-8ecd-45cea470fddf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9c9a4e8f-3e52-4644-a9d9-fa1eb511dd5d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d33ca7a4-2056-471a-a1fb-d5018b6eb3ac"
            }
          }
        ]
      },
      {
        "id": "c3d6fdec-6798-4872-8ecb-71052db87619",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "18a51757-4236-47f6-938e-a6300103159d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "841fc9fb-ec0f-4811-bfa8-d435436e095c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1ec984a0-a2eb-4b96-aac6-b7456ffee928",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b465fc57-fb05-46ea-9eaf-f55f976e1682",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac7f17e4-34ab-4f4b-8559-223648411ac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a8746d-7205-4207-8462-9bd0661cdc0b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b367b11-5100-4e46-ba24-65ae1b2007c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38800ac1-dd72-43c4-a8aa-16c76101bfcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c275311-2564-482c-b947-378c431323cd",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d213e54-c1e0-4880-a01d-ecd9c01f9618",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c591ef67-582b-4167-baac-a131d9d73960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ef149a4-e349-4d1b-bf1b-40750fca9d31",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57120e8b-97a9-46a3-9cd0-2d5d1f6db114",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4496a2ec-1be1-4155-87ab-0a6aed4866dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6e544f5-d666-48b4-b843-6358f04ea979",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e70a3714-5231-42fe-8962-94e899535921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7434ed88-bb1c-4798-b7ae-eebd65cada54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95582198-ea81-429b-9dc8-9147e54e3e0a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90290b3a-0e00-460e-84d5-af40e685414d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afed4f84-89b5-4e2b-ac84-fdf56d062233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ff585ce-c213-4a07-8ca0-48a5e89c071c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d042c84-549d-4bd9-a9a1-804dc7884408",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d20378b6-a67b-4e20-8d5a-d40c11d5a77a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87785059-6677-477a-b94a-0a70c8ef7e90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d838204-66ea-4c29-9e9e-0d5e907b2796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3831adbe-6950-4b6f-ae7c-23decbf8595f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffea6d34-bb20-4bf4-b51e-409e8b776439",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "633adf52-82d4-46da-8e6f-d795b4280763"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d30c3df7-f839-4e3d-aec4-f279bdeb8e1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7020034d-9f8d-4e84-a5b9-32909f76aaea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd56645c-2614-4d33-8f5a-7c7e6532a8d7",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5098ea6b-6192-47f0-857c-fdf0d3ee4253",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7d215b3-8b1c-4afe-a5f4-fc902784ce0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c314712-ff9b-46f5-b95f-dad382394d88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14be796b-b083-4508-b59b-f5b81a48ca38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "169a8b34-7410-42d2-8d16-a000f8496497",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d2f7e38-841b-4f1a-a9a2-78f12cc4db36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "543972c4-1291-44b8-ab5b-a5ecf2164d86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "082f3461-97a1-4a20-9201-213f8fee5ca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68e7b315-2c74-471d-b5bf-75fd0bfb7044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c6b0b2f-5b47-4a8f-ba83-7db4538a41b9",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2229211f-b75d-457d-a371-a6d40854a95d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6263bc8c-b89f-4ed4-9164-657712c85522"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63ee8f9a-b577-4696-8da6-94e7eba76391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0355d0e9-f469-40cf-95b2-49619481b6e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d859cf3-8002-46f0-b256-ffa46d3591c9",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15da7822-d2ff-4ba6-ba9e-719b9b590c08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1823068-8c1b-4366-bebc-2e9631d04ec9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef090c9b-6c53-4413-84e5-9ea1f8ef96d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8967abff-3a1f-4e7c-acbf-a3f0e990cebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "763ce32f-dcd7-43e4-bf4e-219b513f1c38",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21c3d59a-2cd2-4056-ae2f-cae6f55ed955",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba472455-ffb0-4558-b80d-7d64c6a1f4d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bae13ceb-8a96-4236-bf88-03ed1ae8a3e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6475a332-e6f2-4405-8323-9192bbbdff6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b91dea2-2d3a-460d-9505-58d2f0631449",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1adcb574-05f6-4e70-9f56-8e09bbc6d102",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ef1a1ee-ac75-4d95-a935-8109a76d1611"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9330351-7a4a-4c52-bb96-25b205af3432",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76945f66-b6ef-4f77-8b13-c2b1e3dd391e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c85fc9e-6aac-4cce-951f-52f031370aaf",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f42fde0-aa7e-4dcf-b144-ea3f5e7352a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "913a6409-182a-4122-be4f-28029c0f1b59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa0ecc47-df65-4917-ab53-7e5744dc5f30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "194b3ee9-5f89-453b-84de-3202e13e48f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a2938b2-0c6c-4fa3-83f9-dcc515941efb",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a16a492d-7d18-4c57-88fe-7666f2774882",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d08e30d-7e33-4c18-8a95-4adfb8fa3cf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1ccfa18-175c-4c49-aff1-63bcebd98fff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffec80bf-be05-424c-99cc-885cc3f95b45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f885e58-dbdb-4e6e-b934-8ec039524e08",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f705b707-3b38-4935-96e1-71ce9a5d95e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76b9ae62-aaa8-4726-9784-4817e438f82d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ced7f2a8-b152-48f1-865d-a120efc00660",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d4679ac-f523-4f77-83bb-9032bc83bfcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06ff0da5-b337-49e6-bfb0-13285885f81a",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30be904c-2e7b-43ac-b2e0-84bebbde487b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3f72d21-992e-4dca-8e87-fc21be42a1e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0612efd-f563-4fdc-b25c-a086ffdd6346",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adf7e4a5-26fa-4849-b64f-4eba72a94eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f47083-397f-4a44-a145-f3bddb7a0da2",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d39bb92-e1f6-45d4-b21f-180adefba581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb8c1570-94e6-4278-b778-945b141f9b68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5018c35f-67a7-42bf-85c3-ac27cecda3e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a070f996-4559-4a4e-a291-8384d67cc812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78abb88d-5689-4a8c-8160-d39c8e2bc3ab",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "689df8a6-d4ba-442a-a61f-7c26097e1fc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0966015e-ad6a-414c-96f0-23de9efe9571"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "156ea85a-41e9-442d-9d94-8c22b88a5922",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bf59a75-cac5-48a8-9369-2df92a6a1d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ca52b96-5d69-45df-a7ea-b80126aebb04",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "678b56ac-b0f5-40ba-9cc8-98a0d4825d10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffe1a8ad-d142-4824-9c1a-fa10e735846d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b45b4100-b9f7-4294-808a-008d41f24822",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aed2b44b-7c21-450a-a124-fdfc54fb7b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "224d3dc7-5ea9-4a10-8eb1-9a4eb9fd8883",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e1d764-b6bd-442b-b7c3-87f57182134f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8569e72-7549-40a7-b25c-97621c612950"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9808bb56-05e4-49df-991e-fe0035770bc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a62c7740-2714-4d0b-b491-7d78e3d84a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0236ed0d-824e-4761-9a06-fc8442899470",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a886512f-932b-4d82-a962-75d5b4aa634e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c906c95-16b3-4175-afbc-2810d632b82e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38adb5bc-1336-49a8-8f49-ef4cdab15032",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d66deaf-2a61-42b8-ba40-950e4c5997d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc640585-1adc-41bf-9600-f162f6f0277e",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca5db951-830c-4cf9-994a-56b2372e29ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd0216d6-df9a-4ffe-9f44-62726713dc97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54db72ea-0ea6-450a-9e21-5328805c3da0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7084e715-c2b1-4341-95cc-0eff8ad9976d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42d385dc-5ca1-444d-9b1a-42a69603b80e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83c017d3-e191-42f9-bcbc-992bce338768",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04019c75-60d2-4252-a943-b03a768513f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00784bb9-e07f-46e9-a934-a5ffdd9f3153",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52388ddc-a544-42d7-bb82-70554bd58413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52022389-ba3d-43bf-95d0-cf4c0b17de09",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "633d166d-9d7c-4567-a0fc-385f0ff47145",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79f510aa-d094-4387-ae4c-edca148d6805"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3230f646-3515-4e1d-a248-cb724871e5af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "895016ab-ed31-483b-916c-5fbb22a1cf77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09076d5c-ff73-416f-b794-80ebf788e203",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4444857-aa77-481f-a721-de977325c4f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae12d9d1-8a7b-408d-9d04-8802833d72b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f472e7-93ac-4052-a554-7fe6ad781812",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2090a52-9e57-47c2-a860-abbfc26008a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cd02a9b-c75b-4f32-b190-2434c298f912",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49556aab-f4be-49b1-a477-76da85754fc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5db76fef-ba89-4e10-817e-60ce0561851d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef140c6-9355-4a38-bba8-21cabbcfac06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35bd89d9-f69f-41ea-a646-f89d20fdc536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c20e8fe-2294-4e83-b016-0d03a8f8bcef",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a773b2-3672-467d-b6e9-fe05cdfefead",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b3fcf7f-b1eb-4871-ac9d-67c64578531b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbaf0e21-8d1e-42f6-a5bc-3c1c7698c934",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f760765-c9af-4057-ae13-cd365e7d6b3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f910a33a-fc3d-48aa-a017-bae7a3a78b38",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7916b0f0-c5d6-4ed6-996d-eb2ffa518fd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17c68fbe-f471-44b6-991e-d5e8eb342195"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f5ae86e-56f8-4121-917f-5dba74d5fe9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44d4f614-d30b-4a3e-b172-6823b1d39781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "823b1c19-2fa8-4575-9bb8-05a619220747",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62beffdc-a500-4ea7-8b28-7fe8a0dc13c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f668e27-c313-4ecc-87f7-30b6ff919602"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c6cf6ff-8184-4bfc-89da-593a622aa4c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73192caf-a4ed-4134-914b-fad35a3d9597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e5123fc-6651-4f85-87cb-2a0222273101",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0175fd89-5a14-4538-ba32-b419d879a31f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92262ba9-2688-4393-8328-5b0ca61ec46f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97d0a91b-ea14-4658-9052-3340faab7875",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6dae745-170a-4d7c-b626-3e578e1f3795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4648a10d-c2ce-49c3-b2fe-b2d6ac695546",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6454acd-681f-4595-94f4-242122fe86b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e4d27c4-9ec8-4b75-a9b8-35ab8881c458"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba430ff-8064-4693-bdbb-7c5851110420",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea294f27-48c4-4722-8a5a-00532b6b8be2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae29e7d9-af6f-42dd-948d-3ae8142d1999",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9196aa90-8404-46bf-875f-d04a7ac7d6aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a806e766-7fdf-4ee3-9cc4-9d59d3e935ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "256439c6-ec73-4e6e-ae50-f0defbf2074d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4782cf28-6899-4d3a-a74d-bfa92db8853c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "643215fd-47ec-4fed-b986-2a16ef0642ca",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84cb6907-6fe7-4d6d-925c-0db5db52c522",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "652008e8-6e2f-45f2-8712-c9ee04e8dc48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad461e66-322c-481b-b5c4-0ba6e67861d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deda22c0-2e4e-419b-b7a5-070a941be6a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "009dea63-a001-4067-a5f0-73d85a7baf2f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2132abec-b612-4e1b-8888-0fbc5d424298",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50ad7405-acf4-424a-860e-4668d0ed1cf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d1b14e4-f976-4b77-8719-98b35685cefc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a3d8b68-10e9-4470-82c4-42a66a6c04fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80809b99-bdc4-4cb8-be8a-0a006fec01a9",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47304834-edf3-4713-9f8a-05e517fb73d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4faf2c15-16ea-4600-b967-11fb5e8e7358"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8981f8e9-e992-4940-9bb9-5c6ac257cac6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d87969aa-2066-4786-b0d8-49582b85f529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25f13d87-fcac-4e73-a44c-51f6de64e3ce",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce79a3af-65f0-4675-a5be-0164f1bcc123",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "492fac93-e34d-40a8-8d66-a43074953936"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e31f390-3ee3-48f7-98b2-979362ba3fd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b34c56e5-f44c-4b5a-a385-e5af551346c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18fb6e8e-4e35-4b24-a7f2-59ec3c85eb77",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24804b22-bcd8-4701-9125-4705c83159b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c42e6ce-eb1e-4bbe-ae01-67324b786ac2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1ee1c79-ced3-4bc0-a1e5-bef967d0d810",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "028e0943-fac3-433e-a7b5-b09c53b88fe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06ec9663-5a87-4ba5-88f7-14df5dbef8a9",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1afb3dfb-e545-4df4-8d31-cc6e08236ea9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "323ee4a0-6f04-4de0-ad8f-a93fbc7de983"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e12a7fc-1196-44a5-b9b1-e0c3213c15f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "659fdfe9-ca04-49f5-ab09-fe222ca08646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf0ba81c-f02f-454f-a8f4-efe9ca9904ff",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b44ca4d4-694e-40b7-8bcc-e3b72ecb8bbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb2ffabd-75c5-47b6-a71a-920dc5bf4a7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5f0a60f-6ff0-4e37-a0cb-682ce55ab2bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa3d6740-9dd4-4660-8d2e-93e779a90a14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17d5e5be-7166-4ef6-95d5-10612af3279d",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3252e953-b505-4301-bc7d-c6c1953309d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edf61219-d1c2-4e0c-ae8e-815227da5186"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a131a955-ac58-40db-8cb3-b2751c59cac5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8c549f8-44b7-4846-82ad-edbde24cad49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41702921-844d-49f1-bb2d-bfdc82dba45e",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0754c25-0fff-4bb0-8439-f76df59c413b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "287a6a36-518d-47a0-85d8-0140163ddcea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72d22c7f-03d8-470d-be4d-a312f2b21dc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d16ac9e-836b-4a52-85fa-d559a645eec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0430014d-7f11-4ff8-ba55-c58f7936e3c0",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29c5212c-58ef-413d-9049-b02b7bc938f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "414426b1-9918-4133-8efb-018836b0bb73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4935d9b7-506b-478f-a0bb-c1fbec637021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "514112f5-75c2-4cdc-91dd-9755e05b2a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83862973-6bbb-47f0-9d06-4ebf8c302f49",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d1a410-397a-4e07-9684-f0fbcfd044c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "905a3d2b-609b-46a5-8c08-b14938f5d759"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c88aa4cd-235a-4ad7-9194-6a5cea675125",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99870ea2-b95c-439e-a834-a0301d02ea03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e03c0bfb-35db-48d4-980d-5266dfe48a05",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "954d3cdd-5630-4fcf-8102-b00c2ac54885",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f2cc60a-4f0d-43b2-aff0-74a4f3d75248"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "543211fc-9767-4963-9ba9-8564768d34b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73e339c5-e529-4e23-ba92-0825a6614b94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ebf304c-066b-4dc6-a12f-323560e3f243",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c19109-5293-44cb-9fbc-91fbf117957f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca181b16-af6a-41d3-9795-0cb60c702546"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf4b9dc5-70ec-4ea5-ad7b-03992b499085",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd1661e9-e6cf-4a75-a77e-0509a322ac68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57701015-a4d5-430a-aa10-644beae30b8a",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a152e165-3d55-4c1f-82c2-f5b786d20c69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bb10e6b-94d8-4a8e-bd01-19890509b8c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba259b9c-6927-4b35-b22f-b188b113bd15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15372792-a5ce-49a2-98da-644bd492e8f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53abed13-eecd-469e-8c4e-516aa0ce6f67",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5083403-c060-4d5b-b234-4f5522d4adae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4412b01-012b-45f4-814e-4f0f3280c78a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f20a5a25-e710-4171-9634-ccae47e49794",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73094482-9b82-43e0-aaec-6caca6320ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "248e2e9b-fa79-42fa-a6be-ac4e857ebc57",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "178a0ae6-174a-4d87-9794-7e6b9f9e5720",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ad5d716-bf23-4e56-941c-69c86385f52a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5036c24a-94d1-4a2c-8911-e06422502057",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7e9a07b-03f3-4648-aeb6-b1a621ac537e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3697a221-06f4-4a1c-95ef-b7d62d12b7fd",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a85b248-2830-4ae9-89fe-8f0dd40abb61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "804d1909-4411-4068-aa4e-e7523ca124ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "121095b1-8388-40b0-9bc6-c45483243c6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99996bce-f4ac-4cc2-964f-a1c0980fb35a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "297d5f19-fb19-40f6-baea-188bba25ff18",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c03604a-65df-420b-ae3f-f59253ea2ac4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9258bc8-b7cf-45b1-9009-197b0cbce5b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e22310f0-933c-4cf9-9592-2650642f1710",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c08f0ef-f08d-4c58-b34a-a0ea10c8f494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b4eb44e-471b-45ba-af86-784cad35c4f6",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f326a456-5b2d-4520-a31d-1dcb48593628",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9a8c2ed-d4e5-413f-a72d-507453658db5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7460e0e5-7d8d-4eb3-8935-7c67c4ace72d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ca8bcd9-3151-4666-9d98-9a9f9a1a1ad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e20a9cc-0aef-42de-b384-31674fabc53a",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80bf9483-69ff-480d-bfbd-49677cd46e9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cc8db94-8257-4751-9a8c-ea0b1c25eeda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f35e82c-20fa-411b-ba9d-fd45d092a7c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bd85040-44e3-4f2c-a1e5-b16ae26cec1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efcd789a-9d94-466d-af3d-d0c155914180",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0fffb95-dff1-48c4-a164-009ede4d975b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47d4521c-eb52-43ad-94b8-3fe788852a6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f188388-44cc-41e2-96d9-43782f88b43e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "907fcedb-a748-4142-9954-dacf02696812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c94ed29-d933-4911-b6d6-5b2d8eef7ae4",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e5bfba-78fa-4e35-a881-ff2bd587432d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daad8a66-f8ee-4aa1-87c3-74ca0ebdf4c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "242e9ede-a014-4784-a4e5-16e695a67b87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "833469a1-8f65-4568-a3e6-173cd6b471e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa6d330-b9f2-4f9a-8ff4-a3d126187972",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "546bfcb1-656d-42a6-a985-ac1e536e93dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9d4cbb9-405b-4e42-8864-95630cf01099"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "500a32a4-0753-4d12-bc48-57ec955bc76c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25aefd7e-5f82-422c-b1d3-92060e6baea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4271d3e7-e3e4-4d3f-82fd-76565b904219",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6afa42d-eb59-40e3-ac12-fd5bcec38af5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c11fc1b1-a96f-4cfa-89c4-5ba98db401b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5db330c6-9471-4e2c-ae0e-f5bca71ecbd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "475640d8-1885-4e8c-86a5-ae4a3774a59e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d8a185d-3ed0-40fc-9d35-4d932575d264",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "525110a1-ccd2-4afa-be5b-cd6307bf3a0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b71a0c2-6c0e-41ac-819d-3d413498dfa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25b8f927-9799-44bb-8031-b06af8f97eeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25cd410a-3720-4af7-b254-0431cb4dd6e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8805e50a-9b61-4079-80da-f0c617ebad9c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a4fbee3-32ab-4fdd-a575-36e010a049e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7e04dc5-a6d5-4226-8460-1fbd1da38ed1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00167621-7b16-461d-8a10-de6e322ca441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e40a49c0-2039-4802-9b43-9fcabe5e9669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e604ca67-6af4-4088-bcf9-e7572ffdaa6c",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ce4fcc-bcfa-4ebf-94f7-22c6f9c24389",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "175b97e1-9896-444e-b2de-ce3fa74dd7ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e010f80c-ee39-49c7-862a-28026fdcbdd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eeb30bd-3db0-402b-910b-be26c6044059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c03d4c0-ec84-4726-936e-d09c8147a866",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "406d8052-a0f6-46c1-b393-e3e500caa262",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b30659dd-5b93-4ced-a1b6-87fed6ee5781"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8909ebc6-86ff-4874-90d6-57820a806dd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "977341d2-e78a-4780-a673-13fb8a47d0f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "099aa63f-5ab5-46f2-98f7-613e07727b0d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d471aee-3ae8-4471-9703-cecbccc73526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bac59e3-aeac-4fbf-89ae-53aaa664908d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31117f7d-16a2-4a88-959a-5ef809fab90c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3afabd4-91b1-4dd4-9169-f1c75dd7ff2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7cb36af-fb76-444a-ab29-90b212bf93c5",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50930035-e4e5-4e5f-8a30-cd99c185db7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c769c7da-b080-462e-84ee-91cf80bd1f36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dbe9537-a36c-42f3-b20f-65b864c74c02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d80a0c2e-9358-4955-8410-7fc397247a19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fc97a2d-5809-40df-ad4a-0b8546c0184b",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e06fd3f-70f7-4215-80ab-3737597a5fa0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d1ee668-83b4-4024-8299-bd27472cf8f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a88ebd-1660-411e-9f87-ee02f2215472",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9643472-3119-47ef-a8a9-b1133289f6ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae4b2005-0ee1-456d-b633-1802ce0d10a4",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "596a2ec1-da6f-496a-8708-ebeb9981402c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fed55a22-3275-4ca1-84f2-e62d8fe7f4df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e94b726-1756-4293-b899-7bd65eea7afd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe805019-e5f4-4332-8387-5a4c7908b829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df6e482c-80d8-4db4-add5-02d94e5a4a69",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68150883-7599-48bf-8329-4c5114a1b66f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03f4e3f7-2a57-429e-977a-a20bdcc6e007"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e202e0a-e9f9-4bad-b6f8-1059a9438317",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "debf9ead-bc16-4149-a882-f574df14c2bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5289a2a-eb96-4fa9-b439-51a0ea8f79ec",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3827f970-189e-45a8-9c76-41f82f56476c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35a029bf-2a7c-4270-b099-a86b417c90f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc850f29-38a2-4b3b-8ebb-cdca7d47468e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5538742-8c3e-4215-95b9-3c0fbff725c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1afe234-5dd4-4353-a4a4-061db5eb2730",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66ae983e-65e0-494a-b05e-c13b104a2e31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76af69c7-39bb-4f23-9a17-0ee399032a1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2959d872-bf2e-4125-b1d2-fba3e6863190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9572e76b-59ec-414a-8b77-0f946b32e6f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f74812-e7af-43b2-b704-cb4ff25000be",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22392c48-317f-426f-bb69-10e9e8c79e45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "727664b2-2bb3-498a-8ec8-ea21aaf5a790"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b77c1201-0e64-4959-bf55-8a445fefd631",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b72e634-f8b2-4fdd-88e1-29e9aa4f4a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a8f0898-ba9a-42b5-bed4-e05c6b2b56e4",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d2969f6-8aa3-441d-b1ed-6fda6917dbae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "060cc4f7-c954-4461-a1eb-7501b61db6c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ee55d94-e1d1-4cb9-b036-84bd0b6c74de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5c6e89e-73db-4c02-9993-5dab07433f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da8e9907-ccff-4f43-a70a-2c916edfce01",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e336fc93-b792-4b8c-91ce-14d1d3cd9739",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f0929cb-870d-4bc9-bc8e-aa2045fe6016"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14de1509-8766-4a30-b647-558d06b9aeb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68f78068-b884-4412-81a8-80b216ee13e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeac722e-7144-4ed9-b84e-c5e1eab15920",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d87bd91-fc48-4865-b98a-54a7a2b30262",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31ba9681-f2f1-418d-90c2-c074f65d1ce5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a52649-e3f5-4492-9345-08f2b46c9e44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35fce3cb-d49d-4892-a2a5-b6a4002f14cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c45fdd92-c5d2-4e6a-9c35-bc69f6f4e6dd",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2a7ab57-815b-4e15-a81a-9e35b7460d0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7704916c-c9d4-4dcb-9326-a05ebe3cb7a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8322a0fa-d343-4616-a186-6bf08a9db9ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c44d3ee-d66c-446a-8c26-84cdac433cf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aa42807-28c4-4c28-849d-6d022fea4bdb",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1e41ed0-4360-4e60-b80e-c0dc8eb13188",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4364102-283b-4773-8a4b-2be98d275409"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "925839ba-56d7-43de-bac2-2fbcee18ca83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b15279a-3cc2-4dd8-91f8-f893342dd898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9da88f55-f4fb-4db8-b186-804ecc1d0ef0",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e2f38b7-a94f-4d9f-8788-1ff2159ae7eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f0797f5-2988-480c-971b-d47a2e603dfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6848dd3a-abb9-4a80-97d1-a8cbbe25654b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b46a1d27-13ee-4e38-998d-c4aa997d4591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f3ed8db-68cd-4648-9830-adfa1cd21c2a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2003f2f0-b3ef-4934-877d-1c7648365986",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1431537f-e4be-46d9-a698-20df63cf2008"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e38d28e-9829-4c82-913a-1c1c255b6038",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44750c36-a3bf-4c44-8d4f-103012482dc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ce8757c-6f66-4492-af7d-4167371d790a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0202efa5-45fd-4a7c-82d6-a271c3b1025d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fabaea8-9cd0-4cf6-bee4-d18891e2b2b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0642e36c-9ffc-4cc5-b18f-30c01f3b52d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28a19996-1f36-4b5e-ab16-c7a6ae585a3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5522fc12-2b35-47a0-ad29-0d306642ce5d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8579d4d3-f6ed-4c91-b35c-ec145178269b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "247d7dfc-8e2f-4e32-842a-6c4e960cfc1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9442a408-1738-4c03-80ab-c0abf2ef22fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1feac94-7cf2-42ea-b8e1-a370a88fe634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "209db052-bee3-433e-ab11-48cec8777dae",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d371c3-00d5-4e78-a836-b17bae226b8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6660d6a-8073-4c24-a3ca-9a6d06528f47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "124b948b-df73-483b-8e4d-8e1167936b86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0211fe1-f5c7-45d2-9834-4ce6b04dfffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81f07df7-996c-464e-a198-6c957aca2573",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0bef10f-7b5d-4c2f-af4a-36766b490c2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b35937c-7e32-4cae-ae08-49dc22388b31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d481b1c9-a836-4aa1-b19c-70b0d35dcb63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c519895d-fbf4-436c-9075-b1dc4b8bc95e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aabe86a7-38a8-4d1a-b324-978b9510332e",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6849fd3c-a1c6-4fd5-afd6-8d3ee526518a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eee0c195-3b3d-4d79-b41c-73de0bd06666"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e120cd3-48af-4257-a8b6-1ccd9d3c4ea3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8f6ae66-cd9a-4a0c-af08-e9ed559f4b8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00a5202d-83b9-4c7c-b4f6-6ea2140144fb",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3781730-f42e-4bc6-85c3-618954e13f87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a0787e3-ed62-4e99-a928-c8a40dc4f7f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96cb5c66-a616-44c4-8e35-1d8f3063b3af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e87a7f57-d179-4a07-9c86-b5ac7161f88e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f11fe8ad-b3a9-45be-8ec8-751c87ddaa1a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e47f889-4517-4313-a8fa-b6aa34590825",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75162f8a-de65-4c5f-9eb2-4711e51c17ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e573a4-3aaa-4188-bad4-b1477d0a6d42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae82f433-07ca-49ed-94fb-561761800ae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5568c4f-8963-49b9-86ee-8021cb5a430f",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33667950-0937-42fc-bea9-8e7ac702dba0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fc02587-604f-44ae-ad22-4095f5d8cb65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c15e7e15-22b7-42ae-bccd-5d3a74f146a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eb83171-cf49-4cba-ada6-8cd7447f3494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b6e4658-0188-4f03-b96d-ba0f46ce81b4",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aefb8cb8-bd85-45ac-b207-7f44bf70592e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "baa7a045-17ad-40be-8c4a-5a3729b75ad3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cdf7a0a-2058-441a-8be3-ff2d3fdfedcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb4ba5f1-e40c-409b-812c-5f454fc7c397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d3e443-856d-4488-9c21-f64bbe47dfac",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a3581f2-f8a8-4011-8e4f-f581a8d14fdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca14fe3b-e92d-44db-b34e-2a587af1c6ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5466229-ed52-48d1-91b2-ce0a719e93cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fca0c80-5497-4c50-9bf8-89b42389b026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c330ebb-f0d4-474a-a650-2682ad72f229",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cec3020-f4ba-4d11-b3e5-701834134d56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00d46970-688d-4e2d-be0e-12d4f41e0d79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0874c37-5d88-455b-873e-6a4945c624f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38636b99-b3f2-4bf4-8061-1ef5ee32160a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b4461ac-ecc9-4fc6-b0b1-769500951885",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df3cc27-7bb1-4a1e-9d2e-a9affc5b13ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5967a928-44a0-40a4-97dd-0d8ea35249f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e65622c7-9ab2-43b9-8e07-1b72860b2c79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3e09509-f119-4a86-bc52-3d0a0d753ed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb9b3fd8-cf9e-4f25-abbd-e67904b5b44a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b94c78-9cb3-4cb2-b532-fcf8cd9c9e8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a8d5e5a-3086-4ecd-bb8d-918cee47cb14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba04ecb1-f28e-49ab-9893-fb2560578dd7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5bff0d7-80b0-449a-bc6f-5145c1a11c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d420472-4625-4cb4-9073-447b39ac3c90",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54ff393c-bd6f-4004-a9d5-514c10e3ca0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a50d552f-106a-49cf-837d-86b87433e74a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ea89087-8623-4372-b31a-dbaaf5f9ca47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b05ae8d-c68d-4520-a7ef-6b033849d429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36b4401c-2e26-459e-a127-06735f7580dd",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b052487-679d-45b2-a850-abb74f9a4453",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9aeb1d88-2466-4695-849f-8460e3a9494e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a53b46c-f293-442d-b75e-28c2cd775c75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a02f6af3-56ad-4d76-b092-119271df641d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7df108ae-6bb2-4b2a-88ec-9ed860619759",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b3059c-8c41-41be-b344-1e6a3941130a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffba8be9-dbdb-4801-bbec-d77dd3e347e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9755a3c2-ef5f-4621-93ef-89494b67dcb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52ce85d6-7178-4fa4-8a0f-efe38e646519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93517cd0-7a8f-4f39-9e58-d5784126d706",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "657cd787-c6a6-4a73-8203-e63088033380",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cf99145-7627-4178-96a8-9c86c56e3458"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbf7364b-091c-4763-ae7d-7846707f14ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b750432a-707e-46d1-b277-f5319f627469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a1e3049-c9b5-47dc-98e3-a9559f79b5e2",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6393595c-633d-4a49-9b9f-54e5f456f22d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6282a0f-9d5d-42d2-bd68-44fa8beac02d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75fb7e7f-8f5c-4116-afa7-e889bf23e412",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00ecc7bb-7b01-432d-9360-a09f059692c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e583f22-8f8f-476a-90da-aa5e5f7c537c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5fdd38e-7ce0-44ef-a3c6-84c9fcf2f8ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3578dda-a303-4fb8-95be-f40367a8f63d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "925525a0-1945-4f2b-b3e1-b005d8779639",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10bc3ace-ffe6-4dd2-b6ed-cc26d730bf1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c191f4-d401-4e46-8181-c7fe9a86fd51",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af3e84b-c1fa-4b07-8b5a-4e18e67c4e33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "998105e6-5d74-43c7-b4a5-4888a501bf08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6fe842c-93a3-47df-bd66-6a51f03ce7c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b3128e3-7efd-4d80-b157-2f3a834a7f87"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b1ca233b-682c-43e8-8ab5-a00d809f9f5a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3b44efae-7d5a-4b85-9a95-4630a2ddd30f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b634033-d2fa-43f0-8101-2ea4aaea1274",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7b03d79c-9bec-4728-8379-204aac06e4d2"
                    }
                  }
                ]
              },
              {
                "id": "fd6861d7-d7dd-45b0-9ba6-43ca349ba5fc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0ff6fd49-d179-411a-94e0-f44acf5d7387",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e655f29-50a3-49e8-8680-62aeeac9fab4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "eeb291fa-4049-480b-b2ad-4f84071376ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b12402d8-f7d2-4b9f-b2c1-31a66138670a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b537029b-a67c-4970-b4a2-e86a54b6b097"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "94f12e13-a7e5-4fc5-a6e3-0e91287ead60",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "82976efe-4bb9-445a-9c57-51b46d591538"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9e8f6597-9374-44ab-9598-701f5dbcd8a4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "296af1b4-8fd1-45e7-ae60-5ff271bbc145"
                    }
                  }
                ]
              },
              {
                "id": "bfa3137b-45e0-4aab-8d8e-dcc0f88a5f50",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c4a5c2a3-3257-43ed-8dd5-713ca5a54abd",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e8464df-cfc3-4cec-9f01-7f025ce66cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "6c60a0bd-3424-4e61-83ec-2b8462249c84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4145f90-e7cc-4139-88fd-de66f5466cb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a31a116-eac5-490d-867a-7f8f421a421f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "be6e6a0e-c684-4741-9ee9-2279f5818c6a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b9419d34-3c7b-413a-a259-9e979a0c1c14",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "904b1a0f-d173-4bf8-bd36-8a07a31025c9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7236b02b-91de-440b-8db5-a307debfe1e0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f2a336d-4133-4dd4-bcef-246f71489bd6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c96c66f7-bc00-4d1f-8ce5-ad829c746ac5"
                    }
                  }
                ]
              },
              {
                "id": "1710e265-da73-4310-bb03-238860d1b41e",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5b84ed1-207f-436d-bb88-b8dad4d37827",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "76e75967-f955-4f1c-b654-a890fee783d8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d171f9f8-480f-4aa7-9ac1-97ec971e6ec8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "47fc8cf5-2038-42d4-bdb4-cd4efd2ab198"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "433019c5-044c-4138-97d6-d8e8e0c4efbc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "b8ee6ac4-f839-4e90-9308-e24dd1ba8d95"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f2872f87-c4d5-4548-bc91-a40faa7711be",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6b1e0903-e7d0-4311-8cb0-b02f451af939"
            }
          }
        ]
      },
      {
        "id": "e22816f6-6391-4974-b38f-bb75e0e04d3d",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "23fe61ec-230e-43dd-b259-aa4a9e4a9d36",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ecb881aa-f352-4f54-952e-1be8042160ae",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ae504fdf-fa1e-4c05-8d63-a234a2ab20ec",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cbfe351-5cbc-46d0-bf83-a8acfd2dd138",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d1d071a1-18c9-4054-baf7-50f5b30d316b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bff34bf-5fd6-493d-b4cd-d6fd90651a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "26eb96c1-cfd4-45eb-9405-572e3aeb2da9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c338105-a154-4444-aedd-68704cff1fa2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89bb4c21-ca75-4e1e-86fc-74e041b7e1ba"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "661bfe75-1dd4-49a7-8bc3-cee056cdaa57",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0dcd0233-c8eb-44b2-89a9-c4488c7731b8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "df0d918a-b6f6-4b59-b6e3-52c9058f68fa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "4f8d242f-937d-4486-9fbb-b5b940acf738"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0409008f-e562-4872-899c-650196b484be",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "89f1c24f-b549-4e13-9150-0adffe59b69b"
            }
          }
        ]
      },
      {
        "id": "8121c6ac-9328-4c36-b37d-88ff32ac0691",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "147b7e9e-dbfe-47cb-9ebe-4dc21a01628e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b96cc4aa-1528-4883-95e9-ae326459edb2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "46d4e52a-e26c-4b0c-955a-15af9694fa3b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe651b07-bbc5-462e-856c-045a1a309b81",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aecfc40e-396e-4bd9-b570-59df26a85065"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1a4ed7-ec15-42c6-a183-7977f31d5fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7ef413a-b17e-47a1-9ca6-f87f3b59ebb3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "14fd5e3a-0741-4811-8f64-6f2d7fd7d135",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "294c1591-beaa-43ef-b2a8-6c62e15cbf2c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e3c93b5-ce10-4838-ae71-64f23521df02",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ab0fe066-1eea-4ff6-b95b-97a07fe093e7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7eb9c66b-721f-4a45-bfe2-2425ece59408",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "64f40157-41e2-48d6-8709-6b73cff5ee67"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "671f3146-71a6-4687-978c-35956640a355",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9fc35615-7d1e-4159-aaae-0f0641b81c7c"
            }
          }
        ]
      },
      {
        "id": "cb13e326-8111-4b74-8eff-593348be6249",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "e2440e79-459f-414a-a0b1-19831a31966c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c1a47c36-a849-47ed-b789-7348bb8a0f5b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dd7cb66b-ed92-4b1b-b47e-cc68d0bfdbff",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a90354e-9a1f-4048-9a7f-fd89c55f1211",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0d877c21-5c53-4022-9de4-654829dc4ea2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17790f6b-056d-498c-b499-04ed82d92691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "933abdfa-6a11-44df-b8ae-ec9d3b7534de"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b8377c42-33ed-475c-9ffd-c4dd5f4ed140",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b44d703d-d4b2-453a-89fe-0514b2a041d7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae54e729-15b4-4d2a-b527-8d447d9c254f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ce69aef-63a6-4226-83d4-5e52122c1510"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4de9c999-c250-428a-9668-f5a61afaa265",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "096f4bbc-364e-43a4-bd33-7203058dc405"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6f2e370e-a315-4850-bd58-4ed1e4ff395b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "45f3eaec-ade5-41d3-afdf-3dcef725b7a8"
            }
          }
        ]
      },
      {
        "id": "f7373510-23f7-4496-b25e-f857827187ec",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "877ba893-9626-404c-ad3f-71e6aa7daed4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a31ca59e-3199-4c95-8e7d-0a4eaefb9ffd",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "2e25facc-6b8d-4d8a-b973-2c7a29fa793b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8cb745e0-a1d4-4eaa-919a-5e1bae3063e0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b1655e35-c956-4d04-9142-bfc52b8730e3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 3
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 3
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 79
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 3
      }
    },
    "timings": {
      "responseAverage": 60.72953736654803,
      "responseMin": 10,
      "responseMax": 1335,
      "responseSd": 146.21143765523087,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1696725377069,
      "completed": 1696725405989
    },
    "executions": [
      {
        "id": "18c5cb0e-883b-417a-ba45-814602db469b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ad0c8aa2-1a28-44a6-b449-db988ec7d823",
          "httpRequestId": "91f57a7a-7266-48f7-921a-ecec38bb0e44"
        },
        "item": {
          "id": "18c5cb0e-883b-417a-ba45-814602db469b",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "905f317f-8122-42a5-a8ae-2b75fdb6409f",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 0
        }
      },
      {
        "id": "aaa33e1e-d2f9-4e0d-9ca5-39a935c3add5",
        "cursor": {
          "ref": "f46d0695-c99a-4b15-ba14-4e449b89e6a0",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "aaff0bf2-20e6-473f-b17f-6d87f2d2606d"
        },
        "item": {
          "id": "aaa33e1e-d2f9-4e0d-9ca5-39a935c3add5",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "82111758-424f-44ff-8830-7dbde7a01441",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "457bdf1e-4fbc-4f43-91a6-f8adb5994713",
        "cursor": {
          "ref": "3b650ec6-7971-4a52-8072-116a40fb97a9",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "2048957f-43a0-4149-aa51-2847baa5d407"
        },
        "item": {
          "id": "457bdf1e-4fbc-4f43-91a6-f8adb5994713",
          "name": "did_json"
        },
        "response": {
          "id": "0897b567-8ce1-4007-8c28-7a7e4656c06d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 460,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0d04018-03bc-4f77-beb2-350e890de93a",
        "cursor": {
          "ref": "81149d28-be30-41ed-a73c-a9e24b471782",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8bbf687f-73e5-4156-bff6-27f210b4b349"
        },
        "item": {
          "id": "e0d04018-03bc-4f77-beb2-350e890de93a",
          "name": "did:invalid"
        },
        "response": {
          "id": "6e401b50-3b6b-4a4c-b723-bd2c8e8cca27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0d04018-03bc-4f77-beb2-350e890de93a",
        "cursor": {
          "ref": "81149d28-be30-41ed-a73c-a9e24b471782",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8bbf687f-73e5-4156-bff6-27f210b4b349"
        },
        "item": {
          "id": "e0d04018-03bc-4f77-beb2-350e890de93a",
          "name": "did:invalid"
        },
        "response": {
          "id": "6e401b50-3b6b-4a4c-b723-bd2c8e8cca27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f631c499-73d1-4c11-8d50-35441600cdfe",
        "cursor": {
          "ref": "ae932921-39ae-4209-b8a6-369bc185827b",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e8ab0469-53de-4971-ac01-119a8b6a3dab"
        },
        "item": {
          "id": "f631c499-73d1-4c11-8d50-35441600cdfe",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "9d48d8d4-bf9f-4aa4-987b-6b2b56d5384b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 89,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee0bf0a9-2162-4bdf-8859-b5869679ca92",
        "cursor": {
          "ref": "3ce23d85-2ce9-4002-8dac-c9f3147e03ba",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "57983ac5-63e5-4b90-bad7-73699c66b905"
        },
        "item": {
          "id": "ee0bf0a9-2162-4bdf-8859-b5869679ca92",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "565d1a9f-41b7-437e-b70a-5b688749f3b5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 43,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a6adcaf-1306-43b0-a008-200e78f7d7e5",
        "cursor": {
          "ref": "800b676c-74fc-4b58-9550-6dff4448cdef",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "2b2f182f-901c-443c-9e00-7da79e929991"
        },
        "item": {
          "id": "4a6adcaf-1306-43b0-a008-200e78f7d7e5",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "97e1d527-ab46-40b6-8318-f8b894f03a10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d41a394b-3bd5-48fc-83c1-fc52a63a4bea",
        "cursor": {
          "ref": "1e4d75b5-b16b-4be0-91b6-e686e85ef278",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9be70149-02ac-4bb5-a83e-c14d2b21de51"
        },
        "item": {
          "id": "d41a394b-3bd5-48fc-83c1-fc52a63a4bea",
          "name": "identifiers"
        },
        "response": {
          "id": "7ba03719-58cd-48f3-8333-633d8a42ffd0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 66,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "5377ae0d-f9d9-4217-b509-2868f5ec38be",
        "cursor": {
          "ref": "a8829ead-87ed-4d49-bbd7-c0bb9a7f3d67",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "85f64793-019b-4e7e-a143-ee787c9ab559"
        },
        "item": {
          "id": "5377ae0d-f9d9-4217-b509-2868f5ec38be",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "74fa5479-c4d4-41ea-86f1-17be2771cd8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "800cfc94-c0d8-4999-b258-8e0f768951de",
        "cursor": {
          "ref": "dcfea212-a57a-48f2-a99b-3f9a95488b83",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6b001e0e-7b51-452b-8a05-358b7e2cfcca"
        },
        "item": {
          "id": "800cfc94-c0d8-4999-b258-8e0f768951de",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9cc39328-3fb7-45a6-9378-00d4e6432608",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbcb25b5-91ce-451d-a95a-8a57fbc775cf",
        "cursor": {
          "ref": "04de373f-610f-4ace-ae1f-2c77e9a0b13b",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "f33b36e3-dbc4-4798-af6f-a34afdf3667b"
        },
        "item": {
          "id": "dbcb25b5-91ce-451d-a95a-8a57fbc775cf",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "8c1dd484-cca2-43fb-916a-9fcbd5f282bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72eb8845-918a-4feb-aaae-0b66052b9224",
        "cursor": {
          "ref": "579c4f3d-a080-45f0-89b8-caebae3d709d",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f83f2119-3c06-4670-908b-0032924c5655"
        },
        "item": {
          "id": "72eb8845-918a-4feb-aaae-0b66052b9224",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "b2f23b4a-6942-4024-af5e-50bf631701ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bfc1304-0c36-4364-8d5f-f3d635958d34",
        "cursor": {
          "ref": "b814f0c2-544d-4a78-8ef9-8ab8915625ff",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "cf63f474-bd81-40d6-8e5d-2a7a7d537236"
        },
        "item": {
          "id": "5bfc1304-0c36-4364-8d5f-f3d635958d34",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "33f27f36-9300-46eb-93a7-022d3ca8bdd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d855ae0-d124-4c45-89a6-8b82ba0c0559",
        "cursor": {
          "ref": "7c0765e7-26ce-47bc-84ab-072d319a86a6",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b4586559-033e-46a4-b518-22fb0b68aa25"
        },
        "item": {
          "id": "1d855ae0-d124-4c45-89a6-8b82ba0c0559",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "49e37683-e44d-45ba-81ab-421201293c28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc86b42d-ce72-42fd-bf32-938222380916",
        "cursor": {
          "ref": "0511696f-e25c-411a-badb-a55a922204e8",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "fbe45b97-1c1b-4a9b-a813-5fcf2cd1b174"
        },
        "item": {
          "id": "cc86b42d-ce72-42fd-bf32-938222380916",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "a61546c6-cea9-41d7-b6bb-5b9bacb3c1e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c28e0b-383b-46f8-bc1f-a0e087aeca0f",
        "cursor": {
          "ref": "a2907bed-d893-4688-9b02-55eaa880551a",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c5de00ae-08e7-45e1-a3ab-51aff0724110"
        },
        "item": {
          "id": "68c28e0b-383b-46f8-bc1f-a0e087aeca0f",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "13b7dfd0-0135-49a1-9546-7b77a943d582",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fc4d56a-1c29-4696-827e-9c0dfc0a074f",
        "cursor": {
          "ref": "17408872-04d3-4a81-989c-212483fa1aa0",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0ef48b32-2d30-4c05-a20e-13a17ec3c477"
        },
        "item": {
          "id": "9fc4d56a-1c29-4696-827e-9c0dfc0a074f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e3c8f055-bf46-44cf-8f3d-22d4b63e01a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fad84555-9f81-4240-9d18-1450e8610230",
        "cursor": {
          "ref": "17d4285f-c188-4dfe-b024-cce21ed3606d",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "dc07c6b7-14e9-4133-a915-ee78444abc9d"
        },
        "item": {
          "id": "fad84555-9f81-4240-9d18-1450e8610230",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "9411503b-a3ac-4fa4-afb3-b493d47ad812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ca5308d-f323-4dc7-b94c-0ab073c6bd58",
        "cursor": {
          "ref": "67107d01-7552-44fd-b06c-3e541eb8084a",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3986e592-f858-460d-bbaf-ac177d4e6062"
        },
        "item": {
          "id": "7ca5308d-f323-4dc7-b94c-0ab073c6bd58",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "52835843-0f6c-4390-b817-4a99458ff80f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d0dd716-2c3a-4116-8800-184624a77b39",
        "cursor": {
          "ref": "7f8ef7f7-ff62-41cc-b546-bc78707f9d2c",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "744fc803-6e56-4699-8a2d-9f50efc248bb"
        },
        "item": {
          "id": "9d0dd716-2c3a-4116-8800-184624a77b39",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "3c0297e3-3409-478e-92b4-084f42ea6603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ae1ef69-bae0-4707-815b-62f8d42f5c79",
        "cursor": {
          "ref": "4744194b-6260-4752-85ec-dc82014f8025",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "4bf9579d-2596-4187-8c63-c5a28677762b"
        },
        "item": {
          "id": "7ae1ef69-bae0-4707-815b-62f8d42f5c79",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "dac93c6a-e1af-49b5-b17b-9f98f99f81ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e5a09c-1d0a-4fc2-955b-42e694241ad3",
        "cursor": {
          "ref": "cd1fcd56-f774-4e1f-b3d9-57971a9ba198",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6796b9b2-328b-40bd-9388-73b77b598ea5"
        },
        "item": {
          "id": "28e5a09c-1d0a-4fc2-955b-42e694241ad3",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "173f3fb9-2e55-4b42-8ae1-a31dae3c1c0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01be11f6-2d38-455e-89bd-0b25c42564c3",
        "cursor": {
          "ref": "665365e0-8297-4f3f-8e67-64a01274a495",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9b6cf657-8d6c-463a-a9f2-3bf79f285644"
        },
        "item": {
          "id": "01be11f6-2d38-455e-89bd-0b25c42564c3",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "8aa68fc3-1348-4040-b17d-74610eac7575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b92cb3a-af9b-4ad3-b0f6-2c037ca107fb",
        "cursor": {
          "ref": "8b5796f3-b46b-4d90-b379-b69fcebb525f",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "80dc2757-b572-4004-8520-c7d9d626f165"
        },
        "item": {
          "id": "4b92cb3a-af9b-4ad3-b0f6-2c037ca107fb",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b302f48c-84a9-4eb2-81e2-0d2ba623d05e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8537a308-e195-4835-ad80-482eaa43e380",
        "cursor": {
          "ref": "02e127fb-04d2-4f00-88b2-fcb90a14959b",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "bdde78ec-2537-47a1-bad1-a1b7e3f5206f"
        },
        "item": {
          "id": "8537a308-e195-4835-ad80-482eaa43e380",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "102bb399-93c1-4b51-b1a4-3b3f563ec4a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d6e9a80-2b6e-48b6-b437-394068e897a7",
        "cursor": {
          "ref": "80d9ae9e-ac12-49c4-9888-f82e5c104e2c",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6ee17b70-b5a8-4017-9deb-bb08a09640a9"
        },
        "item": {
          "id": "7d6e9a80-2b6e-48b6-b437-394068e897a7",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6d566752-8412-4aa0-826f-f5d069fde678",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42081a0d-6246-4d5c-8987-0b9a9a555d8c",
        "cursor": {
          "ref": "824b469d-99fb-4508-b7b8-aea7b43cc3f7",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "fc8b053f-1063-4c0b-ba72-774336b65d94"
        },
        "item": {
          "id": "42081a0d-6246-4d5c-8987-0b9a9a555d8c",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "725bf35e-97a5-48d9-ae4c-b30642e08118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb8ddee0-91c0-4bb9-bd2b-4619670d96a0",
        "cursor": {
          "ref": "7550fe00-1939-448c-9f0f-e8e4089d8db8",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "9ae929c1-2eeb-434b-9f86-f96851316bc3"
        },
        "item": {
          "id": "fb8ddee0-91c0-4bb9-bd2b-4619670d96a0",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "3a3fe5f4-a946-4850-a37a-2fc2184a2759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aa4deb1-7516-412d-a064-5376ae4d5c04",
        "cursor": {
          "ref": "047679cb-85ff-4abe-b12c-2cda2b0e60e8",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9b3b328a-75c4-4f4a-ba87-4815669af45d"
        },
        "item": {
          "id": "5aa4deb1-7516-412d-a064-5376ae4d5c04",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "32638c7a-8e68-4eb8-bfc0-018ca0072113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b877beac-6c81-4e5a-a68c-a160d5e0c5f0",
        "cursor": {
          "ref": "cf9479d9-9cf0-41df-ab27-64d9676c1cfd",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f4730798-41c6-42cf-9367-3626081ec89c"
        },
        "item": {
          "id": "b877beac-6c81-4e5a-a68c-a160d5e0c5f0",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b68e0259-07de-4509-b2b4-390c7408f818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd870c07-451d-439e-bac3-20caa3c53132",
        "cursor": {
          "ref": "2407afec-d482-4a00-ae24-2f85b3f8a5ee",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "5e492edf-443d-4322-abed-bf063e3e188e"
        },
        "item": {
          "id": "bd870c07-451d-439e-bac3-20caa3c53132",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "ade94b86-8f93-4255-a99e-5e457dedbe34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e08a1be0-89e0-430b-9af1-bddbd98d401f",
        "cursor": {
          "ref": "9e47c346-bbd6-4bf6-9c8d-1d1641ac2b2f",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "934dad39-b66e-4cef-8ef6-936ad6284a8a"
        },
        "item": {
          "id": "e08a1be0-89e0-430b-9af1-bddbd98d401f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "266a063c-b3b4-4e9e-bd81-690fc795c809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78664f3e-9b88-425a-a362-3b0d24068fee",
        "cursor": {
          "ref": "d5cc8f53-53d4-4919-b461-b6ea8c5aa9c9",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "499c251e-3b37-41c7-9aa5-e8ff4516d8a3"
        },
        "item": {
          "id": "78664f3e-9b88-425a-a362-3b0d24068fee",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "fa39735e-0694-4021-946e-de87b346d76a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b809e10-dbd4-49cc-867e-04e3d5acddb9",
        "cursor": {
          "ref": "2f77290c-95a4-42ad-8fb4-9c34e7458ff1",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "9976d047-0d67-41cc-aebc-c988bd80d109"
        },
        "item": {
          "id": "1b809e10-dbd4-49cc-867e-04e3d5acddb9",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "17302274-cedc-4b73-be39-5a6922e30d40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f2a870b-3e93-4623-a0d1-aaf7f5c99ba6",
        "cursor": {
          "ref": "5bda6f51-6871-41cb-b9a8-e0b234f728ff",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "eb39d1ec-88f0-420a-98d6-d974a7a8f824"
        },
        "item": {
          "id": "0f2a870b-3e93-4623-a0d1-aaf7f5c99ba6",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f78c8cef-dfac-4a88-a686-22a2509f92c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3740a6db-dc21-4537-8309-ed59ad338368",
        "cursor": {
          "ref": "35e0070a-3c4d-4f55-9e1f-fd5dd4f2ea36",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9e79e400-6a6f-4442-a7b0-fecc0a274dc3"
        },
        "item": {
          "id": "3740a6db-dc21-4537-8309-ed59ad338368",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "86682ae6-8d69-41ff-af83-ae95f4dbaf12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc2a23c-bb65-4978-9c72-f58f17450c1f",
        "cursor": {
          "ref": "01ee9f54-3240-4b06-b133-931f2e132cbd",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b4476d2e-5597-424a-b11c-9cd80c18d846"
        },
        "item": {
          "id": "dcc2a23c-bb65-4978-9c72-f58f17450c1f",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "6e1f93dd-e9b0-468d-b988-e07ba3a3513d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4c59378-abd9-46d8-9993-0d23b409694c",
        "cursor": {
          "ref": "590f5f14-5c2d-4fb9-bb12-62887cf752a7",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b3f5ae7c-19a9-434a-9031-a4c2601ef37a"
        },
        "item": {
          "id": "c4c59378-abd9-46d8-9993-0d23b409694c",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "8b7f82b2-7a57-4826-adec-2aec863b75c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dc1b0b9-07f2-4114-b6ba-19125a2cd918",
        "cursor": {
          "ref": "75048855-223b-4832-98ff-1ecc2d854f54",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "809bb0b3-8b8a-4ab7-b08c-f192ac00c4d9"
        },
        "item": {
          "id": "9dc1b0b9-07f2-4114-b6ba-19125a2cd918",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "64e42443-cde4-48ab-8ddc-69f2c43b323d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "a42c5bb2-654f-4027-a386-c32b52f0f955",
        "cursor": {
          "ref": "b4ecd073-0df4-4783-984a-62f7a599a5a8",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "9a6b65b1-0cbb-4657-834a-eb1ee32a6a91"
        },
        "item": {
          "id": "a42c5bb2-654f-4027-a386-c32b52f0f955",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "15cfd855-6e6a-42ee-9d4a-237675c04d3a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "3db28494-1e49-4e8e-8c09-cd73bda0a468",
        "cursor": {
          "ref": "47c6f166-2c18-4714-9903-2e42141ba427",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6dfd46d6-c56c-4d19-95e1-9f62f0fd5652"
        },
        "item": {
          "id": "3db28494-1e49-4e8e-8c09-cd73bda0a468",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "2b13b6a4-f5af-4c73-bc31-8df62235945b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "07c80e38-4daa-467b-ae96-d128ef4ee91a",
        "cursor": {
          "ref": "37486fff-f499-423c-8945-3a3c36296c84",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "9703fbc1-c625-4089-85c4-2449ca532dfc"
        },
        "item": {
          "id": "07c80e38-4daa-467b-ae96-d128ef4ee91a",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "c5343d6c-fe14-4464-9e92-ac770c035134",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0957b8fe-ebe7-4875-9ccb-ab982db047dc",
        "cursor": {
          "ref": "fa287fb3-a722-4deb-b730-4c06d6ca3401",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "791eca0a-dec2-453f-8187-26027313015d"
        },
        "item": {
          "id": "0957b8fe-ebe7-4875-9ccb-ab982db047dc",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "aed77719-e741-4302-82dd-5966fc7b2982",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "6b69c3f8-87eb-497f-9c11-18d9366c9b9b",
        "cursor": {
          "ref": "b7aef0e3-11ba-48f6-8b28-2510628e99e3",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c07faf2b-f226-42ba-bd3b-6ec77cbc6d53"
        },
        "item": {
          "id": "6b69c3f8-87eb-497f-9c11-18d9366c9b9b",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "5dc4cf10-2ac6-4f37-9893-515b08f4c17b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "664c8be1-d7f9-4d49-a018-2113609903e3",
        "cursor": {
          "ref": "4a8bb362-771a-437a-9678-ac793c2bc9b2",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "84122fd2-ad05-47e7-9434-34d05a6be85e"
        },
        "item": {
          "id": "664c8be1-d7f9-4d49-a018-2113609903e3",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "54518800-67c3-4892-86f9-2c1e6123a0c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "1a394bc9-04a5-41bb-8f02-b5c2a62db998",
        "cursor": {
          "ref": "d52a6b12-0807-4ca6-8650-5a092c7092f4",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "9dffc949-8158-4b5a-a995-9a4901dfaef5"
        },
        "item": {
          "id": "1a394bc9-04a5-41bb-8f02-b5c2a62db998",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "1200b844-8a32-4c4c-911f-3f8494378ae3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "b95e01d0-a3b4-4016-a72e-75301a6c3e2d",
        "cursor": {
          "ref": "d998fb51-057b-4455-a05f-9e77fbb18dc3",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b4371ba9-b540-4738-9eac-f886b9410ea4"
        },
        "item": {
          "id": "b95e01d0-a3b4-4016-a72e-75301a6c3e2d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "b3b62452-fdf5-4ff0-87c8-e32004e21996",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "3502e2ef-c35f-413a-9387-6375b72adb6b",
        "cursor": {
          "ref": "96cec6c0-c223-469c-8e5e-2d48ecf8b6d2",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "9d6461f7-e443-4bd5-8430-0439bc831773"
        },
        "item": {
          "id": "3502e2ef-c35f-413a-9387-6375b72adb6b",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "acad3f76-5598-4090-b2ee-098e27fdcaba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "5e451eff-1631-47d1-876a-dcb582f0dcf5",
        "cursor": {
          "ref": "923737b9-7187-4b21-be07-8c0e4d26704f",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "39f1d87b-a245-46ad-ac97-efde542b4dc8"
        },
        "item": {
          "id": "5e451eff-1631-47d1-876a-dcb582f0dcf5",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "51af3302-2039-4796-acb6-d5683511d3b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "1e0de9a8-fdcb-4169-ab64-66442d39784f",
        "cursor": {
          "ref": "3a1fc68a-7058-415d-999e-434befcbea1b",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "101bc956-3894-4e5b-9c88-c2600e55e935"
        },
        "item": {
          "id": "1e0de9a8-fdcb-4169-ab64-66442d39784f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "d358330f-0955-4335-9b82-64116f400818",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "361b5c73-7b72-42f1-998a-5dc46c5f9b70",
        "cursor": {
          "ref": "47e5786c-0ad3-487d-94aa-238725e950eb",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f0c85399-33fc-4b40-9e66-a3eb2bef6229"
        },
        "item": {
          "id": "361b5c73-7b72-42f1-998a-5dc46c5f9b70",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b35914e9-d425-4dfc-9a5d-9be9f2f78944",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 42,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "2f40cf76-e744-4dc6-a76c-bd8d2e069786",
        "cursor": {
          "ref": "1d809997-2308-4a3f-b893-3c32b5f7ffab",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e17ac366-5551-441e-adf6-5e6ceea333d6"
        },
        "item": {
          "id": "2f40cf76-e744-4dc6-a76c-bd8d2e069786",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "386b5a63-029c-4cb8-aa7f-b27cc812aba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "316b62af-15ec-49fa-bda0-352a9ac72a47",
        "cursor": {
          "ref": "fff93244-05d9-4c15-912f-457514ac5ea9",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "83e2d09b-de96-4fcc-ba43-6cd3bf444e13"
        },
        "item": {
          "id": "316b62af-15ec-49fa-bda0-352a9ac72a47",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "62927e92-810b-4709-8d27-90e82bfdeaf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1933fbe7-ee3c-4f72-bfc4-44a5b4cfa54f",
        "cursor": {
          "ref": "28f86f41-692b-4a4a-aa07-9d45e5e584e9",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "749b2f1b-9480-4528-ad79-444dedbf66db"
        },
        "item": {
          "id": "1933fbe7-ee3c-4f72-bfc4-44a5b4cfa54f",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d52ab754-9993-4be8-840b-cc43781ecbed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aa52551-e72e-4207-94a9-4d0f731c1e11",
        "cursor": {
          "ref": "d0044d59-3a06-4b65-b771-d75f860e3984",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "90e0e547-7b4e-4b47-af65-3cb462c6ffee"
        },
        "item": {
          "id": "8aa52551-e72e-4207-94a9-4d0f731c1e11",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "77512ab1-f36a-4119-bf01-076bcb0833c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b3619e-195b-458b-a7dc-4d7eb40eea67",
        "cursor": {
          "ref": "4b559fc0-9b41-49a4-b01d-2e7d0983d5c9",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "fb231839-9ce1-4f58-bd4d-9b027e26bf5c"
        },
        "item": {
          "id": "e8b3619e-195b-458b-a7dc-4d7eb40eea67",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "edbf4ad4-30e0-47c9-afc4-a15ff4e1fd34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad5c911c-ecfe-4da2-9ca9-b62d5170a8c5",
        "cursor": {
          "ref": "eb8c1d8b-caa4-403f-a34d-eacd9011d471",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "47b148ee-efc7-4218-9c11-5db22fe679c9"
        },
        "item": {
          "id": "ad5c911c-ecfe-4da2-9ca9-b62d5170a8c5",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b9f9a7b5-9cf2-4ab0-a580-dd5f8d65733c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0555fbc1-2b23-444e-9b93-083bea6a51b0",
        "cursor": {
          "ref": "2ae94dea-360a-49b1-bdf1-13dcc7374337",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b67553a3-d753-453a-bd9b-27adec4d0aa8"
        },
        "item": {
          "id": "0555fbc1-2b23-444e-9b93-083bea6a51b0",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "91833bcb-1a52-4fbc-9ee4-e3bb4d7c92c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cd69df1-766b-445a-b7bc-b23735c0399e",
        "cursor": {
          "ref": "b4395134-6f1c-4eba-93ca-c00b3f85435e",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ce408710-3118-4d94-90a8-2c2f5bdad61a"
        },
        "item": {
          "id": "4cd69df1-766b-445a-b7bc-b23735c0399e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d3ae1324-c86e-4673-9818-771df827038c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4546f8d0-955e-4ec2-b5ab-54ada2a9f20a",
        "cursor": {
          "ref": "f1fa5259-1fc0-4d0c-9b76-08ef6a9d5c53",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a91c930e-d597-4897-b9e8-662cf413117a"
        },
        "item": {
          "id": "4546f8d0-955e-4ec2-b5ab-54ada2a9f20a",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "c0c75d72-8ed5-401c-aa6e-56c1ef49ade0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07477f0d-6f6b-4de6-9169-a7b07e90e3c4",
        "cursor": {
          "ref": "d5dea2d6-6a3f-41af-b387-210d0eaf9a62",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "0da27d37-f223-48f5-b05c-aa810aa248b8"
        },
        "item": {
          "id": "07477f0d-6f6b-4de6-9169-a7b07e90e3c4",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "8bbdbd19-16b2-46d7-8b57-3af314af4e2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad4c3134-c86f-4540-9966-62053a49983d",
        "cursor": {
          "ref": "ede71033-94f1-4d37-829f-ff3fd49402b8",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "4957db9b-6b3b-4bff-92f6-fe1c3044cd2c"
        },
        "item": {
          "id": "ad4c3134-c86f-4540-9966-62053a49983d",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "8e3cd915-31ce-4284-b03c-86219e06e8d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6e03be1-f811-4382-8fe4-88c47ed32087",
        "cursor": {
          "ref": "26f200cd-1321-492b-a640-474483fe02bd",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "162d2297-38e0-4d12-890a-be9428b239b7"
        },
        "item": {
          "id": "a6e03be1-f811-4382-8fe4-88c47ed32087",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d38211e0-4c50-492c-bc8f-8e490359becc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94b56ff2-cfca-41e8-b2e2-e60d478bd93b",
        "cursor": {
          "ref": "d506e6d2-dd0d-4b59-bc5f-340ebc53582d",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "067eb078-568a-4ddc-bc61-cc8cd06b9db8"
        },
        "item": {
          "id": "94b56ff2-cfca-41e8-b2e2-e60d478bd93b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "acb423ba-6a55-40d7-90ab-258b9523a6bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c4b93fe-7884-45af-9a00-3656e39affb1",
        "cursor": {
          "ref": "a75e7edd-fc6f-48eb-b730-9e0d33ed4c75",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "c5f2bbe3-4c30-4ba4-9c9f-5570a9e54d47"
        },
        "item": {
          "id": "2c4b93fe-7884-45af-9a00-3656e39affb1",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "174c8f4c-eb21-40ea-aa12-f9eae2de4e25",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "326eef14-fd1d-4af3-aa20-62453b59da54",
        "cursor": {
          "ref": "d18aba35-792c-4570-b145-c440fa8a7c8f",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "042ccc91-97a1-4b85-a5c0-c2fdfbdb9ee4"
        },
        "item": {
          "id": "326eef14-fd1d-4af3-aa20-62453b59da54",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "1d4ea18e-03e2-4265-9c33-11f6b6c8aba7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "fd9c9af8-5ee2-4a2a-84bf-b9e11458f46a",
        "cursor": {
          "ref": "01e39f29-6d79-40a8-8d23-6cdf8b64fb52",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "744b3779-087a-47fa-abe3-4aba69d0142a"
        },
        "item": {
          "id": "fd9c9af8-5ee2-4a2a-84bf-b9e11458f46a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "d7637810-24c8-465a-be78-7a336839b3e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "1637b7ae-65c9-4625-b149-110d8fa7d75c",
        "cursor": {
          "ref": "128b4293-2266-450a-8d84-f94ea5e7ebc1",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7802adaa-36f1-4662-80e2-d166bcd2492f"
        },
        "item": {
          "id": "1637b7ae-65c9-4625-b149-110d8fa7d75c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "dd680313-a4ed-4d71-8438-31c5b78e03de",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "01d81604-04d7-4b9a-9bce-ba84bcabe665",
        "cursor": {
          "ref": "9b592cc7-0758-4ae5-b960-c74d8e485982",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "3888869a-bada-419d-962f-001739178b66"
        },
        "item": {
          "id": "01d81604-04d7-4b9a-9bce-ba84bcabe665",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "4bce597c-5124-422a-997c-f6b3a3258bff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "dcff0c60-c8e8-4483-b442-ebe355372106",
        "cursor": {
          "ref": "56105c28-125d-40de-8e8d-37724d86cce3",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "f695d9a3-de9b-4353-9249-fd8a4fa17ee8"
        },
        "item": {
          "id": "dcff0c60-c8e8-4483-b442-ebe355372106",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c2ecc715-be2b-4b20-ae61-fdefdbd8cdcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "756e6a99-d9e4-4a79-92ef-13f636656df3",
        "cursor": {
          "ref": "449c179f-9f6a-44f7-9e6c-60ba31f46440",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "78e3df41-333d-478e-9c6b-6ed31aa66d4a"
        },
        "item": {
          "id": "756e6a99-d9e4-4a79-92ef-13f636656df3",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "1934119a-de38-45d8-86c0-3e17fe15b58f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6731af5f-b4d5-40cb-b374-dae817440524",
        "cursor": {
          "ref": "b31ffa10-71d8-471c-b9c1-e1ce97d91751",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9ccab5b5-f52f-4544-83bd-0ebba77f5e82"
        },
        "item": {
          "id": "6731af5f-b4d5-40cb-b374-dae817440524",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "30f85ae8-0e11-48b8-b6d4-76a277498f4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7a8a00e-4f8d-4cee-9492-dcda56f8cc77",
        "cursor": {
          "ref": "ccc75275-89d0-43a2-b4a8-310cb0c2d040",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "98ef2e7c-450c-43e6-8fc4-f6fd362bd98e"
        },
        "item": {
          "id": "e7a8a00e-4f8d-4cee-9492-dcda56f8cc77",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "296891d8-f1b8-425d-ae46-12f76fcf2428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8b3113c-d34c-421b-88bf-ee5a2adb5afe",
        "cursor": {
          "ref": "f450a158-8e50-4452-8806-fa46704a06f9",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "fcdb417b-29ee-4a55-8ee0-40ae0a6808d1"
        },
        "item": {
          "id": "d8b3113c-d34c-421b-88bf-ee5a2adb5afe",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "dfa042f3-1714-4c40-a338-bf6648dce4d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64fc17c7-582f-468f-8277-e49c188c0104",
        "cursor": {
          "ref": "a9743013-1409-4f46-a357-dfd12e455f58",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ca4b6988-78e6-4989-84b0-173fba543f8f"
        },
        "item": {
          "id": "64fc17c7-582f-468f-8277-e49c188c0104",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "6929f7c8-ae36-4c97-88dc-6d859c07374b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3866b90e-0965-48ce-8ea2-b889ae9ec9e0",
        "cursor": {
          "ref": "537ac38c-21d5-4787-8706-136ed13a29dd",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "eccfbf84-c5e0-4f0f-b9d8-3c581dc35841"
        },
        "item": {
          "id": "3866b90e-0965-48ce-8ea2-b889ae9ec9e0",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "cb546786-d082-4fd0-9da5-de24b76f8c59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6faf8e78-ca2c-436a-a8b7-e0483a1f7151",
        "cursor": {
          "ref": "93a9e182-0c9a-42ef-a5ea-ee1dff97e02c",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1eee4089-6244-446b-9caa-5c0b7e822a72"
        },
        "item": {
          "id": "6faf8e78-ca2c-436a-a8b7-e0483a1f7151",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "3255de9f-1a22-4969-9eeb-8883f2377fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ffe78e5-49a5-4347-8867-1688d07b2494",
        "cursor": {
          "ref": "2b3e1bab-c0ff-48ad-b52b-88f7a69a9fd1",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "99911df7-e744-46df-914a-d00f93bb93ae"
        },
        "item": {
          "id": "8ffe78e5-49a5-4347-8867-1688d07b2494",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a6775532-7464-4532-93bb-0bf3539bf52f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84090a66-27c3-492b-83ec-4f600c38b42d",
        "cursor": {
          "ref": "d66c2402-acb1-44a5-a6b7-68eb4e529857",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "2ebb797f-95a1-489d-9e41-ecd10c0734fe"
        },
        "item": {
          "id": "84090a66-27c3-492b-83ec-4f600c38b42d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "efc82d29-4aca-48b2-843a-ae68a6fda387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0876620f-faf3-420b-a74e-99da47177177",
        "cursor": {
          "ref": "24baba29-c024-4e18-8371-35d5a1712449",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "6ffe3c4e-e4ea-486e-8bc8-970a40f739db"
        },
        "item": {
          "id": "0876620f-faf3-420b-a74e-99da47177177",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "1079534e-39c6-4c77-8123-a06ddd1d6a72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01e9d8fe-604b-4eec-af6d-e6e7f585c6e8",
        "cursor": {
          "ref": "bc5ba9e1-78ea-4663-9eae-d1d61d0f66eb",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "7de6ea89-ccf8-41d8-8061-5c217deabd40"
        },
        "item": {
          "id": "01e9d8fe-604b-4eec-af6d-e6e7f585c6e8",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "30a16f16-cddc-4ba0-9ff6-3dbf84279c5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e4e8738-d953-44ad-85fd-b6df631d8fb4",
        "cursor": {
          "ref": "87b5a494-b5db-494d-9f07-f92d2f229c8c",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "9db48ab2-d184-4183-a884-3275a0731218"
        },
        "item": {
          "id": "0e4e8738-d953-44ad-85fd-b6df631d8fb4",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "56564e23-5491-4003-b22b-a420eb307eef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d46b13b2-86e9-4eb6-a970-15c8c52dc3a7",
        "cursor": {
          "ref": "aab39c0b-019f-4446-a840-42c58741f330",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b7b81991-6e69-40f5-8a6a-665b918af7f7"
        },
        "item": {
          "id": "d46b13b2-86e9-4eb6-a970-15c8c52dc3a7",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "52e043af-29a4-4163-b3c1-4c52e59e1a38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da78a3a7-f691-444a-9ae1-9935d6e36eee",
        "cursor": {
          "ref": "08da73a1-f9df-4dbb-962d-8da7f582f01c",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "bf9495d4-1f6c-41ec-b822-5cf17c5db332"
        },
        "item": {
          "id": "da78a3a7-f691-444a-9ae1-9935d6e36eee",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "93129ade-2215-4ffa-ae8a-eec4170f6ece",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbee3891-dec0-4bd5-9fe1-0d2a67130314",
        "cursor": {
          "ref": "50d69708-db60-4d7c-82c0-2230abdd345a",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "dd906ec6-ce7f-4f37-9b2a-a1b04b4d7f1f"
        },
        "item": {
          "id": "cbee3891-dec0-4bd5-9fe1-0d2a67130314",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "93d45e12-583f-474f-9f49-85674e877cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "966b2699-69cb-4af2-9228-cfa5d9d33794",
        "cursor": {
          "ref": "bcb6826b-56a8-4099-aee4-cf751023b28b",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "541b6b81-7ba3-454c-b825-b56a55b9575e"
        },
        "item": {
          "id": "966b2699-69cb-4af2-9228-cfa5d9d33794",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c05688ba-a89a-4e80-ae55-f50be24ce4ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a512e99b-e683-4a1f-95ac-4103358f0598",
        "cursor": {
          "ref": "fae60b50-fcd7-42a3-bb9b-538aaa8d0de2",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c92f2222-ea55-4653-980a-9e7296c1f2aa"
        },
        "item": {
          "id": "a512e99b-e683-4a1f-95ac-4103358f0598",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "53fa1434-aeb5-4c15-895f-7c8700d32206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f02f1b8-a2ed-42e7-9d00-a8a4e41e8887",
        "cursor": {
          "ref": "c054bc9b-d643-4f95-9f4d-73d4c7879796",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "cbd3dd99-94f5-4040-8cb7-168d279d4514"
        },
        "item": {
          "id": "4f02f1b8-a2ed-42e7-9d00-a8a4e41e8887",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "8d2a9e2c-68c2-4011-9fa7-23a5fcaa7bda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c3b994c-02a2-4c31-9ca9-067ea22fbdd2",
        "cursor": {
          "ref": "ad1d50b3-6201-4fd7-afc7-cfac7e3ee4be",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "ed0856dc-ebbe-4b62-8d1c-88d686ce1149"
        },
        "item": {
          "id": "4c3b994c-02a2-4c31-9ca9-067ea22fbdd2",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "e4fdd0b1-d7c8-4c5a-bca2-08a9106e1696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7fe96a5-a422-43a7-8284-292510294c93",
        "cursor": {
          "ref": "9cb8d1fb-7070-4d86-ba9e-5b6ccf98a3b9",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "6a7f3186-cd7e-4d6d-9d7c-b8c5459cf4c6"
        },
        "item": {
          "id": "c7fe96a5-a422-43a7-8284-292510294c93",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "3724f96f-2fd3-4f8d-8e3a-b2b82ab8e161",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b169d515-cf3d-4290-88d3-a4cf63a05891",
        "cursor": {
          "ref": "394d76a5-a5ca-4469-8ed0-a3380dc6cdbd",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "137de5b8-6e6a-4713-b563-cb9d9d4bf717"
        },
        "item": {
          "id": "b169d515-cf3d-4290-88d3-a4cf63a05891",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "506040fc-b014-4d6a-9994-5717ae8c43e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f71c8779-51d4-4bcd-b737-f93775a10d98",
        "cursor": {
          "ref": "8cfd9c64-681a-4b29-9888-0c64c9228cb7",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "60133c9d-9e70-4f6d-b9ee-b3ad19370b0e"
        },
        "item": {
          "id": "f71c8779-51d4-4bcd-b737-f93775a10d98",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "0349b8b1-9cfa-4e05-a90d-a665482e9637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fe89d7d-6f40-40a5-8b6b-d8339f72c6a8",
        "cursor": {
          "ref": "6c8caa08-ad15-4291-9735-9e47b1aa2be0",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "adfffbd4-88bc-4ede-86d8-0b0e18ad07f0"
        },
        "item": {
          "id": "6fe89d7d-6f40-40a5-8b6b-d8339f72c6a8",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3a784010-6ac5-4212-bc0b-48b013c43b7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fb57ad0-17c9-4aa4-960a-7f415e3e7f61",
        "cursor": {
          "ref": "cdaab9b0-4b7b-4b63-84bb-2f284dfedccf",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c7961751-b793-40a6-a7f4-6414bfa38fac"
        },
        "item": {
          "id": "0fb57ad0-17c9-4aa4-960a-7f415e3e7f61",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "65a040db-e141-4bff-8374-7e21e5c9cdd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca06845d-20bf-4e74-be27-ac33ca1fa144",
        "cursor": {
          "ref": "100c446a-e1bf-4562-ad09-1af5906c8e90",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "ab52d65e-194b-445d-9da1-6f80d2122066"
        },
        "item": {
          "id": "ca06845d-20bf-4e74-be27-ac33ca1fa144",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "8ee73a26-108c-4e55-ac9a-ca330a7929b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e2eb85d-e875-402d-b7f7-abd0ba7a2ac2",
        "cursor": {
          "ref": "d9873ffb-394c-4ec6-81c0-82d37ea3cf01",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "740212d2-5b05-4c69-9d75-43914d1171bf"
        },
        "item": {
          "id": "3e2eb85d-e875-402d-b7f7-abd0ba7a2ac2",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "62a072aa-5426-4b50-8855-12eb02be81ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9c24c1a-7e69-4fa8-a4cb-04670211f711",
        "cursor": {
          "ref": "94607f76-82d4-4758-8e07-86479298ef74",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "577fa2ba-9b1c-4c8d-bd3c-8f6da2f41883"
        },
        "item": {
          "id": "a9c24c1a-7e69-4fa8-a4cb-04670211f711",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "09da1f16-f13a-47f4-9285-5e5dfc1005cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68ce5a1b-dd1c-4751-9304-cdf66701b2d6",
        "cursor": {
          "ref": "f73809c4-c81e-47ed-a5a8-96ff300016b2",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "c5fb1a82-cab5-4a32-8b6d-6b3204617e44"
        },
        "item": {
          "id": "68ce5a1b-dd1c-4751-9304-cdf66701b2d6",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "9fc13b53-364f-4390-b134-ac2705153521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2cce084-5526-4ddc-bf0c-7429d5454d6d",
        "cursor": {
          "ref": "59f51e56-99e1-420b-8350-6936b00e4b5b",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "743e5aa4-fbe2-4e0c-8759-7ad4dccd5ed0"
        },
        "item": {
          "id": "f2cce084-5526-4ddc-bf0c-7429d5454d6d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "be2d90b9-f521-4824-8cda-321aeba5f027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb453a4b-3eaf-4ee4-8b1b-a32d7e581f09",
        "cursor": {
          "ref": "ff092d12-4ee7-44f2-ba33-70f417ac842e",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c8e3ce2b-ffb7-4d93-9209-c72ea30b45ca"
        },
        "item": {
          "id": "cb453a4b-3eaf-4ee4-8b1b-a32d7e581f09",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e9a0cb2b-5664-48b6-a1d6-4e9820889506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4cb964f-50d5-4e6d-8add-3e3ee864c3e3",
        "cursor": {
          "ref": "510808ed-b627-43dc-b77f-58aa28fd30d2",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "3e695c1d-c66d-4711-b5e8-0f312aee91de"
        },
        "item": {
          "id": "e4cb964f-50d5-4e6d-8add-3e3ee864c3e3",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "6006df49-481c-404b-80b8-ed5e0cb6d859",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21fbef50-d108-40e3-a4bb-a81b9d243bde",
        "cursor": {
          "ref": "66f3e936-9b06-40ab-b445-4e1b26dd08ca",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "07227964-28fd-46eb-977f-ffd90e62e502"
        },
        "item": {
          "id": "21fbef50-d108-40e3-a4bb-a81b9d243bde",
          "name": "credentials_issue"
        },
        "response": {
          "id": "24fb36b5-d187-4acb-ad16-c0314f471516",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:102)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:102)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:102)"
            }
          }
        ]
      },
      {
        "id": "79b34fb3-cf25-4597-8e09-bf6c70a35802",
        "cursor": {
          "ref": "2a46d7e3-dfcd-4a4e-ae90-e7e6d035a609",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c20cee34-4e14-4c8a-b507-67b98fb9084a"
        },
        "item": {
          "id": "79b34fb3-cf25-4597-8e09-bf6c70a35802",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "e5436ceb-d0b2-413e-8f96-a050672d792f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:103)"
            }
          }
        ]
      },
      {
        "id": "c42455a4-f53b-4f65-977b-2295930768fa",
        "cursor": {
          "ref": "0b9bb1c7-38e0-4c57-98bf-b8cfb07bf20d",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d61fe29f-328b-4a1d-b523-bf89d6533235"
        },
        "item": {
          "id": "c42455a4-f53b-4f65-977b-2295930768fa",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b3c4eb22-851e-46c6-b937-9244a72f280c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "34914811-7e73-4f99-a754-ab6d9e59e82e",
        "cursor": {
          "ref": "48c6feda-a370-44de-a00b-831224048e15",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "51a41527-543c-477d-a516-c6cea2aeac01"
        },
        "item": {
          "id": "34914811-7e73-4f99-a754-ab6d9e59e82e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "387d322c-313b-48df-8637-075fa0d59a4c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "14c3d469-e15e-4868-8fda-3ee6e55ed646",
        "cursor": {
          "ref": "71582ea2-4b7a-4d19-8c08-eedb8bccb187",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "931c1af5-5d40-47b8-9298-cca314646d7e"
        },
        "item": {
          "id": "14c3d469-e15e-4868-8fda-3ee6e55ed646",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d6c08c32-8c86-424b-92da-3aac6fd551f1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "d0ca8081-74c5-4fb2-9ee9-e54dcc72baa0",
        "cursor": {
          "ref": "dc3eaaa0-f646-476e-8952-ed015a413072",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "5b9a4e7c-d4c2-47b4-bb4d-03d12d10ae9f"
        },
        "item": {
          "id": "d0ca8081-74c5-4fb2-9ee9-e54dcc72baa0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "db579cba-a8d7-4a36-8bfd-89208d05ee10",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "df17f4fa-3a40-4d39-8bad-144fe7ef9122",
        "cursor": {
          "ref": "1045e9cf-6532-4739-b78c-2fdb95d51c36",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "4bb9cbc0-8075-414a-bee6-4ab6748d3ae4"
        },
        "item": {
          "id": "df17f4fa-3a40-4d39-8bad-144fe7ef9122",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "eb1d65ed-f778-4cd4-8d4d-1b5bbfe088fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91fdb650-6f59-45d6-9d6a-c4b508286dce",
        "cursor": {
          "ref": "99b55e64-ef37-41bf-aa7b-33d543f715d7",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "9a4ea9af-5cab-4e3f-beda-91597df4a196"
        },
        "item": {
          "id": "91fdb650-6f59-45d6-9d6a-c4b508286dce",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d3716f29-5cf6-45d5-abcf-33b72226235e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1c3e688-8c9e-495a-adaf-0438d6bff225",
        "cursor": {
          "ref": "fbd0ff5c-1743-4a0b-a4e3-7e8746185f9e",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "72fdf4f1-351e-47bb-a458-c0ca5212a952"
        },
        "item": {
          "id": "e1c3e688-8c9e-495a-adaf-0438d6bff225",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7c907df7-87b5-4fc4-8a85-73277d6acd57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46270c60-0175-4443-a179-82ca514a90f3",
        "cursor": {
          "ref": "da9c6a2c-745c-4d7f-b758-1161c93edaa3",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "c5128b17-bc23-4114-b58e-8afc082815a2"
        },
        "item": {
          "id": "46270c60-0175-4443-a179-82ca514a90f3",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d2c040a3-8d6a-4f96-a966-d0c42d983eaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d404e56-2579-4b9e-a30a-6ee4bdfc93c5",
        "cursor": {
          "ref": "1d4b9918-657f-465b-a4a4-5d80379ad4f5",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "fff50998-5b6c-4d7d-ba83-9c3c6480b6a6"
        },
        "item": {
          "id": "1d404e56-2579-4b9e-a30a-6ee4bdfc93c5",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f6f8657f-c0af-489d-95c3-f41c9f9b656f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88765cc1-d56e-454b-b4ba-276ea3371690",
        "cursor": {
          "ref": "899eacb3-c858-4ad6-b0d8-3fb808fdc3e6",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d4c1fc37-4427-4819-943b-e395bea1d792"
        },
        "item": {
          "id": "88765cc1-d56e-454b-b4ba-276ea3371690",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "cff4fb8a-5595-40a9-aaec-90214a5a2bd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b74629b7-25e3-48c4-9cb4-f6c9216f544c",
        "cursor": {
          "ref": "cdb8d1ea-9ce6-41ea-8ac1-ab8266ad0564",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "44bebb99-0143-4d77-a71a-503817a58ac9"
        },
        "item": {
          "id": "b74629b7-25e3-48c4-9cb4-f6c9216f544c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d7202a78-b8b8-49cd-ba04-c81c2bb78900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db8fb80a-b175-4062-9db5-0385adf5470e",
        "cursor": {
          "ref": "d3cbdaa6-6291-4b13-8702-28122eaf14da",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "2266b288-8841-4298-89d9-6e6bf89815c8"
        },
        "item": {
          "id": "db8fb80a-b175-4062-9db5-0385adf5470e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "66ec35b9-2a3c-4931-ad1e-ccacb8d09589",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d9aa5ec-6a84-4768-84c0-ab17e553c213",
        "cursor": {
          "ref": "825292c4-155a-466a-bf15-9026602f8db7",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "ffbc734c-ae52-4f63-99bd-31e624a97449"
        },
        "item": {
          "id": "6d9aa5ec-6a84-4768-84c0-ab17e553c213",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3a4430dc-7a5f-4389-8d38-246045fc22bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0639e120-930b-4af1-9936-c4214c67e4d8",
        "cursor": {
          "ref": "9cd3fcc7-baa1-44dc-ba59-772f4addbb66",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "59f3b4b8-f3bd-40ac-900d-89aa157694a7"
        },
        "item": {
          "id": "0639e120-930b-4af1-9936-c4214c67e4d8",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5a906fe1-b020-4fa3-a00c-ddec4aab6f47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a148ccc-a954-4d31-8ff9-199d3dc29a64",
        "cursor": {
          "ref": "d61f4bf7-bb2e-4654-95e3-cf00f14e5084",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "382e569f-95f6-42e3-a8e7-868ee76dd920"
        },
        "item": {
          "id": "8a148ccc-a954-4d31-8ff9-199d3dc29a64",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e6a8d737-df05-49a4-8c09-8be069af140b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ea3481-3c83-4c45-91e4-c1191a6561e3",
        "cursor": {
          "ref": "7c06924b-7a59-4344-84d2-4efd7a0dadda",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "045ff8d5-9d73-4c99-8b21-817e38d673df"
        },
        "item": {
          "id": "11ea3481-3c83-4c45-91e4-c1191a6561e3",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d6b0b6d8-598b-4950-b0ec-714a84bc8c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b56dbf8-d95a-42c3-949e-c41a04717dd9",
        "cursor": {
          "ref": "cea67fa7-d06f-417d-9b7d-906898717c3e",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "b13d5eaa-02c1-45a6-be94-5ab4d34aac62"
        },
        "item": {
          "id": "7b56dbf8-d95a-42c3-949e-c41a04717dd9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c92aa829-66c2-45e4-aa53-9f21d4b8555a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa21b43-8c56-45ee-8771-0d5eda7df7ad",
        "cursor": {
          "ref": "6640b432-633e-4892-a745-ebd6d5fa066e",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "e0f5a0a0-1c1a-42e6-8dbe-74e401109129"
        },
        "item": {
          "id": "3fa21b43-8c56-45ee-8771-0d5eda7df7ad",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "939ee7de-0c5e-4b0c-a562-79b482367e6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f32dc403-b776-4714-966f-af26b7dd7f01",
        "cursor": {
          "ref": "8226f580-9e35-44fd-93f7-ca8e63e404d4",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ff94337f-d74b-4da2-ad30-a4ea7dd7c23c"
        },
        "item": {
          "id": "f32dc403-b776-4714-966f-af26b7dd7f01",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "92c0f53b-2771-4c29-acdf-9fd049eea528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d94a536-97a9-43d3-90a1-65c767bc8ec6",
        "cursor": {
          "ref": "4cfc775a-135f-4f39-af82-3073408d7fec",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "352d0638-026b-4498-bf8d-15af8f9ce274"
        },
        "item": {
          "id": "9d94a536-97a9-43d3-90a1-65c767bc8ec6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6a083450-ea06-48c0-b9d9-272fcbd64b5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89e9b5fe-bcae-425c-b1e8-29693f604385",
        "cursor": {
          "ref": "4e16946f-6a81-4768-981e-9ebd7815fbf9",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5fda5c76-f3db-483d-b112-c7344c12bf18"
        },
        "item": {
          "id": "89e9b5fe-bcae-425c-b1e8-29693f604385",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5cd5007e-2627-40b5-a529-8318d9808545",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02af496c-31e0-4d91-9ee2-2c5f5442b3cb",
        "cursor": {
          "ref": "e0e6ea43-9ee1-4413-b360-e2f4244582d4",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "45615dc7-f8ff-4900-8c69-43d55935dace"
        },
        "item": {
          "id": "02af496c-31e0-4d91-9ee2-2c5f5442b3cb",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5e9969eb-a848-4b7f-b6b6-d8154499be0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b28e1aa-fd48-4c29-9a1b-fe2e457960a1",
        "cursor": {
          "ref": "8a1aac06-310a-4f26-b097-5bda15497789",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "3b131d80-a79e-4515-b53b-5fa82be7b1a6"
        },
        "item": {
          "id": "1b28e1aa-fd48-4c29-9a1b-fe2e457960a1",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ce366d28-1f01-47ee-8955-089d654ba97f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a73ff35-9dfa-4b2b-8328-a14c9a9a4799",
        "cursor": {
          "ref": "bede724a-081d-4a00-90cc-10c0e38eeb8b",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ceea43cb-edb0-47bc-8781-c7eafac306ad"
        },
        "item": {
          "id": "8a73ff35-9dfa-4b2b-8328-a14c9a9a4799",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b5fca0c6-0c1a-4b2a-8bea-41268c2f597c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45f8fee1-0bc5-4907-8e4c-35dd472aeae6",
        "cursor": {
          "ref": "38840f0a-011a-442c-9982-9625588dfcbb",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d6e75576-8dd5-4102-b1a8-9e506e1aae0d"
        },
        "item": {
          "id": "45f8fee1-0bc5-4907-8e4c-35dd472aeae6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "741d0005-70d0-47bd-94d2-217c7a895951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8dec6bd-f529-40cc-b3bc-8a8bc0451d1e",
        "cursor": {
          "ref": "17f77be4-f7cc-4633-b111-3811776d11ea",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "5ca882da-ce0e-4fe8-a731-3b6b9d1f5d41"
        },
        "item": {
          "id": "a8dec6bd-f529-40cc-b3bc-8a8bc0451d1e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3651764b-ae72-4bb8-8059-25a3d9b1d840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "780f3105-972a-4d6c-be7e-f94feca14088",
        "cursor": {
          "ref": "a6fb2a7f-c253-4e40-a183-997377991e9e",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "7507dfca-4e91-483e-8f8d-ee9f8b00a110"
        },
        "item": {
          "id": "780f3105-972a-4d6c-be7e-f94feca14088",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "065b1ffb-44dc-41ee-8caf-b34b390072cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d4b7364-d956-44c4-8298-1dfde83446fb",
        "cursor": {
          "ref": "0ce9b8a8-1ad7-45da-9b7a-c7ad97f59174",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c1910ec1-28e8-471f-b9d9-21858f139ae1"
        },
        "item": {
          "id": "3d4b7364-d956-44c4-8298-1dfde83446fb",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7b0e0321-ecba-4e87-95cd-785adbdfec13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88972d04-5f67-4f3b-8a4e-cb9b1201c64e",
        "cursor": {
          "ref": "a2e025a6-b15e-4cb4-885e-e479761bc2fa",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "717e6b93-e279-4989-8fa9-947b2c2d41cc"
        },
        "item": {
          "id": "88972d04-5f67-4f3b-8a4e-cb9b1201c64e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b47a2257-35da-4140-8fa8-aec6646932a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43e64dba-2d33-41dc-9d83-568f9b760249",
        "cursor": {
          "ref": "475b0bc5-cca0-41cd-9f45-79c7cb67bd9e",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "56fa09a4-81f3-4852-a946-35c2e9e00981"
        },
        "item": {
          "id": "43e64dba-2d33-41dc-9d83-568f9b760249",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ae33e0d5-70b5-4239-998d-0ebac2706f96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4624c04-efa4-49eb-956d-8de1c728b1f7",
        "cursor": {
          "ref": "be80ad78-7539-4380-a69e-cabc3d27928a",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "edb420f7-7eb7-4541-b2cf-c2b7da30c900"
        },
        "item": {
          "id": "a4624c04-efa4-49eb-956d-8de1c728b1f7",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "900790fe-f914-436d-a3fa-b98467f199a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63c1e961-4c26-44fe-b26b-a0f81662e311",
        "cursor": {
          "ref": "0584aff1-1b82-403e-90f5-93f5ac0d8aee",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "bd0944e0-7910-450c-855e-ba4a8152d4f7"
        },
        "item": {
          "id": "63c1e961-4c26-44fe-b26b-a0f81662e311",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1b5ccf5a-4d0f-4cc3-96d7-66de60bb9e68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca9a6fcf-339b-475e-9f59-9b4aa552f649",
        "cursor": {
          "ref": "4802a098-8732-4235-82fa-5e79152c27ba",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "176e9097-fb51-455c-9f4d-0faaea2839a8"
        },
        "item": {
          "id": "ca9a6fcf-339b-475e-9f59-9b4aa552f649",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "dff29a65-39aa-4413-89a6-56c298954e90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a52e5edd-d0a8-4c34-be5b-a98d60c04d55",
        "cursor": {
          "ref": "a32eec29-d3bf-4ce9-82e9-b01aca5ee6da",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "42e5be5e-af63-48a0-836e-dadc6b8718a8"
        },
        "item": {
          "id": "a52e5edd-d0a8-4c34-be5b-a98d60c04d55",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b5178d6c-4f87-4119-9e17-6a544cf773f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26578ff3-ca18-4dbe-93b1-46877499930c",
        "cursor": {
          "ref": "ea1a6cef-00e4-4f7d-b7fd-36d646689238",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "de39cd08-d126-464b-8e8a-0a1546bc1fba"
        },
        "item": {
          "id": "26578ff3-ca18-4dbe-93b1-46877499930c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9bec3ad6-d0b0-4e56-8298-64b5c5f2e0a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4977c259-2e7b-464b-b104-95639dd1dde6",
        "cursor": {
          "ref": "87a0fc90-cf54-4a81-85b5-2dda1fbe3c40",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "8103fb15-0aab-49a6-bc51-719107ce153a"
        },
        "item": {
          "id": "4977c259-2e7b-464b-b104-95639dd1dde6",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "5e97e763-4994-43a1-b94c-b4a05ba70b06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "385da30c-ed72-4e1f-bfa5-46c67624efd6",
        "cursor": {
          "ref": "6dbc4a1c-b915-42ac-9386-4067b8294ddb",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d6bcf4ee-3739-417e-a28e-11eca09e62d7"
        },
        "item": {
          "id": "385da30c-ed72-4e1f-bfa5-46c67624efd6",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f4c1a41e-a620-47f7-a02a-c5277e06632e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54fb3287-f400-49b3-ad28-97a092be7ed2",
        "cursor": {
          "ref": "3619e1d6-f20a-47a8-abd2-3daeee779009",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "f69037c5-46ce-40a2-9904-7a6eaf35737d"
        },
        "item": {
          "id": "54fb3287-f400-49b3-ad28-97a092be7ed2",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f9c001c7-b4c9-46ba-ac93-e2c920338a7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff95dc30-1668-4ea6-be42-2c406d4eb5af",
        "cursor": {
          "ref": "e02ff7c7-8ff5-4264-801c-d4e954511db9",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "9b38ffb8-7e32-4e3b-9a02-45669874c96f"
        },
        "item": {
          "id": "ff95dc30-1668-4ea6-be42-2c406d4eb5af",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "71ec1dd4-a220-4a07-b7ac-538a571ac965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca7a3395-e9df-4bf7-83ec-689bf33523bc",
        "cursor": {
          "ref": "9b487b61-760a-49f1-97f8-ef10a8199ed3",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "face33e4-8700-45f3-bd98-27745377099f"
        },
        "item": {
          "id": "ca7a3395-e9df-4bf7-83ec-689bf33523bc",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "dea41bef-3b6b-46f0-bb96-b4bd2aff25d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78224733-2ad6-403a-8444-2c00ed67d229",
        "cursor": {
          "ref": "2580593f-2776-4a59-b08d-f2905db893e4",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "fbad1d7b-b543-4350-9aa4-aafe2db28875"
        },
        "item": {
          "id": "78224733-2ad6-403a-8444-2c00ed67d229",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "044827fe-17bc-4805-9a7e-ad27b5e9dda2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "429faa99-0871-4129-b22e-e492f3b777a3",
        "cursor": {
          "ref": "89455ded-f392-44e1-bbae-7d49b0b63b44",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c2f7e08b-75b1-4f53-86d7-4f565b82a2cd"
        },
        "item": {
          "id": "429faa99-0871-4129-b22e-e492f3b777a3",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7218270b-ee86-4c58-96e8-e6aab436dee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dee9a834-4850-4a45-a798-09cc3722e348",
        "cursor": {
          "ref": "d3b800e8-3f17-481d-b0a3-b51031a7f6e7",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "bbc16169-3434-4e08-b58d-2ef70604112b"
        },
        "item": {
          "id": "dee9a834-4850-4a45-a798-09cc3722e348",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ae162cdf-1294-438e-97a5-aec7f15f1c83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aab229bc-6d9b-4daa-9619-6f17c58cb56b",
        "cursor": {
          "ref": "686050c6-5ddd-48f7-9c9d-ad4d4f3e8bb2",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f4393991-e21c-4566-92bd-6da0a6c65629"
        },
        "item": {
          "id": "aab229bc-6d9b-4daa-9619-6f17c58cb56b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "982cb1de-9804-412f-aff1-91f6a188fb9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fa91bef-a99e-4212-aef6-aeaac53c5640",
        "cursor": {
          "ref": "4cc1d79d-6b04-47d0-b0a7-5688f341e25d",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "145ef712-567e-4282-a1b4-eb17b210e646"
        },
        "item": {
          "id": "1fa91bef-a99e-4212-aef6-aeaac53c5640",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "478f8efd-5b4e-466e-b571-a740e743ba26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a65c55a8-ba7c-4a6c-9473-421a6d036f14",
        "cursor": {
          "ref": "5879f1a2-26bc-40fb-b92d-975879a61480",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8b263222-09de-4ab4-94ff-4d5beaaf4b24"
        },
        "item": {
          "id": "a65c55a8-ba7c-4a6c-9473-421a6d036f14",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "1aedcaab-b940-40f9-8f45-ecc87c8cfefa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c9e71cb-19b1-48e9-a768-d9b4e81517fc",
        "cursor": {
          "ref": "c5f50466-a625-4fa6-8803-eca5dffb9db1",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "2200009f-9627-4800-b57a-e6f2763bf1c8"
        },
        "item": {
          "id": "5c9e71cb-19b1-48e9-a768-d9b4e81517fc",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "9476055b-a0c7-452a-86b2-b03616142c15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b1d3497-9985-432b-877d-a4ccf68f8c08",
        "cursor": {
          "ref": "e292f9c2-8aa4-42f4-82bf-a9acee9a2b8c",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "69d7b44a-6f06-438b-9f55-b706e0341fed"
        },
        "item": {
          "id": "8b1d3497-9985-432b-877d-a4ccf68f8c08",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "32f71a38-3bd9-44b5-bd3b-65267619d00c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b1c86af-4405-47a1-8957-5128dd427d15",
        "cursor": {
          "ref": "35078cb0-6420-4c5a-87d1-6bdba0aac4fd",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "920f5115-d125-4ab6-8bf5-e58907b7a4d5"
        },
        "item": {
          "id": "6b1c86af-4405-47a1-8957-5128dd427d15",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "354e7e24-2ef4-48d3-ab39-c63f768afff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e6e37a0-664b-46f0-8eac-c8543ed8e897",
        "cursor": {
          "ref": "ed6434f0-e9c8-43a9-9089-7a854074210e",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "7e65d30f-ba82-4950-983b-017f2d3a7bb2"
        },
        "item": {
          "id": "0e6e37a0-664b-46f0-8eac-c8543ed8e897",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "f3f44997-4992-4bd5-8e76-af7a1f45e96b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca8b59a-3fb9-4906-9b34-afeecdcfd3ec",
        "cursor": {
          "ref": "68255c9f-8153-4e5b-a294-ae2b05b317a2",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "3b613232-3a4e-4e6c-951e-c83f9aca9d68"
        },
        "item": {
          "id": "6ca8b59a-3fb9-4906-9b34-afeecdcfd3ec",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e9eb500f-bf9d-4c8b-b66c-eaf5efc08ed1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be77538d-dcd5-466f-a48e-adf1812d523a",
        "cursor": {
          "ref": "b231d5a9-e02a-47ec-9a80-a272d6511488",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "9f6cbd19-8440-4a7d-9e2a-0cdc25595b7a"
        },
        "item": {
          "id": "be77538d-dcd5-466f-a48e-adf1812d523a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a6d4866d-2656-49de-9530-93df3a57dbec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57fc0c19-0e1f-4339-8da6-3e7bed329dac",
        "cursor": {
          "ref": "e9778c27-46a6-407f-8c0f-a120e29b9d53",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "ec3223fa-3b58-4d8a-93fc-ff5e82621d2a"
        },
        "item": {
          "id": "57fc0c19-0e1f-4339-8da6-3e7bed329dac",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "44df12c3-e26c-4a5f-834f-ee7161bf3cc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2488c980-8b65-44f5-befa-bfe6c62c5582",
        "cursor": {
          "ref": "da98b78c-adb4-412c-b1ba-9fba46e55153",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "953ad538-b2ac-4d1e-abdc-2e89f40aaae6"
        },
        "item": {
          "id": "2488c980-8b65-44f5-befa-bfe6c62c5582",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d9e830a1-3385-4439-8c9c-1f7ee71df3a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed3acede-c354-4e9b-8c74-9f38925c92f5",
        "cursor": {
          "ref": "13e7dfdc-162c-4f1f-a290-26e13523b111",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "16e76d64-02aa-4d05-b1ba-f5d05b242593"
        },
        "item": {
          "id": "ed3acede-c354-4e9b-8c74-9f38925c92f5",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "4073af90-a348-43b2-80e8-06d5d17e34e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4c7d23a-06ea-4413-8ba0-7a2ed8c7963a",
        "cursor": {
          "ref": "7f954b49-050d-40e3-83bf-46d9576c0d2c",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "44acc606-6b1c-4138-bff0-7fcab346ad52"
        },
        "item": {
          "id": "a4c7d23a-06ea-4413-8ba0-7a2ed8c7963a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "5065e191-b5ea-4700-840b-aa9667148ac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f73490-7fe1-4509-87ae-3dde451aa531",
        "cursor": {
          "ref": "cb41ceea-6111-4a7e-946f-02bf91818047",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "8c5e9093-35b5-4c5f-8e3e-ec8488a6030d"
        },
        "item": {
          "id": "01f73490-7fe1-4509-87ae-3dde451aa531",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "30cdab46-b71f-4c50-8295-885b91dc3aca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7e63fed-31cf-4d33-93f6-55f58ba8fc7a",
        "cursor": {
          "ref": "80e474ea-fa19-4799-9d19-9dab38850f26",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d0cd54f6-16d0-403b-8299-dba28784da8d"
        },
        "item": {
          "id": "b7e63fed-31cf-4d33-93f6-55f58ba8fc7a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "3139a62b-189e-40d7-8eb1-0a334f42d28b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "829cf5a1-8a1c-49e8-b424-8f9574e63d44",
        "cursor": {
          "ref": "42d09b28-3e6b-48e9-86b9-cc2bbf674860",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "9b356a3c-3f49-4b92-a90f-6d9fb40c7917"
        },
        "item": {
          "id": "829cf5a1-8a1c-49e8-b424-8f9574e63d44",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b4bd8e66-b3a0-4251-b916-6505beff63f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06a5875c-74da-4a95-9681-71b31effd592",
        "cursor": {
          "ref": "ec33dd09-a5fc-455a-a58a-a885d34c389c",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4c6f92a4-f60e-482a-b262-790ae64ef276"
        },
        "item": {
          "id": "06a5875c-74da-4a95-9681-71b31effd592",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b9f9377c-a4dc-44c1-ba0d-5b889a040e05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06d8ce82-7125-4a03-8a2f-4d8bbdf4a9c3",
        "cursor": {
          "ref": "d731017e-5dee-4e18-8380-43d1f5e7bcdb",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "0cefcdca-4714-4328-946d-556bb7bbc7e3"
        },
        "item": {
          "id": "06d8ce82-7125-4a03-8a2f-4d8bbdf4a9c3",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6fc1f351-c50f-4059-b533-c7647c080386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac379ff2-9a1a-4f70-aace-b3698e91df83",
        "cursor": {
          "ref": "b22c93df-903f-4eee-8e14-a23cd93bd2f2",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "8433d5eb-d7a8-484a-a2d4-88875dac388c"
        },
        "item": {
          "id": "ac379ff2-9a1a-4f70-aace-b3698e91df83",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d648bef3-13fe-49fd-95f0-4a5d2ac02505",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b3f459c-730b-459e-9a01-5de2c481681c",
        "cursor": {
          "ref": "4d20bb17-591d-435a-8cd8-23eeefa57108",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "03868420-efd2-4c41-b201-a3ef6b58fe26"
        },
        "item": {
          "id": "4b3f459c-730b-459e-9a01-5de2c481681c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b841e9ba-0673-46bb-ba3c-1827841c69f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cca66207-492f-446e-8585-18d230314024",
        "cursor": {
          "ref": "b36be46a-cd61-467f-9480-ddfe7bd9b326",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "665f9754-b557-4e95-adf4-1c9506e9ec10"
        },
        "item": {
          "id": "cca66207-492f-446e-8585-18d230314024",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "484d8ca1-c746-4895-bcf8-33bd612e6f66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "516e344b-6533-4ec5-afb9-f8694f447377",
        "cursor": {
          "ref": "1d3ba0a8-2242-4bc0-be9c-5bbe920f550b",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "51275e08-c5fe-411c-a15b-497d5862c673"
        },
        "item": {
          "id": "516e344b-6533-4ec5-afb9-f8694f447377",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "aaf08767-371d-4896-9dab-fb3269414f96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8980e3eb-65d8-4101-9917-7f6c1e19521d",
        "cursor": {
          "ref": "daa4220f-aa3c-4e3a-8192-70157507487e",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "960b1688-6788-4b3b-8861-df70cf11d802"
        },
        "item": {
          "id": "8980e3eb-65d8-4101-9917-7f6c1e19521d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b74e9b37-866c-477c-aed0-23dd70ab51d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "679849d6-a92e-4d64-931c-0c5de8300b99",
        "cursor": {
          "ref": "8def4b00-9169-4dd3-8989-cea61e1f13a3",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "268604da-c062-4e99-ac73-b977672416c4"
        },
        "item": {
          "id": "679849d6-a92e-4d64-931c-0c5de8300b99",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1a3f440a-c08a-45d2-9e75-4cd6d80f5ccb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b1c50ac-bc64-49e6-98aa-d8e6b879ea49",
        "cursor": {
          "ref": "cdf069f5-6973-49dd-9e4c-9812d1b4a0e0",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "4977d70f-acd2-4ff6-96bd-d640cf2d6e9d"
        },
        "item": {
          "id": "7b1c50ac-bc64-49e6-98aa-d8e6b879ea49",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "476b21d2-b3c7-4a8e-9d64-c3415812f217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5285a6b-815f-4e03-80d9-45fa009c04ee",
        "cursor": {
          "ref": "4cad3569-1cf0-413c-9e67-eca65e0aabcf",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "6d642abb-ed7e-46fa-9849-6998b4cba7e3"
        },
        "item": {
          "id": "d5285a6b-815f-4e03-80d9-45fa009c04ee",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "4f79e38e-a399-418f-a508-69be10d5301d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f9a7177-f1f4-48e0-a501-3bed70fe2984",
        "cursor": {
          "ref": "43f3fec2-63af-46f5-8a2f-662e141c1669",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "ae356018-82e7-4c29-8476-619b43348a50"
        },
        "item": {
          "id": "9f9a7177-f1f4-48e0-a501-3bed70fe2984",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "700326f0-93cd-4729-96ec-3a85b37918f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e947f2d-c434-4531-b7fa-c12526370bb7",
        "cursor": {
          "ref": "298bd05d-a08f-4044-b029-95dbb5bb2d9e",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "cf921255-da5f-45e2-b61a-f95fe181d6f5"
        },
        "item": {
          "id": "9e947f2d-c434-4531-b7fa-c12526370bb7",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "cd05f2aa-afd2-4dbc-a653-5ad274f38bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "629e4827-013d-43c2-88af-df7beafb55f5",
        "cursor": {
          "ref": "9288fd51-3107-4a11-905f-991af51e569a",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d97536af-7c9a-4c25-b641-b4836549d12f"
        },
        "item": {
          "id": "629e4827-013d-43c2-88af-df7beafb55f5",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "e340bdd9-3868-44a3-8036-c0338eac42e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1589f07e-f8b0-416e-827c-e0495b376cfc",
        "cursor": {
          "ref": "fe0c342a-32f1-4534-953e-81c348c9df5f",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a092e4a5-ccdc-4cc5-b692-b136b618dd55"
        },
        "item": {
          "id": "1589f07e-f8b0-416e-827c-e0495b376cfc",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "aded252f-39c6-4054-868f-5e2d82b8faf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5662221-44ff-47e4-8480-c6f49aa8969e",
        "cursor": {
          "ref": "11b8dbc4-bf22-4c17-86da-8fdfa50ca9b4",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "4c8e7fe0-f8c0-4d9e-813a-c0020f737614"
        },
        "item": {
          "id": "e5662221-44ff-47e4-8480-c6f49aa8969e",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "3ebf320a-5501-4b49-9920-8984a1593e71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f944371-780c-4e0b-a6d8-b04d82533f98",
        "cursor": {
          "ref": "ebfd2cf2-11b5-4478-aafd-1207862af663",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "25f1553f-b969-4c1c-8f96-45d9ee4d0980"
        },
        "item": {
          "id": "4f944371-780c-4e0b-a6d8-b04d82533f98",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2d7f5c29-dad4-4c61-b5b2-161bbdb8eaf9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ec984a0-a2eb-4b96-aac6-b7456ffee928",
        "cursor": {
          "ref": "ef44cb9d-cf44-40af-ba69-11d972c81f73",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "b41ba9ee-ad96-4761-b39a-a9f78237af17"
        },
        "item": {
          "id": "1ec984a0-a2eb-4b96-aac6-b7456ffee928",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "0b2d614d-e59c-4d03-a3b0-3c4fb2d02636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15a8746d-7205-4207-8462-9bd0661cdc0b",
        "cursor": {
          "ref": "d8802e61-fd11-4b5b-94d7-f42f4c62d252",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "1bfa4542-485e-4e42-974a-c71e7b861a88"
        },
        "item": {
          "id": "15a8746d-7205-4207-8462-9bd0661cdc0b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2a24572b-0568-4b42-b8f0-8ebb79c65c2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c275311-2564-482c-b947-378c431323cd",
        "cursor": {
          "ref": "28e830ee-4991-400c-b806-c7545508d03f",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "1a11c1e9-796a-41aa-a3a8-ddd2b5305243"
        },
        "item": {
          "id": "2c275311-2564-482c-b947-378c431323cd",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "366bf6e9-9e40-4c80-a279-5195dc0430c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ef149a4-e349-4d1b-bf1b-40750fca9d31",
        "cursor": {
          "ref": "259cff04-5513-4199-9e15-f8a263dfa085",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "5601ffe5-314f-4187-8991-d4057b5b03fd"
        },
        "item": {
          "id": "3ef149a4-e349-4d1b-bf1b-40750fca9d31",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "8b146cc2-0240-49eb-9a32-cce0fdddf05a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6e544f5-d666-48b4-b843-6358f04ea979",
        "cursor": {
          "ref": "56626db3-5d22-4b81-9db0-ee231ea407c0",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f7bbc410-0d05-4ad9-9d28-dc2690092c18"
        },
        "item": {
          "id": "f6e544f5-d666-48b4-b843-6358f04ea979",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b7e8e2d4-3b16-4ad4-b59b-42ef6c7c024f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95582198-ea81-429b-9dc8-9147e54e3e0a",
        "cursor": {
          "ref": "cb236070-2f9c-4c32-a31d-2d93e760f833",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "d78633b5-1d07-475f-80ce-4853b456d789"
        },
        "item": {
          "id": "95582198-ea81-429b-9dc8-9147e54e3e0a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "664155f9-c147-4a67-a92c-b3756c701631",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "3ff585ce-c213-4a07-8ca0-48a5e89c071c",
        "cursor": {
          "ref": "8c456118-28c5-4bb0-b2ad-7452da15efbd",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f5046503-f8aa-4b50-b4f3-853dcfa87919"
        },
        "item": {
          "id": "3ff585ce-c213-4a07-8ca0-48a5e89c071c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "d9fc7cbe-084e-4734-a55a-7edda21e4d62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3831adbe-6950-4b6f-ae7c-23decbf8595f",
        "cursor": {
          "ref": "ffc9a254-888d-4628-a5d0-07d2c67613d3",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "cf4598c9-072d-4fae-b97c-7dc61b60cc74"
        },
        "item": {
          "id": "3831adbe-6950-4b6f-ae7c-23decbf8595f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "4de87b08-d4cd-4ab0-9afb-14bdf94aa8ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd56645c-2614-4d33-8f5a-7c7e6532a8d7",
        "cursor": {
          "ref": "a5396e28-b8b5-4580-a4f7-dceaf5eb36fc",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "ba8dc48c-390d-47b0-bccd-6cfc73f2f7b2"
        },
        "item": {
          "id": "cd56645c-2614-4d33-8f5a-7c7e6532a8d7",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "9ee311d2-d1af-45ad-bce4-f1358450c8ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "169a8b34-7410-42d2-8d16-a000f8496497",
        "cursor": {
          "ref": "3e99b22d-1755-44cd-957e-2b4d9bbd8a20",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "af471673-5766-4cdd-804b-ee7376282e85"
        },
        "item": {
          "id": "169a8b34-7410-42d2-8d16-a000f8496497",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "37602de1-2e5d-4bf1-81d7-401d52e2bf5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c6b0b2f-5b47-4a8f-ba83-7db4538a41b9",
        "cursor": {
          "ref": "0a7f6641-ccf6-409b-a1e0-6a6ef1f449cd",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "b9c4299d-6039-476d-a5f5-21bf5c80eb2f"
        },
        "item": {
          "id": "4c6b0b2f-5b47-4a8f-ba83-7db4538a41b9",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "95665100-e077-42ca-82e6-ee2869ec4d24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d859cf3-8002-46f0-b256-ffa46d3591c9",
        "cursor": {
          "ref": "5936fd44-f38c-489b-b3fc-a1a6c8152943",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ff5d9bb9-446d-47e9-93bf-83ff50f7c402"
        },
        "item": {
          "id": "6d859cf3-8002-46f0-b256-ffa46d3591c9",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "ba5d2625-1d2e-4967-b2ae-67a152baa1fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "763ce32f-dcd7-43e4-bf4e-219b513f1c38",
        "cursor": {
          "ref": "64f770d0-87e6-47ce-9126-f63ed8e0ad06",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "eca1b697-434a-4a89-b9d0-73d6574bafa6"
        },
        "item": {
          "id": "763ce32f-dcd7-43e4-bf4e-219b513f1c38",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "39797931-730b-4c5c-875b-629694d535bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b91dea2-2d3a-460d-9505-58d2f0631449",
        "cursor": {
          "ref": "b7dfe53b-0da9-4ba5-8841-b15e21857223",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "4866bc44-00bf-4603-92d6-8759d45e0d91"
        },
        "item": {
          "id": "2b91dea2-2d3a-460d-9505-58d2f0631449",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a5607eac-3864-4680-b1a1-b3eaf72c5149",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c85fc9e-6aac-4cce-951f-52f031370aaf",
        "cursor": {
          "ref": "1c73019e-ebae-4f81-92de-3895656812d0",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "a280aae3-fcf8-4227-af7b-4076aac9e000"
        },
        "item": {
          "id": "4c85fc9e-6aac-4cce-951f-52f031370aaf",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "27025c06-9f4d-4efb-9b60-58357a425df5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a2938b2-0c6c-4fa3-83f9-dcc515941efb",
        "cursor": {
          "ref": "82567dac-7d71-47dc-811d-4a4c506e2e24",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "b97260e6-dc99-42d3-8b61-4f5310a551b2"
        },
        "item": {
          "id": "9a2938b2-0c6c-4fa3-83f9-dcc515941efb",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "52780147-9dd7-48f9-98fd-050d7a53e8eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f885e58-dbdb-4e6e-b934-8ec039524e08",
        "cursor": {
          "ref": "af488d14-3c38-4a59-a6ee-9829f1b3bb65",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "c774cd52-1052-4488-8c1a-59b9209f88ca"
        },
        "item": {
          "id": "0f885e58-dbdb-4e6e-b934-8ec039524e08",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "cffc7ba4-ee14-40af-8d8c-36c7cec06570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06ff0da5-b337-49e6-bfb0-13285885f81a",
        "cursor": {
          "ref": "150c77c4-bc28-4380-b01d-92fa4a96b03d",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "0c66979f-b392-46a1-9c2e-873a2153e75c"
        },
        "item": {
          "id": "06ff0da5-b337-49e6-bfb0-13285885f81a",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4e9a8289-140e-4e67-8f2c-0cfac8b8d152",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11f47083-397f-4a44-a145-f3bddb7a0da2",
        "cursor": {
          "ref": "4255c698-70f6-49e8-908e-6adb8844b0ac",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "1013fd65-2709-4a06-a247-ccbd40e5ad27"
        },
        "item": {
          "id": "11f47083-397f-4a44-a145-f3bddb7a0da2",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "81ee5fdc-3a38-4b16-926b-4a5e074ed896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78abb88d-5689-4a8c-8160-d39c8e2bc3ab",
        "cursor": {
          "ref": "f1f12c1d-69e2-48b3-aac1-0b0e653c26c8",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "951401b5-b508-461d-b5e9-dc0d0ccfefa6"
        },
        "item": {
          "id": "78abb88d-5689-4a8c-8160-d39c8e2bc3ab",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "3c066b68-8228-4529-8c1e-2127e6d0561d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ca52b96-5d69-45df-a7ea-b80126aebb04",
        "cursor": {
          "ref": "02b289d6-f4b3-4259-9a93-ff0c7700eeda",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "e1f794f5-5434-4b8e-9d37-c9ab99f070a6"
        },
        "item": {
          "id": "3ca52b96-5d69-45df-a7ea-b80126aebb04",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a182dd31-8ea5-4b15-8c8a-b76e1f0dc7c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "224d3dc7-5ea9-4a10-8eb1-9a4eb9fd8883",
        "cursor": {
          "ref": "7ce76127-c0c9-4471-8316-7c1873d7f02b",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "522f0082-0765-46f2-8c14-a8a749374db7"
        },
        "item": {
          "id": "224d3dc7-5ea9-4a10-8eb1-9a4eb9fd8883",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "e3eacfec-78b4-4f95-86ff-61961f69c140",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0236ed0d-824e-4761-9a06-fc8442899470",
        "cursor": {
          "ref": "37e0268d-1a50-4bec-9734-0eba2067d586",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "6bc792ba-dbd8-4e55-9423-5949af04b3ad"
        },
        "item": {
          "id": "0236ed0d-824e-4761-9a06-fc8442899470",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "00296978-4f44-4661-baa6-d1368dc8931e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc640585-1adc-41bf-9600-f162f6f0277e",
        "cursor": {
          "ref": "127ffa73-b3d8-4f74-848b-03b975f06fac",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e1743bc6-329c-4f4d-8e19-bc7733ab7d78"
        },
        "item": {
          "id": "fc640585-1adc-41bf-9600-f162f6f0277e",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4097ee9e-b979-4e84-bc04-6ae185db13da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42d385dc-5ca1-444d-9b1a-42a69603b80e",
        "cursor": {
          "ref": "0d9d34ad-25af-4693-a617-dd52a2b122f4",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "eef911f0-b967-40cf-8742-46aca27ed276"
        },
        "item": {
          "id": "42d385dc-5ca1-444d-9b1a-42a69603b80e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "bd684ad6-82ec-4b20-bc61-19f9c305ed89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52022389-ba3d-43bf-95d0-cf4c0b17de09",
        "cursor": {
          "ref": "bbfbf5fa-d995-42ab-910b-78562e37d14f",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "5fdaabf4-03a4-41d1-89a2-0c4b63d3f5d3"
        },
        "item": {
          "id": "52022389-ba3d-43bf-95d0-cf4c0b17de09",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "2e7190e2-f7e6-4ddb-b220-fc8ea7f5afca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09076d5c-ff73-416f-b794-80ebf788e203",
        "cursor": {
          "ref": "d2aff655-8872-41a2-a82c-cafc8f7941a7",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "1a6ba582-a28d-47b0-904b-02fde2bbf9b7"
        },
        "item": {
          "id": "09076d5c-ff73-416f-b794-80ebf788e203",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "b6c7b0f1-fbe9-4cdf-8801-e705985c4707",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cd02a9b-c75b-4f32-b190-2434c298f912",
        "cursor": {
          "ref": "838a4517-38ea-456e-99ba-c5d61d0e792e",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "97d591eb-2e6f-40d3-9a30-7541b493a129"
        },
        "item": {
          "id": "3cd02a9b-c75b-4f32-b190-2434c298f912",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "14490e8e-a3c8-4427-b3f4-413b982ce7e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c20e8fe-2294-4e83-b016-0d03a8f8bcef",
        "cursor": {
          "ref": "feaea5ed-c6ca-4d92-b8f4-fa4d62e744f3",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "f46ede14-ef77-4915-b70e-9dfb264135bb"
        },
        "item": {
          "id": "6c20e8fe-2294-4e83-b016-0d03a8f8bcef",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "74b37938-e9d2-4d8e-9b79-ac82290853c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f910a33a-fc3d-48aa-a017-bae7a3a78b38",
        "cursor": {
          "ref": "ceac4c61-6981-4d67-803d-32e65d296c35",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "cd87477a-1e59-4093-981f-5df00ac6b0e5"
        },
        "item": {
          "id": "f910a33a-fc3d-48aa-a017-bae7a3a78b38",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "a75e1f29-11ba-4d2c-ae5d-8aa32d4ae0d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "823b1c19-2fa8-4575-9bb8-05a619220747",
        "cursor": {
          "ref": "12a397f8-33b8-4497-a9ee-72123ad5bcef",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "04ded76a-7e46-45ef-993a-77401ef2fb8b"
        },
        "item": {
          "id": "823b1c19-2fa8-4575-9bb8-05a619220747",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "02d36d01-868a-4643-9495-7e8d0b7d9947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e5123fc-6651-4f85-87cb-2a0222273101",
        "cursor": {
          "ref": "f0fe8bad-53eb-424e-980a-a8a6480c7581",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "874c7472-2eb2-4609-978b-b065aef41776"
        },
        "item": {
          "id": "5e5123fc-6651-4f85-87cb-2a0222273101",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "37e73bac-4b57-4778-a92a-a43daf4fa9a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4648a10d-c2ce-49c3-b2fe-b2d6ac695546",
        "cursor": {
          "ref": "a9da8dc5-135c-485d-a371-1da3f7b7cecb",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "7f9032de-2b16-403c-b623-4095b6b8cdc4"
        },
        "item": {
          "id": "4648a10d-c2ce-49c3-b2fe-b2d6ac695546",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "01bb6208-9d31-47fa-bc79-82124c24edb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae29e7d9-af6f-42dd-948d-3ae8142d1999",
        "cursor": {
          "ref": "94baa264-52b4-47a2-9a64-ddc2598d7dca",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "6044c94b-6002-40a0-83a6-1a4e3b0f9b8d"
        },
        "item": {
          "id": "ae29e7d9-af6f-42dd-948d-3ae8142d1999",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "b00516d8-4241-491c-ba1c-28f8d9242121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "643215fd-47ec-4fed-b986-2a16ef0642ca",
        "cursor": {
          "ref": "26229ccd-fda7-448b-b052-797220299323",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "56107629-71c4-488b-b26a-218a39e15389"
        },
        "item": {
          "id": "643215fd-47ec-4fed-b986-2a16ef0642ca",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "812c0903-cb2c-400d-a51d-9ba8af14f2e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "009dea63-a001-4067-a5f0-73d85a7baf2f",
        "cursor": {
          "ref": "f3bc583e-de93-4693-8738-86c2221fec11",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ff70c6d1-3d4d-4a48-8874-5a1e024716cb"
        },
        "item": {
          "id": "009dea63-a001-4067-a5f0-73d85a7baf2f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "a6f71377-a450-40a9-a39a-62c71c96c7d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "80809b99-bdc4-4cb8-be8a-0a006fec01a9",
        "cursor": {
          "ref": "b2f44fea-194b-474d-af90-5e211b69e7c2",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e8658839-c7f8-46c8-81fa-0a2ace41edd7"
        },
        "item": {
          "id": "80809b99-bdc4-4cb8-be8a-0a006fec01a9",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "732ee70e-780c-4c6e-a01c-907371bde2c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "25f13d87-fcac-4e73-a44c-51f6de64e3ce",
        "cursor": {
          "ref": "de675091-754b-482f-a911-061de0f73f6b",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "297b1598-8ac0-4192-9188-5c5185b77696"
        },
        "item": {
          "id": "25f13d87-fcac-4e73-a44c-51f6de64e3ce",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "663b29a1-d05b-4719-97f3-3c1f3f44a245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "18fb6e8e-4e35-4b24-a7f2-59ec3c85eb77",
        "cursor": {
          "ref": "3749ede3-4c8c-4d3b-98e5-739e5df563cb",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "7489dc2a-2f9a-4dd4-bd1a-9ffcd219821c"
        },
        "item": {
          "id": "18fb6e8e-4e35-4b24-a7f2-59ec3c85eb77",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "362df9b5-9a63-4f1e-b741-61c54ea5a636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06ec9663-5a87-4ba5-88f7-14df5dbef8a9",
        "cursor": {
          "ref": "9d81f574-aaf5-443e-a5c7-db027bcb1667",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "5eb11c12-86ff-480b-9086-5c24df885905"
        },
        "item": {
          "id": "06ec9663-5a87-4ba5-88f7-14df5dbef8a9",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "5849a50d-0220-4aed-aa25-628549170b93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "cf0ba81c-f02f-454f-a8f4-efe9ca9904ff",
        "cursor": {
          "ref": "21668f49-340d-49f8-a05b-8161721fec68",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b0f5af17-cdb3-4e40-b0c8-ad4c37d4a18f"
        },
        "item": {
          "id": "cf0ba81c-f02f-454f-a8f4-efe9ca9904ff",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "0a5ec55f-03ae-4a3a-ada8-614840b850fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1148,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "17d5e5be-7166-4ef6-95d5-10612af3279d",
        "cursor": {
          "ref": "95d4fce6-9c7c-4727-b99f-9726072536ce",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "a0ae833f-ff86-49ba-aac6-087c4ec12d94"
        },
        "item": {
          "id": "17d5e5be-7166-4ef6-95d5-10612af3279d",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "e3a32ec1-36e8-4270-bc98-0db068ce163a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 135,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "41702921-844d-49f1-bb2d-bfdc82dba45e",
        "cursor": {
          "ref": "c3aef88b-ea84-40f8-b5c1-06aa25c0e6a3",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "2d0097fc-c226-4839-b616-29a5f12081bd"
        },
        "item": {
          "id": "41702921-844d-49f1-bb2d-bfdc82dba45e",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "22cf95ae-2adf-459d-9a96-cc288241e508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "0430014d-7f11-4ff8-ba55-c58f7936e3c0",
        "cursor": {
          "ref": "260863b7-052b-4e45-9949-96cb83d2b160",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "17ed1b8e-aabd-4632-b028-747b293385af"
        },
        "item": {
          "id": "0430014d-7f11-4ff8-ba55-c58f7936e3c0",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "acc4b8b3-d2d7-47dc-81f4-daf81f6b5bb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "83862973-6bbb-47f0-9d06-4ebf8c302f49",
        "cursor": {
          "ref": "d04c9eb6-3933-41a2-9210-33a5c2def044",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "e6ce5037-901f-484b-897e-eb20b880bdfb"
        },
        "item": {
          "id": "83862973-6bbb-47f0-9d06-4ebf8c302f49",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "146e2a7e-7c22-42f8-a7ce-06fca4f85b82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "e03c0bfb-35db-48d4-980d-5266dfe48a05",
        "cursor": {
          "ref": "332b0637-d7a2-4721-94d1-e2ee44a21a44",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "1750f085-986f-4b33-a787-1c0a4824ea11"
        },
        "item": {
          "id": "e03c0bfb-35db-48d4-980d-5266dfe48a05",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "5e533a12-df3e-455d-8762-ce0746bf46c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ebf304c-066b-4dc6-a12f-323560e3f243",
        "cursor": {
          "ref": "468b9dcc-a271-4c43-831c-5303bb2e172a",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "bb79d12d-41c2-4229-914e-c38f9a3bc503"
        },
        "item": {
          "id": "3ebf304c-066b-4dc6-a12f-323560e3f243",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "ba805cf1-72b8-417f-ac6a-6a1f74927f2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57701015-a4d5-430a-aa10-644beae30b8a",
        "cursor": {
          "ref": "9e044c60-cebb-474c-ba0a-c39319fa28d7",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "51446380-24e4-4c4c-b28d-494ec2a27cc9"
        },
        "item": {
          "id": "57701015-a4d5-430a-aa10-644beae30b8a",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9d904bd2-3d05-4120-b448-83b211590d94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53abed13-eecd-469e-8c4e-516aa0ce6f67",
        "cursor": {
          "ref": "0a09b16d-b48e-4f5e-8b02-dab287c3a4d6",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "12fa6f06-6325-446c-8427-6468250b1442"
        },
        "item": {
          "id": "53abed13-eecd-469e-8c4e-516aa0ce6f67",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "8599c518-54f5-4582-b5be-139ee0b27978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "248e2e9b-fa79-42fa-a6be-ac4e857ebc57",
        "cursor": {
          "ref": "3f121999-f2c1-4c71-914d-a69283c9aaa1",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "6340d422-2951-4e61-950d-73b0016d15ab"
        },
        "item": {
          "id": "248e2e9b-fa79-42fa-a6be-ac4e857ebc57",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "02b23bfd-fc88-4aa3-b7f9-407485847126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3697a221-06f4-4a1c-95ef-b7d62d12b7fd",
        "cursor": {
          "ref": "91c408b5-5fcc-4416-a1d4-15f671f22e52",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "bf26a80f-3a45-4631-8e0f-42f2954719d2"
        },
        "item": {
          "id": "3697a221-06f4-4a1c-95ef-b7d62d12b7fd",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f181b0a7-6fdb-4eda-aed6-ab36587a0352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "297d5f19-fb19-40f6-baea-188bba25ff18",
        "cursor": {
          "ref": "a79fdf3f-4af0-4a64-aa3c-09b456f0251d",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f4c16f5f-fdb3-412d-bd22-00901a934acc"
        },
        "item": {
          "id": "297d5f19-fb19-40f6-baea-188bba25ff18",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6a2c6ba7-a9e8-4dab-bfa6-888175657aad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b4eb44e-471b-45ba-af86-784cad35c4f6",
        "cursor": {
          "ref": "8981fba6-3581-471c-8ecc-ca2423710160",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "ed3ed518-2af7-4f46-a514-132ac0ac8539"
        },
        "item": {
          "id": "0b4eb44e-471b-45ba-af86-784cad35c4f6",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "23488ce5-16a8-41eb-acc3-202b6b65cc6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e20a9cc-0aef-42de-b384-31674fabc53a",
        "cursor": {
          "ref": "561f7725-7c07-4498-9697-d36c001ef33b",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "9d39b5e7-78b0-4d64-a03d-855fa13c3051"
        },
        "item": {
          "id": "8e20a9cc-0aef-42de-b384-31674fabc53a",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c034e6a9-b168-4fd3-acd8-211e86bc4317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efcd789a-9d94-466d-af3d-d0c155914180",
        "cursor": {
          "ref": "6f83ed47-33cc-45e4-a058-255ab71275bc",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "842dd497-f4be-499c-9171-4e5a1c80f0bb"
        },
        "item": {
          "id": "efcd789a-9d94-466d-af3d-d0c155914180",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "5e2da5bb-df8f-4972-8c27-843dcafbc821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c94ed29-d933-4911-b6d6-5b2d8eef7ae4",
        "cursor": {
          "ref": "70bfb428-a70c-4856-96a1-be474f585128",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "93e8e98b-5f5a-4d3f-9a8a-4d8966a3306d"
        },
        "item": {
          "id": "6c94ed29-d933-4911-b6d6-5b2d8eef7ae4",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "61fc5af2-6d9d-41b0-8a58-22696ce1c412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caa6d330-b9f2-4f9a-8ff4-a3d126187972",
        "cursor": {
          "ref": "230743b6-c12a-427f-ad04-21140c330e54",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "b6d543a3-63ed-4c34-8821-efb18966a687"
        },
        "item": {
          "id": "caa6d330-b9f2-4f9a-8ff4-a3d126187972",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "5de0034e-361c-4c21-bf97-40abd9a4d060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4271d3e7-e3e4-4d3f-82fd-76565b904219",
        "cursor": {
          "ref": "818a3019-944b-417b-bcbe-3410dd16d9e9",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "2cf89612-d266-45f0-92b0-cbd6b29e9f2a"
        },
        "item": {
          "id": "4271d3e7-e3e4-4d3f-82fd-76565b904219",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "2d991589-c723-4423-abd7-a2d72887dbf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d8a185d-3ed0-40fc-9d35-4d932575d264",
        "cursor": {
          "ref": "a8fc4a2a-441f-4d44-9f8d-f93721935391",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "cc305544-d088-4858-b268-a17edfb47d16"
        },
        "item": {
          "id": "5d8a185d-3ed0-40fc-9d35-4d932575d264",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f80120b7-a45a-491f-b966-2b237860d318",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1217,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "8805e50a-9b61-4079-80da-f0c617ebad9c",
        "cursor": {
          "ref": "5adb903e-cf4a-4831-8d0a-0bc0f253fbc8",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c1d7984e-ddf1-4b9e-a7bf-3407d5e16cff"
        },
        "item": {
          "id": "8805e50a-9b61-4079-80da-f0c617ebad9c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "18ef4a57-c26d-45a6-a028-5572357882bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1335,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "e604ca67-6af4-4088-bcf9-e7572ffdaa6c",
        "cursor": {
          "ref": "7b19f30c-2760-4963-a0d7-eb2a5fcfbde6",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "4763de96-4264-4f33-9bae-1523721813d1"
        },
        "item": {
          "id": "e604ca67-6af4-4088-bcf9-e7572ffdaa6c",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "ec917026-7727-4e71-97aa-4647446f4253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "2c03d4c0-ec84-4726-936e-d09c8147a866",
        "cursor": {
          "ref": "3f6047bf-7c82-430c-8430-e6414abbc892",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "0dd4aabf-68e9-4657-ab0a-f559c3b93d6d"
        },
        "item": {
          "id": "2c03d4c0-ec84-4726-936e-d09c8147a866",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "5fb6f227-a39b-4818-ab88-2bbab52a6824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 689,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "099aa63f-5ab5-46f2-98f7-613e07727b0d",
        "cursor": {
          "ref": "c118252a-ae3b-4fca-9207-800a6d5a19fb",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "9d0fbc28-9a2b-4029-a5cb-259e0d8ca21c"
        },
        "item": {
          "id": "099aa63f-5ab5-46f2-98f7-613e07727b0d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "cd0e3c59-63ad-4e5c-80e5-7a1e8eed61f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "c7cb36af-fb76-444a-ab29-90b212bf93c5",
        "cursor": {
          "ref": "11df46c5-b9d8-407d-9ee5-1727a0a699cb",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f25a5b5c-9c08-4279-8461-c7dca9eee405"
        },
        "item": {
          "id": "c7cb36af-fb76-444a-ab29-90b212bf93c5",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "4bbfd8c6-f01d-4828-ba77-782724ea5616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fc97a2d-5809-40df-ad4a-0b8546c0184b",
        "cursor": {
          "ref": "1e15143b-a234-47b5-932d-bcf3e3cf2cf2",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "04b038d0-c453-4abe-b80b-c88c6a4d15a3"
        },
        "item": {
          "id": "1fc97a2d-5809-40df-ad4a-0b8546c0184b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "65b5e311-12a7-45f3-96b4-ea66368a8e35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae4b2005-0ee1-456d-b633-1802ce0d10a4",
        "cursor": {
          "ref": "1ae54311-8597-43ad-848f-0d7f794b7efb",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "03223184-0871-4462-b58c-9e1059a3b3eb"
        },
        "item": {
          "id": "ae4b2005-0ee1-456d-b633-1802ce0d10a4",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e03f7525-bf20-4b06-9565-00cc3ce15674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df6e482c-80d8-4db4-add5-02d94e5a4a69",
        "cursor": {
          "ref": "fe3b6882-1ecd-438d-86be-e6d5d3698ceb",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "45248857-0c80-485a-9cae-ab76bdaa75eb"
        },
        "item": {
          "id": "df6e482c-80d8-4db4-add5-02d94e5a4a69",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "4d6cc6f5-cefc-42fc-a706-f5e580bd9862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5289a2a-eb96-4fa9-b439-51a0ea8f79ec",
        "cursor": {
          "ref": "bbaea36b-45fc-4ced-bc94-2c8a08cbb67e",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "73aa3618-8fe5-42b0-b049-23b248cd47c4"
        },
        "item": {
          "id": "f5289a2a-eb96-4fa9-b439-51a0ea8f79ec",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "734a1754-d348-4104-a9bd-4735edb5779f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1afe234-5dd4-4353-a4a4-061db5eb2730",
        "cursor": {
          "ref": "82cdac2e-b2f8-4596-9d92-dd2d641355af",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c430e084-6aef-4bc5-9030-630fe944677b"
        },
        "item": {
          "id": "f1afe234-5dd4-4353-a4a4-061db5eb2730",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "76f63dbf-5640-4812-b22e-da51ece37bc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68f74812-e7af-43b2-b704-cb4ff25000be",
        "cursor": {
          "ref": "f40b47f9-7d7b-4b78-ae9f-3eee7a44ce3a",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "36968f1b-ea47-4440-b224-792ca29966b5"
        },
        "item": {
          "id": "68f74812-e7af-43b2-b704-cb4ff25000be",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "79a2762d-4f84-4923-8754-19de43f630a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a8f0898-ba9a-42b5-bed4-e05c6b2b56e4",
        "cursor": {
          "ref": "22b52c1d-a8c0-47fb-9fe0-35ad19d34a07",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e954f80d-076d-4b4e-8b51-97c416a0a9ad"
        },
        "item": {
          "id": "2a8f0898-ba9a-42b5-bed4-e05c6b2b56e4",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6c7d890d-8ca6-4383-a73d-69c60a7c1925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da8e9907-ccff-4f43-a70a-2c916edfce01",
        "cursor": {
          "ref": "9c4f0591-d694-4dfe-a2ef-c3c954cbfcf0",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6fabd149-ee11-4c4f-8fc7-f60582d6b382"
        },
        "item": {
          "id": "da8e9907-ccff-4f43-a70a-2c916edfce01",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "721079e1-e655-425c-b1ed-e5def282aef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeac722e-7144-4ed9-b84e-c5e1eab15920",
        "cursor": {
          "ref": "180b4442-7cbc-44ad-a136-71e6f6af14c2",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "fd4e0ffb-54ef-4cc6-95cd-77e0bbbea9ff"
        },
        "item": {
          "id": "aeac722e-7144-4ed9-b84e-c5e1eab15920",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e17ebffe-2012-41af-b27b-71b3725c9061",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c45fdd92-c5d2-4e6a-9c35-bc69f6f4e6dd",
        "cursor": {
          "ref": "321e5039-5cd4-46a5-8a3b-db42ad186d08",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "db148dfe-7822-41ea-b37f-2c5bbf78275a"
        },
        "item": {
          "id": "c45fdd92-c5d2-4e6a-9c35-bc69f6f4e6dd",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "01076314-c27a-4996-a453-c3c5e00a9682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aa42807-28c4-4c28-849d-6d022fea4bdb",
        "cursor": {
          "ref": "61ff70cc-c1c1-4bde-9d9d-1179b7b7a1c8",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "207c2e11-ac62-4202-a9b9-e4e4165a154e"
        },
        "item": {
          "id": "1aa42807-28c4-4c28-849d-6d022fea4bdb",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "583a21b3-6cbb-49a7-a5ae-aaa308520c95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9da88f55-f4fb-4db8-b186-804ecc1d0ef0",
        "cursor": {
          "ref": "a10e6ada-a516-4ce5-9f33-61e1e7b8f467",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "3ef67519-fae5-4ae5-89b9-634c94ff7773"
        },
        "item": {
          "id": "9da88f55-f4fb-4db8-b186-804ecc1d0ef0",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "0271634d-9af6-4b43-90dc-9fac6a43b868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f3ed8db-68cd-4648-9830-adfa1cd21c2a",
        "cursor": {
          "ref": "ffd66432-2d66-4e6c-a57a-0d544edc08d0",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "86c85e3a-3525-4a3c-9597-27405267acbf"
        },
        "item": {
          "id": "8f3ed8db-68cd-4648-9830-adfa1cd21c2a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a6b6edef-3a98-4f80-8b78-cc3f93e0356a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ce8757c-6f66-4492-af7d-4167371d790a",
        "cursor": {
          "ref": "35cc455b-6141-4998-9e7c-e0017fbe8a40",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "014042c4-a00a-4a5f-8291-a259709d9dcc"
        },
        "item": {
          "id": "5ce8757c-6f66-4492-af7d-4167371d790a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "89a2d97e-a466-4d89-8075-40b6ef04850f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5522fc12-2b35-47a0-ad29-0d306642ce5d",
        "cursor": {
          "ref": "9f0d262a-1f37-4163-b8dd-61d4ee0fa4b5",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "f288c57e-79d0-4ac1-82b8-48d61893529e"
        },
        "item": {
          "id": "5522fc12-2b35-47a0-ad29-0d306642ce5d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "da1f771e-b21d-47c1-a490-3c3f8d7d3e3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "209db052-bee3-433e-ab11-48cec8777dae",
        "cursor": {
          "ref": "92da9b6e-82b0-4b29-8eda-097ebcfeade3",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "edfcf945-83c6-4ea9-a471-a2f8ad7857f1"
        },
        "item": {
          "id": "209db052-bee3-433e-ab11-48cec8777dae",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "03f8466d-07c2-419d-bb9f-1b6e01585814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81f07df7-996c-464e-a198-6c957aca2573",
        "cursor": {
          "ref": "5ee750b7-82d2-4652-9397-ffeb98f3d9ef",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "fc818388-49f1-442c-b306-9e86acb238b5"
        },
        "item": {
          "id": "81f07df7-996c-464e-a198-6c957aca2573",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2005d39a-5b75-4ff7-b83e-88d1cf377cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aabe86a7-38a8-4d1a-b324-978b9510332e",
        "cursor": {
          "ref": "cdb114f7-36d6-4412-bb13-28c2eba9c9a8",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "942a7832-6bdb-4ae3-91ee-9675aba86738"
        },
        "item": {
          "id": "aabe86a7-38a8-4d1a-b324-978b9510332e",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "be20568b-a51a-47ce-ae82-ef78bedcf64b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00a5202d-83b9-4c7c-b4f6-6ea2140144fb",
        "cursor": {
          "ref": "2789b5a8-d2be-4741-b39b-e987296bd2e4",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "365b4348-cc04-4fe4-a6ae-1ad7b534a617"
        },
        "item": {
          "id": "00a5202d-83b9-4c7c-b4f6-6ea2140144fb",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f57e8819-941a-4d00-a80c-a67e265ff6ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f11fe8ad-b3a9-45be-8ec8-751c87ddaa1a",
        "cursor": {
          "ref": "9847a499-c045-4a00-b28c-a3b354260e25",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "becba8ad-c52b-420a-b514-25aae82e031e"
        },
        "item": {
          "id": "f11fe8ad-b3a9-45be-8ec8-751c87ddaa1a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "edad770b-8481-4630-b247-bee8f965a13e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5568c4f-8963-49b9-86ee-8021cb5a430f",
        "cursor": {
          "ref": "12e2e017-bbf9-494c-bea6-a609e0373fc8",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "861bfa1c-020f-495d-bbb5-cc177e8c6621"
        },
        "item": {
          "id": "e5568c4f-8963-49b9-86ee-8021cb5a430f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "72a00826-741b-4de2-a1db-56bc5f8ccb31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b6e4658-0188-4f03-b96d-ba0f46ce81b4",
        "cursor": {
          "ref": "63ddc2ac-77ef-4de3-a34c-76041f57a0ce",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "576ee8af-b6c4-4e64-b2fc-02528b9cdec4"
        },
        "item": {
          "id": "8b6e4658-0188-4f03-b96d-ba0f46ce81b4",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "4e42d2c8-7b06-4857-ab9e-3590c217ffc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d3e443-856d-4488-9c21-f64bbe47dfac",
        "cursor": {
          "ref": "5b376abf-9618-4270-b8d7-b662a2e83553",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "55536762-dbb2-47cf-89f4-e0c0b35cdf4d"
        },
        "item": {
          "id": "55d3e443-856d-4488-9c21-f64bbe47dfac",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "1a93ba2e-d01e-4bfd-8a4e-e07215ce8a53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c330ebb-f0d4-474a-a650-2682ad72f229",
        "cursor": {
          "ref": "87ac0089-0d4e-415c-87d5-39bcff45222f",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "d499fa72-0416-471b-97da-45a262120b85"
        },
        "item": {
          "id": "3c330ebb-f0d4-474a-a650-2682ad72f229",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "9cd545a9-53f5-4e15-82b6-b36a258b7257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b4461ac-ecc9-4fc6-b0b1-769500951885",
        "cursor": {
          "ref": "fb484d7a-7b72-430d-b451-62ea383965bb",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "f69f0493-a95e-4b6f-8e80-d3d46caaeb32"
        },
        "item": {
          "id": "8b4461ac-ecc9-4fc6-b0b1-769500951885",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "115d177a-83c9-47c4-8d75-aecf3fc6ac87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb9b3fd8-cf9e-4f25-abbd-e67904b5b44a",
        "cursor": {
          "ref": "ff00c8e1-5abf-43f8-85d5-989878c54716",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "750695d2-3138-445a-9984-c7b98e14188a"
        },
        "item": {
          "id": "eb9b3fd8-cf9e-4f25-abbd-e67904b5b44a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "720ab1ae-363f-4e58-832f-d83c48573af7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d420472-4625-4cb4-9073-447b39ac3c90",
        "cursor": {
          "ref": "a5eabab1-d026-447c-b5b1-13d35c42d5dc",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "96b900f5-3615-4b4f-8841-a6a9b286d281"
        },
        "item": {
          "id": "5d420472-4625-4cb4-9073-447b39ac3c90",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "3787f6ca-6f90-4be5-b8af-de0243a5a7a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36b4401c-2e26-459e-a127-06735f7580dd",
        "cursor": {
          "ref": "fee597ac-8ffa-4dbb-9f21-abdb738e5183",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "2315e528-9fbc-4418-8a37-05bfed36907c"
        },
        "item": {
          "id": "36b4401c-2e26-459e-a127-06735f7580dd",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "964e9aa0-942f-4bee-9c7a-8fc59a069f0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7df108ae-6bb2-4b2a-88ec-9ed860619759",
        "cursor": {
          "ref": "7b9e4944-5456-444f-8f4b-e436568420ab",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "4ef3b7d6-162b-4f85-a0b7-ef31fcc28302"
        },
        "item": {
          "id": "7df108ae-6bb2-4b2a-88ec-9ed860619759",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "b1e084b2-4037-4724-83b1-68efd872123a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93517cd0-7a8f-4f39-9e58-d5784126d706",
        "cursor": {
          "ref": "b42793ea-9669-4b18-bba6-9df01e6ee2bf",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "1bdb2f14-351a-4244-b7a1-9834fbe5f009"
        },
        "item": {
          "id": "93517cd0-7a8f-4f39-9e58-d5784126d706",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "841e9120-c60e-4f50-9f07-992e7aff56d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a1e3049-c9b5-47dc-98e3-a9559f79b5e2",
        "cursor": {
          "ref": "6a9beb93-ae1b-4e11-a794-c4045d84e77f",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "68dd84cc-d98a-46d8-818f-00d31e0d190c"
        },
        "item": {
          "id": "6a1e3049-c9b5-47dc-98e3-a9559f79b5e2",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5a160fb1-b815-4de9-a10a-f376a7b0f1f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e583f22-8f8f-476a-90da-aa5e5f7c537c",
        "cursor": {
          "ref": "5aac73ff-06f4-482f-bc8c-9c96a8a33c88",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "5be122e3-c02d-485e-984c-f0a503aae747"
        },
        "item": {
          "id": "8e583f22-8f8f-476a-90da-aa5e5f7c537c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "cce02b88-b351-40e3-b680-34e167cff94e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54c191f4-d401-4e46-8181-c7fe9a86fd51",
        "cursor": {
          "ref": "845143ca-3df8-4835-8f4b-cb79a47b04a1",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "cde2ef53-ac29-469c-8510-51898041c218"
        },
        "item": {
          "id": "54c191f4-d401-4e46-8181-c7fe9a86fd51",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "cb68299f-4886-4312-aafc-43307abe73c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ff6fd49-d179-411a-94e0-f44acf5d7387",
        "cursor": {
          "ref": "42dd459b-1bef-436a-ae47-d80509c8292d",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "d68e4f59-4e8e-4b60-a07e-79de5ac4b5c9"
        },
        "item": {
          "id": "0ff6fd49-d179-411a-94e0-f44acf5d7387",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "091c644e-7b82-42b9-9a3d-457e4e8a2fda",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4a5c2a3-3257-43ed-8dd5-713ca5a54abd",
        "cursor": {
          "ref": "81256181-dce4-4c89-bb5d-cbcb9397e2f0",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "175f1bc6-e13a-4d74-a5fa-feb03362ad8b"
        },
        "item": {
          "id": "c4a5c2a3-3257-43ed-8dd5-713ca5a54abd",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "80f74b17-9e94-4e2d-9eda-c68608e5977f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9419d34-3c7b-413a-a259-9e979a0c1c14",
        "cursor": {
          "ref": "f5c8a326-2874-4ede-a5b6-839009e6d3ff",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "2900eeba-7311-4747-b682-0a184c69c9d6"
        },
        "item": {
          "id": "b9419d34-3c7b-413a-a259-9e979a0c1c14",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a3cd6be4-e44e-4de6-a29d-7f92ed1f4eef",
          "status": "OK",
          "code": 200,
          "responseTime": 872,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1710e265-da73-4310-bb03-238860d1b41e",
        "cursor": {
          "ref": "e50ce065-ab6e-4f00-b53f-b206f03dc36f",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "23f5abcb-d2af-43b9-80b2-366a74780c71"
        },
        "item": {
          "id": "1710e265-da73-4310-bb03-238860d1b41e",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "4b7a0205-e65a-4c4b-a4e9-861cd24e280f",
          "status": "OK",
          "code": 200,
          "responseTime": 733,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae504fdf-fa1e-4c05-8d63-a234a2ab20ec",
        "cursor": {
          "ref": "9616f047-998a-4755-8faf-581fffaa9e70",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "d347d6fa-664d-4936-8076-960659d7b34f"
        },
        "item": {
          "id": "ae504fdf-fa1e-4c05-8d63-a234a2ab20ec",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "ae504fdf-fa1e-4c05-8d63-a234a2ab20ec",
        "cursor": {
          "ref": "9616f047-998a-4755-8faf-581fffaa9e70",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "d347d6fa-664d-4936-8076-960659d7b34f"
        },
        "item": {
          "id": "ae504fdf-fa1e-4c05-8d63-a234a2ab20ec",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "46d4e52a-e26c-4b0c-955a-15af9694fa3b",
        "cursor": {
          "ref": "03ca019a-fed9-4bc3-b777-4bfb41b06a6f",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "21ceba81-bfb3-4612-a53f-31d2c8106972"
        },
        "item": {
          "id": "46d4e52a-e26c-4b0c-955a-15af9694fa3b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:281)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "dd7cb66b-ed92-4b1b-b47e-cc68d0bfdbff",
        "cursor": {
          "ref": "518835e9-70cd-4893-b8f9-b15d69c3f79b",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "fae86160-2369-4e38-813c-25ad44679525"
        },
        "item": {
          "id": "dd7cb66b-ed92-4b1b-b47e-cc68d0bfdbff",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:282)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}