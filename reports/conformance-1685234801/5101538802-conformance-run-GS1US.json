{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "60e78fcd-483d-4712-a38a-7708b92b1317",
        "name": "Clear Cache",
        "item": [
          {
            "id": "4f74ba64-7462-470d-bf24-ffb173220ad0",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fbc1f6e0-0701-48d0-b8c6-b34912609c04",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "74828b46-510d-4d1d-82fc-d020492f09d1"
                }
              }
            ]
          },
          {
            "id": "b2472780-111c-46c8-8064-e2307e49083e",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "18526a6f-7c98-4783-a2eb-06a8a2e57779",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2d8b5581-eafd-4f6c-98b6-162f2bb8e8a2"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "bf57f0fd-ab69-40a5-855c-71f1398ff9e8",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "08de28aa-927d-4080-a36a-5d2fa97b327b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4833e0a3-75cd-49ae-ab86-06d859a368e0",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dbc72c4b-8f5f-45ca-8e78-e0f94354fe01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8cb602a2-58eb-416b-935f-63d60aa5cc2e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8b1f8d41-ae0d-4ec0-ab68-a02039422a9c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e996ab5c-b63a-4e4f-a0c9-4a77ce1e40ae"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1927ffe7-4741-43a5-b65b-d3428c7ab54f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "088dc54b-bb45-4df7-b41e-b1493fac7c5a"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "51672fc0-8938-4f4c-956c-e065bb7a2fa7",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f4dcf5b4-3bc7-48c1-b4bd-961b97017a37"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6e074c6a-9dcc-4f9b-99ab-b2e56b515c0e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "042c2a27-a586-4377-aea3-7359f1c12cc0"
            }
          }
        ]
      },
      {
        "id": "c470f82b-f1ad-4f7e-bf75-465ebb311fe7",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "a70f88d8-b981-40f2-825e-ef4009e1072f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b877978a-b33e-4fae-aefe-aa66faeb0d8d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d61da067-673d-4b1f-a204-e0f5bd249a24",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e75bd056-2dd7-45b9-bfca-728b82baeef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a21fb8d5-bdfe-43aa-b8cd-8f8bc4c3f832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a21ba6-cb06-4321-b382-90ec08b40b4a",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99e21ffe-a82e-45e8-8983-3136f6f6f040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "308e7d4c-aba1-4f5f-97ad-b8fa07a10087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eebac46-402c-4a5a-aa6e-2163ed2ec16b",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde69680-e67c-478a-b442-03b52dd7e1d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fa32b43b-032a-4518-be77-02e2c16809ea"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "34912838-10f6-4046-bfff-792efea841a7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cbca32d5-647f-45d2-8d46-a5acbc5481f2",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58551a72-e997-4b14-8c89-1b79a8fc28c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "676e63e6-8df2-4594-ae96-db9694a41642"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "016089e0-ff75-4fa7-8146-02144cf263bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50b265f8-69a0-4bd2-a508-ec73c721f3f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae2bcba0-8a28-41c6-970f-d498d3e6cce2",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92683b4b-71f8-4607-8e30-4ffd1395e2c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc90472b-461b-488d-9ab2-0288ecb497d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f281acb-d70c-4419-b5e0-e4b25e0fb1ff",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "b18a55d2-0083-4c4c-ab12-37aa890bc054"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "12a72cc5-46c8-41cc-9a55-30c13763797d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d8dbf09c-ff54-4648-9904-46e4b63be261",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "001c8df4-8c0c-4b2c-be8e-383392b598a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "7b75e593-99eb-4e54-bb88-75ec064103e0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "313b7b0e-d309-4237-8a98-cca1f268844b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "222aee93-7ced-4f37-b836-7d77915b41d9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a3e30b7a-6efe-4006-9a96-afeb3512932b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3fc7bb5c-6db8-45c7-ad9f-c58a03d0cb09"
            }
          }
        ]
      },
      {
        "id": "c551e8bf-bbb4-4689-bbc6-73632d3179f5",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "c0074bfd-71ad-4815-aa95-7659648089d3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "33bc0993-a23d-4a04-af23-8c036133dc05",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "cec8a4b0-dfe7-4c00-a832-8b1bee06ac1a",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9a7e260-570c-476c-931a-7583612a0a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "715179d4-0da2-4bf8-bc8a-018b2b5680be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d3b0b89-da1d-4c7b-81ff-f37404170376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b1f1fcf6-b8d3-4df9-b3e8-ec174a2013d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64e8bfa5-1595-434a-a01c-1e7f7beed1af",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf18dc1-9de2-4926-a314-8c2f4d5036ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ac52810-1ca4-4dae-a083-95e7b43861eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44a931c2-75c0-4a18-b66f-af9c92cd9bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "abc56525-81da-4b88-b082-174b392a3173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2909a749-8f69-427f-91dd-2909eed06a46",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81a494ed-8bd1-4725-9229-6fb1ad28f586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1292b1d1-f907-4428-92db-1156ba23dac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b298d1-36f9-43a5-b2d8-47d6b1cbc7ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce55a90d-4b42-4de8-96d2-35718885c3ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a8eca2b-e561-4687-9867-47d5992098d6",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8313ac8a-2dd0-48fe-b48f-67af7a39595e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b76a1612-b626-4f19-90a3-066107f1e1a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aebee4f1-2af3-46ba-b0d9-1e7b8786d9b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "52f6f967-37c3-486c-ab80-4941c8f66178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90509609-4ca9-4329-9223-8c2f0049a1fa",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "162cd62c-f636-4fc0-beac-cf116dbf1cb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe1e3627-1b37-491e-a81e-5509601bada6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24adebfe-e7c0-4868-849f-17b7966f92c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "393fe03e-3487-4888-9c4e-d30d5cabd885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5ec49e2-660c-4531-bf08-d83076f11bce",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d94922-56af-4292-8405-512c46f4f929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e67e0093-f2d4-4ef8-8c31-cc38db25128b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d698ca8-8a98-4ffb-8278-1786dea62004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "667176ee-3f94-4fea-aa26-90d137b4ef2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b8a4195-9763-4e33-aeee-3f3e96ef5860",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dff4f1d-354e-4380-bf07-1e3aba43fecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac142b77-f0e7-415c-a1ca-60f0c1eeb9f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "953a78c2-6a5f-4283-a30b-01c8ce365f5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1fe9965-e8cb-4d43-bff2-a4ae75b26990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76fc678e-64ba-496d-ae84-dd2c242daa2d",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62bbf221-4001-4f45-b168-4bb8c75a6b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25781286-9c0c-4de1-950f-af6b2b3f58ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fd57671-cd8c-4798-ad57-5457dfb0b4af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6050acf3-e150-4d3e-a010-fef64ce23413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e5dd361-ce7a-4ecd-85a5-6312373c4aaa",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1cbbb2a-925a-40ff-90ab-255d445a3dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9c75e31-322f-4217-86d0-98cc89200044"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "278e8f07-90ce-4cc2-b3c0-92e463d74f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "97588686-aacc-4ca8-b37b-386e3a926d76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d14bdebb-2d58-4f4c-ab8c-07e5d9e82256",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "440ac5c2-af7c-43fc-9ecb-ef2973013615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0966cf8c-3b8e-4972-8194-7fe615e542e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5493a5cc-1b21-46bf-b840-925e85334f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2854300-6568-41b5-aadd-7142c3776982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed1d124-4af3-47a3-b36b-b49d2de2fd0d",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2ed5e87-e326-42be-b567-6afded0f86b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32b8b8a4-3dc7-432e-b787-a10af7e895fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cbc2a90-826f-45ad-bb59-3eb12c8aae7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "43f2874c-1386-4024-8ea7-37e29669c724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bcfd413-6fc8-4519-899f-61b8c46975c5",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0397423-70d8-4be5-a262-e617bfdbf7b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8c458ea-06f2-4ad8-8bd1-17d4ee1e1ed1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67fadc90-2403-4aac-abda-d23fb4a38585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "87fe249c-3157-4933-ba5d-09c5bd52c72a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59dc2399-3752-4c1a-9f91-da178bcd1547",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0257544-1e62-4c1b-9563-ea456c22915d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13e8dc3f-9236-4705-b072-3c937427613b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afbb4d47-f39a-4bb0-bf31-b4af517bde49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "960966ee-5ee2-4cc0-89d6-4aea093ee3f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "490d81e8-e368-4476-a6f6-1801965835f9",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "814292b9-a53a-4996-adfd-789b95094ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "467a88e6-50b3-472c-9126-ee8d9fb62a19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf661374-8e06-4c2e-b1b3-84aae1d6c1c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50038f16-2155-4370-a9f5-374bd3c388de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee1a339-5dd3-4a58-88db-1e00c4cdc290",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea6f0aa-70f7-4cf4-8350-fee3ab66fdea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c13e463f-bb4e-4dbd-82ae-c6eb3d0a7786"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e6ffdd4-24b1-4a91-88fe-5697f39ce5be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8b6e65e2-f2d9-45a0-a27a-a20734ae5c64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "245f942d-06ea-48a1-b7a8-d1e81e4d167f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb6e72c-9e4b-4843-a5b4-a207695d7e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4956fbd2-6117-451e-98fa-e3e9e9bebf3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b1766d1-3a36-46a8-b5fd-80fe780ca4c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af30694b-ae2a-4ab8-b156-2df657f05d92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd904a7-6e94-4946-9fd9-531375ca91e9",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a04284cb-e083-404c-8781-e715e33572dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26d2e173-c334-4b20-8c81-704df0dbfdcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "525ad39c-cca4-4d9a-ba70-98b9dcda7cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f0124055-1ee8-4cdb-8e12-777db5f18070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ceb88a6-6910-427e-9011-774dec664bdc",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a1e770f-0969-4b44-a6d0-af909df53cc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06936d31-bbd5-4809-b637-8da5da1d7938"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d237635-7b20-472c-a55e-0e472dce5088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d846dcd-0899-4700-947b-707570e72406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a163451f-3d96-4e87-98ba-ff85e2e26947",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb413ad9-7f79-4ad0-8be4-7674d3bbe9fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "864c7e11-7adf-4c30-b2f6-d5359b561407"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ada6847-b249-4924-8e83-e36fd0a6744a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd4487aa-6f7d-4e98-9846-b90bd305d74b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d3f9b8-e505-4e3e-81fe-d317b161abc1",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64155bc3-d123-449e-8ae5-27f8aed4e73f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45d0a912-cda7-414c-9136-2d050c6cf91e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15b9cf7e-e18c-4ab9-ad50-43506ead5020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "da488479-108b-4a42-a773-b9f627e8aa26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd2a034-70ee-461f-85f5-dd1cb2a6900a",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4918c12-c3ae-41b4-ab53-9f6d35b06c22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10ca3d38-21bd-42b3-a380-1dbdcfe5fe0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df39facb-9837-4f00-b3df-6c86c550e57c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "12888653-73e0-4660-b788-4c334fece077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4af7711-654f-4a61-888c-853b89608d2c",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e84eb96-e4cc-4bda-8d9e-ab6984a5792c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "461fc8bc-a22d-4df7-a04f-a862005798c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f3e2ca-01b6-4e64-b761-fee715f3f7eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b256934d-f6e2-46a4-a0fd-484880283fe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec84d708-5b50-4550-899e-d193f9098f10",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e6ac599-5b5b-4b23-8686-450bc0c1e523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cad713d-ef93-4f27-b76f-56dbaf66fda2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d9e08cf-b629-4747-bdcd-33e8bbdb4335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "26cec915-d321-42f7-a58b-97fb8d1542c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72b4a3f7-0248-4318-949d-50d67da2aa04",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d0eb81-749a-43a2-aac5-25f6f7508dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "914da855-ba29-42ff-bf34-e46916761dd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20d8b72f-8ad5-4a95-bc48-2ff392be63d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "96797b7a-7f6a-4783-aeac-d97d00843c19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85706af7-ee40-4913-bcb3-aae80f7e8c7e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10d6c290-f446-48b6-a287-c954ad899c1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11412f30-69fb-44b9-b23b-f7308dfdb322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "167cd9db-83f5-4a64-90c7-1150cdb2f74c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "002cea47-026c-455c-bfa5-80b0558a07b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6beed524-0909-4679-9b1e-c4ccfbfd7dd0",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33445e4e-1d75-453c-a373-5bc8c4d548ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dccb76b-020b-474f-8def-a654d2c9ae56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "174bb06d-7c61-4bc5-88dd-8b94c1fbc7c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "34754ef3-f1f2-4d10-8634-f27a41e71120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4f6aac7-b884-4872-ba50-a354dd574b96",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54ae040a-ce66-4fc3-bfd1-8e04d94fe97d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04c0786f-eea2-4d50-a770-c30e10b6bee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a0fa441-0a37-48f8-8919-bca1d44d67ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ef0cec9-f046-43ba-badb-185b2731efbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "883e5a0d-edff-4352-9f34-7470dfd86106",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f22191a6-d0fe-4a3b-9596-4e64882d821e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fca9f6d6-ac70-4a93-8cf1-d0bc42ff4596"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3fff657-d9f1-4828-8a3f-d907cc4c620a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e63750a0-2f18-41e1-be23-c8d6adaf660f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1f793fd-0cae-4ab9-bbb4-df7e97716760",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4ad98d8-4998-4f1b-8906-f4790e8e7691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81c0a6cf-f731-470c-85e8-034360edfa78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c509a5f-f7a2-450b-8604-72ae4c34f070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9a56f17-6473-4509-b24d-6c4a019ca449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e668f1b0-50af-4882-814c-9f625a2fd8a2",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "622a6ce3-7be9-4f22-8018-1002c9481a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29b4932b-d6f7-4892-b494-4b695c933760"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e23c9b6e-e1ac-4147-950f-95ae5b330402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "00c622e2-0a96-4e37-82f6-f7dd303bc99b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51a97a1b-86a9-45f7-a500-08b0cb3b356c",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26feb889-8373-46f7-8e9b-66ae6b2bef23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca4677af-77ec-4679-a1ac-344ed666f93c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ec0f65-9b26-4e9b-ad7f-a8a6bb0d79d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "880f51b7-5f0c-45dd-ae5a-c479675a09c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbb15d98-3417-410a-8511-dc2aa6693a62",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00d1972f-46d0-4831-b38d-cfbb1a4159f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08a254e9-bc9c-43f3-bfb6-ac783775ce54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ffd422-1116-4726-9150-43f72c808599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6034794e-c8b2-49e7-83df-64050447478a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1815f932-f432-4b84-ae88-d2654562625b",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36e1c12b-7bdf-4728-95e1-7693dd78bb65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac40b475-fce1-4952-9f59-d3edc6f76e4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d49bd4a4-a17e-42ff-818a-e91bf4be12ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "df885d7b-0ce3-4929-91fe-03b2b4f21539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25f9e8bd-60a1-4e24-905e-327918346baf",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0a0ed88-b2d2-4e3e-b4cc-873567395523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1bf0c18-2ae7-440e-9aad-131a6e91bdbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cbe2cdd-945e-47ae-a58c-e5f86e36c281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "38c1e4d8-82e6-4e95-841e-140600562982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "048cca8d-6a74-4187-aa91-b9804cfe4e66",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d82d2df0-85c0-4e10-83df-a1c144d51a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f23b1864-6fe1-4b76-9e95-ca63da28166c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9642b85f-9b20-4999-80c4-0e0eda9f8aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "7c407de6-703c-4a21-a2e2-086d2ea23d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2a5f172-82fe-478e-8909-a3da1caa5882",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "534f179f-b020-4a42-8a6d-364e7b9f119a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e9c4f001-bece-4129-bc45-77038a5684df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12505cb2-7689-4c37-9bf4-9ff522265c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "78e3a0b2-f973-400d-9383-03361f05e565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3061232e-f2cf-43ad-be5b-5cb8285c77ce",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa87abfe-4d87-495b-b5d3-78244884fda3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c33f92f0-964b-4456-bc2e-ddf9f13018ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f723f10-ba49-478a-9b77-1f846533f94c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "422c9aea-fdf3-40e4-9de8-eca6a7090f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1be93c0c-d2f5-4219-b544-9992d901acba",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc1398f-9cb4-4f6f-a144-1f057bed7ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c40a2f4-b829-4dc2-8dbe-c9c941d616d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae034cf-bed6-4184-aaa8-bd8938f78dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "81b52b07-1644-4209-bbb1-2302f2caeabf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "662db38b-5ae3-4438-84f2-be4834fb7ab3",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b8aa58-d8be-419f-95c4-fd47d183d8de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89db2f00-da8c-4bed-8e66-a3e388f25502"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9bd4911-6e51-488e-9818-e10fc2cd1aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b70b6a8-398a-4b13-b2e6-4ebcfcb55041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1498e395-cdf4-4e6a-9064-8ea2125e1331",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "634543c0-3473-46ca-a4d1-c2c130594ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b4fee00-a580-4ed2-ac5f-e8b1415084d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b06865f1-bb63-4fd9-942a-6a4712dea9ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f7c2bd0-1bed-4a7d-b937-149f433f33fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e666790b-3ec7-40a8-8173-a057d819b4a5",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7bc12a-003a-453a-ab14-647d42f753e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5ce57ff-d923-4e69-9c10-fc06ca4a46a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b72cc351-879b-4856-958c-f9cbf3f53c40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b08c8472-c420-4d28-8e88-bd9f8cbbb435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a208ad1-59ee-422d-be4a-f8d1e504d0a2",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd45843b-e4fd-4f69-be18-acd6c1e00354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43e52388-b20d-4456-953d-90e538a884e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41f00965-4a98-4a10-bf32-6b4da6ec004e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "89cc0a21-8a45-4bbd-ad02-c827b67fb05b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9efaa332-a1eb-46eb-a734-011f526145ec",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01cd81b7-d45d-4def-8211-96a2e0dc260a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42385b32-27e9-470e-aa3c-8c9649753f12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "792d68f9-754e-4012-be02-586c21f16be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0aeb5e89-1453-4629-86fc-e45b2e2999f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a88946b6-8c43-4c04-907e-59ab978f22f9",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1279b073-b838-402e-8a37-15c51a8016d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e90e8f19-17f4-46d4-8621-bae825f6f585"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49cf922a-06bb-4e55-8066-03f8a9cfad10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e39729a-abf2-4baf-bfbf-ff99550b8cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de4444b0-c4bb-4d38-b66d-4f639b2b5d55",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5471a22-cd10-4c4d-973f-27942a2c9425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53e6f869-1ab0-4e4d-8cf2-5717c7d91621"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e949e794-8e0c-4b7b-b84c-52969594666b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "00beb975-bb53-44de-8391-f1fab0887b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0702a436-e1d6-42b6-a507-cb0dacb4ac7c",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc3e0618-0558-479a-ba99-ac0c0a76bdb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2cc3304-6251-4785-8db0-7a00b7ae6d2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5405c0e1-da85-43ba-b884-7f6e15885ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "34d8f22a-79b5-464f-bf49-7408b3d3e513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3544465-9fa8-44af-b0ac-5274de7367a8",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e3e65cb-42c2-4f1f-9384-46af20394ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71923d12-803b-4e3f-bb63-84d0986d15dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf6461e7-9543-4fac-afb3-70a005f43e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a29e8ea-3203-4ac7-a323-04e5ff3e24bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24d4e824-f2ba-410e-85ab-b6a8807d1d1d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d811ef83-6365-4fe0-b53c-130d2d5bfeda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4af711b-149b-4c16-90ed-e2de56891ac3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d22c335-822c-4137-95f7-f825155c5a90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed1868c1-f61c-4d1a-971d-49620cb8d61c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "177413be-38ac-47d7-9514-16cae55e5158",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "600a7f6c-2fdc-482b-945a-c8baef3d5db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16f32a5a-6fb5-48ab-9b64-84b972fb0a4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "765bfd71-f747-48c4-b3f2-388d9b6d500d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "68d39adc-2f8d-413c-ad5f-ec541042e155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3765b4a-3d4f-480b-94ae-641d2c0d77a7",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8dbc56-400b-48be-aa1f-9a499244873f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7dcdb03-3373-42a7-9aed-be049bfefe78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d23e4e1b-6fe2-4760-9733-b9d7cc5d5f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6c0cb7a3-f5ba-4302-b924-b9f65680cbcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "686a3f4f-3475-4066-ad72-08958575fddc",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfa68b73-128c-4e08-8cd3-b8bc22765de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d63c024-9c40-46e7-8681-eec219f6147e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52438b9f-9bfd-4730-b9a5-bfcd891e1886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "380ff145-165e-4b4a-b982-a3dae68dbba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d69df642-b060-4734-b9a0-cfa8ff2585dc",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9523cf49-bd07-4d54-9f78-d1c37373d4e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4048a2f-498e-47e6-ada4-7e90120a784e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d32d85b-9342-44c0-b26a-d7deef794f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6b721b1-b164-45cc-8682-c3b9ba01f2dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2120031d-9f1e-43e3-9751-0bba60cb4ffe",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2edd526c-a613-442d-9f56-7c4ccc84935b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "239573aa-f557-4fa5-82d0-776053ef0a98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7af79620-9d4e-4be6-9ddc-17bd0c902a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "140a1ddd-185c-4b12-9c71-60fbe758e7ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "869965af-2bf1-477d-af19-d70ec37ccd77",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd079653-0c99-49d9-9f0b-3e71d0676098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dd26492-6fc1-4f91-8ded-65de154c4ed4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c969a7f-63b1-4735-8fc4-355fbeefefb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f8c7f59-113c-48c8-9015-65b2a0b054c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ead78d6e-3766-4fd9-b6f2-1bccbd114a93",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5fd3fe3-6ef1-4990-a3f2-5247a4505198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d707a95c-7da1-4902-b9c0-6e476f7dc36f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf0c95fb-e1bc-46d6-ac35-7e67fcf12704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbe944d2-37e0-4494-8a93-78924f341232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b71a7c-b45b-415b-a105-c9f10d9c6c75",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc604847-958f-4b15-b644-235b1833c0df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29c219dc-9947-4443-b7a7-3b0e9b43d91e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bd595c1-158b-4b0a-8fb6-09d0e3f23158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d6e7770c-1a85-4c22-883d-dadcc78b4f89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a09b850-c3be-4c6a-b5ac-72872d04879a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b430fb2-29fd-4e8e-8664-c68c38d96560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcdcd6fa-6b00-44bd-9be8-bd9ef043f77a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f342156-7778-4091-8213-d39daed20763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f4939aa-f5fd-4eb7-b498-7fd87a20eeb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "509ff626-fe3b-46c6-a10c-7a38c2f3da64",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db851456-59a8-4212-9520-624283fe407d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9788919-85c6-4b95-bc35-f0614d70a819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe3f6bd4-c0de-4b8f-b5c4-4ac832ea74eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "385d4aca-2be2-46e0-ba7a-93e5e15fb064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35a14552-188f-46af-9943-84ae66a3a482",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c8369c-10e3-4f8f-8e64-7619b0a0fe0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e097df98-dca7-483a-a0be-ffb2128ab610"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e69befd-6c62-41de-aa68-e84c20cf29fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "aaf49eb4-1973-4dd9-a256-3d2a18b8c05b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6f89bee-9cd2-4094-94bc-2672ccd8e3a0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ab81b6-e1c6-4cf1-8634-1babe40a0e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf378f41-ed3d-44d9-be94-02227193f041"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88932f2a-1f7d-4b03-903c-501b766ba557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf54d887-ec17-48f5-a803-1b02c467f37f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac8bbc2b-1680-450f-ae3e-a2f9490abfcf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a18b0994-017d-41c3-8b01-b13265d5c20b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8cd5020-3022-4c90-8680-57f521537142"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b610ddfc-0a5f-4d82-80fe-ef299e90a01d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b32bbc0-916c-4902-9444-dc22040f5ab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31d91946-f7a3-4a28-9e21-b23d49de7b3c",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d197bf8c-7b6e-4514-a281-5acde4dc6350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8067d9f2-594b-4c8f-85e6-a8c6223d5f6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "868dcfd9-405f-4688-b3c8-d5289bf725ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f8e54c8-1aa4-48d0-8214-c43fade92988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f32096-7c31-4cd9-970c-6eda78886e02",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c09fbf-b534-4b3e-99d4-c1e86627fbc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a10bd6ab-06cc-4273-a618-0558f76115c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfab4a29-8605-4688-a276-89e3009634bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8921b6da-8616-4113-8462-506093ff9102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "450cd78f-93c7-4c40-813e-612c4ee0c619",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78bbd1a0-4782-4dfc-b76a-2c7e71764b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdacb711-1306-4fb7-8c3b-a817ac0a6e91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eacdeed-a55c-4aa6-a6b4-7cfeed461220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fede8ad1-e32a-463e-8a74-7961bd86bd39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "431fba9b-6d04-4bff-af14-28fec3bc5e43",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "575ccafe-b166-4f97-8254-ad8d3f841fda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51420bfe-d2a3-4884-9c25-8c7f88567a62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc7b320d-96b4-4956-9c07-62b1de1a4146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc1f44cb-d0aa-4801-ac6b-a9841cd0c2c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa19be3-46a0-453c-9a3f-0cc7077fd632",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f35c2d02-297a-4bc7-889d-5a34172df357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b81ec6ce-79d3-461d-8ebb-c943ba0b02b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97692346-ce93-43db-98ae-a2ae7f7f6ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "43536a4b-69b4-46f9-a606-7c972b3c9f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4445721-ad83-48af-8406-399eab3a3c5a",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7b21834-02d6-4b74-9473-4b35ff186e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f5f9ba8-2d87-4216-a412-b861abc8ecce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98c1d03a-b8cc-4faa-8aa2-931b8e6a4671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4e55c18b-c9da-49d2-bdde-5c7b35b52778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea9f92ba-f4a9-4e47-891d-59a44f694c3d",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d19ed6-6141-4e3d-8386-84284a518b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1584a826-4d26-43f9-aa9f-f93267aaed07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9137202-57c4-4ba1-90b4-d914c059f5b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1236fd9e-afe7-4e07-9bd8-a70ea3c55471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf11b7d-c56f-47d8-a4b2-ea408a44a6b3",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c89b15b7-c142-483c-ad9f-639076df9689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22a0e6dd-c91a-4a0c-808b-56a9cc69ca16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebe096ec-fdb1-4806-99e6-dca6d9da8273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "341ef0d5-74ce-4c19-826c-007d923ce4e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce5f7e73-4cb0-46e2-af7b-f69f00f56937",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e0a759b-64b4-4027-b00f-7b98b9d4e855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaa6f81c-e92b-464e-b180-2b70cc9aa753"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a22b7c9-8aff-48cb-aec8-56f01ac86955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3b60a2e-e621-4156-8598-f39940761d78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "311d79d0-2fe0-4983-8bf2-cb4fa5b9265c",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a25a40-a15e-4bd4-9836-d691ab6733db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a149ab70-c078-43c9-86bf-ed2b3bc37953"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a622c6-7d23-49ff-8727-978700b784af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d7afa4a-8389-429e-b247-8bd68d671b88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f27e9a55-fb49-44cd-818e-d1857201e87f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98a88140-d8bf-4a12-a3de-c574b93c1f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd10eb22-8041-4caa-a860-cf070b40e485"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09cf87b6-780e-410f-8825-cd30a8c7646c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b159f4f-705f-4fc7-adba-acc76077038f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61dfb9cf-7855-4703-971e-e606105ee85b",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dc42ca3-af16-4591-b180-e7d19efa2268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12cda2d5-61b3-4dd5-b658-b03079efd87e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42097af-c983-4012-b982-a88214fae05f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d45cad32-c6a8-4bee-ab03-9e78bf3652f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bff3f844-4dc0-47bf-9557-181fba5777b5",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcdd3d15-f0f4-4bf0-91b3-f684acc2157d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efd82c7f-5323-44ba-b79a-290c2c24f9b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6850553-5877-489e-a442-d0a3b2d64c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "eb5ae762-fe1c-4e56-b477-2931a939d02f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef69393-5247-4da8-9f01-acd222e5c0ce",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df1062da-d8df-4900-b856-1d8c964710dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b8cfea0-84f2-4ce9-96ea-726bf100579a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e562c5a-67fc-4258-a396-f0a0b5cf6b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d00cef76-f499-4c36-afd3-14267c7c21a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6c5e4eb-6605-4f88-9474-3a3e4fb6a137",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00d37521-4f50-46bd-a32d-7e685cf83d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c050523a-1285-40bf-b060-df4815b4161d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6627abe-e4a3-4022-b303-48091ef77cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f526d431-6264-4d29-97ef-40e3ae6e68f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b1d296b-d39e-4868-a4f5-e1b7f781e64f",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0066b7d-474f-4ff8-b58f-3015389cb7b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13756020-57a3-4afa-a21f-7ae0bbc97d8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73d11a3d-045f-45e7-bb7a-93c9f9c7b591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c32daf7-cc4f-46a9-8d1f-7b8527097565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def5a0b0-eb41-41a8-bc03-bc550a5daf09",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "635f203c-bc45-4cd1-b9c0-b0a14c3b727f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19fcf1b6-4c34-4e60-8d04-11e10862376f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "725ddd58-e64e-4e60-b502-13d4ee9b2139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "55ffb811-8b66-47d5-9ba9-1219b608c253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d580852e-d277-4ca1-8f08-2b6b6ce7752f",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ed74c73-bd54-432e-8f32-9d800b376838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "125a0ea0-9bb5-4256-a34c-3386c6e3eca4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30cd3da4-6dc4-45dc-bb64-f03f7c7102b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a69dd6b-83a6-45e3-b4c9-6f98dc3084a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17af6cf-1cb2-4849-87fe-7599e9b5815b",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69f8501d-7bde-4a0c-aee8-e0509cefc8c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38d3c0af-6a08-49b6-a637-8864dbc26a9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3063e55f-82fd-4eaf-8a89-9d05a481dc6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "71ab1497-3a49-40e4-baf9-66a94ef3a353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e16b687b-2b47-46f1-bc5b-7d6cadcce4bd",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abcfbcb8-5682-4787-9875-d2ada9b223dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d11433df-23ff-48a7-8de6-4901d9591681"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ccfc0d3-1717-493d-b4a9-648750276d94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b701334-adb5-4949-a8e7-4c580c0216b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be1bc7a4-96de-4fb6-b277-bedaa0a23afd",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c96c887-ada9-491a-92a8-0be4f56a1608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05c3d94a-9e72-4103-b154-8bbb7fbcb0fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68ffab99-2f3b-4283-92a9-e3ad9232108c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9e4ca33-f7ce-45a3-95ba-66a0708936e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb3d7a4b-6ea5-4f56-9c1a-0febe4ab0b52",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82d356ff-cb0f-4889-9fdc-91019cfdd1ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b7e0256-b1c5-4564-803f-8deaba5c1043"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "368fff10-65a9-469b-a762-5590ed78676f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "113989a3-8939-4bbd-b7c9-8ccab171c34b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7027865f-4bff-4902-bc8d-d9358d5a2428",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a511af-e663-4028-9f3e-e17b9a26fb47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f35def3-3db1-43a6-855b-c0892e5a1868"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21f9e870-ce18-47c4-b915-b48395101dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2625d59-1f7d-40aa-a0a8-218c5a8e0403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65ef1f51-6ac6-4118-b88b-16346bd4a6a1",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57a7bb1b-476e-490e-a32d-5ff2f2856209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d715fcf-4f39-4589-ae9c-d5744ba4d974"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8d77f9d-1124-4ffd-a2dd-2f0cb12472d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "eed5370b-f54f-44c6-a0b5-ecf1b6797e33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "728b34c0-4293-4d99-a8d5-4624044f7c9f",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3456a24-9904-43a2-81b7-72ead5446c82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac1c3540-a7fb-48eb-9f09-276fd3a14021"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88933f0a-435e-4d9e-811a-95011473e54a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dea7efb4-5976-4a42-967a-24b48a4ed62f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca6d012-062a-41ff-9608-03277dde5461",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a48cab2-c0ad-43e0-bca1-38096fb2d95e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a269a9e-33ab-4993-8b50-6e2be69fcfda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5049413-4b04-45a5-b7c7-dd08e6bc33f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "837ad49a-d9b9-480b-9b97-f7de3570f98a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "452b3845-1ff3-4ae3-a2c1-7af7f083df91",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "525ab581-c1f6-489c-b1e1-4be0996675ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69c024ac-e0fb-41f8-b2f4-3492053546cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eda67ea-8aab-462a-9dce-056ed9de95bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c09abebb-b170-4c89-bfde-ed1f0a1a7a38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63e31ced-1b78-4f35-ab1d-f0474ff9625b",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3db6a49-4c56-4a79-a0e8-54b3aad94cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8779c3a6-9ee6-47b1-8a0c-6c08c03f4d9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f351bb2a-aed7-4448-9f0b-460ce1d4ef01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "50fde54d-3027-49fc-b1dc-52fcced560c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a76a83fb-72d8-4e46-a24f-aca7d32462b5",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa2a44ad-d9cc-4054-b48a-d7014fdffbd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65bd4c30-41d7-45de-8e88-3be286c73ec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a361ad24-3b61-4126-8245-af294a81b76a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6372045-a25f-4e56-be9b-93ceb5d00683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "193ad43a-3731-4e44-98d6-1263d2d60ea3",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb9b2f6c-fdbf-4f46-810f-19d585aeb6f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ee07249-d256-465b-83f3-bab740b7d610"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ead2b1-74c1-4f28-8b55-cfceb49ff580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb69ff1f-f52e-4a76-831e-557a59a80a5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5177ef7-9ded-4039-a179-111cb1b4753f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18c17e4a-1526-43f3-bda4-cc68794e271b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "447f9a64-b61f-4d7d-a938-908de96a1cff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf80ccd7-5f13-4b01-afe1-06382d4b507a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "78b261c8-ba32-4389-beca-5e623971e30e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "95fc9db3-2306-47a7-9fcc-6dc5a2e96c28",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "15ba6711-bbb3-4e3d-aa35-9733b7a948d5",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b6523ec-a8fe-4e17-9aa4-a9b2f99071cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "99cf57c0-ed43-4f84-b643-3bc7634abf67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "412f8477-df01-4db3-adc6-5f66b9178b08",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fdf20eec-6d2a-4500-8d39-cd99e4a5c497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c9a6d57-395f-4746-9d95-79e445283839",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee9c6d7-7fe0-455c-b337-2718bc374ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "edff961c-1668-4c62-9037-46725535498a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3d78ab4-0c94-4f07-aab7-5c3fc8f014e3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f4a9eec4-177a-46df-9304-176b84180e56"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "81e95032-0d24-44da-8677-d4512412e890",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e3990a54-46f9-4ccd-9b9d-600dc23976f2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "27196e06-d9cd-4282-b7f1-7beb07c0f307",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "082828e3-d0d5-40ad-b529-a1331270a16c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ba1b8f0e-7816-40e4-9080-558a4a1f5e10",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2734dd06-4f4c-429d-bdba-78db8037d106"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a65e4a83-f5f3-43da-851d-ba15d8a40979",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "73921de8-a4a4-4e68-843c-23df9bef3e73"
                }
              }
            ]
          },
          {
            "id": "02bcca9d-9528-4fc7-9a14-912a8df62ea4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4de9e896-9587-4b27-8e78-2ff44dde77e2",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8df98fc3-a9c0-4e6b-ad87-88bb70fa9339",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ba2d8946-e8a9-437e-8df1-5f0e302958fa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b79192aa-c089-4176-9fbd-0765f818e9d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "722a6562-d3cf-4c24-bf6a-b8bd2f410401"
                    }
                  }
                ]
              },
              {
                "id": "f4aa5b4c-60b0-41b3-b65a-47194bc5f472",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c195cd6e-1a4c-4ac6-919e-f3a63d17d961",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fd65e7b9-209e-4332-b54a-7e498b3c417f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aeb4f4a9-e2cc-4e4d-b6c0-3e1efbb5bf1f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "50edcc1c-0e3e-47e0-885d-efb7f0a87412"
                    }
                  }
                ]
              },
              {
                "id": "ecf8b349-ba52-4280-846b-5fd47a1f768c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5243c938-8beb-42cf-9f4c-38a110ade096",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f07714da-4ea3-4ee4-955e-f87c090c1fea"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "687d18ad-bec7-4498-80ae-ccaa9d6a81aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fc8794cb-9126-43fd-85d5-38f49317ad22"
                    }
                  }
                ]
              },
              {
                "id": "6968836e-26ce-4cd7-9a09-03bd1cd78693",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c930f29e-436c-406b-83ae-d9966ff7dad6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4df05737-58fe-4dab-8deb-ac69468bf0e7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1eec2a6f-af31-47b9-8b4f-f7fa602106ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "9d013d04-03e7-490a-94c2-bbe49885dcec"
                    }
                  }
                ]
              },
              {
                "id": "091d8bb2-c4a4-46fb-acb5-6262eb5dc73e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "67856f0a-ae08-4d31-ac0a-362547d8d0fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "09f4a619-ac2c-44e9-99be-93d747405966"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c8722a9-fc82-4073-97fd-36bb9efcec0d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "b5c45780-d1d6-4b0e-b19c-2c0e8844df56"
                    }
                  }
                ]
              },
              {
                "id": "8332beff-3e5c-421b-af1d-5dba2758c75f",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f542e797-a346-49fa-b06e-889d5bd1939e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "66f3b302-1c99-4542-9b0a-3c9306342347"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "440df1a5-a5e3-4164-907a-978bcbee47ce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e548da50-19a5-4b54-9197-3b145f784aed"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5ce50356-6f0e-492a-9a40-8272ec626bc5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d020719e-13cb-4a44-b42a-cdfefdd1c05c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3391d444-7584-4a2b-b39f-79aa4bc8f734",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eca549bd-4d13-47d8-99c4-b977ec617f8b"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d7cb4808-14bc-4cba-8031-7903d883a761",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "de08303a-b3e3-4a04-b792-601dcdc59c48"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0801452f-1872-40ef-9120-3126a68f00e3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "41a434c1-24d6-46c9-852b-26510f5f9410"
            }
          }
        ]
      },
      {
        "id": "41fa1d50-3394-41a7-9aba-40787cd28d90",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "ea78aecd-78ba-4815-8d55-31b05c33c3f9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ea9107ad-143d-405a-aab6-24f6282ca353",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "91c1f53d-cf62-45c8-ac8e-d25ee0834713",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4366f581-1298-4d0a-9f13-5a78bde30812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7828436-bcd6-4379-a58a-e63ca2cafea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "accc6e7e-528c-4101-aa28-8418181f2c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3901857-19da-44f5-a8e1-f7f5abcb903e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfce5823-b74b-4887-aea2-2f568d011b7c",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17bebf5b-03c5-417b-8ac8-617647728d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "184d3ceb-bff3-48a7-9a78-af43b91c0980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bf5034d-f14a-4ab2-a311-1f7d181c3a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "da6245b2-9ee5-4411-8587-3e468f58ddb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f8b68f2-46d8-4900-a8e9-6748a031cabd",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05b5e75c-cca7-418c-aea6-5d65f20806ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d6fe125-bc32-44ba-8421-dc694fd0de71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62764215-7c54-4423-a681-d03804f1a652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0bf1248-d424-429f-8fb5-71a4cce7268f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6281ca5-48a1-40b8-8639-ce6373e8b3ed",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a9717b8-b54a-4579-89ba-25e8d0530439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8b56eb5-e659-4153-bdd6-75142d410cc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "600fd4e9-391a-4211-835c-3bf119838e7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7fcda5a-555e-4895-ac30-568206afe472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d534b94d-eed7-4f5f-8a3f-1b05dd698a38",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a38f5b73-5296-4fe7-8f79-eca2e02f9110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c43b66f5-ade8-4d35-9215-85570aa8f75a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d8dc1cb-5ae4-4cc7-b255-a3a734adbd34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d0cb2dc-273c-43a8-8d4f-8964a725d012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dec65eb8-0c9b-4fde-99f2-cb8a4f598643",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be122cd-e728-45d9-b0cb-ba29d0fc6bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "904592a5-195e-4292-b45c-e33f03274b79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "988d1666-2e40-49c3-87da-d2ef60fb749a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ebaf0db0-cf98-49bd-912c-93ddbb5a1a71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c5f3cd6-f979-4bd2-8d77-aeaa30590064",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd79da3e-2e3d-407f-b0f8-78b15d49ddce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec68d5d2-e507-4ea4-8aea-9c1cade444ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bee8874-7c7c-4931-ba28-e29a040d76d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d33ad1c-02b3-4956-83ee-97416b5d43cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "336983f3-7258-4860-b385-31364129b2ed",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eee383fd-b160-49fa-8183-7626f6c6b780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46edfa26-c225-4cdf-94fb-a689a170a492"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10e50e26-b9f8-446a-a9c7-be2bf21f1c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb1f1a5d-0daf-4d3e-8478-a79d84f84ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faf8b234-d86e-48c1-a640-713bd02048ee",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2397f8a1-4f0d-4693-bd35-b176f1fdbbf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "693451a2-f04a-4abb-8d55-b86924cd7fca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a88aa15a-0d77-4a2b-8081-adf813d027c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0dd3de4-1870-49e3-ba59-a0f5a58007a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6287515e-df1f-4e97-ae36-06a029be5ce5",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfe70181-0efe-4a4c-88cb-32ad90d2de34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65be58f0-93ca-491a-830e-ce5bc868417b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae4cfc92-ed2a-43eb-acfa-fd2c7b070ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc7be3d0-405f-4080-8bbe-f9d63d9c52a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da82fc42-feb8-4c97-a28d-848337ad6eab",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a053f4-e884-41b9-a861-7bcefab29660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cb90b7c-bdbd-4727-ad94-3c1026be73c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "990634f3-5ecc-48e0-8819-98f37e63b73b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "293fc8b1-b61d-4f7a-8ddc-9687bcdb19d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b46ee5ad-662e-47f4-a08d-545cfabfebbb",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f496f29-a88c-4a11-9606-ce32d88234eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1144ae8a-7f74-4b0c-b24d-3c5f0b4e917e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edb13028-602c-4651-8b04-e44f1ec3fa4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a311c370-6045-405f-a390-514fe85ccb9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b1ef182-3700-44c0-8f81-d2aaf2ebb4ae",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9353fb9-485f-40e2-881a-6c6b75380dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09b2ee74-7455-46c1-be02-d12a3001960d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac9a4c5-7580-432c-8489-e32f834b5a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ad9cbff-0491-476d-bf21-e0eaa9f5505e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5131b20c-50a9-40cb-811d-af57574bc00a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2743111c-7dac-430f-8b2b-a952a3d496bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bbc8f11-db32-42ec-a592-99eab726c971"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "918dda8a-1848-4da5-9278-524ccbc86a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a31a878-0998-49e3-907f-ef33a1742821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "813354e5-a48c-4cb8-a224-87ddeb96498b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a430f1d-3f09-418d-a131-a9e87e2af762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d3d25c3-0b9c-49b0-b706-a85fd6fb7062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a0e939c-ebb3-4b3a-b367-ff39a3480d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8d41635-dc18-40f7-903a-412bfd1359d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58f0660e-243c-4a97-843f-f91a927862b5",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dc7cfda-c76f-46b9-b573-cd2710ada011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "694425f7-56a0-4fdd-808c-d2f0cf86e782"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c3dbb4-231b-4907-a03e-9c87020a6060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "011cfef6-3866-4c85-a0bd-b6af47fbb29e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98d2364d-b89c-4cc6-ae6d-d4eb3a48224f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b2dbbe-7eb4-4b42-a9d3-b852e3306a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac4cba6e-c965-4958-a658-84fa325eaa80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a029690-b2ef-4e79-8636-2e67112c6207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5241f19-10eb-43df-a517-a9f16f5f7789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "438eb6e1-0603-47d5-b8c8-8e19852c9836",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e703a4-4705-43c5-a443-83a301c3e5b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "735deb6b-b04d-4b09-8142-27774b9c5202"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06ae40c1-d7aa-4c0b-8c37-95d1d607c8e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ccdd9f4-a41d-455e-acfc-e5fb6548a7e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dfd16c6-4a8c-42ca-b70b-af30424144ab",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15ae2228-b02a-488e-b820-0590f36fa3e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5515e8b-4dc7-43aa-bac3-95b39101d99f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb1e0c5e-ad78-43b0-918d-7e94d9c5d7e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "63fa63d3-c2e2-4c55-ae71-ce50b6bea28d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92900466-27e3-47c1-81be-db0320900bd2",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b9a6944-024e-4e15-bed2-81e8c3d23400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "365b335b-b7d0-4fc2-8537-5187a8102b72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4674457-94b7-42c6-a4d5-209a8d645f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70429ab4-21d1-45d8-9d83-1637914b50ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c7880eb-b956-44ec-82c9-7e9f73b1a730",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "230698cd-5985-4c58-9abc-c50729544585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64e8fc47-0af8-4466-9c9d-c5edbfaf4178"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a17c21f-09aa-4325-97e0-e376616982d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38f3b42f-9251-481b-bb1a-fbbdc43145b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9deb6892-4b7d-4ff2-9ae3-611b497effeb",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "952455d3-5002-4125-860c-6ea04a18ac13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9faf435-8db4-4c88-a489-91b768c89904"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9adfe0ff-e6ec-43db-8005-766a9bc55b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41442c77-1fb6-4bfc-97d6-814b7b7d01fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "636bc204-037d-44cb-a03c-6266a5de23e2",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7738669d-dde1-4203-87ad-4892ffe5aea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e05f2095-0fda-44b2-b7b3-1962359cc505"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba74fea0-11fa-4472-ac22-628ead02d2c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "354fb033-7f36-443a-8afb-4a3eb56147bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b016ef8c-bcdb-4aa0-b734-d4f54e1d8816",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "189488d2-d723-4a5c-904c-6e1eae814403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e17cb707-3762-4b7b-9dd7-655134351a20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0a9710e-898c-4f1b-b244-46f8535a7069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45f4bd93-237d-4246-b5f9-ac1d5eaad423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10933722-4b2b-4832-bf08-f2d60d6ef17b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e692b71-016d-40a8-907e-463c5d79f941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f5b2ed9-0e62-475e-912e-b3356ae94dad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e473db-f730-45b9-87d2-5dd0ce2dd740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83157c5f-010a-4b52-aa41-87318e867da0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f3cc868-453b-4e6a-b00a-3801523df53c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8f66c7a-ec06-47db-a9e4-1b3cc6300171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae29c0f7-8ace-4108-9665-7a7d5769f252"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9670d7da-a540-42c0-b484-b8e05493cd8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2b66393-e71c-4c5a-b135-1660f5554789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84d9ad1f-0b80-4810-958f-1d3dc1364511",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a7a4da-dc0a-410b-ba73-0e0cc86723e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9fab7cf-5c79-4712-b4b3-e018587e7140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26c1aaaf-c1ee-4b65-9a39-878c1aa21cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3ea4250-e0c9-4bfe-9bcc-0727fb908c29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59e3d67c-dd7b-454b-b66e-7c754dfb4ae1",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28073cd2-9866-4369-b95c-665c81611799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc964e48-9720-42a7-b477-a822392f8cde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c19f8fbc-a937-4dee-b87c-db8f875678e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5d9d707-8584-4c62-ad71-f9db67e63b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ebcebad-887b-4a0d-b704-e8ed06e634bb",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a1c1f5f-8459-46e7-bb67-752a5a8fcaa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85768e48-967f-4a3e-8b78-96e21e6a8cc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "606c60c1-c786-4b43-a634-9baf8d03d590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3240e6cb-3e3c-49cf-a742-64bf7d2e97d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f02a1ad7-e165-4b52-bc18-2cba30b06720",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4345a9b-35ce-4983-9b98-441446565145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6091ffd-e8d2-44d9-97bb-9d2e55c0e9b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ac8b0b-b076-4235-9c12-51dcebc919b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b9ba625-20dc-495e-959b-22e7cbfc3e1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f78a3f2-bf47-4163-9dea-fea7b771e02b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "319e17b2-33e4-43e5-bd73-cb330adc5a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adb79b0d-8dd3-46f7-87fb-995610f6ac57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "616f282e-ffb0-4ba9-a4a3-7ec23ec23cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "514d21b4-b53c-4611-a812-5570b5317e8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbda5962-a35a-4dee-951e-07d18eb15f6e",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e9c82d2-62ae-4644-9dcb-27d8a542b6cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85ae7b2c-5f76-4705-9ca2-4aa1f6dca1ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5224453-e03b-4422-a8bf-3f3c0ce4f380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78f65668-42ed-4ca1-a724-86e78b5fe567"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9d7ee347-68f2-4fc2-ba0f-b069de734b85",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3fdeb3c8-a078-4fb4-a58c-cea6a5abfd16",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb25a771-c7f8-4166-89b8-1f9f6ddebae5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e47f47da-6565-4d36-9299-7144f38fc50e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a87b43d-774b-425e-8d79-ecff51501724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "52ce1171-db01-46c2-ac7c-35583959df5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2edbc8a9-62bc-407b-b170-e92177ce059f",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75449e96-f120-4edd-b739-5076ed4b2f43",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a985d553-bb7d-4330-adc4-cbbb5362db3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a9e8c4-cc54-4c14-9f99-342c9d7516c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02db7d0c-070c-4676-b1d5-06ac28eddd95"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2d3a71f6-cee3-44f3-811b-a30738ddb514",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1afd1c8c-9fd9-47d7-aa91-c13efc21401c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3344e948-e620-454e-b579-88510c2b8e1b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fb58318a-934a-4f1e-bdf0-c37b58533cf3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6d4f8d7e-2432-4c23-9db0-d6113c9e1f26",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "27ee652e-a4bb-447a-bb58-291fa4235d18"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "15b25ebe-e24b-4ec0-93c7-4aa985514323",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b27a0c51-2820-4a26-9533-1d8ffa6699e0"
            }
          }
        ]
      },
      {
        "id": "b0edbbc8-20d2-47f1-ad0b-7131b80b1bfc",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0519f7a0-16d5-46aa-bac5-a1a2f24b70db",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5226c765-9122-4b52-8c34-01db07d53cce",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e96e288f-8cbe-479e-bed4-483d10d1ba6f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df0de765-b608-4ec4-a031-6afc26487155",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c26d8f6b-50ce-4eee-a725-afea028c1817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3841eb4f-886c-4504-af62-eca8ede22270",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8728ad53-dd03-4d48-b41f-2cdc7cd545fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84f6b78c-24c4-4a85-b65e-a765bf92306c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29c799ef-9cf1-42fd-8409-684bf1707440",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f78e6f4a-09b0-40ee-a21f-82bff7a09b6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d12f3f6-5f12-4042-9eeb-f04ee41541f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcc09007-3173-4f0e-ba87-526b04c690c4",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f7ec3ba-c82d-474e-b0ef-ad41d5018e63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38161f7a-c211-4848-8f3d-4ae880fe93a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5761ad8d-0d39-43c8-a046-0c8c3d9116ba",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62d916ac-c7b8-499b-b87e-86e65042b7ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fa39b91-a47c-435a-b9a2-2c3c1531f852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f3052b-c71b-40f6-b561-fb0dffca1aae",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "467f8789-4bbc-4882-9fae-7436ec2b4060",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccbe3250-8312-48d3-a11e-9767d5f4b579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44d520fc-2935-426d-906a-caf87a1900b9",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "659de21c-cb70-4202-8431-df43e39aae52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d0017ad-469b-4085-ad72-e4e89de39392"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6210dc12-2a16-40db-a0eb-c98a9ff1d9b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "965fadaa-cb82-4310-88fc-d6573d8af63d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f04befb-0eea-4da9-9166-d1b8fd583db2",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe66ba2-7892-40c7-b1de-1ec6b3b5a1d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d013e47-126b-4621-b788-36b6caf43340"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc104ed5-35ea-4c8a-8e7b-20feb6534158",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cced9742-8124-4eae-989a-37c37b58a65c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d6eacc2-131b-49bb-9258-8aebe0e593f9",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e86a3548-40a1-4049-933f-6c0a2359354c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38e0d58f-e2b4-45b4-93d7-7ad272f0388e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78468387-800e-4ad5-a513-bb55f8376ce9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b03b3e0-5945-4aa8-97b7-0a2bc27521f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58c69951-6d7d-4c14-bfeb-338c26ac8c9a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c404387c-2def-491a-92ee-42ae830d24f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48fe92f0-a9f7-4ddf-8747-7eebf26be3fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeeb2561-b465-41c3-a923-52f877ca193c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aab6c172-f144-4d25-95ec-acc026576b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbdac347-d9b1-4467-b81c-403db4b6acb8",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0fe0275-f0d4-403c-83cc-3a1f9967b2b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a411468-569d-4fe5-82a8-f52e6dc167c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7d62314-6571-4b11-b033-978ae986710a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "007ccc4a-9d81-42d9-a5d1-8338dde99ac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b1dc8b2-edce-4530-864f-4dfff8583ea7",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acf35e47-27a0-4011-99cf-7eee0cdb99a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f1a4a60-1d16-4722-ba63-8aa6b8626fc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ebeb90e-351d-46ba-9de5-dc24d7733ac3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "870ecde8-eafa-4266-8f48-c08929e20c33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "773d9094-6db3-466a-adad-fc51c67f56b1",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f9049a8-e02c-46cd-bb97-52531e7d3c7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e96ea88-0c81-4f55-b915-01a79cc98d8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "046ba04d-7fc4-44bd-8c7a-7a20e5334b5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8b62bbd-98df-4d4c-80ab-01da617f5f2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31d53a8c-9cef-4cb4-98fa-a5497fdb7c6c",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9385fc2-a7c5-4b10-aca6-3d053ca11c29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b43f0336-e7e3-45cd-b8b9-043faa847b3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0152a680-01c6-4ff4-894c-ca8cca50502c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f48b576c-d187-48a6-8752-f2e241ddc0a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8ce2b4-ee47-4f4d-82d4-e9cad3d9c373",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8bcf1b9-457f-4b56-a2f2-4f789762fa1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1367fb47-687d-4838-9cb1-74186d40990c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53db687e-be2e-4607-b61a-bff12987acc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79523546-61eb-47f9-9b36-4cfc574b3c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e44346-797f-4fc3-b452-866bb7bc2f74",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73e4987c-14d3-4c27-b322-8ad2bf3d82f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df82f7be-9015-42dd-9abd-37aef85700f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "270c189a-6d33-430e-9cb4-9c47d71e6ce9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72462c02-e955-4846-ad39-0631803efceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6656b45f-ddb2-47eb-96f2-3f53a8343825",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e5f2231-0a24-4a65-8f54-d81d41dfe98d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d5a718f-392c-4a42-9724-a5d554dd099b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b332045c-747f-44c2-bb47-d611e1bc7f30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67531803-e335-4c81-b675-0b64a261e06e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1553c9f0-b171-461e-aea0-e6fd5c3cc8a5",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bbd4189-6547-4bba-bd97-9e08214d7094",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23ea4172-4f1a-441a-9dcf-2ca956544f05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b82f60a-8e28-4684-8f6f-662828e2a75c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "869ec2aa-2557-4f0d-8ab2-ff0d0962f5b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb5149af-5361-452a-aa42-f568baa41a68",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b4201a-b23b-434d-9eed-40c683a8dad1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac4f2a72-cf8b-4861-be4b-015f8a3151f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "346fcdd2-668c-4fd8-a03e-4160dcd32bff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b866f57-f948-4d0e-b171-84bc53676ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59a949c7-056b-42f4-b6b7-454acd392bfd",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8431d4ad-18c6-470a-9817-c33d6111a845",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feedfae2-77de-46c2-afc6-2535f0a3d58b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64466e7c-a3bf-4f4a-9046-9ca519a2bc61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4776be3-80d3-4cc8-999c-f766382d9f8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "015e14f6-5339-4b24-8340-70a6502126df",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "869fd625-28f5-4417-be87-80b12c90f379",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a58dcebc-54e1-4e13-994d-5f469efbc08e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a9a469-115e-4e81-bc3d-0cb7b3a9c7db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aee089bd-756d-4788-b326-df172c243b67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0832bfbb-9b06-4c26-a27d-d587927a7c8d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de078671-628f-448e-9201-3f892cc6aa63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b453210-8d8b-4d04-bcdc-c9abb56ac382"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adaaf53d-c2bf-4edc-9afb-57d67ebc9475",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ea37327-cacc-4d2f-ad42-066c2e7785c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "718c56b6-0171-4e6b-a6ce-5efd3a0e8a14",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8631970-16a0-4589-a005-5e3fe44555e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cce56399-dc40-409e-8615-bf26e627aac4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fda84fc-6e7d-4392-ae51-baa81ab8f6d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebbb2509-9fee-4894-8586-cafe0c6d8d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2acf1c76-b5d4-4abd-95ac-f495388a1cfb",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd889f99-a022-4946-a996-706a10fe69b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40511ed5-8cef-4ce1-81f8-1b414c16961a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b95889f-2ee6-48a7-9a44-a4641d5be349",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7e53365-fe39-4aaa-93b7-86fcdb6c2eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de2af9f2-c217-4d62-996c-aeb57a3e392d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1a09033-dd40-4def-81d3-232640356604",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f266b5d7-469d-4b80-ab20-8fbc017abde2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "515c973c-7534-488f-82af-37d7511b164b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aabf96f6-8fb3-4266-a931-397179284f13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "291e24d9-dc1c-47c3-8535-b5b02c934029",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e6ff429-a1a6-439e-a4f2-da7f7e670749",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ee846a3-eae2-44e2-a89c-36a3ab0360b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba57dc91-7214-417a-9b5e-5a0387a5e798",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83dd8a6f-749e-450f-bb5d-430ae7571ede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73b911ac-f21e-45c7-ad2b-d336ce0fc47e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "212fa7bb-e67d-40d9-9709-8ebafe72c007",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9048d18-cf45-40cf-8aeb-969115d347f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "871b7414-013d-4821-a58e-8027bf7114be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "594ce687-7c25-4d1a-95d5-7c00e296d38e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aa8906f-873e-4c00-81db-c3518ccceea3",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d2697a0-708b-4fab-ad00-7eb91a9e54cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8359b6fc-d12b-44a5-ac9c-4d6570597e5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9174a6da-2d12-4488-a291-9ee025cf0d59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23aae612-c85a-40a5-9d25-452930a64cb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e6367c-ee8c-4c04-a3b4-2fea769b3d7f",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1297dad-ba25-415f-98b8-a0c50c583344",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d635a0ea-680e-40c2-a4ba-575f9912ee37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c935180-e237-4936-9954-101c01885afb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e1cb2d3-eec1-495d-b73e-f72ad026b9d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b26e53e-a893-4630-9dc3-c070d102e41f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da793b8a-6329-4e33-9ed7-06f4bf97cfac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a315754-93e2-442d-9fb7-958eabf1c1a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b38addb0-915a-4922-87f7-80043eab619e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "635542c6-f4c1-470d-a2ef-7a664f16bd9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64cf38c7-3ef2-44d6-bb78-ba2ee11057d9",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e71ac6d-2394-437f-89a8-727680ca022c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58d588a5-a35b-416d-97c4-5d809c80398f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "797094e4-3b44-498e-91a2-37bd38786b14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51ff4151-5586-4f7f-b7a5-ae98db3bcef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f44b782a-b5d5-4e57-a90b-610d8d6cae58",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "097674ed-ce77-4c3b-a8fe-dbcae5908cad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "308e1c96-e2ce-475e-a644-3460a03eeabc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d6676e3-dde6-40f1-929b-bda35b6a2a35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aa6fba3-66e8-43c4-a86a-80cffc02c37c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f32e3ec-5a1e-42bb-911d-ea79373b6af6",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbe280a1-5d8d-45d8-921a-9425239d0aa4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "877db7d5-ab9d-45c7-9ac5-78d425422d22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea93b5e5-726b-4b43-909f-f1992712357a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc2f8c6e-d08c-40af-b929-415a2f522b8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad083ece-cc9b-4152-8031-80a7c421461f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b46db2a5-ea82-46e8-ae0c-68af6a0190bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "313c21c8-840e-47fd-901d-721b1fa9a245"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d083861-d5f7-4244-b70b-21e08b06bc26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaa6507a-72fd-40c6-a253-251ce657e7aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f840b2a-f5de-4877-a514-55c82ee65fac",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b22f3389-baa7-4b94-a00e-36db997d30a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc38e3da-7f22-46cf-a389-e892aadd7b9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ab6d04-b2be-4584-8ed8-812f11620cc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b286614e-f757-4e28-b8f0-c3abef7ccb8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12d20d96-f980-43f4-a400-72cdd6f4666c",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d792104-5b18-40e6-ad0a-3abcaa7ded0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35940464-6f20-4043-957e-04bbe3063279"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf279272-0bfd-48fc-aafe-e7c634cd3530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d6c1243-ff23-4b00-b888-1e5bfe00ec7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e27dfa8-c791-4132-b77e-d4a280888cef",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae358c55-5486-4d30-adf0-4cfa3593d3e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed0984b3-6151-45ba-8e62-19a69d4ce141"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "385f4051-eaf3-468e-847e-e2ec6ea5b211",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d01882a2-8a7c-4182-8a6a-50673f5e2155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f1276a0-6a05-4bf2-999f-95366ba418c5",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "745dd825-78a6-4632-9dd9-32dd997d9add",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67c48cd0-b8ce-4b0c-9e1f-69920cc12b2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4584a29-7ec2-4964-b14e-d232a7060e23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dab1ab06-b40f-4c62-9078-2618c7f5a19c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c10ab115-10eb-487c-bc57-8cb3366a219d",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c03dd31-0c16-4abe-af91-7ad9efa3c227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41ace673-b0b3-4db3-904b-a638508b3714"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ea7e97-3296-4111-8b1d-da9a6bd3b345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a2d2bc4-4d01-49b4-ab41-82a65212e430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb682bf2-c1c0-4bd8-9f42-18d02d0aeb39",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77e22dde-09a1-48ee-bf09-9b14f7df90d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5ff5f89-40e9-4263-a9ce-c0fa154c4642"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d805b2d-90ad-4a6d-8338-8b316999aea1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfc8f954-51c7-42c2-8c62-b41a06bac8b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a649973a-f7e5-4e91-b7ed-5177909f7110",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0752063-fa6d-4e9c-b639-fc8a8bd9a71c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f50193c-3246-4082-980a-df2599ddf8fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51da831a-df12-47fd-b40e-580d079c4e7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b921a2a4-96c6-47e7-ae25-095a1ac641fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "269f23f5-69ec-4f2c-9c60-139b6822ed8e",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc6e5386-96f4-41c4-ac01-dd603ffc208c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c34036f-8694-494d-be4b-a5e53ce9ff89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "440ffaba-067d-4ff3-8183-ff06682d0f74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25da61a5-7ff0-49ac-8ea7-e2dc042898dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01a7c7a0-6e43-42d9-84f3-2e3206856c5c",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d494cf96-a781-4abe-a4c2-8a11ca79fb5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d476e576-cd72-4b19-9e6d-ec1c724df265"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "500a82e6-edbe-4846-9597-2d41c086aa99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc65465a-1513-42be-9093-53651f7d2233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d3b9798-800a-4de7-aeb4-1e9ca2e3ea37",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e316471c-17a3-42af-9b4d-5eac0ab44396",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3178fd5-56fe-4578-9059-27c34a3a8ffe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da0ac3f7-715a-4bfe-80b5-9b312d7a0853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7592f23b-b3ac-49b2-9ada-293ead9815d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a6c0322-a60d-4655-b7f3-8e9c71b1be7a",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad09b85d-53a1-48d9-92b8-249ab8d82a97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54162d27-4de4-4a02-8162-8077723df78f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ef95467-ed11-4330-9814-e85a3fb6e238",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adcb8189-e528-432a-ad6b-fe91aa9b3d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be339a3c-5601-429a-a671-e61a5dbb0159",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c19430-0b47-49f3-baed-fc07c3f1a8d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ed91fe5-8ff3-4a1c-8133-cc4cd0ace433"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee64a4d5-f48b-4725-8755-e820cd6bda8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81f2a5c9-42a0-46d1-b576-feb675d015c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb3393c-cefe-423a-bcb9-8650e6d6012f",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a6017c5-7a9e-47ab-8cdd-1ed9677cdf52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52e42fa5-adf5-4156-a79b-74da17b84dd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c96609d-d9e5-48f3-8029-75d178cfa18b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66825a30-d7cd-41a1-8e6f-ed944c2ca12c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9feb9e5d-ca0e-4371-8330-26c54699c26d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d178a939-d028-4530-a760-53b070e97008",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "873f6315-5809-41a0-a12d-6ee7af03a26a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37129c71-d8be-407a-92ec-4b040cf6914c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a46b7738-bf89-4282-81dc-3b0f15fe0b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81d2a98f-318d-477d-b985-3d8354b24877",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6807c19d-8c01-41a0-952a-196461ebd473",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a3759b2-8202-47c1-8a03-8a5255b00a29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be7cb80a-915a-4218-aeb4-997ac210ebb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c1056d4-4f01-4744-933d-1aa374563831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0748416b-209a-4a2c-af64-380a1ea3445f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc8d2d8b-1ae0-4ad0-9904-92990a51143a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "614ee4de-112b-4768-8bb6-08aa9b1435ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94588885-a9f8-432f-a3f6-5fa461b1b0f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df8b61cf-eb1b-4a9d-9b08-c358271423ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11c6776c-f383-4e7c-aa5e-c2acdd53fb33",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d0d01d-c578-4c1a-bb0c-9d64e6b2a426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dce4cfc-317d-4162-a44a-cf5b2d54949a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa87e63-e467-4c15-bba5-dcfe797660b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "891b8df6-6e2f-4d53-a739-a80c2023ad20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "029404b9-f30d-4162-ae64-d93726f4a98c",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e6d6950-7a18-402d-9310-52913e9cc949",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63336d2c-0369-4051-92b2-8e45e3c15063"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e6c14c0-c9f1-42d2-94a1-cae408d791f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5850b111-4abe-4d34-8767-e8e120a419b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c4920fc-3738-4061-bc8b-aaf2a1c2667d",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b51677de-66fd-45bc-b9e2-abdb119a1d72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40b26c50-34cd-48fb-b3d0-483e10abd8ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84cf839b-aacb-4dc7-bcff-114bcf1f7111",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9501351d-1507-4402-bc22-4409d4b5d8f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24a89c28-973f-4341-b6fa-6657ed46f571",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c948bd77-ab81-43f2-87b4-37984b8afad1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9556da83-084d-4afe-bec2-bfed4ae399d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1d37f4-d40d-4bd5-b8c4-3f85cd2b5957",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b474867-f941-4f9c-9802-afb6b02efd97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98f52110-890a-4c3d-9232-245dd7dffc62",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04804f0f-a4e2-4748-a062-16c573d24e56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "449ac0d5-91ed-4fe0-9bd1-e475af3932da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "087a2585-7dab-4481-8881-5ce725457c8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b8180de-b1f4-49cd-867a-bb3cd6fdfdb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efce8ace-d1e3-405e-95d1-711ad0bd362b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdf0cf2e-4666-4930-86b4-4dbb5206858b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9274c010-8822-43cd-8756-bdb7b7f0b00d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a59b41b-df65-4b1c-afb5-ceb352f1c9f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bcde080-0b74-4735-926e-e34f31b6bcb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "715926bd-df9d-4827-bda5-c920270cf5e5",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b1d1c0-1514-442d-81f9-71a61a9090a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c0b5a38-0998-467a-8889-1b5ffa97e3d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc43c1da-0017-4958-a2bb-b33a6a3096e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38017921-1caf-4373-9bf8-809883be874e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ddc45cc-6f22-475e-9592-184810b56e03",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "136792ca-c75b-4427-a988-10a577194583",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f8b5d49-96ab-4d14-9efb-a595673409ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "906674ca-00a1-4a84-8a6f-ceba1071d1f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3043644b-f696-46ae-823f-b76d332691e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b77ced2-3fa6-48c4-818f-70400784c9a2",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2a880af-7261-43a8-ba20-b2954c87f367",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63dc365b-dcdc-4409-b8c0-e0da2bf2704b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32052acf-ca0b-4555-b560-2d37875fe859",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7fc519e-0433-4cd0-a5ab-5d6086afb8a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83dfc04a-6a43-4d07-bd8b-0ea9313e739d",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ed4f231-abc9-4493-aeaa-6fdb3edb444a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f329d138-165e-4428-9587-a9b45313a8e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48eb578d-415e-4822-b946-a6d0828d49d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f993b39-5772-4b69-9196-eaf83bef480e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04d00831-71e5-476e-bfe2-966450414de7",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e7c428-baf5-40ea-be3a-f417d1f932ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "569cd133-4f24-4423-b7fc-dc11d3d9017e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "395a3074-a946-49ea-95d6-4ef1933c276e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6efc9790-7cd3-4e2c-a1c3-3397150a9a13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23caab77-12e2-4f8e-bb1f-1987a86fcd8d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed956d4-1963-4676-8b66-76c25a11727d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f9cd185-e49d-41bc-99b0-f394b569cbc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba34fed-b9e2-431e-b556-9c5699eac551",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b7c3aea-ed02-44cf-a4cc-701bf0a98de9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09510d1f-09fa-44ba-88cd-3a941d63dfd8",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a36e0bf-f218-4460-b873-8f9f00bfa6c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7f77be5-a6a3-4271-b84f-93483f60228b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1669b033-e475-4160-a9f1-3bd4980eb8b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e872d062-e67f-452b-950a-5ab29e4058e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52ac1d5d-d997-4f60-98fb-3707d74af1e8",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15505f8d-f7d7-4f1b-839a-920f2d40f9e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9985057c-d316-4588-885f-cb660b07c33d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d95e2301-c4f5-4410-b995-337563d253a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00803db0-9432-4476-8654-8f9cc4594373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b458f99-7bc3-46ab-8e78-509e3e359509",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85e7b55d-9b7f-4279-bb94-3cc96ce57d98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "870cb597-28a5-412c-a799-5f02859cb5f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "954efcc3-e730-4f67-8339-5e4f2b6d45a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "404f82e5-a5d1-4428-b54e-90b65fa9b6c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cdb2bdd-77a7-4c6c-a20c-6d6d3df452b2",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4dff75e-ba3b-4df6-b00b-86f01e3133c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aaa6ec2e-6184-4e50-a82b-ea96ab50eaeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca0d716-83ca-4ab3-921d-baaa0cabc18e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51f6df6e-6616-4daa-9a9c-2cbfe9be9954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "463ba154-4305-4ef4-8999-f2de992165bc",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de59980a-910e-43af-8824-03708263be35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea0555c8-275e-4698-8c4b-359aa25f7441"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d17f80-4e86-4140-b3bd-8566ac2fc31a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56cec4dd-21fe-47a6-a8bd-51430f8557b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c154ebe-28c0-4189-b4d0-97b6c14fcdd6",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d9fbc5f-1d2c-4c3c-bf5b-ff225ce28e6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae583ed6-b8d6-487b-ad82-956fbb759048"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5046b172-32e9-4a6e-a5cc-612087b285f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f378bc07-0442-4e23-b1ac-0c7a53bdc273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce462450-00e9-42ae-9578-bd1b984b3d7c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4851e6e6-9110-41a0-8677-158df96a49e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1788e66e-26e1-496c-9038-7058b5f5885f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c683c6fd-7546-4a9a-bbfd-50bc9fa0f59e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dfdfe09-dc67-44ae-9135-f29ffc2ef934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63593b01-8a10-4ce3-834c-1723e307d227",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41488d9e-fddf-47d5-9b31-4069f50e623a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8fedf30-8ce4-4a46-b0db-af7c2f39b3a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eca6e75-bdc6-4bf6-8eb3-38999b329114",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1826cd0-7c6b-48d8-8703-f470a7dc00ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "950bea3a-0ea0-47c6-a103-c749dc0f9b20",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "563152a2-d083-46d9-bae8-7eec6416d0fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76731569-756f-4a87-98bb-1a85bcda3103"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd1ffde-7125-4bd4-a7e0-58d58d252ebc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e53f76ef-6b30-4ec7-b50d-134e7a933d55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72744025-e6fa-41f7-ad71-12feeb3caeaf",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a57a31-6f21-46b4-a735-2a229095f258",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ce21fdc-6b93-4d09-98b2-6630d7dcad69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a936237a-b98d-412d-8012-3246a1f4c02c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad99e391-dd2a-4bc4-a6ed-7f9d12e4d99a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81739203-846e-40d2-a189-ae7fabf8ac6f",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "790a4f66-f754-4af2-b5b8-6457b6a0e735",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecbbabc3-34aa-43b1-b641-5f63043e5fbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90e241ca-1004-4e4f-8a2e-ec472497bff9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "394f6ee0-a04e-41ea-8dc5-2cd06f95a122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d9f88d9-5d5e-41e2-afef-d951185528fb",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d44da6b-d474-4506-880c-65093a5f6c04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acc526be-1f6f-4865-82c2-e88bc1615093"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e84bd6f9-96bf-45d0-a2f0-36df3725a94d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a3cd361-e508-4029-b8f3-de17543fe70d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54cbe1a0-6856-46c3-959d-83e7e1446fe6",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b7a3d93-1ceb-4671-9205-2caf0ed6bdf3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c6180e8-a33a-4d82-87fe-48452602c1f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3ce4f81-f131-4cf3-8c24-e5ded5d1c732",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73c14998-6131-4808-a4da-0624994cb562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfd34847-9a1f-41b3-9d00-740572efa0f4",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e295f10b-f095-4ae0-8b2c-890e82cd2da6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b6b3a63-27d4-4f2d-a292-dcd66c81e163"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7221c3a4-235f-498c-a5a7-e41ad7362bd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4e18b7f-693b-41b2-8af3-483f8c1df526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9ea9bdd-69f2-4bdc-9d8b-45bf4968d824",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a76714-fc10-4acc-b629-8b9bca8acff6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1292517-1169-4cf3-b7a7-24494bef2442"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41921a33-3a45-472a-af86-6fb89d7cd6b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac407a72-e439-4f67-9632-c6a6e72d1267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "219d3989-8901-4922-8f07-e88b262f709f",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e536cd6-dbc1-4e6f-9fff-ece7ab895de2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db06c37b-2d30-4ca9-a1aa-c8561a96288b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d733d770-5a40-4f1d-ba18-1626c7d3132d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65c90739-7e3c-4322-87d2-936402c21ff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72d031d8-fc5e-4dc4-80db-0dec1c1bf096",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5219a448-e879-47f0-b878-7b2ac5e8a289",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05442349-0a86-41d4-b115-1d7936a19b02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d26bd4b-41e7-4ef7-bf8d-8c6c9bc5f6d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08d397c0-07c6-4d6f-9d07-fac8df59d124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12cbca12-7559-4f47-aca3-c0d0ee3dec1b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f63916f5-08e1-49d3-95b3-1fa5f60819a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0570d9b-f41b-4232-bae2-1567f996ad8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fdc0caa-1d3a-4c61-8c6d-e30754ea3bac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecfa01fa-70df-47ed-9ba8-370aa6eb6f8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cad0845-c720-48d4-b69c-1897290121bb",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64cb49a7-7cf5-4f09-ba42-a5d9a5fd262c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee6b4688-6566-4a6a-b3b8-9c6f2e33643d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52994b47-b565-4340-bfed-214aae70648c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f111d38-da83-4c89-b00d-8cad931306c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0192229-53bf-4716-8282-10fc05201cd0",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56dcc0ef-8daa-41d2-a192-f2f4abda2743",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22d23411-bced-4cc5-b2b8-ebceaa0ebb29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1ee8c46-9b33-488b-ae70-9683d2115a36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c789b170-aba1-4df6-814e-a27758dd3f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "238c80b4-a75e-422c-82f7-6cf48c8daac2",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ab683b-591a-4a49-b237-9f33c9b2c519",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec19dec3-9b79-47b6-9699-321621913d70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b60fcd05-eb34-4fc7-8586-b9a89b5e466a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34a48166-ca0a-4678-9e39-8e47a3b78a50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a773653-0c8b-4e36-9c5b-8e4f75a5db22",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "497cecb8-ab28-46f3-abc6-c9ecc4a0627e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbdfe3ad-5308-414f-b922-2f5e62af83b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ea0ec2-3da2-491f-8a8f-d9d11f69af0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d9f5117-6d36-46dc-80bc-91ad18e9398d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f555acb6-da81-42a3-9b96-aa50add1e21b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb2e1cfe-aa3f-41b9-b9c9-1f6c1d4b84ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e89de684-682e-4fde-a52f-49d108633ff7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b467db8-d8ed-423b-9f4c-9e961bf90f0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1754d8c6-12d9-40ec-8159-66003b4a4a4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13fde9f9-c24e-4089-9747-0776a2f34c93",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dfdf75c-8d6d-4057-b635-521ba3079236",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d770acd-75cf-41b0-ba58-78304b89d1af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe9e59f-58b2-4534-8adc-8acd5a5d5a5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "405fb54f-f0cd-4abb-ac70-be08ded26677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b83bd41-d904-436b-84aa-c14ef47fa27f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c6d3cfc-b1f3-4873-a4f6-46f4d38c298b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4679684-b7fd-496a-86b1-1fd9429ea643"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "446cd5be-aeac-4037-af11-0da39fd68022",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a90be18-0495-4149-81fb-6593b9303007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49faddf5-c07e-4314-9fc8-3a90280ca949",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56f8a3d3-71cb-4bf3-b9b9-b602ec5fbc08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a42307c-d188-4558-9c1f-f3f8e801eb24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24379ee2-fa82-4aa7-a770-d4d05b02340b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18a8f8bd-b9b7-40f0-b835-2cb1785f7781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8060de32-c95d-457d-a0c7-646a1f209120",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5e99d08-acee-4607-a33e-2bf5de3afb91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae257ae7-4220-4907-bc92-817f5af6867d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ca6057-e785-4bae-98d7-76876218b64a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f5c85ce-9036-461c-b6f8-99ceb35090db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "890ec0b5-53c5-4cf2-9324-5d998822bc5d",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e07ae212-9e07-4f20-9781-db346d4961aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "391e301c-94f8-42d2-8fe1-4ec4f8b1ac70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c36c8d-2019-4e78-8c3b-7a02a343c3c6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7b74aa9-95a2-409d-b7d4-c4decf59d017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34298261-50f6-499e-a1b3-0e780d816964",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc0eada5-e387-470f-8cb3-06e452cb303e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a35ef75-b7db-486d-8156-dc1b6f481409"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f7e535-0cfd-4720-b140-c9a2e9581bbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8aae1cf-35fb-4abe-abc7-a79cbb1e086b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f37489b-1f03-40c8-bb3e-96736c75296b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dfb533c-f651-41e4-9a4b-97a072ac8d02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5e9dadf-73e3-40b4-8755-ae1a4279c91c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b15e93e-57d1-4eaf-808a-ea68882b5d7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aff9e6d-5201-4e58-8350-e54e7a839769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d78508c7-bbf8-4ba0-a775-fec360f39925",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e4cc23e-674f-45a5-8d8b-02c7bd53a2b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f4ce1d8-88ba-46c5-be77-a22cef52d9f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31ec5ff6-2532-4794-afbe-0b08b971ccd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "469af8b8-71e9-4283-b1f2-0c180ffaaa95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bf6486a-1969-42ac-a483-afb2037d6f58",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d9fb5c2-d7ee-43d5-8403-24ae15d5d5eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75745587-282a-4a5c-bfc8-e4b8214504f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf9b27c5-fdda-4d33-9742-45ae5d026c4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d19170ad-2343-48c0-a807-24c44ec29efb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5284468f-7fa5-44ac-a5af-81279f72c6d3",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a72833e0-c2f5-4776-8667-eac09df0108d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b7cb05e-b197-40b3-b98d-2baf70787178"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eee904e4-f211-4b90-8f5f-11e039d579b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dcf8777-ecd2-44b2-9dfe-c147a6ac12ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d732c9a2-8ff4-4e22-81b6-390abac10fb7",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "518354e3-b4da-4184-aa93-fc4581024fef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4cfa4dc9-1b69-4056-9197-2a49e686f3ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ad217af-f97a-4dde-bd9f-e972845d1ccd",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "736440e8-067d-4562-a5c3-df3e466c627f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e194b8c2-6fbb-4fb8-b9e7-dc392aa21031",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b929dc5-f589-4eb5-82b7-597de3da8981",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f5a08d8-c624-4da0-9e3b-a9f4a8a83fc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23b387d1-0006-4f50-8b7e-d87c89acb8d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b73b593-dfa6-4449-b48a-cf8dff37c677"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "27def21d-7511-4a2a-831a-2b8258f4d04a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4fbee583-ed90-4715-9848-b7108cea9141"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f86c74b4-742f-44f4-8c34-8971959a33ce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "77fcbfb5-8ab0-4af5-98b9-b4ef3390fc78"
                    }
                  }
                ]
              },
              {
                "id": "8bad4bfa-a040-462e-bd3b-3a292be43746",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a8c6ec46-978c-468b-88b4-f372da238e10",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b3a9f3a-31ea-4a93-aee6-bd082f560d64",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "3026c49e-fdde-4979-a864-4830882b6929"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4752d67-a2b5-49f6-be37-9b462bed168b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "05d4085e-7553-4002-b28d-2586e79ae4f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78d21579-89e7-473b-946c-de6089bdff61",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bab6f55-63e7-4e96-864f-25750b2c8aea",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "fa71ef8f-dcc8-428b-b21a-69c9a1dd2670"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff84ddf-b089-42b6-a95b-2a27f8b11ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "01f2b434-ba20-474c-b1d6-319f243b6b39"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f1cd5f8-e995-4ab1-9b0a-0a9a0146fe4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "090c3303-443f-4f9a-9f43-276b957bfbf3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "566a8a3a-9f8f-4d69-b45c-11de182b9700",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1621ab95-98e2-4231-86da-276f7798085b"
                    }
                  }
                ]
              },
              {
                "id": "a84afde9-9f13-46f6-95ff-4b374e888759",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "5d2a8463-fae8-4e0d-b525-5df2d0892256",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9266268c-6317-4eba-9a3e-24543f94fb72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "01584151-f2f0-473b-a755-84e7514d1973"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb2f4d59-e795-4f89-9092-62cf8177a304",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b443734-5c31-42c2-a934-2c1beb334580"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "09e81f5e-6aa0-4243-a11c-ce39c63c4851",
            "name": "Positive Testing",
            "item": [
              {
                "id": "58e86edd-5173-49e5-87d1-76b0d185190c",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a53b27e8-06a2-4bee-952b-0cb89829ef9d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "005bbd77-30dd-4ea0-b1c5-49b28e23e8bb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4303c9b-90a9-4836-9220-fb3b2bcb10c0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7858d66b-8457-464e-af1b-e92f260b6b5a"
                    }
                  }
                ]
              },
              {
                "id": "7918a779-b107-43e1-ac83-8fd40158ca84",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d0a9c2be-fca8-4536-ba33-f0e06a6312dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8573091e-f07d-44a5-ae7a-059071f42808"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d010573-1ea0-40c2-b8ef-5b82dc152ae5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a63e1ee3-633f-45ff-aeee-5abe2721b38f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "af0a1c8d-039f-4da5-95a8-e780fbe4fbbb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "a91ae333-28c5-47f7-8fc1-3a67bcbf0ee7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ec227e69-edb4-4cfa-b3e9-c2c1ca7857ad",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c31b202f-8e47-4874-bd7e-cc77b0d608bb"
            }
          }
        ]
      },
      {
        "id": "de314317-0a65-4aa4-b7b9-14d6728f61a9",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "59de0bfb-534c-4370-8003-3aa0f382638f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7e5573dd-fa4f-4cca-93e5-9f00cd0f0a5a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9fa33575-374d-4190-a840-8736e3e01f11",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36a46447-3ab9-4364-80df-bc8fb2334a7e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7fa4441f-fd16-434e-85bc-e4a7778902e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1fe747b-3fb0-4c8c-8236-34e2577d9e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "01861d86-06a7-4245-8d7a-a5da9ca38269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f36a4d7c-a04c-45dd-b83c-c15ba0b06462",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3266370a-dcb3-4947-9c0c-1fb14ade941c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cb0730c3-4323-45f7-b0fc-81b1476ec24a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "081b87b9-33a0-41cd-84e5-9fe4cc3ba791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f004dc06-b6dc-4372-af0b-b31d378512c7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4afeb16c-6757-44e1-b416-db3b11c23741",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "29fcedfc-5c69-44d3-b9e5-4e49c5b88622"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0764197f-7023-46fc-89df-ef6284d13c00",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7059494-4ecc-46e2-938f-57dd58860891"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e633b5c4-d3c7-4c3b-8226-e0c14cfe0966",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "982d0c79-754a-4870-ace1-af983ddfa3d8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "898a1d90-877a-433c-b1f5-50bdb829df78",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "92141ff7-88d1-48a6-adc4-3aa407fd64f6"
            }
          }
        ]
      },
      {
        "id": "2a59b0e9-0234-45ae-9ec3-53c960ffdf44",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "7603f63e-ba74-42dd-a2de-9e26e6d2c0d8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fbc93cab-9504-44fe-846a-0504d1512c5d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bcdea392-dba9-41b6-9c47-1bd55b8f8d88",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccfdee63-a08d-437d-81a6-8209dad5f560",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2d85ecc3-c17d-4f1b-ba6b-eafbe391eef7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "266430de-6b36-410b-9a3e-2e9998257038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7adaeb33-3627-402d-89a9-67b41491be45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc69b1f-b00b-45f1-b204-00c6fa394fd4",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67ffaa8c-c2af-43a1-b55b-13402cbb6cac",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5770d691-2248-4bb6-a6ca-c851b1bd6605"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4df2d14-afcb-4d52-b0d5-9c9ab5e03dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c641d9cb-67b2-4795-9e39-bf91af6c7735"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f540890a-8dca-410f-84bb-dab641f91e4e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bbc29c99-dd67-4cf5-99e7-0b3f062c6513"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f38ac86-3bcc-4ed3-b0a7-b4216c4fdef9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a35859a-ec01-4161-a354-d637123be5a0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2e5b6a57-557e-43e1-ab8e-41131f64570e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fb66377c-2317-4c94-9e7f-3a12c4e4e9f1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "478d35a9-c7de-45ee-a3d9-5ff9a0c3af9e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cd5eb401-88a2-454d-8222-9082f458b93c"
            }
          }
        ]
      },
      {
        "id": "0da9b33c-f03c-4ffd-92f2-847a52f50e71",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "51c9f321-622f-45c3-93b2-13aa4ba61f3e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c730eced-0b9d-45d9-a1b9-eb8467d68484",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "87c28379-c396-4b1d-be85-0130b73657dc",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c567437d-1871-48ad-9947-c27aac2c7542",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "54f600ed-7985-41a8-8bd6-e66a379dcbdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71111cbb-643e-471b-9614-ec91380fe19b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9c24ddf8-4c11-49d9-8bdc-8602d753fc27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a717b0-aaa4-45a4-bf36-2a00158663b4",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bea8148-67ee-4966-bf5c-039bed873786",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8836ce5d-5b58-40ef-9ade-e2018c30c7ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b59b76f4-29e4-4f71-83fa-b1460226d352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "74cb9e4e-2575-47ee-8d76-a306bc29ce8c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1e6308ae-199e-438c-be9f-47aa7ec6f569",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "090b2d7d-a2f3-4182-b863-912c7d4c52dd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a13f04b-379f-4a1e-a793-61c5ae23ff06",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "290a2e76-a471-48e8-ab08-b7818e6914c9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0c025d60-3918-49a1-abdd-ed9198e0569f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b3e982d0-7d27-49b1-96a1-8f33c353ed83"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b210cb3d-677e-4e7f-aeb0-21263376d128",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6f9da38a-6fc5-4f10-a54d-ff7db626c314"
            }
          }
        ]
      },
      {
        "id": "beb566c2-5397-4c9f-86ff-6637aaa515dd",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1ebec610-2683-480d-9b62-2725bee99b41",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7437c8d9-5b6c-41fe-b9e3-34b814173982",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "0a1346d9-6b7a-4a47-a93b-1a958275e56d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "71dec658-d033-4b50-a86b-b2bcee49cb8b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8f439005-3c59-4dca-8095-b4c55c1f6122",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 340.45,
      "responseMin": 15,
      "responseMax": 10307,
      "responseSd": 1131.6668005645472,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1685234447208,
      "completed": 1685234548909
    },
    "executions": [
      {
        "id": "4f74ba64-7462-470d-bf24-ffb173220ad0",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "40161216-9bc3-4319-8534-d41cb7a80d1e",
          "httpRequestId": "c17b7236-2160-4b14-ae67-3d0e7c91ef8a"
        },
        "item": {
          "id": "4f74ba64-7462-470d-bf24-ffb173220ad0",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "ac8b017e-7016-46e9-94e5-07d317ebf312",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 0
        }
      },
      {
        "id": "b2472780-111c-46c8-8064-e2307e49083e",
        "cursor": {
          "ref": "41e0148b-e6cb-4b61-9ebf-4c4707a33dfa",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0dd5bee7-2644-48b2-9ac7-744fe075a937"
        },
        "item": {
          "id": "b2472780-111c-46c8-8064-e2307e49083e",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "268f9831-9d7a-4e4d-a6b8-90c5c96dd9c4",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 0
        }
      },
      {
        "id": "4833e0a3-75cd-49ae-ab86-06d859a368e0",
        "cursor": {
          "ref": "2a47ae00-b1ca-4b2c-a6fc-7bf31fd78268",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a56ef39f-5a69-4db0-863b-833bc28ce780"
        },
        "item": {
          "id": "4833e0a3-75cd-49ae-ab86-06d859a368e0",
          "name": "did_json"
        },
        "response": {
          "id": "a296f2f6-f5bd-4c23-8282-c21b33813eaf",
          "status": "OK",
          "code": 200,
          "responseTime": 418,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d61da067-673d-4b1f-a204-e0f5bd249a24",
        "cursor": {
          "ref": "1133739a-f85c-4f87-8257-e965ee1a3c92",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0e6b51a4-81a0-493f-8308-1765e733e6cd"
        },
        "item": {
          "id": "d61da067-673d-4b1f-a204-e0f5bd249a24",
          "name": "did:invalid"
        },
        "response": {
          "id": "7f66fb7f-1cd7-4598-a276-ef148f781a4a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 4339,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "d61da067-673d-4b1f-a204-e0f5bd249a24",
        "cursor": {
          "ref": "1133739a-f85c-4f87-8257-e965ee1a3c92",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0e6b51a4-81a0-493f-8308-1765e733e6cd"
        },
        "item": {
          "id": "d61da067-673d-4b1f-a204-e0f5bd249a24",
          "name": "did:invalid"
        },
        "response": {
          "id": "7f66fb7f-1cd7-4598-a276-ef148f781a4a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 4339,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "19a21ba6-cb06-4321-b382-90ec08b40b4a",
        "cursor": {
          "ref": "71e40fde-46bd-4b5a-8741-8587ce2fcce4",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "7126ddf3-ae22-403c-ab8c-f1314e5e60ab"
        },
        "item": {
          "id": "19a21ba6-cb06-4321-b382-90ec08b40b4a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d51103f4-f3b3-4cbe-a08b-11b2f10f3ff7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 61,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eebac46-402c-4a5a-aa6e-2163ed2ec16b",
        "cursor": {
          "ref": "91de0ecb-a2e4-4925-96c1-8adc0e27b641",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "fbcc6c13-b1bd-4c7f-a9a9-6f8d2d2cf17d"
        },
        "item": {
          "id": "4eebac46-402c-4a5a-aa6e-2163ed2ec16b",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c02e2447-ce01-40f7-8988-8e28ecf2f0eb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 49,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbca32d5-647f-45d2-8d46-a5acbc5481f2",
        "cursor": {
          "ref": "b9333ea3-a141-4248-a785-072100c99f34",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "0ab37c79-65b3-4921-8aed-5085d9d1fbcd"
        },
        "item": {
          "id": "cbca32d5-647f-45d2-8d46-a5acbc5481f2",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "1680955c-d94f-494d-9d66-f212758070e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "ae2bcba0-8a28-41c6-970f-d498d3e6cce2",
        "cursor": {
          "ref": "76c4a419-665d-4c30-b047-fa9a5daf7be8",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "bc7ca111-f997-4e8c-b960-e3735a41207e"
        },
        "item": {
          "id": "ae2bcba0-8a28-41c6-970f-d498d3e6cce2",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b1c867bd-8194-4ae4-b21c-acb09c4aeab3",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "ae2bcba0-8a28-41c6-970f-d498d3e6cce2",
        "cursor": {
          "ref": "76c4a419-665d-4c30-b047-fa9a5daf7be8",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "bc7ca111-f997-4e8c-b960-e3735a41207e"
        },
        "item": {
          "id": "ae2bcba0-8a28-41c6-970f-d498d3e6cce2",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b1c867bd-8194-4ae4-b21c-acb09c4aeab3",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "d8dbf09c-ff54-4648-9904-46e4b63be261",
        "cursor": {
          "ref": "0b404b59-fcf5-41ca-b4d2-4abd0c71ca7e",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e6afb6c6-771b-4d9a-bb44-eaf02b67c582"
        },
        "item": {
          "id": "d8dbf09c-ff54-4648-9904-46e4b63be261",
          "name": "identifiers"
        },
        "response": {
          "id": "41782498-de42-4ed0-8e99-a8a78b4e2817",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cec8a4b0-dfe7-4c00-a832-8b1bee06ac1a",
        "cursor": {
          "ref": "4caa908f-91f6-4b92-9a16-1a46130727da",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "26ee7bca-a8b6-4e96-880a-6f95e2df3ddb"
        },
        "item": {
          "id": "cec8a4b0-dfe7-4c00-a832-8b1bee06ac1a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "39866b15-6d3f-408e-a245-0e833b13caf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cec8a4b0-dfe7-4c00-a832-8b1bee06ac1a",
        "cursor": {
          "ref": "4caa908f-91f6-4b92-9a16-1a46130727da",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "26ee7bca-a8b6-4e96-880a-6f95e2df3ddb"
        },
        "item": {
          "id": "cec8a4b0-dfe7-4c00-a832-8b1bee06ac1a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "39866b15-6d3f-408e-a245-0e833b13caf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64e8bfa5-1595-434a-a01c-1e7f7beed1af",
        "cursor": {
          "ref": "4e6170e1-5777-4c3f-82b7-1c057c8edc6e",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4acd8f7f-c8bb-4f67-8d5d-e581d1a1fe3e"
        },
        "item": {
          "id": "64e8bfa5-1595-434a-a01c-1e7f7beed1af",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "5819c3d8-cf94-4110-b5d4-e67aa7e53c60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2909a749-8f69-427f-91dd-2909eed06a46",
        "cursor": {
          "ref": "e9f59f0e-6b4e-4a04-83d3-a6e9b94496b1",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ecb21a34-1fe3-4e88-a958-215bbfe8af99"
        },
        "item": {
          "id": "2909a749-8f69-427f-91dd-2909eed06a46",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "ef8c1442-f2c4-41a5-893e-4d5c78743bdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a8eca2b-e561-4687-9867-47d5992098d6",
        "cursor": {
          "ref": "ca0d9fc2-c6fc-4177-851b-bd1d90e296ff",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a5ab8013-6882-4bb2-a745-1c4d41e14cd4"
        },
        "item": {
          "id": "5a8eca2b-e561-4687-9867-47d5992098d6",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "21bdc85c-bd45-48e0-822d-3b5afb4bff7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90509609-4ca9-4329-9223-8c2f0049a1fa",
        "cursor": {
          "ref": "fe9f9c61-5c57-48ce-9da9-f783f07c38af",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "65c8b959-a8ef-453e-a01a-eb991ca15433"
        },
        "item": {
          "id": "90509609-4ca9-4329-9223-8c2f0049a1fa",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "89db9cec-49e2-4d60-9b8b-8f78b472af0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5ec49e2-660c-4531-bf08-d83076f11bce",
        "cursor": {
          "ref": "f48bd6b4-2fc4-42e2-a441-70c7bb2da838",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3b830359-47fc-45ac-a991-cfa72c4dbcb4"
        },
        "item": {
          "id": "f5ec49e2-660c-4531-bf08-d83076f11bce",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "86612c1e-b791-4015-b370-c462e6452247",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b8a4195-9763-4e33-aeee-3f3e96ef5860",
        "cursor": {
          "ref": "6ee622aa-12c2-41a0-8bb4-52453fcd346b",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "69a9167a-2196-43a8-8590-e94d77438db4"
        },
        "item": {
          "id": "1b8a4195-9763-4e33-aeee-3f3e96ef5860",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ae94dd05-d120-4963-ac6f-ad328ad70985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76fc678e-64ba-496d-ae84-dd2c242daa2d",
        "cursor": {
          "ref": "db45b4bf-f0c5-4463-9613-ddd2d190672d",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "18e3352e-310d-4d18-aa74-f3385fdc5787"
        },
        "item": {
          "id": "76fc678e-64ba-496d-ae84-dd2c242daa2d",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "9ce5970d-2651-4d42-9e55-8d79a7f8cd5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e5dd361-ce7a-4ecd-85a5-6312373c4aaa",
        "cursor": {
          "ref": "ea2054fe-1171-4bce-82cb-bf34ec9af96e",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b5c4d70e-b774-4373-a1c9-6d477b4b7a40"
        },
        "item": {
          "id": "2e5dd361-ce7a-4ecd-85a5-6312373c4aaa",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e1661191-578f-475e-88d1-2743f908b97f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d14bdebb-2d58-4f4c-ab8c-07e5d9e82256",
        "cursor": {
          "ref": "2bafaa57-28aa-4043-9c64-02eece8f285b",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7912e44e-bf4b-4ee6-a262-8692e8745289"
        },
        "item": {
          "id": "d14bdebb-2d58-4f4c-ab8c-07e5d9e82256",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "281b2e2c-17f7-471f-969e-800041e9a55c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ed1d124-4af3-47a3-b36b-b49d2de2fd0d",
        "cursor": {
          "ref": "f26fcca8-6f61-486c-84c2-f8a61675011b",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "35267000-49fe-4a61-9443-e5bcd4d4c08b"
        },
        "item": {
          "id": "9ed1d124-4af3-47a3-b36b-b49d2de2fd0d",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "0d1b4374-ca66-4d52-927b-66e1ab9a1b76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bcfd413-6fc8-4519-899f-61b8c46975c5",
        "cursor": {
          "ref": "39eb63a6-b968-4673-8861-15b130d70c86",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "98ef258c-739e-4011-9878-63d47d0da667"
        },
        "item": {
          "id": "5bcfd413-6fc8-4519-899f-61b8c46975c5",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "12faf402-deb0-441a-8b8e-f166c0e13c5c",
          "status": "Created",
          "code": 201,
          "responseTime": 857,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "59dc2399-3752-4c1a-9f91-da178bcd1547",
        "cursor": {
          "ref": "ec8be113-41c8-461f-9a14-d6f8c7b69211",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6036f955-bc7c-4382-b0aa-d5f6778425aa"
        },
        "item": {
          "id": "59dc2399-3752-4c1a-9f91-da178bcd1547",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "67e2f9e7-e98a-4c3a-b196-b232423c05cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "490d81e8-e368-4476-a6f6-1801965835f9",
        "cursor": {
          "ref": "225cfca7-5479-4858-bc8e-13cefe7a921d",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c4099b35-2eb5-4da6-81bb-f669e7ef525a"
        },
        "item": {
          "id": "490d81e8-e368-4476-a6f6-1801965835f9",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b858dbfb-4e26-4ae4-884e-4e00dd6373f2",
          "status": "Created",
          "code": 201,
          "responseTime": 7290,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "bee1a339-5dd3-4a58-88db-1e00c4cdc290",
        "cursor": {
          "ref": "8c82b02f-7ea3-4081-8265-2b8d9a891509",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "829b91b1-5248-4174-9a66-05a7fc51e742"
        },
        "item": {
          "id": "bee1a339-5dd3-4a58-88db-1e00c4cdc290",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "ff877647-7e25-4996-987a-60fc7f170145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "245f942d-06ea-48a1-b7a8-d1e81e4d167f",
        "cursor": {
          "ref": "a467a259-dfff-43a7-ab50-de51f90b8efa",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ba0b574c-a08f-47a4-a0c3-65fdd56722d5"
        },
        "item": {
          "id": "245f942d-06ea-48a1-b7a8-d1e81e4d167f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "7c8ac08e-8947-443f-8610-965d0f082261",
          "status": "Created",
          "code": 201,
          "responseTime": 6174,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "1fd904a7-6e94-4946-9fd9-531375ca91e9",
        "cursor": {
          "ref": "63e48150-a919-4147-a627-585f402f3d78",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "18ce4c73-2c0f-4f73-b8b0-fcf85196261a"
        },
        "item": {
          "id": "1fd904a7-6e94-4946-9fd9-531375ca91e9",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "9c5cc729-728d-40fe-abc8-29a3bc2cfc39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ceb88a6-6910-427e-9011-774dec664bdc",
        "cursor": {
          "ref": "af6e77af-2c3f-4d53-8e24-1b9beded7fb4",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "bb312684-cf00-4db8-92f7-f3cc420dbbde"
        },
        "item": {
          "id": "6ceb88a6-6910-427e-9011-774dec664bdc",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "14d5f0cb-ff12-4861-ae38-699956143154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a163451f-3d96-4e87-98ba-ff85e2e26947",
        "cursor": {
          "ref": "018fca16-3e2e-4601-adf7-fd05c8442a05",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "114c92ae-920f-477b-b10b-117d3fedabcb"
        },
        "item": {
          "id": "a163451f-3d96-4e87-98ba-ff85e2e26947",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "5c100e89-2e96-43fe-8986-8953bb5f9a83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5d3f9b8-e505-4e3e-81fe-d317b161abc1",
        "cursor": {
          "ref": "0e7719a4-7f5b-4e09-b3c4-c6a32b58068b",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e3496823-374d-43a2-9989-f7409a4fe284"
        },
        "item": {
          "id": "c5d3f9b8-e505-4e3e-81fe-d317b161abc1",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "abf98a1b-d483-430f-98e6-df6b2053acc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efd2a034-70ee-461f-85f5-dd1cb2a6900a",
        "cursor": {
          "ref": "7709556e-5cb4-4004-b383-865cc73a7c41",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a39ecb4a-8df0-4996-8d4f-37f2cdd801ee"
        },
        "item": {
          "id": "efd2a034-70ee-461f-85f5-dd1cb2a6900a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "8cb25b4a-b9be-4bf6-8d36-b0a6a7acad41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4af7711-654f-4a61-888c-853b89608d2c",
        "cursor": {
          "ref": "90cd9f61-d1af-4d37-8e86-9d4151cdfd1c",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f2f29d55-a6c1-4128-a7d0-e1dd6172eb0e"
        },
        "item": {
          "id": "b4af7711-654f-4a61-888c-853b89608d2c",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "2fbdccda-b122-4954-a486-dc65f21baec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec84d708-5b50-4550-899e-d193f9098f10",
        "cursor": {
          "ref": "5bf01635-46df-4375-a357-f0dab66a1f21",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "53f470dc-091e-4861-bd23-06664d76efb2"
        },
        "item": {
          "id": "ec84d708-5b50-4550-899e-d193f9098f10",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b696b151-2b29-44a6-bdaf-f265de7ec199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72b4a3f7-0248-4318-949d-50d67da2aa04",
        "cursor": {
          "ref": "10c8b378-7745-4d1e-81b6-74f741477559",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "2b2d6506-5f2d-410c-a764-7e98519b1cfa"
        },
        "item": {
          "id": "72b4a3f7-0248-4318-949d-50d67da2aa04",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "d153b812-f942-4506-a4cd-1fa56e7c389e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85706af7-ee40-4913-bcb3-aae80f7e8c7e",
        "cursor": {
          "ref": "9f4abe60-52e2-475e-a135-d37d42ee2cd6",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "e5414f1b-3193-44da-bfde-a5def87c0b24"
        },
        "item": {
          "id": "85706af7-ee40-4913-bcb3-aae80f7e8c7e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "5567fe9a-4502-4fc7-aa20-0417d3e38368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6beed524-0909-4679-9b1e-c4ccfbfd7dd0",
        "cursor": {
          "ref": "ded165cc-199f-4618-8acd-4abcc8f97fad",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "9f28d7b9-a399-4b42-bc18-b775d556f4b7"
        },
        "item": {
          "id": "6beed524-0909-4679-9b1e-c4ccfbfd7dd0",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "74fef2e6-a084-4ccc-a9f3-3fd615c6d4b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4f6aac7-b884-4872-ba50-a354dd574b96",
        "cursor": {
          "ref": "8f078e84-516d-4a01-8f03-82473f626cfe",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f71670df-891f-4b14-863a-1cce0bf9aad4"
        },
        "item": {
          "id": "b4f6aac7-b884-4872-ba50-a354dd574b96",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "2b6424be-0d7c-4c7d-80e1-10f644b20206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "883e5a0d-edff-4352-9f34-7470dfd86106",
        "cursor": {
          "ref": "3162586b-bac2-498b-9e95-363a434fd1a6",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "48c592f9-fc4a-4255-bbe6-2a7a59df0725"
        },
        "item": {
          "id": "883e5a0d-edff-4352-9f34-7470dfd86106",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "636179e9-304e-47b4-b4ee-d12bac72e32f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1f793fd-0cae-4ab9-bbb4-df7e97716760",
        "cursor": {
          "ref": "9bae6257-eff1-4847-8294-ca4c9588a748",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "fae719e1-2146-4ec8-bcdd-ded094024c1e"
        },
        "item": {
          "id": "b1f793fd-0cae-4ab9-bbb4-df7e97716760",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "95e0d8ce-51c2-4d88-ab3e-526e413d1ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e668f1b0-50af-4882-814c-9f625a2fd8a2",
        "cursor": {
          "ref": "55d10539-8d49-4997-a6bd-2bca6ac2c8de",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "adf5c02d-aa98-4ab1-9953-15a2fe86b211"
        },
        "item": {
          "id": "e668f1b0-50af-4882-814c-9f625a2fd8a2",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d5f302a1-6e4f-472e-bd7b-7939540f1e76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51a97a1b-86a9-45f7-a500-08b0cb3b356c",
        "cursor": {
          "ref": "5f0d6ecb-e4a0-4800-879e-c34abde5fce4",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "9e79062b-635a-433a-8a14-7bcb0364989f"
        },
        "item": {
          "id": "51a97a1b-86a9-45f7-a500-08b0cb3b356c",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "302df19c-0d31-4635-a8eb-e1ac0b8115fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbb15d98-3417-410a-8511-dc2aa6693a62",
        "cursor": {
          "ref": "446a830c-e901-4250-b85c-c4436b146710",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "9cd17570-b2d8-45e0-948b-e5b56bc11241"
        },
        "item": {
          "id": "fbb15d98-3417-410a-8511-dc2aa6693a62",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "f1535500-ecf7-4ff4-b6c4-93ffe7f08410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1815f932-f432-4b84-ae88-d2654562625b",
        "cursor": {
          "ref": "0245518e-eeef-48bf-b487-9e1acdcc2501",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f94ed79b-8fe5-439c-b6e9-da6c30a88a20"
        },
        "item": {
          "id": "1815f932-f432-4b84-ae88-d2654562625b",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "2f2830e5-a4fb-420c-b959-9f2caef166ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25f9e8bd-60a1-4e24-905e-327918346baf",
        "cursor": {
          "ref": "37bcea9c-3b22-4eaf-b7b7-de7573b573eb",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "1ef29479-beba-423e-acc1-1877754d14de"
        },
        "item": {
          "id": "25f9e8bd-60a1-4e24-905e-327918346baf",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "1714a43f-12c4-49e8-8474-577da60cb3e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "048cca8d-6a74-4187-aa91-b9804cfe4e66",
        "cursor": {
          "ref": "8a2362ae-2cb7-4443-b746-480abc602134",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "98958ed8-a3c8-40f4-a4e2-713e70e63bc2"
        },
        "item": {
          "id": "048cca8d-6a74-4187-aa91-b9804cfe4e66",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "30390eff-115a-4fb4-a2d8-0af38f4a8e5b",
          "status": "Created",
          "code": 201,
          "responseTime": 1913,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "a2a5f172-82fe-478e-8909-a3da1caa5882",
        "cursor": {
          "ref": "14b78eb7-5e96-4bcb-a98b-9d9711131f83",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "061f1336-6396-4b0a-9cea-b28d9699f807"
        },
        "item": {
          "id": "a2a5f172-82fe-478e-8909-a3da1caa5882",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "8cd7e874-8e29-4506-8f9d-3bfa606fea48",
          "status": "Created",
          "code": 201,
          "responseTime": 2835,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "3061232e-f2cf-43ad-be5b-5cb8285c77ce",
        "cursor": {
          "ref": "3875085e-d329-426b-82d8-08f6fba4976f",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "27015210-035a-4167-8323-56cea06d2c5a"
        },
        "item": {
          "id": "3061232e-f2cf-43ad-be5b-5cb8285c77ce",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "62714978-a399-4bd4-b022-eeb1f9f90599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1be93c0c-d2f5-4219-b544-9992d901acba",
        "cursor": {
          "ref": "cc525f30-5fea-4edd-95c8-f4c2acde33b0",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f7517929-631d-4ff3-80d7-bd7e542f7916"
        },
        "item": {
          "id": "1be93c0c-d2f5-4219-b544-9992d901acba",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "030d82b1-53eb-4a0c-89fa-c54881c43239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "662db38b-5ae3-4438-84f2-be4834fb7ab3",
        "cursor": {
          "ref": "7ba73674-6684-4025-9f25-889b5100f161",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f2d3e383-7773-4555-87cb-75fe1b1915a1"
        },
        "item": {
          "id": "662db38b-5ae3-4438-84f2-be4834fb7ab3",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e6bff3a3-85ef-4358-9997-023afc7dd31d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1498e395-cdf4-4e6a-9064-8ea2125e1331",
        "cursor": {
          "ref": "daac023e-e0a5-4c2e-b50f-67cba6f71f31",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "92fc1a41-6f7d-4510-9a15-623b17b0645a"
        },
        "item": {
          "id": "1498e395-cdf4-4e6a-9064-8ea2125e1331",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "509e805c-de80-4f8e-826b-1d45d2ba3af7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e666790b-3ec7-40a8-8173-a057d819b4a5",
        "cursor": {
          "ref": "8d0a799f-9d5c-4d14-a274-092963a7ffc3",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "10bbf0d3-407a-4f00-b028-1246918f2acd"
        },
        "item": {
          "id": "e666790b-3ec7-40a8-8173-a057d819b4a5",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e686404c-920f-40e7-854a-d646ee6b19ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a208ad1-59ee-422d-be4a-f8d1e504d0a2",
        "cursor": {
          "ref": "9afab7cb-f013-47ed-bc15-13558234728c",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b4acbc39-c015-4a80-a851-51143e601465"
        },
        "item": {
          "id": "2a208ad1-59ee-422d-be4a-f8d1e504d0a2",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "36346b86-441e-4f0f-8bd6-dbb0c789fe3a",
          "status": "Created",
          "code": 201,
          "responseTime": 2688,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "9efaa332-a1eb-46eb-a734-011f526145ec",
        "cursor": {
          "ref": "172f9e33-0a6b-41bf-90fd-8d0aec9055f7",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "2298a468-38f3-4cf5-992b-d1fe402aaa75"
        },
        "item": {
          "id": "9efaa332-a1eb-46eb-a734-011f526145ec",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "cb08ca0a-aa10-4cd5-bf7d-2302bbda185f",
          "status": "Created",
          "code": 201,
          "responseTime": 2616,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "a88946b6-8c43-4c04-907e-59ab978f22f9",
        "cursor": {
          "ref": "2cc2c301-7489-476a-b926-524f7ba05b06",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2dc503cf-44b5-4fb8-9270-5090122b7002"
        },
        "item": {
          "id": "a88946b6-8c43-4c04-907e-59ab978f22f9",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "fc0c6e29-6b7d-4497-bdcf-c1d810018c14",
          "status": "Created",
          "code": 201,
          "responseTime": 2514,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "de4444b0-c4bb-4d38-b66d-4f639b2b5d55",
        "cursor": {
          "ref": "7ded2e76-f783-4e76-b839-d5527abbddfd",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "671d3206-8b4a-4e6e-9659-0a7312398f43"
        },
        "item": {
          "id": "de4444b0-c4bb-4d38-b66d-4f639b2b5d55",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "323dd1cf-48c4-4d8d-b130-bb958bc7e828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0702a436-e1d6-42b6-a507-cb0dacb4ac7c",
        "cursor": {
          "ref": "bd3bd111-3e8a-4bf5-ba1f-e68141806bfd",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "724806da-4e44-4322-902d-518613768453"
        },
        "item": {
          "id": "0702a436-e1d6-42b6-a507-cb0dacb4ac7c",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "55bd7b9a-41f0-4fab-a2a7-f40da699917b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 209,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3544465-9fa8-44af-b0ac-5274de7367a8",
        "cursor": {
          "ref": "17b1b3dc-000e-4c62-9ce0-7673eb03c7d8",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "6a900968-115f-4df9-b5ac-b513e99f8c5c"
        },
        "item": {
          "id": "a3544465-9fa8-44af-b0ac-5274de7367a8",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "8919b16f-7b75-4572-8541-4a0bb3c953ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24d4e824-f2ba-410e-85ab-b6a8807d1d1d",
        "cursor": {
          "ref": "7e3714dc-869a-4ed1-b26e-5f0f821f36b2",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "583f9026-f2ca-4b2e-8cda-b99399d7f7d2"
        },
        "item": {
          "id": "24d4e824-f2ba-410e-85ab-b6a8807d1d1d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a594d74b-096b-4c87-982c-3ace01bb9fe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "177413be-38ac-47d7-9514-16cae55e5158",
        "cursor": {
          "ref": "7616d392-a080-41f9-ab92-137f61d1507b",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "bedbdd1d-f057-4c0f-b5ec-9e42b9861b7d"
        },
        "item": {
          "id": "177413be-38ac-47d7-9514-16cae55e5158",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b09c230e-7ee0-4cf3-b96f-37ab92ada3d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3765b4a-3d4f-480b-94ae-641d2c0d77a7",
        "cursor": {
          "ref": "d257b91f-e37a-4ebb-b862-afd11d082af8",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "b1c37bc5-20fb-4498-8bc2-50f7379026a4"
        },
        "item": {
          "id": "c3765b4a-3d4f-480b-94ae-641d2c0d77a7",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f82a24df-8ce3-4758-8cf2-79ea481228c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "686a3f4f-3475-4066-ad72-08958575fddc",
        "cursor": {
          "ref": "538c3b03-3464-4105-987d-b9df5b3b3259",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "30965615-d119-4024-a725-7cd27b305061"
        },
        "item": {
          "id": "686a3f4f-3475-4066-ad72-08958575fddc",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "415d2179-b078-44b1-a8e6-6264ad204f82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d69df642-b060-4734-b9a0-cfa8ff2585dc",
        "cursor": {
          "ref": "76492c1b-341a-4072-83b0-62239f1282c3",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1dbc1c35-2b39-4cfd-b75c-f2673aace33a"
        },
        "item": {
          "id": "d69df642-b060-4734-b9a0-cfa8ff2585dc",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "0aa64205-a393-4d96-b907-6879f2f1fe4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2120031d-9f1e-43e3-9751-0bba60cb4ffe",
        "cursor": {
          "ref": "411235e8-5389-438a-b247-4082c8546858",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b83ec2b0-a84a-401a-8791-1a230a7d1ecf"
        },
        "item": {
          "id": "2120031d-9f1e-43e3-9751-0bba60cb4ffe",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "67059de1-0c96-4a75-ac6c-8f00a11b4165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "869965af-2bf1-477d-af19-d70ec37ccd77",
        "cursor": {
          "ref": "b39207d7-2715-4690-8d6e-b7bd5b782725",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "0e718e50-e5c4-4246-8fe5-8b5778b7689d"
        },
        "item": {
          "id": "869965af-2bf1-477d-af19-d70ec37ccd77",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "5cc9e233-9caa-4f8a-9515-a2e94e8dfe8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ead78d6e-3766-4fd9-b6f2-1bccbd114a93",
        "cursor": {
          "ref": "fb2d38a3-6949-440b-a46d-1ef1c9dff99d",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "e9111d0a-464e-4969-b5eb-6a8823afe390"
        },
        "item": {
          "id": "ead78d6e-3766-4fd9-b6f2-1bccbd114a93",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "a9499425-4dc3-4054-bec7-54c59b954b5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56b71a7c-b45b-415b-a105-c9f10d9c6c75",
        "cursor": {
          "ref": "045c0672-a3cb-455a-a045-efc3d70383c6",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "50f22b11-cec1-4146-9e0f-60b04f6ebafe"
        },
        "item": {
          "id": "56b71a7c-b45b-415b-a105-c9f10d9c6c75",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "52ce29c4-4500-4045-87ed-e135fb06b91c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a09b850-c3be-4c6a-b5ac-72872d04879a",
        "cursor": {
          "ref": "03fa35b7-0443-4823-b452-4fefcff53283",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "cf6dbc65-dddc-49fe-bd4e-59e56c8f77b1"
        },
        "item": {
          "id": "9a09b850-c3be-4c6a-b5ac-72872d04879a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "0e7a19ea-6d5c-46b8-9c65-711f08a394dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "509ff626-fe3b-46c6-a10c-7a38c2f3da64",
        "cursor": {
          "ref": "2867d448-0e0d-4fcb-aafa-641796211452",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a06488fe-67eb-4465-9ca0-8b4e2d43c532"
        },
        "item": {
          "id": "509ff626-fe3b-46c6-a10c-7a38c2f3da64",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "2d7b71f6-418d-421d-a025-ccce494bbe04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35a14552-188f-46af-9943-84ae66a3a482",
        "cursor": {
          "ref": "3c4bf3c7-d341-4f9c-8c97-431803862998",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f5955812-e0da-4614-8088-cd5c354cd4d3"
        },
        "item": {
          "id": "35a14552-188f-46af-9943-84ae66a3a482",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "31e1faa6-73a5-4a48-bb76-67f38737e6cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6f89bee-9cd2-4094-94bc-2672ccd8e3a0",
        "cursor": {
          "ref": "18e79573-fe84-40d5-906d-f3543b9572d4",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d654eb45-b1bf-4bc1-afdb-4cff2a4fd524"
        },
        "item": {
          "id": "c6f89bee-9cd2-4094-94bc-2672ccd8e3a0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "1a3746e7-4b11-4129-8ce3-642234106afb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac8bbc2b-1680-450f-ae3e-a2f9490abfcf",
        "cursor": {
          "ref": "c51e3e4d-c4ce-4224-95da-933b3257ce24",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "6c0a1a0b-60e1-4c96-8e0c-59c57696ef8f"
        },
        "item": {
          "id": "ac8bbc2b-1680-450f-ae3e-a2f9490abfcf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "5a88b672-6d23-4ccb-ae0d-ac65df32feda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31d91946-f7a3-4a28-9e21-b23d49de7b3c",
        "cursor": {
          "ref": "017680f4-c001-49c9-8fca-496198694b7a",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0c20b47f-2c48-4edd-9a54-fdb202223a3d"
        },
        "item": {
          "id": "31d91946-f7a3-4a28-9e21-b23d49de7b3c",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "a91304e5-2007-49b8-b6e8-85ff06cccefe",
          "status": "Created",
          "code": 201,
          "responseTime": 1924,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "16f32096-7c31-4cd9-970c-6eda78886e02",
        "cursor": {
          "ref": "2e469a6d-198b-469b-8e2f-cd201ad52cf2",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "d61871dd-518b-456c-b87a-5658319b7b16"
        },
        "item": {
          "id": "16f32096-7c31-4cd9-970c-6eda78886e02",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e77b1eef-25c9-4758-9722-99bfad18c9a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 180,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "450cd78f-93c7-4c40-813e-612c4ee0c619",
        "cursor": {
          "ref": "26299d72-831c-4e82-9ec8-61e4bcaeb2e7",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "64d20b01-b5c2-4be8-af9e-82233c922e2d"
        },
        "item": {
          "id": "450cd78f-93c7-4c40-813e-612c4ee0c619",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "acfb441b-83ba-4bac-bb9e-156a9d90cc69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "431fba9b-6d04-4bff-af14-28fec3bc5e43",
        "cursor": {
          "ref": "985f4ea0-b5d6-4e3a-a3d7-ff35fe7af5da",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "1009cfd3-9e47-40a2-ac4d-280e33456030"
        },
        "item": {
          "id": "431fba9b-6d04-4bff-af14-28fec3bc5e43",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "9bb364a5-ef06-4082-9289-c7e63309f544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aa19be3-46a0-453c-9a3f-0cc7077fd632",
        "cursor": {
          "ref": "3f82b923-20c5-411a-8812-d271a73d6c56",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "bbc814ab-fe04-43fe-bc0a-161bed2000dc"
        },
        "item": {
          "id": "5aa19be3-46a0-453c-9a3f-0cc7077fd632",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "58c06c00-4d66-4f59-9120-99709d89ab7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4445721-ad83-48af-8406-399eab3a3c5a",
        "cursor": {
          "ref": "47e2d5f0-84fe-43b5-91a6-5954f627db54",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "25524724-8b59-4636-80a9-07becad4b1fe"
        },
        "item": {
          "id": "a4445721-ad83-48af-8406-399eab3a3c5a",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "1703d40b-e144-4484-8b09-016e99623beb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea9f92ba-f4a9-4e47-891d-59a44f694c3d",
        "cursor": {
          "ref": "f4054e60-af59-4287-bf9b-32fcdbd7be1b",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "2a41096d-70bc-44aa-abdc-b890cc344e67"
        },
        "item": {
          "id": "ea9f92ba-f4a9-4e47-891d-59a44f694c3d",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "5a157e22-fc45-4a1e-933c-e2cbe0473b40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bf11b7d-c56f-47d8-a4b2-ea408a44a6b3",
        "cursor": {
          "ref": "5bab4b43-145e-4ca5-a257-6afa21cf59b4",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "5c86eaf5-4cb5-41c2-98a7-b4f7b758c327"
        },
        "item": {
          "id": "9bf11b7d-c56f-47d8-a4b2-ea408a44a6b3",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "3ae43538-47de-4f89-aa93-f1e041da6ade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce5f7e73-4cb0-46e2-af7b-f69f00f56937",
        "cursor": {
          "ref": "e6cfcbf6-d3a1-4f3e-9f20-e62d8aca4c71",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "04f82181-03ad-4e3a-b3c9-36aa6f9ebb79"
        },
        "item": {
          "id": "ce5f7e73-4cb0-46e2-af7b-f69f00f56937",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "55530b4a-d9d9-4be3-aaed-e0d109d1c440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "311d79d0-2fe0-4983-8bf2-cb4fa5b9265c",
        "cursor": {
          "ref": "e2088eee-3ed6-4758-845d-d7315a1a9f8c",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "99886c40-6d31-414c-a13f-e779c3026a3d"
        },
        "item": {
          "id": "311d79d0-2fe0-4983-8bf2-cb4fa5b9265c",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "666126b3-60ec-4ecc-8151-1f2ebde9ca8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f27e9a55-fb49-44cd-818e-d1857201e87f",
        "cursor": {
          "ref": "79fdc9ab-1692-4fa3-8b47-5102a11d5547",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "96350088-5c55-4e0f-bac2-da7ef68bf411"
        },
        "item": {
          "id": "f27e9a55-fb49-44cd-818e-d1857201e87f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "ee2a4ba8-d011-41b3-a308-983e8a80e706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61dfb9cf-7855-4703-971e-e606105ee85b",
        "cursor": {
          "ref": "54f90ccb-5a82-4109-a518-650c5d8fe86f",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8bef227e-3718-4654-839e-bab63f382111"
        },
        "item": {
          "id": "61dfb9cf-7855-4703-971e-e606105ee85b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "332fb8c5-e4b0-4d13-b2cc-4ea63ca4674f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bff3f844-4dc0-47bf-9557-181fba5777b5",
        "cursor": {
          "ref": "dd850d0f-934f-49e8-a83b-a297c07be43b",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "41fd2bcf-31ba-423b-87c3-d4138378da63"
        },
        "item": {
          "id": "bff3f844-4dc0-47bf-9557-181fba5777b5",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "50ce3960-2b96-4477-876c-3e840768f014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef69393-5247-4da8-9f01-acd222e5c0ce",
        "cursor": {
          "ref": "5ad9dbe7-c64b-4f13-a920-befc69a86d33",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "042baf10-86cd-4cae-b637-655436247290"
        },
        "item": {
          "id": "9ef69393-5247-4da8-9f01-acd222e5c0ce",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a103a375-c175-4dd1-af4c-d00425de7f9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6c5e4eb-6605-4f88-9474-3a3e4fb6a137",
        "cursor": {
          "ref": "a0170974-10f8-4233-8856-cc2716503502",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "24c65b7d-dacf-47f1-a8b7-a6b4c7a32946"
        },
        "item": {
          "id": "e6c5e4eb-6605-4f88-9474-3a3e4fb6a137",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "58e467b9-aec2-48e5-a4fc-686243bf069c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b1d296b-d39e-4868-a4f5-e1b7f781e64f",
        "cursor": {
          "ref": "f1b5b0d8-8a71-41a6-a914-ccc628471c3d",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "5502bbe4-dd7c-424b-8465-d2f8620005b7"
        },
        "item": {
          "id": "0b1d296b-d39e-4868-a4f5-e1b7f781e64f",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "39e2c545-6cf8-4d81-bb8a-4039bf150f1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def5a0b0-eb41-41a8-bc03-bc550a5daf09",
        "cursor": {
          "ref": "2beb94cd-247c-408f-8951-edd9ee2c324f",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "68809437-73d6-473e-95fc-f617c75e2590"
        },
        "item": {
          "id": "def5a0b0-eb41-41a8-bc03-bc550a5daf09",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "b01d760d-da96-415e-966a-e02f93626772",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d580852e-d277-4ca1-8f08-2b6b6ce7752f",
        "cursor": {
          "ref": "953c4acd-5106-45b5-aa06-aad608765d9e",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "aa07e46b-6903-4a0d-a02a-63b67a09facd"
        },
        "item": {
          "id": "d580852e-d277-4ca1-8f08-2b6b6ce7752f",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "59daee32-4b0f-49ab-b300-f5526a16b396",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17af6cf-1cb2-4849-87fe-7599e9b5815b",
        "cursor": {
          "ref": "961c1996-eb53-4d8d-bc43-18c9ba3512ef",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "e05389f1-5cf3-4c8a-a556-23210cbd2f17"
        },
        "item": {
          "id": "a17af6cf-1cb2-4849-87fe-7599e9b5815b",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "d3dad768-c53a-4316-a8fb-02030d11aff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e16b687b-2b47-46f1-bc5b-7d6cadcce4bd",
        "cursor": {
          "ref": "afc85d79-09b0-4011-a71d-a3ce957ba252",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b3937be9-cb9f-45e6-970f-fb0391820fbe"
        },
        "item": {
          "id": "e16b687b-2b47-46f1-bc5b-7d6cadcce4bd",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b71cbcab-13dd-499b-b7f0-6408e90ea8a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be1bc7a4-96de-4fb6-b277-bedaa0a23afd",
        "cursor": {
          "ref": "bcb8330c-a5ef-44f7-83ab-89e2ade2320e",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "c6165b3e-8f1d-4ada-af97-6912980e1087"
        },
        "item": {
          "id": "be1bc7a4-96de-4fb6-b277-bedaa0a23afd",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "5a2a58f2-2343-4722-a43b-fab8be952ea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb3d7a4b-6ea5-4f56-9c1a-0febe4ab0b52",
        "cursor": {
          "ref": "f21b25ec-9cc3-41f6-9f2b-250eefda253d",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "73d6208a-a07b-4e5b-af85-20a459e899d2"
        },
        "item": {
          "id": "fb3d7a4b-6ea5-4f56-9c1a-0febe4ab0b52",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "5054df4c-d835-4d5b-88b7-436a99c5cc3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7027865f-4bff-4902-bc8d-d9358d5a2428",
        "cursor": {
          "ref": "cfbd45a6-a07c-4689-8618-131f827928b0",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "e57fbcc4-a6ea-4133-a407-d40be7c61fb3"
        },
        "item": {
          "id": "7027865f-4bff-4902-bc8d-d9358d5a2428",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "41d32b43-f9e3-42e7-a3d1-54ef140665c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ef1f51-6ac6-4118-b88b-16346bd4a6a1",
        "cursor": {
          "ref": "5b50c133-8835-4d34-8caa-5be0937adc6b",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "186dae83-b902-491c-b82f-4d8fe012023c"
        },
        "item": {
          "id": "65ef1f51-6ac6-4118-b88b-16346bd4a6a1",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "bada5c91-6da7-47ac-8caa-6ca01aa86bac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "728b34c0-4293-4d99-a8d5-4624044f7c9f",
        "cursor": {
          "ref": "1029379d-076f-45c5-98ce-c537e8e47502",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "dd2fe250-f72e-440c-94a1-b1cb567466e2"
        },
        "item": {
          "id": "728b34c0-4293-4d99-a8d5-4624044f7c9f",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "8d0cf4c8-26d8-4f04-a910-34ee3ecc812a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ca6d012-062a-41ff-9608-03277dde5461",
        "cursor": {
          "ref": "6b4ee645-4776-4a2a-8c19-ec0c7c7de849",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "2be56bec-def4-424f-8cd8-49d56bf9b360"
        },
        "item": {
          "id": "7ca6d012-062a-41ff-9608-03277dde5461",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3bd942a1-0101-4603-b2e2-04dac273e215",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "452b3845-1ff3-4ae3-a2c1-7af7f083df91",
        "cursor": {
          "ref": "36a5feeb-6883-44e9-9990-5eb48e37d570",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "ec6fd2ee-96f2-4991-84d1-adc4b55f5dab"
        },
        "item": {
          "id": "452b3845-1ff3-4ae3-a2c1-7af7f083df91",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "689526b2-37eb-4f00-a1bd-c86983b498b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63e31ced-1b78-4f35-ab1d-f0474ff9625b",
        "cursor": {
          "ref": "f9f1f54e-bd95-466b-b297-2a88e1874665",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "fd69d9d9-4edd-4c10-91de-eaf1b85518f5"
        },
        "item": {
          "id": "63e31ced-1b78-4f35-ab1d-f0474ff9625b",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "e6b6de37-5d97-4a4d-a622-39d29668effb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a76a83fb-72d8-4e46-a24f-aca7d32462b5",
        "cursor": {
          "ref": "15b74dca-0219-471d-a879-9a26955ddd5c",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "3edf7cd1-8822-4e6f-a80f-5c5e630ba01a"
        },
        "item": {
          "id": "a76a83fb-72d8-4e46-a24f-aca7d32462b5",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "cfaa5053-ee96-49ef-b7d8-33e51b96d52c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "193ad43a-3731-4e44-98d6-1263d2d60ea3",
        "cursor": {
          "ref": "e8e2427a-084b-46e3-84f6-6db3f141e1b4",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "74bf981b-60c4-4d08-9aac-3c87022d863b"
        },
        "item": {
          "id": "193ad43a-3731-4e44-98d6-1263d2d60ea3",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "6fc73a73-15d8-4477-8b0d-a24625a97176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5177ef7-9ded-4039-a179-111cb1b4753f",
        "cursor": {
          "ref": "8984137c-c3e3-4589-a2e8-b888e6dc1644",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "509ef8d2-96d6-4c41-84d8-916141e568b9"
        },
        "item": {
          "id": "a5177ef7-9ded-4039-a179-111cb1b4753f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "fba97cc4-76e3-40b3-98a6-327fe193abfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ba6711-bbb3-4e3d-aa35-9733b7a948d5",
        "cursor": {
          "ref": "61f571a8-32d0-4a51-8240-2557bc5afb2f",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "2c61133f-74bc-4f1b-90f9-944b9861a075"
        },
        "item": {
          "id": "15ba6711-bbb3-4e3d-aa35-9733b7a948d5",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "74af3888-749b-4565-9063-32f6bd90b92b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "4c9a6d57-395f-4746-9d95-79e445283839",
        "cursor": {
          "ref": "5c32065f-edf9-4557-869e-0568601445bb",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "5a189d19-9278-4d88-8022-171b70ab59f8"
        },
        "item": {
          "id": "4c9a6d57-395f-4746-9d95-79e445283839",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "3b2436d9-674b-4ff2-9fba-ee40b6750a05",
          "status": "Created",
          "code": 201,
          "responseTime": 1895,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "4de9e896-9587-4b27-8e78-2ff44dde77e2",
        "cursor": {
          "ref": "7bf1ac5e-a7d9-42c7-9a54-3f9bd721d1e3",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ada40f20-e3fd-4e68-87cd-9d19ae87fd61"
        },
        "item": {
          "id": "4de9e896-9587-4b27-8e78-2ff44dde77e2",
          "name": "credentials_issue"
        },
        "response": {
          "id": "dbb3a8f0-6cec-4a7f-a45f-b13f28f0fbef",
          "status": "Created",
          "code": 201,
          "responseTime": 2310,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4aa5b4c-60b0-41b3-b65a-47194bc5f472",
        "cursor": {
          "ref": "9aa0f8a1-ad15-44b3-b0d5-7b7a1d4b63a9",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "a3d56acb-f524-4ffc-bb3e-9f376fbeb727"
        },
        "item": {
          "id": "f4aa5b4c-60b0-41b3-b65a-47194bc5f472",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "ce31601a-3936-4dd0-816b-d9ff6973e117",
          "status": "Created",
          "code": 201,
          "responseTime": 2246,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecf8b349-ba52-4280-846b-5fd47a1f768c",
        "cursor": {
          "ref": "39d05084-9304-447b-8623-5d7026fdf421",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "dbd1e351-f604-4b39-8213-062294ba4ef5"
        },
        "item": {
          "id": "ecf8b349-ba52-4280-846b-5fd47a1f768c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "698b0929-5b71-4690-b4db-ee73d8a2b555",
          "status": "Created",
          "code": 201,
          "responseTime": 2357,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6968836e-26ce-4cd7-9a09-03bd1cd78693",
        "cursor": {
          "ref": "6018127d-3e11-4da9-96ca-b7c107f1fb6d",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "87f7fc7d-ecd6-4121-88f7-759f6235f1a8"
        },
        "item": {
          "id": "6968836e-26ce-4cd7-9a09-03bd1cd78693",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ffe4b60b-16aa-41b6-a472-5cd4badc6688",
          "status": "Created",
          "code": 201,
          "responseTime": 2232,
          "responseSize": 991
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "091d8bb2-c4a4-46fb-acb5-6262eb5dc73e",
        "cursor": {
          "ref": "c4ec5b42-3cca-4ec0-a1b4-dc39711f9f60",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "f4899d48-fd1f-4123-89cd-95ddc2d78240"
        },
        "item": {
          "id": "091d8bb2-c4a4-46fb-acb5-6262eb5dc73e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "39eda8c7-042f-455b-a98b-d36e228adc51",
          "status": "Created",
          "code": 201,
          "responseTime": 2467,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-05-28T00:41:54Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-05-28T00:41:54Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "8332beff-3e5c-421b-af1d-5dba2758c75f",
        "cursor": {
          "ref": "cc5d7f3d-bcb8-4c8a-a46d-27a2fcdf573b",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4a754275-fbd3-4fcc-99c7-3168f1ea0a87"
        },
        "item": {
          "id": "8332beff-3e5c-421b-af1d-5dba2758c75f",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a24ee726-92de-43b3-8961-6749257fd922",
          "status": "Created",
          "code": 201,
          "responseTime": 2359,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91c1f53d-cf62-45c8-ac8e-d25ee0834713",
        "cursor": {
          "ref": "897455dc-a50c-4aa4-861d-54cd6256cd2a",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "022ab39d-343d-4d72-808a-8f5fa9d8515b"
        },
        "item": {
          "id": "91c1f53d-cf62-45c8-ac8e-d25ee0834713",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2c9e3362-b5fc-4ee6-8167-82c91cc78553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 168,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91c1f53d-cf62-45c8-ac8e-d25ee0834713",
        "cursor": {
          "ref": "897455dc-a50c-4aa4-861d-54cd6256cd2a",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "022ab39d-343d-4d72-808a-8f5fa9d8515b"
        },
        "item": {
          "id": "91c1f53d-cf62-45c8-ac8e-d25ee0834713",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2c9e3362-b5fc-4ee6-8167-82c91cc78553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 168,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfce5823-b74b-4887-aea2-2f568d011b7c",
        "cursor": {
          "ref": "0c9b1ebb-1c7b-4e3d-a2a0-c918fec80c2a",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e4ded779-2080-4c52-ab1c-a15fe8c3b9dd"
        },
        "item": {
          "id": "bfce5823-b74b-4887-aea2-2f568d011b7c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5686732f-b4eb-430b-b981-5f5108e00d21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f8b68f2-46d8-4900-a8e9-6748a031cabd",
        "cursor": {
          "ref": "f2ec8c89-cbf8-4d4b-98c4-4551ad83c389",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "9b7c2046-9fd5-4168-b9d2-886b4425debc"
        },
        "item": {
          "id": "2f8b68f2-46d8-4900-a8e9-6748a031cabd",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "71b12e94-960b-44c9-8a57-f109dc9adc65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6281ca5-48a1-40b8-8639-ce6373e8b3ed",
        "cursor": {
          "ref": "e6974b38-8ddf-4acf-816b-52b024d5dcc2",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "311dce2e-3b9b-4d29-9153-575dcc1c60be"
        },
        "item": {
          "id": "b6281ca5-48a1-40b8-8639-ce6373e8b3ed",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b56131aa-cf3d-4bed-8355-4aa4f4203914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d534b94d-eed7-4f5f-8a3f-1b05dd698a38",
        "cursor": {
          "ref": "d44b4f1c-8407-40af-91bf-36627d3567c7",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b7d3197f-3437-4373-a0f2-895eeda5818a"
        },
        "item": {
          "id": "d534b94d-eed7-4f5f-8a3f-1b05dd698a38",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "80c7ee46-711a-4f20-8945-ea9f094bceee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dec65eb8-0c9b-4fde-99f2-cb8a4f598643",
        "cursor": {
          "ref": "90fdbb12-afe4-40ed-956f-90dc910e0415",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "aa277514-e356-4c29-b681-0c731ba9ac4d"
        },
        "item": {
          "id": "dec65eb8-0c9b-4fde-99f2-cb8a4f598643",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3a604697-da12-4c19-8c67-ab49566191a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c5f3cd6-f979-4bd2-8d77-aeaa30590064",
        "cursor": {
          "ref": "939bc7e3-e541-4fc4-9061-0275ff604317",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "10f3e2b0-e0c1-4e08-a167-59c385a046fb"
        },
        "item": {
          "id": "6c5f3cd6-f979-4bd2-8d77-aeaa30590064",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d6b7f111-b8b7-42eb-8788-124c28968323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "336983f3-7258-4860-b385-31364129b2ed",
        "cursor": {
          "ref": "9b963e26-98d9-4ae1-adb2-b8dae204e9f7",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "5e3c03ab-d436-4252-9371-505ca6622957"
        },
        "item": {
          "id": "336983f3-7258-4860-b385-31364129b2ed",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d4d1e8e8-efec-417e-94e3-0d3649ef5d48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faf8b234-d86e-48c1-a640-713bd02048ee",
        "cursor": {
          "ref": "4d1e0ebb-ce1d-4757-a176-955fc570523e",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "917cb2d0-f023-4cc3-b205-3a09e309b982"
        },
        "item": {
          "id": "faf8b234-d86e-48c1-a640-713bd02048ee",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c47de683-df90-4362-83b4-79369f947e98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6287515e-df1f-4e97-ae36-06a029be5ce5",
        "cursor": {
          "ref": "ded2ff04-9407-4645-a404-b71d65cd830c",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f5edcaa2-c84b-489c-aa51-163f6a30044f"
        },
        "item": {
          "id": "6287515e-df1f-4e97-ae36-06a029be5ce5",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "95c4323c-03b4-440f-9e8c-f6fd1124810d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da82fc42-feb8-4c97-a28d-848337ad6eab",
        "cursor": {
          "ref": "f038cdbb-dfbb-41c9-9d75-8d422f801f25",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "b9e83f5e-0779-4bdc-997e-c5d578dd7080"
        },
        "item": {
          "id": "da82fc42-feb8-4c97-a28d-848337ad6eab",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9c1e17c5-9b6a-4646-98ca-5e2a5dd6ec0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b46ee5ad-662e-47f4-a08d-545cfabfebbb",
        "cursor": {
          "ref": "03d16aaa-85c6-44a4-9951-0dadcde19f54",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "1ae96054-b797-4741-8815-9aa8e3fcc4b4"
        },
        "item": {
          "id": "b46ee5ad-662e-47f4-a08d-545cfabfebbb",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "33eb59ad-72f0-4ad6-b131-029191305189",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b1ef182-3700-44c0-8f81-d2aaf2ebb4ae",
        "cursor": {
          "ref": "d1a01201-df25-46d7-a9cf-532b9b136e59",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b6eed2ec-c330-4a5a-88d0-b4c2cdef7e7c"
        },
        "item": {
          "id": "9b1ef182-3700-44c0-8f81-d2aaf2ebb4ae",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "28169040-ef51-408e-a08b-2fbc93053b40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5131b20c-50a9-40cb-811d-af57574bc00a",
        "cursor": {
          "ref": "093b6f61-765d-476f-b3df-79a7241000ee",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "97ccc90a-9002-46ff-93ac-5caeae559587"
        },
        "item": {
          "id": "5131b20c-50a9-40cb-811d-af57574bc00a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c52567b2-fb3c-409b-be01-73f80ac15304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "813354e5-a48c-4cb8-a224-87ddeb96498b",
        "cursor": {
          "ref": "bde425f3-dbae-42ad-bb0c-223d216b2ed3",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "0e5e8a59-a6a1-4372-8fe1-e42702267a98"
        },
        "item": {
          "id": "813354e5-a48c-4cb8-a224-87ddeb96498b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "cfc874ed-04c9-4a14-8e37-c921b3ef87e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58f0660e-243c-4a97-843f-f91a927862b5",
        "cursor": {
          "ref": "c00dde83-0d02-4278-9e52-5d11f1f0b431",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f786bda7-f3af-4c9a-86b3-ab21335d0e23"
        },
        "item": {
          "id": "58f0660e-243c-4a97-843f-f91a927862b5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "73848206-6d66-4609-943f-219071b6f416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98d2364d-b89c-4cc6-ae6d-d4eb3a48224f",
        "cursor": {
          "ref": "2593f9e3-c994-447e-9208-e06179e05f3d",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "e663afc0-4c92-4fb0-8c36-9cd4b87a745d"
        },
        "item": {
          "id": "98d2364d-b89c-4cc6-ae6d-d4eb3a48224f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e3f6e1ea-b22c-4f31-a418-750865c50ec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "438eb6e1-0603-47d5-b8c8-8e19852c9836",
        "cursor": {
          "ref": "2a9c5732-25b7-4952-a31a-58e70560f5b5",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "097646f7-f67e-49f9-b7d4-ea561fbbf568"
        },
        "item": {
          "id": "438eb6e1-0603-47d5-b8c8-8e19852c9836",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "131815c4-2c34-424e-98fc-a310a9baa465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dfd16c6-4a8c-42ca-b70b-af30424144ab",
        "cursor": {
          "ref": "8fb34ad1-cb70-4352-8e43-dca26b6452dd",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "2a4679b7-a20c-4652-9e3f-3f5c3db0d05d"
        },
        "item": {
          "id": "7dfd16c6-4a8c-42ca-b70b-af30424144ab",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "68315657-2a1c-4da0-bb2b-a9aa7859f201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92900466-27e3-47c1-81be-db0320900bd2",
        "cursor": {
          "ref": "02a0373d-cf8e-4fc0-8680-419eb58a347c",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6d2c2eac-b8ec-476e-9f2a-cfceacb7df53"
        },
        "item": {
          "id": "92900466-27e3-47c1-81be-db0320900bd2",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "238b9079-344e-4bf5-ac20-9b32e1961032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c7880eb-b956-44ec-82c9-7e9f73b1a730",
        "cursor": {
          "ref": "abba9e36-326a-4d81-829c-0b5efe9f68f3",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "710ddaf9-54c3-486d-a940-5ee7d417fdb4"
        },
        "item": {
          "id": "8c7880eb-b956-44ec-82c9-7e9f73b1a730",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "746cf2d2-9045-4b7e-b55b-b90dd5f080db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9deb6892-4b7d-4ff2-9ae3-611b497effeb",
        "cursor": {
          "ref": "7afa5a56-e082-45ab-b91e-7cb048e65346",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "74778c1f-8c6f-4f9e-8fb0-6a832c3cb8ef"
        },
        "item": {
          "id": "9deb6892-4b7d-4ff2-9ae3-611b497effeb",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5012ff6b-42fe-4fc9-939a-21bb0fcbf9a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "636bc204-037d-44cb-a03c-6266a5de23e2",
        "cursor": {
          "ref": "07cc9dbf-07fe-4de7-a8a8-da3dfb8ab24d",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7499a35d-45ca-4601-8c72-aa06c328cdf1"
        },
        "item": {
          "id": "636bc204-037d-44cb-a03c-6266a5de23e2",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f7c5d5a5-d6a3-4416-a090-c0c9aea545a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b016ef8c-bcdb-4aa0-b734-d4f54e1d8816",
        "cursor": {
          "ref": "3a560861-5b69-4d7d-8182-701dee03f467",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "f12c34bf-c586-48f5-b1ff-d81af3e26407"
        },
        "item": {
          "id": "b016ef8c-bcdb-4aa0-b734-d4f54e1d8816",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3c0fe9c0-4c56-4d40-b3ce-ec698d5989a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10933722-4b2b-4832-bf08-f2d60d6ef17b",
        "cursor": {
          "ref": "17091b3d-ac6d-4dbe-abb6-67910ed99ec9",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b97e9e45-1851-4d7e-9625-431dcb3ae4bd"
        },
        "item": {
          "id": "10933722-4b2b-4832-bf08-f2d60d6ef17b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "044b63c9-69a0-4b2f-ad8b-7bdfa39aa5ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 187,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f3cc868-453b-4e6a-b00a-3801523df53c",
        "cursor": {
          "ref": "56a6b9b7-3096-4bda-bce3-4ad5bbcfd7ed",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "36c7572f-9b04-4937-8d30-850d5da0a6b3"
        },
        "item": {
          "id": "0f3cc868-453b-4e6a-b00a-3801523df53c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "996ee45a-8285-4017-a15a-32a996ca7fab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84d9ad1f-0b80-4810-958f-1d3dc1364511",
        "cursor": {
          "ref": "f5d8cef4-77f5-4375-aabe-7901222bf948",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a8312f90-5415-436a-8f2b-325837f9afa3"
        },
        "item": {
          "id": "84d9ad1f-0b80-4810-958f-1d3dc1364511",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ef77784d-561f-465f-acab-b20c8b727bce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59e3d67c-dd7b-454b-b66e-7c754dfb4ae1",
        "cursor": {
          "ref": "cc6a3b4a-32e5-445e-82f4-6fe5aeb45f35",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "1b4d53cf-216e-4aa3-aabc-7bed5ddfb9bd"
        },
        "item": {
          "id": "59e3d67c-dd7b-454b-b66e-7c754dfb4ae1",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5189efc7-f3f2-468d-8ce2-42cdb49d482e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ebcebad-887b-4a0d-b704-e8ed06e634bb",
        "cursor": {
          "ref": "addef799-09bc-43b7-8bb9-eb8da64ab9db",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "966cbf0b-9f31-4e33-9c82-ec5dc7e2b1f7"
        },
        "item": {
          "id": "7ebcebad-887b-4a0d-b704-e8ed06e634bb",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b4e82119-2053-4504-b086-e9bc510565db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f02a1ad7-e165-4b52-bc18-2cba30b06720",
        "cursor": {
          "ref": "a645b559-e25f-45d8-aa9d-f1cd6ae69676",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "16647e20-546d-4553-aada-c4717569ef81"
        },
        "item": {
          "id": "f02a1ad7-e165-4b52-bc18-2cba30b06720",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2c958e27-5642-41c0-aa33-0ff834c5897d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f78a3f2-bf47-4163-9dea-fea7b771e02b",
        "cursor": {
          "ref": "513e8f00-fa7a-4d2e-ae03-64b65c6eb64a",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "df442877-c4d3-4f1c-bf6d-2869a06b71be"
        },
        "item": {
          "id": "2f78a3f2-bf47-4163-9dea-fea7b771e02b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "fc7f8b50-da10-4de0-958d-80d23421b284",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbda5962-a35a-4dee-951e-07d18eb15f6e",
        "cursor": {
          "ref": "1fccabea-93b2-4ed2-a0bf-9d60c55daf82",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "29cfb8f7-0e40-49a0-9dd4-f7075c305eff"
        },
        "item": {
          "id": "bbda5962-a35a-4dee-951e-07d18eb15f6e",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "99814393-3d46-4bd1-a737-5d1fb0e237f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fdeb3c8-a078-4fb4-a58c-cea6a5abfd16",
        "cursor": {
          "ref": "9d659456-56be-4c55-a17c-e576d7340abc",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "acc4d33f-2bff-46f6-ad1d-c293dfea7b77"
        },
        "item": {
          "id": "3fdeb3c8-a078-4fb4-a58c-cea6a5abfd16",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "efb26a63-cc77-4481-99f6-f995258342ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "2edbc8a9-62bc-407b-b170-e92177ce059f",
        "cursor": {
          "ref": "85223d01-d437-44e7-a6a6-13bb2837577c",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "7c50f218-e811-4fb4-908c-f0cd4ebf9dbf"
        },
        "item": {
          "id": "2edbc8a9-62bc-407b-b170-e92177ce059f",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "bcb9814a-3942-4b34-ab22-4e6d99136a94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "e96e288f-8cbe-479e-bed4-483d10d1ba6f",
        "cursor": {
          "ref": "363e0c39-688a-4f8d-a360-7e02c7402760",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "03d1c318-9bcd-41de-8fac-f824dda4df8a"
        },
        "item": {
          "id": "e96e288f-8cbe-479e-bed4-483d10d1ba6f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6691f008-78f9-42aa-b03f-9bcbafefd1d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e96e288f-8cbe-479e-bed4-483d10d1ba6f",
        "cursor": {
          "ref": "363e0c39-688a-4f8d-a360-7e02c7402760",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "03d1c318-9bcd-41de-8fac-f824dda4df8a"
        },
        "item": {
          "id": "e96e288f-8cbe-479e-bed4-483d10d1ba6f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6691f008-78f9-42aa-b03f-9bcbafefd1d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3841eb4f-886c-4504-af62-eca8ede22270",
        "cursor": {
          "ref": "dc22c0dd-8d67-4c5e-9c9b-5fef521ba770",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "53f1919d-36f2-478b-b508-0ed11485b1c6"
        },
        "item": {
          "id": "3841eb4f-886c-4504-af62-eca8ede22270",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "0c3c6e43-cc43-4d0f-9d6d-f4a09f8e6734",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29c799ef-9cf1-42fd-8409-684bf1707440",
        "cursor": {
          "ref": "5ee18251-b2bd-411e-9f75-224722f7e68f",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "e9acca87-b807-48fd-aecf-29173634b9cf"
        },
        "item": {
          "id": "29c799ef-9cf1-42fd-8409-684bf1707440",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "919ceed4-6ca4-43d3-b584-6e1c0868b228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcc09007-3173-4f0e-ba87-526b04c690c4",
        "cursor": {
          "ref": "1e0fe4c2-3502-4949-8868-5466896d8238",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "be7553b4-1d81-4250-95a0-01e0738b9f92"
        },
        "item": {
          "id": "fcc09007-3173-4f0e-ba87-526b04c690c4",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "3c775f16-e1f0-4841-96de-a5948a8707f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5761ad8d-0d39-43c8-a046-0c8c3d9116ba",
        "cursor": {
          "ref": "4f38f367-9989-40be-8ada-4b58dae27de2",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "00d48a04-8e3e-4335-bede-c6e7df3e72a3"
        },
        "item": {
          "id": "5761ad8d-0d39-43c8-a046-0c8c3d9116ba",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "a174f3d7-07c8-45ca-a121-262bae7d65ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64f3052b-c71b-40f6-b561-fb0dffca1aae",
        "cursor": {
          "ref": "226d8106-1afe-4adf-95c7-40dada3ccaf4",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8e922c91-166e-4e8c-9a7b-c9e26dc63ecc"
        },
        "item": {
          "id": "64f3052b-c71b-40f6-b561-fb0dffca1aae",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "437e6e5b-1a63-468f-804f-9f5ebfa7580d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44d520fc-2935-426d-906a-caf87a1900b9",
        "cursor": {
          "ref": "7250516d-16ce-4e38-be59-df97a2b1cc11",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "2c6f0286-01d3-49a8-a195-cd934442432b"
        },
        "item": {
          "id": "44d520fc-2935-426d-906a-caf87a1900b9",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "23e5473f-4230-454c-957c-38210eed209d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f04befb-0eea-4da9-9166-d1b8fd583db2",
        "cursor": {
          "ref": "9c3ef81c-1298-42d8-b613-3a9464cf9cf5",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "c5d4dffd-b7c5-4c6b-a98d-a07cedbc9d57"
        },
        "item": {
          "id": "2f04befb-0eea-4da9-9166-d1b8fd583db2",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "0eacdf16-feac-4c07-a421-d46d961aba7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d6eacc2-131b-49bb-9258-8aebe0e593f9",
        "cursor": {
          "ref": "8ac99a3b-82da-49c1-993f-ec167985b019",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "741b4843-528a-4999-ba70-f6a6c258856e"
        },
        "item": {
          "id": "2d6eacc2-131b-49bb-9258-8aebe0e593f9",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "87f84bfb-3b99-4b73-bc95-08a4a40a36cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58c69951-6d7d-4c14-bfeb-338c26ac8c9a",
        "cursor": {
          "ref": "5e8654dd-ac08-4405-b0ff-377869994f77",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "8cb9bf1d-7ec7-406a-9990-f6647fd8fd06"
        },
        "item": {
          "id": "58c69951-6d7d-4c14-bfeb-338c26ac8c9a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "04afd2d5-2cea-420c-b8bc-8054dfe03be6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbdac347-d9b1-4467-b81c-403db4b6acb8",
        "cursor": {
          "ref": "ca404a49-1f8e-478d-9310-81504a17ab49",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a59cf249-92cf-4657-bc3c-f3ff5f4f5150"
        },
        "item": {
          "id": "bbdac347-d9b1-4467-b81c-403db4b6acb8",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "1e10d2c9-a092-41db-bc47-853f498f1335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b1dc8b2-edce-4530-864f-4dfff8583ea7",
        "cursor": {
          "ref": "4104941d-b0a4-4b4b-9a69-e9a890c4ae64",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "f2e9a710-6c26-48ac-a26d-6e609562d0eb"
        },
        "item": {
          "id": "9b1dc8b2-edce-4530-864f-4dfff8583ea7",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "740ef1e7-d05d-4b10-a04c-2e093ed9e694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 502,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "773d9094-6db3-466a-adad-fc51c67f56b1",
        "cursor": {
          "ref": "a6183b0b-0b7b-420e-b24c-dbe37c32eea1",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "b9186a76-c951-4810-8d68-1e30fc1ea834"
        },
        "item": {
          "id": "773d9094-6db3-466a-adad-fc51c67f56b1",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "24f75c80-48f1-45fc-beb7-5f58373c6926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31d53a8c-9cef-4cb4-98fa-a5497fdb7c6c",
        "cursor": {
          "ref": "70bddabc-4cd2-4073-a40e-50fab305f069",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "a18a16ad-f559-4569-92f2-ce9657ac717e"
        },
        "item": {
          "id": "31d53a8c-9cef-4cb4-98fa-a5497fdb7c6c",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "6ec23d53-4267-4305-9325-f750045d6bf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb8ce2b4-ee47-4f4d-82d4-e9cad3d9c373",
        "cursor": {
          "ref": "68e7b334-0f6e-4a9f-89c3-3c3a7798997e",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "9ddae41d-6974-498a-83b6-ac9e3de9f90b"
        },
        "item": {
          "id": "cb8ce2b4-ee47-4f4d-82d4-e9cad3d9c373",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "36acbd76-8ddf-42c1-b3a6-0882ed68b660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65e44346-797f-4fc3-b452-866bb7bc2f74",
        "cursor": {
          "ref": "2e5490b9-5b4a-401d-b48f-3e32ba371925",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "01d24f75-ad4c-414f-8df3-45ae39c02e7c"
        },
        "item": {
          "id": "65e44346-797f-4fc3-b452-866bb7bc2f74",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "bd9946c2-a06e-4e8a-904a-a2b7093457b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6656b45f-ddb2-47eb-96f2-3f53a8343825",
        "cursor": {
          "ref": "455bcbcc-1e18-407e-8294-6ede451a0a58",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "085f6fef-1c40-4026-8d0f-c00b8da7b7ab"
        },
        "item": {
          "id": "6656b45f-ddb2-47eb-96f2-3f53a8343825",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "461a40b5-8762-46a8-93a4-17ccfdc86930",
          "status": "OK",
          "code": 200,
          "responseTime": 272,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "1553c9f0-b171-461e-aea0-e6fd5c3cc8a5",
        "cursor": {
          "ref": "7925c58d-6bfa-499c-9215-88bbccc475fc",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "90a20d58-4c65-49ae-9303-40a2ce5822bc"
        },
        "item": {
          "id": "1553c9f0-b171-461e-aea0-e6fd5c3cc8a5",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "fd8383b2-c89b-4a38-9ab1-638ec4b63168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb5149af-5361-452a-aa42-f568baa41a68",
        "cursor": {
          "ref": "f183e1af-6095-4992-8ee7-b453a4db2504",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "2238bbdf-3151-47ad-b653-de2c6f506c8e"
        },
        "item": {
          "id": "fb5149af-5361-452a-aa42-f568baa41a68",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e1acf5fe-1c7e-4624-9955-02000b024d4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59a949c7-056b-42f4-b6b7-454acd392bfd",
        "cursor": {
          "ref": "d53da439-5183-428a-9fa3-38da7c76419e",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "47e970e7-090f-4bae-ab92-67f91c9e48b8"
        },
        "item": {
          "id": "59a949c7-056b-42f4-b6b7-454acd392bfd",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "6d9f612b-9d8a-4068-ae88-48a42933d923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "015e14f6-5339-4b24-8340-70a6502126df",
        "cursor": {
          "ref": "262154b9-0d6b-45e8-a0b1-20a85163b3d2",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "16b10bce-f7c6-4c05-a0aa-08bd4f39b645"
        },
        "item": {
          "id": "015e14f6-5339-4b24-8340-70a6502126df",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "fd7d5314-f78a-4b65-b76a-47f73cd5c461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0832bfbb-9b06-4c26-a27d-d587927a7c8d",
        "cursor": {
          "ref": "65b56b2f-9e8a-4ff6-9733-587c3fcc7b1c",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "4f3e983e-0f07-4211-ae4a-8558f3650060"
        },
        "item": {
          "id": "0832bfbb-9b06-4c26-a27d-d587927a7c8d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c851e638-11e8-4482-9fbc-dbcf333d5b84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "718c56b6-0171-4e6b-a6ce-5efd3a0e8a14",
        "cursor": {
          "ref": "507d6da8-0ec2-4d94-9dcd-d2d55fbf30e6",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "9ceab911-8ac5-44ea-b8c6-ee423a1afea8"
        },
        "item": {
          "id": "718c56b6-0171-4e6b-a6ce-5efd3a0e8a14",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d4e22ba8-5416-4b61-a69d-784cd6550b86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2acf1c76-b5d4-4abd-95ac-f495388a1cfb",
        "cursor": {
          "ref": "39cebdd2-6c7c-4a87-8078-7497ccd6911e",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "11746421-3b5d-428f-8f47-7d2e807e3cfd"
        },
        "item": {
          "id": "2acf1c76-b5d4-4abd-95ac-f495388a1cfb",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "6a312cf6-a36b-4a31-80fb-3a580824aad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de2af9f2-c217-4d62-996c-aeb57a3e392d",
        "cursor": {
          "ref": "ffdcab38-d3ad-4844-ad22-84dee47f73b0",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d1bccd4c-d8c7-48ee-82aa-916f09909021"
        },
        "item": {
          "id": "de2af9f2-c217-4d62-996c-aeb57a3e392d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "13603c5b-c53d-4147-9cf2-4dfc87a9ff34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "291e24d9-dc1c-47c3-8535-b5b02c934029",
        "cursor": {
          "ref": "870b90ef-3dfc-4d25-9afb-79072ee94dcd",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "be96b461-e5f3-434d-aefb-6acc396b2b49"
        },
        "item": {
          "id": "291e24d9-dc1c-47c3-8535-b5b02c934029",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "92dc1174-3370-4076-b9ae-1f55a939341a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73b911ac-f21e-45c7-ad2b-d336ce0fc47e",
        "cursor": {
          "ref": "e416cb76-2870-448e-a8ed-c27f3e76e4d9",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "e4a0e300-85c7-4dbb-a7bc-32c6eba6155c"
        },
        "item": {
          "id": "73b911ac-f21e-45c7-ad2b-d336ce0fc47e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3f2507c2-81c0-4105-9a15-1eb750fb7a04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aa8906f-873e-4c00-81db-c3518ccceea3",
        "cursor": {
          "ref": "c426b6f3-a14e-4590-bb24-7cb88a11ef2e",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "53ca0e3c-287f-48af-9a34-3cc3f63a5ff5"
        },
        "item": {
          "id": "9aa8906f-873e-4c00-81db-c3518ccceea3",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f2a95a33-c975-4a15-bd63-b83333c67637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e6367c-ee8c-4c04-a3b4-2fea769b3d7f",
        "cursor": {
          "ref": "e1e48721-c1df-4d6e-ae3b-3e0783e13bef",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b8468be5-1520-430f-98ce-500e68d18141"
        },
        "item": {
          "id": "66e6367c-ee8c-4c04-a3b4-2fea769b3d7f",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "fc6736cd-68d3-4541-9de1-8f296c6359be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b26e53e-a893-4630-9dc3-c070d102e41f",
        "cursor": {
          "ref": "7abda066-2a56-4505-a706-a82c795f1377",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "aa11af0f-799a-4e6c-8d6a-af80486a6fc2"
        },
        "item": {
          "id": "8b26e53e-a893-4630-9dc3-c070d102e41f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "a4750d0d-6848-4889-8429-f5440ce9e665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64cf38c7-3ef2-44d6-bb78-ba2ee11057d9",
        "cursor": {
          "ref": "c4c50252-daee-4df6-9758-14eb95690e4e",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "25769495-ea13-4fec-a355-31b0875ef8d2"
        },
        "item": {
          "id": "64cf38c7-3ef2-44d6-bb78-ba2ee11057d9",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "ff5bad75-55d1-4138-8648-92eff335be56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f44b782a-b5d5-4e57-a90b-610d8d6cae58",
        "cursor": {
          "ref": "4220935f-5088-4a4f-8291-c204f8613e49",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "82b28d45-23ea-4dfc-840e-8ed101911ccc"
        },
        "item": {
          "id": "f44b782a-b5d5-4e57-a90b-610d8d6cae58",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "7c1fa7c1-b8bd-4b6f-bd5f-0a333a0e798e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f32e3ec-5a1e-42bb-911d-ea79373b6af6",
        "cursor": {
          "ref": "89e57b12-a124-428e-b08d-7db1b2f754d6",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "89f0995d-e5a7-4e46-90d7-426565c63fe7"
        },
        "item": {
          "id": "6f32e3ec-5a1e-42bb-911d-ea79373b6af6",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "171ef7a6-2bae-4e4e-9e70-fe4faea0c0b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad083ece-cc9b-4152-8031-80a7c421461f",
        "cursor": {
          "ref": "28e67898-1730-414a-a457-abb43475566f",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "538416c8-2679-480c-bd75-e17e23a313fc"
        },
        "item": {
          "id": "ad083ece-cc9b-4152-8031-80a7c421461f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "859781f7-ff86-480b-9d02-2ac721d5c84f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f840b2a-f5de-4877-a514-55c82ee65fac",
        "cursor": {
          "ref": "22c600f5-7c39-4073-901f-bb33b5672d60",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "196f3031-b576-48f5-bf3f-858748345ba3"
        },
        "item": {
          "id": "0f840b2a-f5de-4877-a514-55c82ee65fac",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "e2a9b5d4-88bc-4136-b2d1-10d73caa87c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12d20d96-f980-43f4-a400-72cdd6f4666c",
        "cursor": {
          "ref": "074d1540-e043-4e21-a052-0434818e02c8",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "abdf21cb-c45a-45b1-a950-39b3a3f06e9d"
        },
        "item": {
          "id": "12d20d96-f980-43f4-a400-72cdd6f4666c",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "5aabc8c4-8194-480c-817b-003ec186eb8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e27dfa8-c791-4132-b77e-d4a280888cef",
        "cursor": {
          "ref": "e8387d01-e165-4458-9656-eae0e73a6049",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3bce7869-0a95-4ed0-8bef-7043c368772f"
        },
        "item": {
          "id": "5e27dfa8-c791-4132-b77e-d4a280888cef",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "58444fe5-7f3b-4ad8-92a6-961202a546a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f1276a0-6a05-4bf2-999f-95366ba418c5",
        "cursor": {
          "ref": "1ff6aa78-8b06-4976-aaa8-119622d5a618",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c1e54b7c-2c4c-40c4-be79-0070f464f067"
        },
        "item": {
          "id": "6f1276a0-6a05-4bf2-999f-95366ba418c5",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "7098c833-2865-4fcd-a011-e4e60b9c2de3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c10ab115-10eb-487c-bc57-8cb3366a219d",
        "cursor": {
          "ref": "e8058740-c71e-47f5-80b8-cf5a5b9391e0",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "9fbf1546-f1fa-4770-a509-57fb3b59bb2b"
        },
        "item": {
          "id": "c10ab115-10eb-487c-bc57-8cb3366a219d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "25c9c737-9d1b-4f0d-8239-c6cdc7dadc1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb682bf2-c1c0-4bd8-9f42-18d02d0aeb39",
        "cursor": {
          "ref": "56d0f42c-6d29-4453-aab0-aa19ca57d64a",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "98500dd4-f1c0-4149-becd-44ada648cfb6"
        },
        "item": {
          "id": "bb682bf2-c1c0-4bd8-9f42-18d02d0aeb39",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "838e8552-477d-4d1b-b258-194328abd750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a649973a-f7e5-4e91-b7ed-5177909f7110",
        "cursor": {
          "ref": "34128c42-6a30-4e21-b37c-efb9c3ac6f17",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "5bdbe41a-b93e-4c56-851b-f4ab4454526d"
        },
        "item": {
          "id": "a649973a-f7e5-4e91-b7ed-5177909f7110",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "c6bc39b3-5911-48b0-821b-a5e4f2a04bd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "269f23f5-69ec-4f2c-9c60-139b6822ed8e",
        "cursor": {
          "ref": "d00985df-e581-4df1-afed-9001719f613c",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "153b4823-80be-4b57-9f45-de0f3a82b766"
        },
        "item": {
          "id": "269f23f5-69ec-4f2c-9c60-139b6822ed8e",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "485cda2e-b050-4862-99b4-e37434709bd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01a7c7a0-6e43-42d9-84f3-2e3206856c5c",
        "cursor": {
          "ref": "b8211612-cf3d-49bc-8fde-af3e52e70a15",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "22469271-fa76-4ef3-8cb8-d6695520b745"
        },
        "item": {
          "id": "01a7c7a0-6e43-42d9-84f3-2e3206856c5c",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "366624aa-a7ad-472b-a4da-913797db3c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d3b9798-800a-4de7-aeb4-1e9ca2e3ea37",
        "cursor": {
          "ref": "b45c1676-08b2-4d41-bdbb-d15eaa4925c8",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "c7dcd98e-d769-4cf1-8d2a-8ebad28099d2"
        },
        "item": {
          "id": "8d3b9798-800a-4de7-aeb4-1e9ca2e3ea37",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "749c839b-4ee6-43be-b181-1cbafe5012c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a6c0322-a60d-4655-b7f3-8e9c71b1be7a",
        "cursor": {
          "ref": "9a39636d-7d59-472f-a58b-26002c01a8c5",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "24ff362e-da4b-47fc-b750-5c780c006ca0"
        },
        "item": {
          "id": "6a6c0322-a60d-4655-b7f3-8e9c71b1be7a",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "54e9261f-ebce-4bd6-8722-296a69456f36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be339a3c-5601-429a-a671-e61a5dbb0159",
        "cursor": {
          "ref": "165c54f2-1f69-4571-86f1-18a951aeafa7",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "2a2d6423-4558-49da-891c-04057f7b651a"
        },
        "item": {
          "id": "be339a3c-5601-429a-a671-e61a5dbb0159",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "93e796b2-52c7-401e-bfd8-39768c4453a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eb3393c-cefe-423a-bcb9-8650e6d6012f",
        "cursor": {
          "ref": "61b607d2-5956-4d97-808f-822b10558b11",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "1c11f1c3-e910-4699-b147-a74ed3ed7ba2"
        },
        "item": {
          "id": "7eb3393c-cefe-423a-bcb9-8650e6d6012f",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e9bdb16c-b160-427a-9d7a-f0b6374a359b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9feb9e5d-ca0e-4371-8330-26c54699c26d",
        "cursor": {
          "ref": "dbca8a61-b5a8-48d9-9846-3e611697e94b",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "5973ff0c-7e1b-4f79-9167-85ad93dc3e02"
        },
        "item": {
          "id": "9feb9e5d-ca0e-4371-8330-26c54699c26d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "039c3fce-8099-40d0-a8cc-ac408ba6c0cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81d2a98f-318d-477d-b985-3d8354b24877",
        "cursor": {
          "ref": "7906c0ef-ba25-415d-a7df-dcd19a3d3887",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "00cb3dde-b9b1-4bc3-a4ce-8724833e0d23"
        },
        "item": {
          "id": "81d2a98f-318d-477d-b985-3d8354b24877",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "4069565c-1087-4431-b961-08278892c5a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0748416b-209a-4a2c-af64-380a1ea3445f",
        "cursor": {
          "ref": "f6f01130-b4d7-40e1-947b-f8bad6aeff37",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "a95ceabe-11e0-4a98-a56e-36ec282ac632"
        },
        "item": {
          "id": "0748416b-209a-4a2c-af64-380a1ea3445f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "66199ee1-ec4f-4487-acfc-ea9f60cb6220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11c6776c-f383-4e7c-aa5e-c2acdd53fb33",
        "cursor": {
          "ref": "8d1b69d3-7bd8-40ce-8347-9240d7ab851c",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "001f3c4a-d15a-4feb-8f30-8424416fcd21"
        },
        "item": {
          "id": "11c6776c-f383-4e7c-aa5e-c2acdd53fb33",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "21063017-f83a-4997-9a42-67cd651d4de7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "029404b9-f30d-4162-ae64-d93726f4a98c",
        "cursor": {
          "ref": "c4133b8d-c73a-4a86-84e1-1c3e198e24c1",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "0bc10a56-15af-4420-abb3-c2c823417b88"
        },
        "item": {
          "id": "029404b9-f30d-4162-ae64-d93726f4a98c",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "92858a23-556e-4a1e-a57c-620eb339aa09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c4920fc-3738-4061-bc8b-aaf2a1c2667d",
        "cursor": {
          "ref": "676e0adc-2e1f-46a0-b7b8-9c000c9f4969",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "d4c6156a-ebce-484a-85bf-710ecf6af3d8"
        },
        "item": {
          "id": "0c4920fc-3738-4061-bc8b-aaf2a1c2667d",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "40cad70f-ce19-433c-9fbc-31dd57d38dd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24a89c28-973f-4341-b6fa-6657ed46f571",
        "cursor": {
          "ref": "b164c851-c7cf-4c31-9cad-9eb3be70daa0",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "32812fe9-f04a-49ad-be4c-4e7487c7aaf3"
        },
        "item": {
          "id": "24a89c28-973f-4341-b6fa-6657ed46f571",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "68611bed-ebd2-4ef6-bbf1-89513587a9c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98f52110-890a-4c3d-9232-245dd7dffc62",
        "cursor": {
          "ref": "495d5856-42ed-4d69-ab3d-7a92a967a13e",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "f4dc3e85-73d1-45de-a462-3d629454a84b"
        },
        "item": {
          "id": "98f52110-890a-4c3d-9232-245dd7dffc62",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "479f5f02-9a75-4098-9078-6171ac438e76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efce8ace-d1e3-405e-95d1-711ad0bd362b",
        "cursor": {
          "ref": "bc765bbc-b8d4-4e40-b143-1b1dc2f68516",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c7666e8e-6e61-4f8a-a454-e1834d9876d7"
        },
        "item": {
          "id": "efce8ace-d1e3-405e-95d1-711ad0bd362b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "2fc8322c-cfcd-49ba-90ee-53fc0cb630c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "715926bd-df9d-4827-bda5-c920270cf5e5",
        "cursor": {
          "ref": "2dc73a82-d56c-4ab9-ad3f-81553d79e61d",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a9022f1a-fcaa-4da7-ae33-1ae16d9beb8b"
        },
        "item": {
          "id": "715926bd-df9d-4827-bda5-c920270cf5e5",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "ce16fc48-9bf5-4cbc-a5ba-b58a522a41c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ddc45cc-6f22-475e-9592-184810b56e03",
        "cursor": {
          "ref": "1d682f8b-ace6-41bc-a5ee-5d0139e13579",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "f8bc6c98-d7d8-480b-ba58-9aa9e69c6b42"
        },
        "item": {
          "id": "1ddc45cc-6f22-475e-9592-184810b56e03",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "f6b9fcd8-6f7e-46f5-b8ab-17207163824e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b77ced2-3fa6-48c4-818f-70400784c9a2",
        "cursor": {
          "ref": "1d57a89d-1e73-41c9-a80d-5ea938ea4c9c",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ac11a132-0e9f-4c00-a2e6-186ab403f292"
        },
        "item": {
          "id": "3b77ced2-3fa6-48c4-818f-70400784c9a2",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9dc61e14-c20f-4179-be1c-a2e8e470add3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83dfc04a-6a43-4d07-bd8b-0ea9313e739d",
        "cursor": {
          "ref": "e65462bd-0084-4c9a-82e2-4bd8a11133db",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "dc4da504-4965-48f6-9f70-8b7c50207d71"
        },
        "item": {
          "id": "83dfc04a-6a43-4d07-bd8b-0ea9313e739d",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "edbd4e9e-94dc-4be7-9057-172b7ae31c00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04d00831-71e5-476e-bfe2-966450414de7",
        "cursor": {
          "ref": "bf2f51b4-63ba-446d-a0ae-452057f06401",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "35233d2e-b8a2-4d98-878a-284864ec4ff5"
        },
        "item": {
          "id": "04d00831-71e5-476e-bfe2-966450414de7",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "e3517d30-e936-43c2-81c2-6c245b7b039c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23caab77-12e2-4f8e-bb1f-1987a86fcd8d",
        "cursor": {
          "ref": "d6d56a74-3554-4496-8416-616ef6213f7c",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "593fbd39-d90c-4f18-b987-cb54dc4630a6"
        },
        "item": {
          "id": "23caab77-12e2-4f8e-bb1f-1987a86fcd8d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "92183fa5-6ada-4c99-bcc4-57bf135b4f1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09510d1f-09fa-44ba-88cd-3a941d63dfd8",
        "cursor": {
          "ref": "339c215d-044e-4391-a707-ab6edaafd637",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "32cbc053-77b4-4926-873d-6df0b3d8b8ca"
        },
        "item": {
          "id": "09510d1f-09fa-44ba-88cd-3a941d63dfd8",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "5b34c268-b561-40f8-bbc4-de24d0fcba7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52ac1d5d-d997-4f60-98fb-3707d74af1e8",
        "cursor": {
          "ref": "5646f657-7030-487a-9c50-4bbc4203dde8",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "9fb87d40-e514-4a95-aaf5-6187b61d3d9a"
        },
        "item": {
          "id": "52ac1d5d-d997-4f60-98fb-3707d74af1e8",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "9a7052c8-90fb-41c9-9c9b-3b2539076c8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b458f99-7bc3-46ab-8e78-509e3e359509",
        "cursor": {
          "ref": "ad998d32-aeef-40ac-a33d-b0e26ff68169",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "fd971cf4-a8dd-477a-94ad-cd27abeea712"
        },
        "item": {
          "id": "4b458f99-7bc3-46ab-8e78-509e3e359509",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "972b1451-8406-4c8c-ba3d-475cf22980c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cdb2bdd-77a7-4c6c-a20c-6d6d3df452b2",
        "cursor": {
          "ref": "288d4040-d7a2-4e33-864c-a138a17a6de7",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "c28e23d1-cb67-4a0f-bc1c-4bbd7aa8f8dd"
        },
        "item": {
          "id": "6cdb2bdd-77a7-4c6c-a20c-6d6d3df452b2",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b720c723-e9bc-4c6b-9a89-ae1f46ac6b7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "463ba154-4305-4ef4-8999-f2de992165bc",
        "cursor": {
          "ref": "dba7a87b-397d-4b93-90fa-f108c8e98171",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "07399630-0d96-4ec7-9666-5d76670f7a13"
        },
        "item": {
          "id": "463ba154-4305-4ef4-8999-f2de992165bc",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "3428bf11-0a77-4a1e-9902-646cbfc2f759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c154ebe-28c0-4189-b4d0-97b6c14fcdd6",
        "cursor": {
          "ref": "8d882313-a5f3-43a6-b0ab-488a1718ca9c",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b0f70a10-deb1-4ba2-b10b-cf27fd4b4243"
        },
        "item": {
          "id": "2c154ebe-28c0-4189-b4d0-97b6c14fcdd6",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "06b5e29d-8664-4f7c-90ce-aef1515d56ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce462450-00e9-42ae-9578-bd1b984b3d7c",
        "cursor": {
          "ref": "a46f30e6-3ab5-472b-a7ae-4765c53f7e0f",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "2ea1241f-252d-4172-9dc7-b82ce4a9e00d"
        },
        "item": {
          "id": "ce462450-00e9-42ae-9578-bd1b984b3d7c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "6b6aef30-80cd-4a42-9a0b-623784f26dca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63593b01-8a10-4ce3-834c-1723e307d227",
        "cursor": {
          "ref": "6705cd3a-bcae-4e64-8765-a54c4044dd61",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "714f7ada-dc33-43d6-8f54-cacb94c8b459"
        },
        "item": {
          "id": "63593b01-8a10-4ce3-834c-1723e307d227",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9ed73437-b164-4e5b-a628-5c50ac952c2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "950bea3a-0ea0-47c6-a103-c749dc0f9b20",
        "cursor": {
          "ref": "e5be8e49-7c8b-456e-a9dc-c69f2ddd6791",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "46954ca9-64b8-4d50-82b0-84ab8a85f131"
        },
        "item": {
          "id": "950bea3a-0ea0-47c6-a103-c749dc0f9b20",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "e806bfd3-5260-4c4e-b217-014ccb6eea10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72744025-e6fa-41f7-ad71-12feeb3caeaf",
        "cursor": {
          "ref": "5415a91d-82af-425a-9f48-3d90d8f3b936",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "2ad70f44-8d18-45a1-9308-9283eda90fae"
        },
        "item": {
          "id": "72744025-e6fa-41f7-ad71-12feeb3caeaf",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "8f0b3349-ff64-442f-beaa-8fac25199bf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81739203-846e-40d2-a189-ae7fabf8ac6f",
        "cursor": {
          "ref": "6b44ed79-b2ab-439a-9421-93fb87e42f2f",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "2196d2f0-83ab-4db6-9ffc-c0e3c470dd68"
        },
        "item": {
          "id": "81739203-846e-40d2-a189-ae7fabf8ac6f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "f5e4866a-a46d-449a-b28f-f5dbd03a795c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d9f88d9-5d5e-41e2-afef-d951185528fb",
        "cursor": {
          "ref": "0797357a-6451-4a88-819b-1924cb9ecf5a",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "e29f0966-365e-4199-a9ee-aa5cb54df574"
        },
        "item": {
          "id": "6d9f88d9-5d5e-41e2-afef-d951185528fb",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "13f8cd5d-1dad-44ef-8bf8-f13cf10110c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54cbe1a0-6856-46c3-959d-83e7e1446fe6",
        "cursor": {
          "ref": "8796f2ad-0a6e-4d2f-b64f-58cd893c34fc",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "fc9ef40b-ca04-4c90-8a55-5fb27f6f3841"
        },
        "item": {
          "id": "54cbe1a0-6856-46c3-959d-83e7e1446fe6",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "57964a4a-494f-497d-bb91-cb4a20853c19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfd34847-9a1f-41b3-9d00-740572efa0f4",
        "cursor": {
          "ref": "6503ea6e-5b5d-4dd3-b0d4-17b669a99fec",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a5678765-4464-4959-b860-8a974f79df28"
        },
        "item": {
          "id": "dfd34847-9a1f-41b3-9d00-740572efa0f4",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "8fdaf7bd-0f73-4c13-9cab-fcfc50f0c122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9ea9bdd-69f2-4bdc-9d8b-45bf4968d824",
        "cursor": {
          "ref": "14ace211-59a0-488a-b343-d60a4cee1651",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "5fe72362-e658-4c78-9c1b-0241c4af6c5a"
        },
        "item": {
          "id": "a9ea9bdd-69f2-4bdc-9d8b-45bf4968d824",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "903fe221-f799-47ac-842b-5ed70cc7241c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "219d3989-8901-4922-8f07-e88b262f709f",
        "cursor": {
          "ref": "cfc4c38d-ef73-445a-8bea-6bc9740bca8e",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "22c3e79c-2d3f-400f-a38f-de625a169bef"
        },
        "item": {
          "id": "219d3989-8901-4922-8f07-e88b262f709f",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "8928eaef-1375-496e-80dd-7f4139c9bbbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72d031d8-fc5e-4dc4-80db-0dec1c1bf096",
        "cursor": {
          "ref": "dbdd48a7-ba96-46dc-98cb-d12d6b36db1d",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "294d8194-817d-4161-bb8a-93e55efbb13a"
        },
        "item": {
          "id": "72d031d8-fc5e-4dc4-80db-0dec1c1bf096",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "209bc112-4ba1-4b6d-8bb9-72cf8d1010dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12cbca12-7559-4f47-aca3-c0d0ee3dec1b",
        "cursor": {
          "ref": "5d073c61-4948-4a8a-9bd7-cfd844a87dfa",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "16f10bfe-a2fd-441a-b3c4-f1021486abc4"
        },
        "item": {
          "id": "12cbca12-7559-4f47-aca3-c0d0ee3dec1b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7fdb0c2b-b9b5-46bb-83e0-fba45c193855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cad0845-c720-48d4-b69c-1897290121bb",
        "cursor": {
          "ref": "0e125f0c-e43a-45f5-8e29-049a359063ef",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "144c0326-909c-43d0-8c4a-8c3c19fd624f"
        },
        "item": {
          "id": "3cad0845-c720-48d4-b69c-1897290121bb",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "ba312b8d-3072-43bd-afa6-a75a1fef8481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0192229-53bf-4716-8282-10fc05201cd0",
        "cursor": {
          "ref": "bab3fc79-fd32-4a11-9e33-68c7bf8679a5",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "d75fdfdf-38b9-43ce-b262-713e28a0d807"
        },
        "item": {
          "id": "f0192229-53bf-4716-8282-10fc05201cd0",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "6ff848fc-48d6-4dfe-87fb-c7827dda899b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "238c80b4-a75e-422c-82f7-6cf48c8daac2",
        "cursor": {
          "ref": "9ee7ab91-10b0-4b9e-9720-907d7b24c27b",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e69736ab-ee77-418f-9f7f-fe4672f4497b"
        },
        "item": {
          "id": "238c80b4-a75e-422c-82f7-6cf48c8daac2",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "34160262-47f7-4b1f-b4e1-4c14eae07c25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a773653-0c8b-4e36-9c5b-8e4f75a5db22",
        "cursor": {
          "ref": "9ebb9e15-8597-4d94-99ab-cd80f7107246",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "4ee0b6e1-739e-4343-8f0f-d3ca414d1732"
        },
        "item": {
          "id": "1a773653-0c8b-4e36-9c5b-8e4f75a5db22",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "9cc8b7a6-ddf7-4744-8a3f-6f47116004cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f555acb6-da81-42a3-9b96-aa50add1e21b",
        "cursor": {
          "ref": "e943132a-dbe2-4c86-ace2-e6b3b230e824",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "8f020819-2bee-49bb-9879-a5417ef88183"
        },
        "item": {
          "id": "f555acb6-da81-42a3-9b96-aa50add1e21b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "b83e999d-9f4f-48ce-b0cc-57dc8d952d54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13fde9f9-c24e-4089-9747-0776a2f34c93",
        "cursor": {
          "ref": "ae36b4b6-bab9-4ec3-9664-defe5bd84505",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "aaae7afa-51f9-4db1-9ec2-740fc5908539"
        },
        "item": {
          "id": "13fde9f9-c24e-4089-9747-0776a2f34c93",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e11d0307-7b2f-40dc-a650-abe421213a3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b83bd41-d904-436b-84aa-c14ef47fa27f",
        "cursor": {
          "ref": "17f3d890-6700-4d53-a505-befaec51a072",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a6a3523a-8658-4a87-b887-356d0cf24886"
        },
        "item": {
          "id": "1b83bd41-d904-436b-84aa-c14ef47fa27f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f0a36f1c-7e96-4c7a-b751-d778a41c6718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49faddf5-c07e-4314-9fc8-3a90280ca949",
        "cursor": {
          "ref": "fa10bf5d-e701-40d2-aacb-219c72092c5e",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "344d387f-1fb2-4ce8-a021-e11dc0889762"
        },
        "item": {
          "id": "49faddf5-c07e-4314-9fc8-3a90280ca949",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "8fac3854-b081-416e-8ded-b8d6b9f19f1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8060de32-c95d-457d-a0c7-646a1f209120",
        "cursor": {
          "ref": "595d508c-3244-4c94-95ef-ca0e7c899e4b",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "53c756f2-76c2-4bd5-a910-0441012efb90"
        },
        "item": {
          "id": "8060de32-c95d-457d-a0c7-646a1f209120",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "9e8c0d5a-0390-41e8-9f07-bfb1f714c617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "890ec0b5-53c5-4cf2-9324-5d998822bc5d",
        "cursor": {
          "ref": "f3c0bae6-598f-42f6-9eeb-bd243e103acf",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "16148ad2-10e9-4abf-badb-090aed2ff0e0"
        },
        "item": {
          "id": "890ec0b5-53c5-4cf2-9324-5d998822bc5d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "29223323-6351-49cf-94ee-6eaac7d2e079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34298261-50f6-499e-a1b3-0e780d816964",
        "cursor": {
          "ref": "d826f29b-64a5-49b5-8b71-1b543997e492",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "4528f8b9-c080-49d2-a9fb-0398a4158c3f"
        },
        "item": {
          "id": "34298261-50f6-499e-a1b3-0e780d816964",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "70c0cfb0-4fb4-4d96-a558-92334e4e6585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f37489b-1f03-40c8-bb3e-96736c75296b",
        "cursor": {
          "ref": "f91cade7-a895-4f96-aa70-15593582e8cd",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c0af2b14-0202-4af3-9757-74e6dce8fdc8"
        },
        "item": {
          "id": "7f37489b-1f03-40c8-bb3e-96736c75296b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "7ba29131-feee-444c-9629-bfa1fd788097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d78508c7-bbf8-4ba0-a775-fec360f39925",
        "cursor": {
          "ref": "f7d13b7b-5e25-4b86-ab6c-b1e9faf84990",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "56af051d-c6e0-46f2-aed9-627bea806e7c"
        },
        "item": {
          "id": "d78508c7-bbf8-4ba0-a775-fec360f39925",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "4e18824b-cd4e-4c8e-b922-6476f09144ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bf6486a-1969-42ac-a483-afb2037d6f58",
        "cursor": {
          "ref": "99b56925-8be3-4fa1-adc3-57e2d53edbff",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ead7469a-1783-4194-b601-84f5ef1ab007"
        },
        "item": {
          "id": "5bf6486a-1969-42ac-a483-afb2037d6f58",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "0de49a10-a389-4de3-97aa-1941286d42d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5284468f-7fa5-44ac-a5af-81279f72c6d3",
        "cursor": {
          "ref": "502d731b-3f33-4c64-bed6-cb63b4564266",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "9a371259-c1a7-4f50-886c-a49902985698"
        },
        "item": {
          "id": "5284468f-7fa5-44ac-a5af-81279f72c6d3",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "f2daabf4-bd6b-4990-886e-59ac2b673305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d732c9a2-8ff4-4e22-81b6-390abac10fb7",
        "cursor": {
          "ref": "00d84255-5140-4cdf-bc03-56b28df87fe8",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "4c3a6699-189d-4734-8c6d-6c8838f05f7c"
        },
        "item": {
          "id": "d732c9a2-8ff4-4e22-81b6-390abac10fb7",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "db9c6bcb-e5ce-4d2e-8ee1-020161dd8f6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e194b8c2-6fbb-4fb8-b9e7-dc392aa21031",
        "cursor": {
          "ref": "4a52a399-0eaf-41a2-8945-3f083df4fe6a",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "9c6ec94a-e219-41eb-a90d-5b55b5bb96c8"
        },
        "item": {
          "id": "e194b8c2-6fbb-4fb8-b9e7-dc392aa21031",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "79b6636e-56e5-4bd3-8b9b-6dbd43c24d30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8c6ec46-978c-468b-88b4-f372da238e10",
        "cursor": {
          "ref": "160fa82d-4450-4cb1-a547-5f519354a724",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "8e7e7520-4620-4017-82c7-24f34853da19"
        },
        "item": {
          "id": "a8c6ec46-978c-468b-88b4-f372da238e10",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "7d3b78e7-0b74-46fd-a220-f99af86ab1d8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "78d21579-89e7-473b-946c-de6089bdff61",
        "cursor": {
          "ref": "ebba036a-f717-47db-9e69-6ba4ce951cf6",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "17ceecaa-bf30-4dcb-8eb7-66a387be6965"
        },
        "item": {
          "id": "78d21579-89e7-473b-946c-de6089bdff61",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "d03ad3ce-004c-4bb0-aac2-a498b852376f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "5d2a8463-fae8-4e0d-b525-5df2d0892256",
        "cursor": {
          "ref": "da273deb-f134-44f1-90c5-73b3ab4a267e",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a3992e3f-fe13-47ca-bd74-d6dc160921b5"
        },
        "item": {
          "id": "5d2a8463-fae8-4e0d-b525-5df2d0892256",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "08812911-3950-4e5d-9227-d3c396ee3acb",
          "status": "OK",
          "code": 200,
          "responseTime": 284,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "58e86edd-5173-49e5-87d1-76b0d185190c",
        "cursor": {
          "ref": "a8f2796f-5a8f-4574-96ac-b2a25adb0170",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "62a7b09a-37c4-4300-b471-78d2f8768844"
        },
        "item": {
          "id": "58e86edd-5173-49e5-87d1-76b0d185190c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "764f1bad-8a87-44f2-b988-6d7ff753c359",
          "status": "OK",
          "code": 200,
          "responseTime": 7585,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7918a779-b107-43e1-ac83-8fd40158ca84",
        "cursor": {
          "ref": "1d35a966-a2b9-4a09-8166-9f3f5f3b2e21",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6970ced5-bf86-49b4-bed7-e0184366ad64"
        },
        "item": {
          "id": "7918a779-b107-43e1-ac83-8fd40158ca84",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "711bd976-977e-476f-9496-9a2e186facf5",
          "status": "OK",
          "code": 200,
          "responseTime": 3770,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fa33575-374d-4190-a840-8736e3e01f11",
        "cursor": {
          "ref": "e666ca26-fe24-483a-9902-1223dcfd2467",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c574b8d4-1ad8-4692-921b-7d7631ef71a6"
        },
        "item": {
          "id": "9fa33575-374d-4190-a840-8736e3e01f11",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f95443e6-3960-4589-906a-b9d44c406072",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "9fa33575-374d-4190-a840-8736e3e01f11",
        "cursor": {
          "ref": "e666ca26-fe24-483a-9902-1223dcfd2467",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c574b8d4-1ad8-4692-921b-7d7631ef71a6"
        },
        "item": {
          "id": "9fa33575-374d-4190-a840-8736e3e01f11",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f95443e6-3960-4589-906a-b9d44c406072",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "9fa33575-374d-4190-a840-8736e3e01f11",
        "cursor": {
          "ref": "e666ca26-fe24-483a-9902-1223dcfd2467",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c574b8d4-1ad8-4692-921b-7d7631ef71a6"
        },
        "item": {
          "id": "9fa33575-374d-4190-a840-8736e3e01f11",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f95443e6-3960-4589-906a-b9d44c406072",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "f36a4d7c-a04c-45dd-b83c-c15ba0b06462",
        "cursor": {
          "ref": "04376211-59dd-408f-a4a9-d8e1be93c1fc",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "0063f792-bf22-4a9e-93c3-dddde683030a"
        },
        "item": {
          "id": "f36a4d7c-a04c-45dd-b83c-c15ba0b06462",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "98590e67-07d6-4c71-9370-d6f6bd50963d",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "bcdea392-dba9-41b6-9c47-1bd55b8f8d88",
        "cursor": {
          "ref": "72627e93-fc6c-404a-ba0c-dc2048e36574",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "153d977c-5563-4c22-9c5a-017c2ca7db79"
        },
        "item": {
          "id": "bcdea392-dba9-41b6-9c47-1bd55b8f8d88",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "83af01f7-9eb6-4b80-af9c-540fd22c606a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "bcdea392-dba9-41b6-9c47-1bd55b8f8d88",
        "cursor": {
          "ref": "72627e93-fc6c-404a-ba0c-dc2048e36574",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "153d977c-5563-4c22-9c5a-017c2ca7db79"
        },
        "item": {
          "id": "bcdea392-dba9-41b6-9c47-1bd55b8f8d88",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "83af01f7-9eb6-4b80-af9c-540fd22c606a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "1cc69b1f-b00b-45f1-b204-00c6fa394fd4",
        "cursor": {
          "ref": "9bfc275a-c4ff-45ac-b68b-a0cb3420a00a",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "affac816-1ea3-4147-90c2-d1709b17b42c"
        },
        "item": {
          "id": "1cc69b1f-b00b-45f1-b204-00c6fa394fd4",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "0d49d71e-31cc-4e5b-9948-0970680c1c6d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 225,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "87c28379-c396-4b1d-be85-0130b73657dc",
        "cursor": {
          "ref": "25c769c6-6af1-48f5-9f96-74882de77d7d",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2de690ff-c93a-411a-b928-786b6e872048"
        },
        "item": {
          "id": "87c28379-c396-4b1d-be85-0130b73657dc",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "2d47c816-6476-4ab6-bf70-c84ce160dd9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "87c28379-c396-4b1d-be85-0130b73657dc",
        "cursor": {
          "ref": "25c769c6-6af1-48f5-9f96-74882de77d7d",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2de690ff-c93a-411a-b928-786b6e872048"
        },
        "item": {
          "id": "87c28379-c396-4b1d-be85-0130b73657dc",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "2d47c816-6476-4ab6-bf70-c84ce160dd9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "d9a717b0-aaa4-45a4-bf36-2a00158663b4",
        "cursor": {
          "ref": "a7f70d25-c52b-47d1-88d0-d592f33afebc",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "41289e46-5db6-4342-8372-6907c0883f98"
        },
        "item": {
          "id": "d9a717b0-aaa4-45a4-bf36-2a00158663b4",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "a9fc4e49-bf27-44d1-ba2c-485b5e172307",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 79,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}