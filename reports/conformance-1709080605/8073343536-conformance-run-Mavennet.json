{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "1c70b437-002f-4090-8acf-4533ae2a689d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "a1671281-cd3b-498c-8985-3e1635509c1a",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "db869d58-4fb9-4d4d-848d-51b997ca6333",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c895a690-cc86-44a3-ae9c-17c3a35aa282"
                }
              }
            ]
          },
          {
            "id": "ee63cef9-7e9e-4123-8a92-5df11f661edf",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "141c8275-696c-41c8-9b9a-0c4ea509350e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1ecf2b1f-2d7c-46cb-8c29-5e84908e08b3"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e17b5b08-23f2-4674-8316-5d81b3f039fe",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "af9cb59c-0d0d-4d29-b017-ef33b2f91f98",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9f9272d9-6edf-410f-b2a0-0a471b9b52fc",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "67b60e8e-a92d-4278-99e7-3fadecf43c29",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2ec3c4bc-0930-469e-b8f7-7b4a056f3924"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "05f08876-c338-4690-88a3-c7ad4670fd42",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b8a7b295-ba2b-43bb-90fc-d5d645c61c34"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f59d366a-7057-44b2-a869-95580d586233",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "37f8f9f1-80c1-4abf-9381-e122c29c1eac"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "af426c06-8ed5-4b73-808f-55721edec32a",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f8183626-8f06-4e29-9cb6-2eb20409e2d7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7a3233f7-a476-49d7-9dce-a3123eb0f757",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "457091e6-a601-4fcd-80e3-63c28be1d363"
            }
          }
        ]
      },
      {
        "id": "c188a40c-620d-4395-a4dd-98064106e56c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "71d2d8b8-5921-4f50-8349-e8b35fb7cc66",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7cbc281d-14f3-418c-b5ae-ff2ddead4b7d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8d31ffea-efea-4493-bcad-b542502c3f1b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c1803fb-8ce7-4ced-be01-a80aad09d8fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7369b2e6-3dc6-48d2-a15d-fe456eee65e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8911e54b-0376-4afc-964e-e34da7344ebb",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c7d8035-66c3-46ce-8cf3-f23b1d50aee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb3c5cf5-91dd-4820-94c9-2b2ed681571f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0224766e-55f5-4f12-813b-ed4633f7fb1d",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3211a22-2704-4468-bcf0-470ff39290b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f9afd78c-0ad7-4525-927e-8763828819b6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "30fdeda8-c061-4369-bd04-2f3daaac8add",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e0bc65bf-cae2-4897-a315-2bd734722cdb",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7790d38-b18b-4723-8917-1b265eb81017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bc553b77-df72-4624-b978-77d77b12f54f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daba573d-39a6-411e-a4c9-fa47cb5b3775",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a059c5c6-32ed-41b3-8a82-edfb7f5d8ba3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e279243e-c354-4bcf-bd86-2edb430c85bd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "418e77f5-8a87-48e8-84c2-0a439404b8ef",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a45b3731-c24b-4aa8-b569-6c9719e5907b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "35e6fe41-8807-4e66-9498-0e96a937e8fc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8c53c54b-87fa-47a0-9a44-c96f31345bdf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "3f42356e-ec37-40ff-ba4a-59cd8336792e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ec76a968-693c-4f9d-b5d2-35337bf9ea89",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d0c4741d-87b8-43ee-ac5f-cd11955fc517"
            }
          }
        ]
      },
      {
        "id": "5b135aa1-ca6a-4125-ac2d-a43038e7b0b1",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "151de963-6de1-462c-8b9e-7a83d9878921",
            "name": "Negative Testing",
            "item": [
              {
                "id": "300dd0dd-e07b-4eed-a717-aa843d485aed",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "33da89c6-cc73-4ead-99d8-82b2d3dbdad7",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfcf25ee-7527-48a0-a416-dcf76ca8a9a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58767b69-89a5-43cf-8b17-f59f52955b5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "171f9d84-471a-45ae-9b91-155364d77813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7cd63af-5db2-4649-820b-bd4f87154947"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcbaf87c-ee42-43c3-83c5-5a8fb54fa263",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11dcf9fc-18fe-403b-b197-4dbea7c6881a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63fe9934-b1cf-424c-8d3e-0b50cd7a85aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "727cdf55-1274-4df1-a388-da1832e6868d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b133227e-f983-443c-b707-05b4273ff247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c822191-bd6f-403b-8837-128fc4a7d9de",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bfd4bc9-8ae0-41e6-9f62-09ba16ed4d4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "105db73b-4304-4014-be38-8bb4de10246a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a1aa39d-c330-4889-953b-d8eb09461113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "808921aa-438c-4d7c-8047-ac96e0a68a28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f98973-9df9-445b-b535-2dad2324f039",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6b5a7bb-3376-4306-bdfb-8ced4350acc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c33886b7-26cd-44cb-b520-33d0b4f614c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11d93506-8f58-451b-ac78-f00db73f429f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d381dff-a941-4a69-8c97-9cdfa6733e5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "483cec5f-2b90-492e-bfd7-dab7709678fd",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f427348-bfec-48ea-8084-9fcdc10e5504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c761387f-3816-4894-868f-a71c79792cbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaaeaf7a-a029-4d20-aec9-0ae3b02a58ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bcb6dfc0-5b77-410d-a61d-4000dcdeb2e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa8c255b-e49c-4294-964f-3bf47b5f2753",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04165d12-952a-4578-ae9c-c173b622894b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df9e700d-c188-4cc5-96c6-52f297817cc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb4f0336-f668-43ce-a0a8-7e0bb3f7f98b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "355e02c9-9414-4f76-a2e5-58c6959a8b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12d8d3db-cd1a-4559-b26a-fc85048f525e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a635921-be2c-4e67-96e1-aff6e668c482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d0c6c9d-601c-4916-b493-750c8e0b4ef3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77988b84-1718-42f8-8747-9d80221b115c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90a94349-ca57-4fcd-96c1-117ac8d06a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bb9e8b0-eb53-431f-b32c-b8829dc6f125",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "865781f9-e59b-49e6-8d2d-ce0a3e8e8ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "174b00ef-302c-4622-954d-330c875aee33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cecfe436-d58a-416f-b921-ce6b9c4dbbf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3d88872-37a3-4681-8778-9ee54c86e237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbcaf7a5-1f66-4df6-8dbb-5b0632a70e33",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9414f6a8-509e-4d3e-9471-ae6cd24158c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a73374eb-3c2e-45d4-9601-80265dd9f964"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bed940a-6632-4f1b-b263-f8e7376f8a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca86447b-1456-490e-9107-8286f14f6e3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "783bf8d8-0d97-4972-92bf-64ee9d7a5fc8",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11629fd7-1cc7-4444-87b4-8e853755923f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94f74ea6-1d01-4fad-9bd1-c4c14efa84b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c9f75f-32ea-460e-b8e1-1eaa5546ca90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26f410f1-1f3d-4c5b-9dff-12f58fb4b59e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02e2df2e-2b84-4a79-ba5c-bd10068caa64",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f57efb-b8f0-4a70-ac77-1d333373bd56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fefde9c-b41b-4156-96ad-75c123fe50db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b16808a6-b537-4341-86fb-fb32f799f563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21a3f499-742b-4362-b704-6286f3c57bb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a29f5f-ea43-41b0-9f29-5df607e4fb9b",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "011e9d15-1613-431d-bf0e-e35030ba9524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a267f12f-c2f8-4518-ad6b-acc5e0e24de8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91ed69fe-c83f-4611-b938-f72ff65e3e0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3107fd7f-6c1c-4348-94bd-1e8dcd103890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8fb1545-2f21-4305-afa0-d3de7794fc12",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14cdc0c0-1baf-48d5-8b9a-6ea810009d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0ca9dd6-c529-4ea3-8e83-779570695817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e545838-74ee-48ee-b793-f4a0aecfb384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "974ce326-6124-4b19-8c27-ea05bb5663e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10b9f05b-1dc0-4dbc-bf75-d3f18301d9b0",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d131f649-5e23-49c3-819b-e693afd75520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af699e7a-60e5-48bb-8c1c-3ea76012470e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54dfc7bb-7af0-408c-b318-37ee14cb250a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed366597-9ae1-409d-bcb8-e3a0bb37ed08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ec104f-742d-4231-9b69-65f124abdab3",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00d492cc-ee05-4a50-801d-da7addd23a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ea396d7-11c4-4b96-a4f1-e6ca98aff442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2469663b-0adc-493c-b8a5-3f2e5558fafa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1497677-0599-4f77-91fd-01af64eef263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b920c437-902f-4e67-b1cb-8b1b1b45a81d",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a24de836-f15b-41f8-bc18-f5ba13d91093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ca3c639-7def-44fd-852f-e6323c2e78f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c962e3-c5f7-4245-8677-81a08ab36605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a94a37b-da15-43aa-bb5f-c35e4d2b9b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdb4a425-b257-43bc-82b8-613a6b422dea",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1396d0d6-25ed-4a19-b6d6-03a756dd1f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2772f93f-a626-4185-8bba-74276743e41c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03a4537e-2f6d-40e0-867f-a7b72926a91f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "71ac4e06-c261-4887-86f5-870be7ead50a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd3fec51-195b-4c3e-b4e6-52331a382057",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b248d3b-7840-4507-8156-e6a1a95dd14a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9d03e2d-84b1-4684-a8b6-26ab433b5989"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c06d5874-8111-4700-96a2-7e9ce93c0a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "db77643f-7b44-4e47-9de7-21036aa47a53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30672faa-f973-4cf3-9f91-7690ebb06980",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82aec5b2-9a08-4c98-8851-a358376e84cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d1f910c-49c6-46de-b4e7-58f3097908fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fcdbd08-36a3-420b-8e7b-da4bace875e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5130b57-61bd-4208-8331-8caf95e5f1b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f7f586f-39f3-4173-9c49-976bdde1433c",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aa63943-0d66-401e-a62a-f2327e577011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a992b64e-5dd3-4f6c-9db7-74aa842da89b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "759fb596-8be4-428a-b29e-f02644e2e23c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2c7481b-e747-459f-8669-5e24b4242903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ab44ca-aff1-478e-9853-a8de56f9bf87",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ed35bbf-017d-4c1f-be93-038d7ef32c72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "380dff79-6fb0-4753-bd3a-787b6080219e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8eece60-c25b-42cd-91a6-86956773e054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "61779618-c203-4d78-b4ff-c71f7cbf4041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "964ea03f-c11e-4232-a264-2505d82de19f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "612e4a8c-5934-4d0f-9b98-3bdb564f187e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1e5d279-a7d7-430c-ba89-c6ed6fa02afe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d87b0c32-4ba2-41be-9fa7-93724a0dab01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d3f8798-9d0a-421f-9da3-9b2fdfc6eaaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "217fe5cb-1b6c-4fdb-9b6e-9836ca75bcdd",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab2a6b2b-be93-4570-9946-9aca52c4ad1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f491d5cd-09c2-471e-aa93-8421704a2c5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ddc9013-e611-49b9-98ab-cfa4a6fff915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "43b70139-c1c7-4b12-87e6-636bc3b21486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88115b48-aa0b-4c58-8cd5-3b1ee1503566",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "520578c1-566c-40f8-9faf-8af9c618e350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cda672d-e4f5-488e-a255-f2edd9dd25f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1a81599-79a4-47b0-af2f-ce09d62a5c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a53e1af5-da87-4cd4-adb9-e6f8bff8f985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13b1cc31-0564-4131-b79a-b4c3100a364a",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "456768f1-abcc-47f4-ac29-8746dc3bd9e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff394dd6-54a1-4e32-96a2-c7c6c6605b0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee74bc80-726a-4cc9-9369-a3f398acae44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "44d000b2-2259-421d-8571-1f321184eb69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7bff635-872d-456d-bbec-2a7fb05b3ae7",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d2f93ba-3e8d-4a9a-b983-a7cdf23400a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2428beba-a1a1-4e78-8ad5-a9c6795cf171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7a83e3f-fbea-4e4d-9af0-73dbebf52806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "14cfd47b-f499-4365-a91e-68ce82c55471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "245f5633-45af-46d9-93e2-6eb764eb055e",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5612afb-48b8-48e9-b469-390a7d0a3018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed2cf938-cd91-4ec1-8d39-30c4cd9ddabd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "062c08cd-11f1-4c62-a2e1-cc2db9ab642d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "97de77a3-5e06-4ab8-b8d8-3d95cb584ff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3539f6bb-aac9-4efa-a31e-73cd886f724f",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb4ff8e-b889-44ac-823d-ad24325d7660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5a9173b-cd5d-4b56-a813-dd732964cc95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c3fe6d-b4b7-4ae7-bfd5-b31929bd1191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9776201a-b112-4712-8170-591a73b9ac1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93822e4b-aa39-494b-9013-9294c4c12518",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "302dead3-ff13-4a13-8f81-34b3603c8010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da75dc5f-bace-44f0-b0ca-ee1c64047f9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f9e5c2e-32ae-4a92-a485-09df656b3ecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c02ff6a3-bb5b-4a0c-958f-4eff93e4a0ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe909f5f-a873-4dec-b078-efa0df546bf2",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75edf3ec-72ea-43a8-b8cf-5eacad93d360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6469e600-3370-4bff-8987-8b059f15a415"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a811b329-a655-4f86-8fb7-c836944f4de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6d0eee2-3b0a-4f79-bdde-5ebcf556075d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c571919-6b9b-4fa6-95a1-05e41ba97e2b",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b79d350-6ee2-4394-b72e-6ea4021c258b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b5eaafb-c449-4a8f-9bd0-db158cfa4e34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "328cb983-ed91-4edd-a23a-81510b8b46b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "97a064a4-e877-4d01-a9c0-e074c17bb9af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f900a96-ee98-4b37-8983-21fabd8276ce",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9bc4aeb-7c4d-4fc0-9aee-7a2125356fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f3b7024-38b4-4411-8cd1-9f18b4b46973"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44775846-92e4-427d-b605-e1cc28c6c371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d35b972-21c5-4b24-8fdf-d2546e7484d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19169aba-782b-4b7f-86ca-1597ce209fea",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff3c5680-9840-4c21-b55b-5eafcae010ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48897fa5-b341-43e9-8a15-15d8725a00bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc6c900f-b701-45d0-8209-cbf5e0e89ee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f96dcc24-4725-4f8c-8ca3-3b6b51239eac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68d07214-61fa-4603-9242-c1e7577a215d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc03f53-4c6c-4ca9-b57f-920dee24dfbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c82f3ad1-74d1-43b0-a6c1-8f674466250f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dd1d60d-ed09-47f6-b37b-430dc8f02736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "518edb80-3e5f-4ec1-aa9e-6c27c1154fbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a11748d5-7c69-4936-98b6-d56417543594",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f779033a-afc4-4d4f-915b-ff0e917d3784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca23c4c8-e03e-4d0f-b20e-567209b41cf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed91cce0-0ecc-4fa8-bc82-63a2f9764a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "85bd9488-15b9-499e-8375-fc8294055505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adf3925d-705b-47d6-8669-2ec089bbae2c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5595d3fb-4cbe-423b-bb41-a6c8c069c49a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f87f1ec-4dc8-4e8e-9d76-1e1b2b309cb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a09a1cca-2102-47b1-8d5f-6ab0b0abd544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "eaff549f-e6ad-4513-82f3-1fa6d46ec7ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94eb551a-2c33-4011-872f-a51e228cca8c",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42efea58-ddea-4b61-afa4-d08023fffac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f28f1dab-55df-4e19-a94a-b7fa878722a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f300f0e-ffcf-40c1-9917-08ba1ac0c8db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a651bea-2f93-4897-97e6-3ef8635eae2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7b5a3c3-d11c-4129-a6b0-0f4978423504",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a12053e8-f2f8-47a3-814f-35f42b1ee3fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "288e0fe2-23d4-4372-9149-c085021157c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa0e68d7-8446-42a3-85a6-0d28037c2099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "17d442fe-f1b8-4b05-bcb4-0a215c06338b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b355e35f-286f-4dcf-8b6c-ae75959a9ccc",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deaeba46-81cc-49ba-9f09-f4967fc06611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b96ed091-e02f-447e-b89d-b52cf720e2b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e89b1698-468c-4568-b797-fd245dc5e2f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7ce3c60-1858-4da9-8956-43a722b36d4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec06ecc0-7c99-41eb-8f2f-f8461864907d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91bff568-69f1-43cb-b4e4-7192074716ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a70bf78-4a0e-42cb-bda0-af12f43d1877"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d33601e6-8e94-4286-b201-4f1a5f7ef9d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "30f97fc8-1da1-415b-bf42-faf442fdb413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaede53a-fb15-4019-b787-1eadb9601b11",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cd70e8e-089e-4702-ac60-a94dd1b810a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9e3f8ea-0239-48ab-b7b4-54fa80e828ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90419c68-fcd2-4e17-99f2-630af07a7fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ecdd21b3-6fa2-4cf4-849a-ba87745a19f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11c619eb-f40c-4e1b-8bc5-a79b5753f23d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab9f1bc-720f-44b6-b085-5ff95ee140f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06115715-4930-4e20-b946-968482d95b53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7d48f35-4e23-49f3-a33e-c311f74a9794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "d2233876-ff41-445a-bda8-bd3c6f01b69d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edaab50b-f43c-489c-8ee4-3234b9f30339",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b03ee034-7ced-4ff6-a1c1-fe3f57ca8b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3145bea6-b565-4ffb-8ab6-f073addaebaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f2c0bab-77fe-4837-b986-6c7ceb09942f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c517c2c4-5045-44ca-a2ec-710b1a1a5390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc286c1-7b69-4619-9bf2-42bba049e818",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5400f714-35b8-4bee-b4a6-c57f58500ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "044bea73-e1a1-41e8-9d5e-b6b018da45a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d5a31e-3e8d-4069-a233-b5229c17fc95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "54ac89ea-a3d1-484f-9e4f-9762db25b0db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13243f51-2865-4367-a9f3-e6b83b6763bc",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53ad6f9e-ca18-4ec5-92f7-6e55e0ae383c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "565ed600-e630-4796-9f33-912d729a8448"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "016018b4-59df-4c77-a042-5734f6fe3b62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aaed79a5-ab75-4281-9e11-4d89e80c2aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36dc97cd-9b64-4fde-9336-3a05652a8de4",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd74af2-ed54-4ac5-9a81-798107be1d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e506a76-d41b-473d-b186-07eb2f4573ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "353b90f5-895c-4c29-af1b-d510f107290b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "22f3f014-be72-44e3-9cb1-cb69e23f5277"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0feadcb-109c-433e-ac75-45387184a7f7",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e98b5d9a-5dac-4b8a-a3d6-385d6297afbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37a843f8-b826-41f7-8cae-5d57798964f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f57acb12-077a-43a9-b94e-59448cd04557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b01fe28c-42a9-4b6f-bccb-9512083c3350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d58a33fd-ee07-46d6-bf8c-8496d62df031",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e173d24d-7d4d-468b-aaec-d6869605ebe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b303217b-1251-41c5-93b5-1fe3b3a2df3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ca05294-abe9-4a04-8a74-2141f12138eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "75e3be45-e2c6-45db-9989-67b158152c15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6eed14a-7182-4012-b4f8-cec156814fa3",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "410b4b8a-4eef-4991-9f19-685da0b71ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebed0055-d354-4342-b166-53c7ccf2617a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc8e0bb7-99f8-4500-942a-a968ac469e86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5cc0fec0-a354-4a14-b51c-0c6438e5d691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa216e49-aabc-4df0-8279-5e7da29fcadc",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0605cf38-2468-475a-8218-0b6320fe329b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37b4d224-05db-411d-b7ad-2a1c1f96ca96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c6220b5-dc11-4fba-9917-6c239ac49263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "11b350ee-aeac-40bc-8655-b9e43d6f792e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d997aa72-7e80-42ad-b69f-20a466a5ac3c",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "735975f1-5c85-46b5-9a2a-a4685418434e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d7c1ce4-8a24-41e2-8560-397301f68c07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7907d6b3-cb68-4a27-8b68-ce9f88ca8ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "94a57b47-c070-4afe-8154-e7da65ca6432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad46e59-e078-4fc8-91fe-ac571475f0e1",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cdc0bab-6adb-4723-a1f2-f0b32aa20c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aad9aa3a-66de-4feb-9c67-4e40ea2b8b03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3ebe2ac-b6d8-4455-9ad5-66fe4241992a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "593ef1d9-aaf0-4d58-98d7-1eab7ef9a6a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e71a7d2c-f964-4b25-a0a5-4715dbe36dbf",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da2633e1-fbb5-4567-b022-e71078a1bdac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4d14798-36d5-4413-a005-254bdb32498f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54586851-684e-40fa-a25a-650981eda581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d20b888e-8382-4fe1-a6f7-ee0cd8be3b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1895d6c-dc41-49b7-8b20-677a67c3c117",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c48f41b-5e7b-4b59-a954-7dd0089ff915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cad1023-7d48-44d8-86a5-2c3b4202bdf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b6fd3e-644a-458c-afbd-9005cf618fa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "17ee2a87-5b68-4925-8c63-5d4edf78020f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e94bc9b-374c-4c93-930d-cf58f1abe5b5",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d005f884-0188-4294-aae8-fb916bed21aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc29ada8-73a1-441e-bfdf-c31d86baf4bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a38a2a58-0292-4887-b4d1-d0dd0f1d9b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5c438b1-4d82-424e-a117-080422c1d413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9da24bd-78fb-41f8-8cd1-47a1a3c827fc",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e398e77-50c9-44af-866f-1adcf6acab6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9da8e16-00af-4aec-b559-b4ee97cb9df0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "963fcf70-dc89-469d-afbd-66b589d1836a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "837c1503-484e-4b96-a6db-8db4d1ed2671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a5af8d-d8ca-4ef2-acd6-7baa0e0e3513",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d3703f-6f49-41cd-9f5c-4ace368882ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35c27e61-cb31-4c6a-aab8-fd1b413c4653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d85df7-784c-472a-a74c-aa87b17635e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "71b7c22e-b416-4df3-87b6-41458a1eac4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c806fe0d-65e6-48ef-84b6-029990ee2ebc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d15e5750-7e99-427c-90c6-17f36600a660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "357a3175-7156-43da-af23-4a0d3d5f4fd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "912bf2a7-3b94-4319-9f9e-3dbefb1660b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0bf6ce03-f608-4289-9ee1-8163f0d10b8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2564028a-04af-498b-ba78-b4c4d1f69a97",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c43ba0-75b0-457b-bc0d-5e2a333e39e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edc0c89f-18fc-4c0d-8edf-536bf70fa6be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3357abbe-1d6b-4f15-b416-205490e17c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a95f89dd-41da-4a3a-9695-01c060873aa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67f82e26-e4eb-43b2-bba3-0b076dbbcb07",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2e21b35-344e-468d-b201-f030887860bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38c08e53-3797-48f3-a397-b95fb800ba84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd24e796-4b8e-4fdb-91eb-8a6b24e27702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6204cc7-6344-42f5-b7c4-a9e9b0e5a778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f1ab99-37f4-467a-8bf9-5385323d4c0a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07ad184c-ec05-429e-94ee-3a119533f443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a81f797-777a-4dbe-83cd-cb7fa363a24d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6070e639-d4d5-4360-b0fc-f6040644c946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "61d8d4fa-8188-4195-b6ed-2e3a77ae1673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17753c54-0425-4eab-9509-6def3d16f4f8",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c2f5fc9-ae9a-4937-a17d-b8f9caf8068c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77cb2dfa-06b8-4ff4-8fda-e5094d7c1a68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87f4b655-a43d-46d3-ac1c-d506a093b0da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "43839b55-4626-4584-bba0-856425a1d85c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef8732d-35fc-4f02-9f2f-adcfe26defcb",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e21cbe58-445b-4441-986d-2c63dce09c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42aa51a4-20cf-4faa-8a5d-f987ace4f09d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e346de8-2cfd-45f6-9ee3-44d4e465a14a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d39268b3-f751-4658-8248-6449e2bfa742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcc0598d-c351-4df6-8e2d-5b9c7bff83f7",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff74ab41-c40e-4e8b-9b9b-baf703b88eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20202da5-814c-4b61-aaf1-202ca92971ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebbdb416-db7e-456a-92ce-82136cff674e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d00c4457-d04f-404d-966a-2b41dd4c90ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "284c24fd-dd27-498a-9660-456d429dca37",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45c13eef-8a8c-418f-a4f5-438b5808b687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7942131f-97bb-47b6-a7cd-6c909fd1304a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae811b06-d29b-4711-82a8-7016f8bf051a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c699f62-e5dc-4256-9b0e-d3b648aadd91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ba3f49-75ce-4265-bd57-833cf541cba8",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71fd5b55-ae92-4b6f-8367-7d10718faf1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc21f670-9f5f-4beb-b5a8-2b30fbefb1ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0656eea8-2ff5-4a34-8562-4b554fdb86e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e739b8bf-32fc-48d9-a4ad-410dbe18d045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cfd6072-751a-4638-b5e4-ecb03c369aaf",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "868fa838-3bab-4439-921a-e10c975a4482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa37f73a-4ecd-4e17-adbb-7b2480dd8aca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e6de94-53a2-4f5d-837e-109e2f96f9da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9d9278ad-6ccf-499f-b277-8f7b5de605e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a730af-2fd8-460b-b0aa-0dd3c1080da6",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60195a91-3e83-4a8a-9dbc-81d3c83d8503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a32c2eb6-4c9a-49e0-b1e7-6dcc36b0ad55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "864a0179-0c18-4ed4-bbf5-0e06935d5ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "030d2755-40ed-4282-a1a4-662efd5971bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8889055-4774-4887-999a-fa73b4b45ca0",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccfe7547-bb40-4fe8-abb6-57e7e7562966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60e52af9-9302-4308-9146-e2012654a2e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49e1b213-e91b-4d69-afb9-9cb614cbeb5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "eca12112-30b6-4d65-bece-f3044285d8a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87dbf275-1d5e-45a5-a50f-2b3d6243a2d3",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c810278-8787-4d6d-8399-f1e2d018402b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b40b3d78-fe69-4866-a433-9bf2e916ec19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d488371c-b2e2-47e1-81f0-19dfb2fb76c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "353b0507-b5b9-46b4-a77f-dc9cc1bbcd3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02b09aa0-4887-4209-a187-5ee7b2486777",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fced6793-375d-41b5-935b-0db9bfe7827f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fa7b1c2-c535-4267-83af-b4a21b14df3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd6cabf1-ab75-46e7-8479-0f04b722cb98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4429110-4b03-45af-8c0a-3305ec01cdb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea94928f-a35e-41b2-a33c-27f28c683270",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ddd53db-6c30-4b25-bc29-3ddd825d9410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d32632fd-f401-49d8-bdf8-b27411aec107"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a542f84f-894b-4552-9cd9-4c7c49ea5fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c80fe68e-9967-417b-96ab-c63c3034e19b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f9b3e6-0b2b-4e19-9bcf-e285fb2d5e54",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7da214c8-db0e-4a72-b73b-9d7586da3740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4b0fbd9-891d-4e25-8c52-d7f99af3002e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c62cee1-1699-48f9-a369-26b9492c9ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f27ff7d-89ec-407b-8a43-67750d4186b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa5d1056-b9b2-4522-a5b1-eb03fae32dfb",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79fe85bc-01b8-4508-b88b-450dc485d023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2126ee34-5ef9-4ce4-9e20-894c498dcf27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bba85b57-e595-43d9-986a-eb3e1797c945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7d1d03ac-3a55-49d4-8173-ec261ff8754d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c681b90-88b1-4a8d-8c8c-7dcb78f96dc8",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f56d3c-79d3-4eeb-9320-71eb3659f7f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80b16c54-8612-4658-8442-9227ecfba650"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab007010-363d-4e84-a18d-20a4c9b17ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "57f890e8-31df-438a-9f72-ab4659c7c9d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e667eded-5a18-4f63-8154-3db332e2fb6d",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e138ea0-1df2-4dae-9522-3859d682407f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e26492d-095a-4c90-bc75-a2f556a22257"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff4c48b-7604-437c-86a6-a666847f99ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "49db6e36-6a19-45c6-93fb-0693a0835c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69acec9a-741b-4a0f-a364-0e1668869a70",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b79007f-5a85-4a00-8659-862e0a2fe441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e78f1aff-cd58-43d0-bc09-5d23874e50b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12cadc99-43a6-47bc-8b78-f870574322d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "516ba279-5e0b-4c01-9a12-82477acacfc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c04b71e-db95-4f60-8e75-3cef01b2454e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a16080-4187-49d1-9696-8226d2cfe086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "563d4038-a39f-4875-be59-0b5ee9e88543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15ba2f99-ce1a-4832-841b-4a8096f6965a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f1d278b-a6e0-4358-b10b-1521c85b63e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd7bfc8-f63c-41d9-9823-d9915ede751e",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43c6eea8-a1ad-4fc0-9f19-1555049970e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8929fc88-d79b-49c8-b4e0-e44eaec70c99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35510535-37fb-42bd-b68f-e622a6e8f983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a757473-b8c3-4329-845a-e2dc4192a1fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7c5afe5-e161-429a-9c11-c83afe0fdf6c",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66b73ff7-72fb-4e76-94d4-6a0a61d5ffaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7ba63d8-e35a-4420-b72b-3516804fed8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96a0c53b-d25b-4aa2-b009-93b9a1936635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2ba4605e-565c-4485-aa9b-79141e3fdde0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1cbaac8-cd67-4894-b0a9-e21dd81f8f91",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b8cef51-b7a0-48fc-837f-ec3cb719871b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43ce7b88-da4b-46f5-9300-fa3171b7a4a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e96e0089-f342-457b-9001-d4afd8d2d574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2467f0d5-d53e-4496-9b5d-d91c3cc23d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c56e95b5-3cf4-42a9-b2ca-ede6f67ca380",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f2bc5d7-1f5d-435e-b5da-f229a09ab8bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f341325e-691a-48cd-88d5-ca14bc12d7d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ec06e3-f632-4dcb-8bca-3aadbc41ca77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "628c6a16-dbb6-4273-80f3-fb9c8b2fedaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa556db8-88b2-4c4b-8d9b-56b0ec4cf423",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff0d8cd0-4895-40ca-bead-dee4711ff96f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ec6a9a7-9ec6-42dc-801d-c88ffca8af3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49e3ffa3-7c68-487b-87a2-d698daa1cc75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fcbf4e9-0de0-44d4-bba8-4ed58b1011e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46f68916-cf45-4748-b54a-b237af986fd1",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a5e09c2-7e4a-4d22-ad5e-d740b914b816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b1bb5c4-9f03-43fd-a651-08eefd3b158c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "014f85a0-726f-4dac-888e-4af2ce2d9293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "850da201-0752-41b3-babf-4ea916544c56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e21d558-94d6-43df-8c0a-b0b100a1c028",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2080b5-adbc-4b08-8583-c4a9946e6503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "844d8c70-247a-4fff-9fa9-8a6e5ad58c0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7fafb21-a2b2-40ee-b922-cd6ca27d4f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "05dc7d87-df5a-458f-8c36-e94eecf7f226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14f842fc-f1d4-4618-8629-1e1b6e4f8a6d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91602757-ae73-42c7-8905-a786bd4f4408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ab8235e-8324-4025-ab5c-05f9f50ad604"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8400a45d-1784-4f8a-adf3-d941d4c55d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1482ac46-470e-4b0d-a56f-890c65875141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "900bc6ac-fce0-4ffb-ba02-255569f55fea",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d13e6ab5-da64-4dbf-8690-0cfb1d4843f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5770f008-6aed-49f9-9116-ee4e990a9641"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a450bde-afa7-4a02-9a57-5ec725f65ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "504e60c2-1c7c-4d97-9cbf-f85b2dbfd5b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6885f7d1-2eea-4c5b-af99-fc2f93f78514",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c7c7aeb-78ef-46bd-a458-89e02fb20d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1944eb7d-732d-46da-bfa6-55dd437ebcdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a6fa57c-dfed-44af-ae62-7c7133798a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b40c6642-0605-4a23-b481-92efbffa15af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8917b54-2844-408e-b6db-de4ce09c2383",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16346069-8be5-498e-a8ba-7d28626ff8eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6271fd99-1915-41df-b64e-d9527fc07c67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca0a6fee-e070-4803-8a99-ab564c6df183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ef5ef38-ed2c-442e-ba31-fc127d143b0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e61faae-d0c4-4b1d-99ac-f21a45f01fab",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ea63e0f-29a4-4a6c-9889-98e81e4e636a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a73ab315-2d70-422f-b0ab-078f0bf6ea90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f673fe8e-d9a9-419f-848e-28eb7585f02c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "71eaef43-0aa1-4f0f-8dcc-fadee3cf9146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9df977cd-3833-4c73-8463-afcbb7ea3b75",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7ed581f-a8db-45d3-9f2d-5155d6c8208b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "859316c4-1367-43bc-9102-1ad676bd7c13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01d3c7ab-dfbd-445b-bda1-9b540cf5a73f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1ce4340-751e-4631-92b3-7a4e1191dee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d99d8eb-8116-49fe-9baa-02ff6dd5d5c4",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "821af483-a563-4cf3-a6c9-8ed760d78fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "cd225a47-17be-4fe1-8936-8e098d7cdf0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11928479-bffd-4fb7-8ce1-296040b2caa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "882ef267-02a7-4377-b3ab-4860addccf0b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5bee2c35-91db-4fa7-93f6-dbbe381e1590",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ad27595a-6e32-4032-bb6e-3f436c984e1c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f2fb070-fc34-451b-b6a6-44f3c11c570a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31bc900f-7d60-4f7f-9851-fdde743e3ed7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e6aeaf6-84f1-492d-856a-15eae72525c8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29e81c11-db1d-4d88-97a0-da691214f3a6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "73d2ed56-497c-4eab-bf6e-7de7ed4acf4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f6e3ec33-3ae3-4b54-90f6-ee03b675689f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7dd5bb9b-c516-4024-a92a-e74d1fec2c93",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f7bea478-cb12-4d2c-a0fb-76e2d4ba1ede"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "aa0782e3-bd1c-4cb0-9d82-7d05057f4295",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8a17d405-0015-49be-89f8-74f7105b4116"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "478f5f24-58ce-4f6c-bc4f-69e94c642ab7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ef6f11fc-edff-4223-9065-1d7b38dc1489"
                }
              }
            ]
          },
          {
            "id": "3c57fffc-523c-42ce-a67d-f666c9d6d99a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3a38dcd2-0572-4e9e-9ee9-4f1e8ab70b01",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "7f144466-6784-4595-92e7-69939edb85a1",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9608a558-b41a-4053-908e-79470368f761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4dcdc6d4-fcc5-4903-854f-98eb22562818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d9af319-7135-49a5-83c8-4a2e405ffda1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "883f942a-f14c-4b75-9b86-90fbee0b9b74"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "500d6867-eb77-48e0-a181-e7fae8cfdc4a",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e6049ac2-0d4a-4443-8e34-052687824cca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6ac289c8-dcff-4cfc-b01d-f38e66157dd0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d76224d9-acb4-496e-b235-37da8a951151",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f624ac0c-ea5b-4fa6-b036-732e306b63f3"
                    }
                  }
                ]
              },
              {
                "id": "15c5a279-6b40-4334-ad0b-fe3e7492d1a8",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3cd46851-1412-4f2e-a982-983caacdf5ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c872575b-1c61-4c21-8408-4e8c911a0bb3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67502188-3d29-4125-97ff-cbe1b5fbe48e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1a978d02-a8bd-4c3c-ad06-dce0256e9f33"
                    }
                  }
                ]
              },
              {
                "id": "37d4d34b-d59d-45d3-ab23-9cf06a8d789f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c961f61-f3e6-4dde-b554-58185c78d0d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0106772a-04ba-430b-bc11-ad3f0e80b0a0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7c02a69e-2bef-4c59-af4a-9a9653024156",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d112a8b9-90a6-4ddc-a186-d784d94365fe"
                    }
                  }
                ]
              },
              {
                "id": "0c935a82-5a3d-476e-b55f-18a6494f5420",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "207a74fb-299f-4a56-b7a3-71b94828d7cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d6ae1b77-8009-48b4-a5fe-2e2b92075331"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3c6bc61c-d7dd-4fbc-8399-e642b08f8a5d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "e6743160-a218-4e81-b6c2-60c14c009272"
                    }
                  }
                ]
              },
              {
                "id": "4bc9ce34-e484-429e-8883-5f6facfdb269",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b0d3576e-8b02-4355-bf66-1b4373187df6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "859d5c14-5ecb-4ba7-9c88-64f544e875a4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74ef3f55-8ff0-4f32-b730-d9f88b1a1261",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "de7b379e-17a7-4751-a62e-c2c1c27d736d"
                    }
                  }
                ]
              },
              {
                "id": "87cda5aa-8363-406b-aa86-3dbd62f53950",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed063a40-f14d-4ab6-89fe-dd85f6f2d71b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "27188332-6c97-467d-b846-b2119b88f364"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "745b53a6-34a1-4953-958d-dfd46462a13c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e083b2fe-85d7-46fb-a78d-6fdca64fd896"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "562f9eb9-78bf-43b6-92ef-e9fb9c011bf9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3d58d39b-97ff-454e-8ca9-47c5b551a103"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "deabc4df-4dee-46a5-b0ff-b7fc99bfd1ce",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "30f776a1-bb4e-4d50-af9a-53686bdd9949"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e2b91a06-4a52-40f8-9e68-bb0f02eb4a57",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ada98d7d-7bc7-4ad9-aadf-c60d85368f50"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3217f9de-7584-49ad-85ac-a57413d162d9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "20c126af-0024-459d-bd17-9dc72c2953e8"
            }
          }
        ]
      },
      {
        "id": "4966efa6-dcd8-4960-810c-7768f10df5ea",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "138f05f8-3c5d-4016-a202-f29dcb843335",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7be04197-582f-492d-9d65-8bd5c79b3fa0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bc3c91e3-fc3a-4e8d-a44b-6c1f1f2d256f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8f581ab-a1ee-4c51-9b1a-222ebb14caf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ffc9db3-648a-4c21-b8d7-be1680ac5a47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f433a05d-17c6-4fbc-befe-95a3e4b0fecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ad0fd5a-4adf-44c2-80f2-4e7fa03bbcb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0e6e0fe-5b88-4576-9e9e-81091784aa1e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "215d53b9-7996-4a08-8f38-63e0d7ef8e7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fc3ad0f-ac78-4412-888f-abf12a6ae045"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9b20f83-469e-44f4-b875-23d795121620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "58eba03f-82eb-40c0-90dc-3fdb4e60da1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac6d5f8a-3ac0-41b3-b2e5-81cce6bc0bae",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "645c7ab8-2c7e-4760-b269-ad95cf54bf32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c12dce39-144f-4dd6-89bc-ab7ec26fbb48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07706a39-da3e-4353-bfb4-6cf106633a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d4b133d-7255-44e2-b745-df4bad97bd87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f256b94c-93cd-48af-8ad8-321d233fa229",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70e5332a-3286-406e-bb7d-3d5ff811c2f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "338b8626-397d-4c1b-b4d5-4f916705982a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84dfb3ad-4573-47ba-9e18-b819bdb7e976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "076b7ff5-88ff-4608-9d56-f048ad6e7c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad7ab5d-3eae-4620-9344-0b71da9f35b0",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "964bcd30-e5f4-4b95-812e-85ad19d4dece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbec702e-a911-4f27-a9c1-7a4299787bf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4fed2bc-fb8d-40df-9cf9-31ae1afb00eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "022b69e9-5e94-4031-9e1f-1014d0376ac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0bfec07-c1e3-4ab3-8def-3349423b8b3c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77cf9c8b-20b4-44da-b93e-a8face5c63ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fef2c11-0b52-4a14-a7c3-e87acb095f7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "408f8275-fe82-439a-8968-c7cd07cffb15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9ab7672-67c3-4be6-a7f7-ad27c6741930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18d42870-b7d7-4fd5-86d0-e7392a1e525c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8266767-05a1-4d10-859b-1f79ff0a2b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74276724-d37b-4af1-be87-301b24b7c3c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "686d9417-32e0-47f8-9b24-57f19d324d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "2683b81f-f885-4e1d-b103-0db5bd892936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4da1d273-156d-49c4-be43-434c28b305e5",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11cf7adf-4e2a-445a-a87e-cc2c8dd3a4a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57353cb3-e02e-4373-9372-34fcc9401b65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "847f6e94-68fa-4b8b-bab0-8167d8df0ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a70ee9b2-abe0-4597-ac7d-344a34be82c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea6e2ed6-bc10-48d8-83f7-949d9641a00b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47621d61-1428-4808-bc4e-2bbc19f591c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24c3e28f-3c5d-4fb0-b1c0-717e6aa72c1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "097be1ab-46d4-4c7a-a455-468ae7c45dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0214f19-76dd-41b5-84b5-0946141dafe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c8e2b12-02d2-4014-b346-a1c887ab88ea",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ed267b0-f7fa-483b-bd9b-f161a878fd4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e39226a3-b52a-4b85-bc5d-b9e8716534a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97650262-83d6-490f-9e3c-0a92710c0032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1513d70-ee8d-42a9-9fc5-d800ceaf51cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad730cd-922c-4a71-a0a6-ae26a060d167",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8286650-ae01-48ad-8d96-cac69caa17bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75d4889d-fbf3-4274-98c5-806d420fc75b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e956946-2f00-4028-90f7-04214c761e09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4d1de03a-cab6-4f5b-83e1-bf804e0320a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "258326ee-3373-4e2e-94dd-938a20b93d98",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b18667fe-70d5-428b-8c9c-2feef40d2624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b772647-7da0-4e42-8e34-7dbec647d391"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15b0bff7-c0d8-4983-83f2-e13ae08db0a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aee3d3c9-3298-41d7-8ed4-806776d56759"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06d16889-eb24-478e-8b66-3cd5c874dc23",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c7709dd-b117-4e34-8b24-9f52a7a7d6e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "582c3aca-269f-4df0-bc61-9607cb9f17e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b94364d8-be83-4a97-b3f3-10309397864b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2915ad81-0052-4a6b-9daa-606777515c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eae47316-5f32-4b7c-907f-8408f9edbf7f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b12e7ba6-0f57-4b59-97f0-6850c3104cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0836a395-ee69-42fa-af4a-da86e03a6c4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f01b615-e416-486b-a716-78fb5fd69830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1468ca4-56c1-4830-9486-cd42f5aba340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f475eff-5f00-4c79-864b-27ca5b7b617e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "660105e7-b63d-4155-9169-41b13807ca26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d984dee2-15d1-4f8c-93a9-4dd3424ba6bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daa033a7-5bd1-4f4d-8ede-4bd286cebbb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "74f98c30-d79c-481f-9b53-2097b17f54ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e2522c6-ab46-45b8-8716-30389d2010d5",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37c47061-3b08-4a69-b0ff-d188a904c75a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d83fbaf-5683-4907-bd6e-f674cf418d59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b632fc5-ffbd-4b6a-bb20-f6c8ee025edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8620a6b6-b608-444f-a2bd-b98b7dffb007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aa6de14-fdba-4a48-870c-bd0784515793",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fae75db3-9963-4300-a523-6013ad5eb9c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ca8258a-29fc-4ea6-8154-6c52f150a103"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f71dbf02-f21c-4416-bec5-091ddd096dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb318606-a88f-43a7-95d5-90571c1129b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5082401-8ddb-4f21-bc4d-74f56a2ea398",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38445ecd-0eda-43bc-8f3d-f4b9356e35b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a098869-93be-4cdf-ae1a-cd75f0d48bf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f50f83cc-9881-4775-b3f7-64cf2dc62610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "928a6154-a98b-417a-97bc-8182ab97a8ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31686e6a-5784-4f02-bd26-52af208a9cda",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f59a25e-3515-43a0-979c-04e9e7b07a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98486bbc-6cac-4c95-83ed-6f69eb00457a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37cacf50-cded-425c-9923-fc603928bcb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "383c81dd-d349-46b9-95b7-9155c0f00b89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf629ea3-cc1e-47e5-8628-faca1421ef2b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea78716-3de6-4fe1-8fb5-8bfabc485aa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "034de086-ce5a-46d3-bbd7-17eb90a0903a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed4e2d98-9183-4b6f-9049-d086d0b443a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cc314fb-5b02-46ba-bec5-34fac830a937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0495a3f6-45fd-47b0-a9d5-7bd8cb211835",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e42285e4-c9f9-418e-9053-ebfe73cf0891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e52a9ee-2c81-490e-9a80-99420e3fa354"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a67d40c-5288-435b-9668-94e49e5cbaf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef2fbad3-3f9f-4baf-b4be-06b0069e0b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59c6d32d-e1bd-48af-8d87-b1a90105a0f6",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4af7630-f61e-4a02-96fb-dfff4e056619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8c3b26c-dabb-44cd-ba7a-f9c6c1bafb70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d29fdb7-88bb-4737-a9c9-f798af352e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ebd883f-08ca-4fc8-89ef-aacac7d8a53a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45322312-f4e8-4547-b2b4-567e665f0d4a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ee46358-384f-4dfb-a0ce-2a32e219677e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaa86c9c-30a6-4edb-bea1-f79788f404ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa299456-2fae-40dd-806f-62b65cc43bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cf7b4d9-aa8a-4147-8707-cd822ee3a607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e1bd09e-56b9-4ad4-8705-071917d907be",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e45400f-edcc-4536-887c-3f34484761b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "888b6539-1d19-4a7e-bd31-861361afac11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a922ce0-9fe9-49a1-951a-220652f744e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "86c9605e-f3b2-4e89-992d-0baf16756247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "751ac0ba-a73a-4e10-b3dc-18489f111c4f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d4e1ab9-9a3d-41b0-a465-90a8dc117815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a779fe2-61d2-4ebb-a6f5-49ad8e99f028"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "167e408d-7e0f-4076-989c-d230d98cab64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f322f043-1ede-4b58-a89e-546cc8b24d19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14b8fd43-59c8-4886-89e3-07ba4f19ad29",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31616906-1cac-4d79-a0d7-6d2b67ca9da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c75b112d-d6e7-475d-9b36-6f0632eceecc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3651d61d-cba8-4dcf-a694-af91b73b5cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "279c52a7-6fe2-4bee-ba69-08c316d44d5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fec6ed63-16bd-4774-aae5-bad0e7aa3e83",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0574ac3-c1ca-473c-9197-6e579519aa9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea0b111d-e0c9-429a-8131-56bf491afaf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0366cda-7e42-497b-866e-c993a89e8c29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d2316ef-2a72-4e38-8114-762f16182b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cd6d0d4-5d8f-4b40-9145-b6f94e353066",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b4ddba4-4f2a-4e92-b201-457da276e1a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d3ff1de-176e-45bd-9c72-40ee95346885"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37bc4cc7-a002-4046-92ef-8a4c9b5c95c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6ace360-e0e8-4721-a6e0-4e0ab5f0b22f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cea1da22-bb81-4ef6-b1b5-46512be12887",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e67ba342-c57b-467f-baa1-f4444dc19b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a01b009-7a62-464b-90b2-729148748c03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0549686-5556-4c84-96e4-c083f25bd319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4734e52-1b09-42c8-b3ba-1c671974356a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da0442da-6bf4-4e58-a356-6b33735fde18",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7439f2d9-676b-4364-b403-5e657d49e421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e40e8513-4323-48c9-a7a9-6dc7618e5b34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3737649d-d575-4973-910a-2e0ba893700c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "153b15cd-0d79-4572-8749-1544ec4470d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dff32868-834d-450d-81d0-7a6353e75fe0",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e38dd373-2a30-4583-98f8-2f6ca4b16b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d43a614-4d16-4a59-af14-b3804b9c71eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c35cb15-c31e-4f42-a6cb-1c6de29063fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cfe75b4-78ee-4dc0-a184-687715ed29dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5de8206b-4408-4578-bf93-789fc45ed185",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c586bd87-5690-4853-91e0-32a0e099bc0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b23420f-55f3-4ed5-beaa-f470c0b66805"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e3cb698-9831-4c07-aebf-838aecd4ffb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bca65af7-652b-4d45-9173-c226932bd60f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0a747e75-7e10-4797-9b57-27092e346d60",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0cad6aeb-675c-44c4-928a-465b19b3e9f8",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f55289a1-f8bb-4e28-b76f-f7b580c2d70e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e4a8c31f-3486-4162-a999-c32f5a9a80a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff7064c-d9ce-4871-a3ca-1ab270ce20fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "82350a0c-578d-40f8-8580-5edc8f39f4f6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "72076633-4ad0-42c1-a9e5-1fca28c16c31",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fb56a8ab-f56b-4352-ba92-0fd5ac5c8328"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "895f65ea-6fab-4ab2-b942-2f75275aa8c0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a0bab582-29ae-4075-881b-2f238f704a4f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c38c0692-536d-4818-8c69-b5677172622b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e6c4abbe-d9c5-42e2-9bb8-01871bf00901"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9bd660df-e2d3-4527-8d7b-29ab8bc17077",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bfe14b00-6360-4781-a55f-5e247f6b26a0"
            }
          }
        ]
      },
      {
        "id": "41f92bc1-bec6-459b-8105-7923f0ecca2c",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "d87fd3b7-c2c0-4434-9f06-d64121b1957d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7256ada9-5919-4517-b22c-2c24fd3f689e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a82a9eb7-edd8-48a4-a166-ccb0f3fa8769",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea07195-ca44-433c-9f5b-362b5ab8da57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7e69ee8-a5ee-43ba-8f30-b2184164901c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "359f6314-9d4a-4afc-a736-c513b73d3c0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f280a2f7-fc1c-451f-8909-528ccbda18f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf30657-80f8-476e-bee3-6facd256350a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfc2e76c-15ce-4641-ba00-d94a5793ffa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4660c59-abda-44b6-b976-16d08a8655ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15658c95-782d-4426-afc2-37b1301a1137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bbbcf16-982c-4b56-88ff-5c55a5608350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb42354b-790d-4ec4-b04f-b009e59eacfe",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b077eaf-3196-4616-b072-5b86f3c0fe73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "261d8838-8757-41b5-8692-780617e3b2c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b7a022-043b-495c-a449-f802e16f8455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4818b3d6-bb4c-46fe-9399-d9bf63c6be34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7399d0ee-82d7-4196-996f-4d30cd8f897b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37af0fd5-bc99-41e4-9e08-80c2eb035887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95a532fa-05ee-443a-b965-b615151ca867"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfbdfb05-f8b7-4d42-a500-752f0285969c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b5734bf-de5a-43aa-bcd4-acd81c991ef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c90043a-0790-4b7f-99ba-ee2d1f98c384",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb6e81bb-c345-43eb-8cf6-ad862334431b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e59f8fe-6007-4d5c-a132-b8476ccd251f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8944c47-f218-4aff-b5be-94113cee3a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d3ee796-31fd-486f-bea0-df9af3638c29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc0a7a6-b9e2-4a8f-b54f-d95d4de4c71b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a641beb5-7771-4afd-829b-c3f5eed2f70f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ec75c35-f672-48a9-acce-0398fa3e3d43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c22fe1b-2d26-4084-ad03-7b940b2c4c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a49b2f7-9e0c-4e07-b3e5-a3f452b76ab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f269d31-7bc6-43db-9eb1-087c4281701c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eeb072f-8d3b-4366-b742-e4e13d8c812f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91e02c03-5963-499d-a030-3527435cffd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eed58a0c-7f75-4b60-a7ad-3e08710c8136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "8dfdb0a5-a917-49e2-bc97-85ff2254ff4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c09027c1-5820-473d-a87f-5d5f89245d0a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d2f7e12-0e34-4cfc-8125-24878a577563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca8473bc-0815-4cf1-b2a6-6e0c4d3c9c17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a0c3953-2ae1-46f1-a68b-721a5b326b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8be09b0-1365-403b-adb1-0bd2eda91f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9261ef5e-a426-45b5-8540-db4f414f28aa",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37e65dc2-fa96-4948-8c30-bde217c32b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "539241cd-6559-4629-947e-1be0fa93a511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33462410-b698-4533-a434-5559ce47e6e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd0ae35c-ded9-46fd-9361-7ed7d0618716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f72fdfcf-9b2e-4009-b740-d5907cbfcdc3",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "723af191-c112-4d72-a7f6-65a5204f9947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "920f5ec0-8a94-463b-a95c-b0807c71542d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a5277c1-0924-43b9-8158-a927d9327372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4e19d0a-b928-442f-bd87-2bc4d41e7199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e915ff94-f554-4fe6-a192-a8ed1a8d4ca2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fdcc7b0-55df-4cea-9189-d1ce4f4a088f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e66c11f-236f-455f-8bf4-77c89ad8a38a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19f4de13-2ed4-4406-bff2-ab40b59d1ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "163d444b-e482-4aff-8925-c7df8281f2ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9055f17c-5c71-448d-a247-adf56532d947",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e074dd7-2800-4be7-9ac9-1be05c3af5c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81ff9d9a-0d12-40cf-bfc0-09625354f46f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dca1127-50b4-4f82-bd6b-c2ef7d8d9052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7ba64917-9ce0-4c1a-ac44-de6fe9568ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "582320a5-f223-4251-a3b5-2bf14ba1cf4e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52f013cf-c1e1-4d48-862f-f5c59415597d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab660e8a-70c5-433f-8215-42752822c4ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ddbe54c-6ec2-4bf8-a9c2-5b27a0b588f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4dd253be-8559-4f5b-852a-311ffb03125c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e96567f-3581-4289-807f-fcae2fafcb48",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "373c39c6-3b6d-482d-a161-bb27e18f06e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3401f9e8-3e13-4596-b54e-8ebbb4aa468b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03e43978-0de8-4248-88a0-91cf5e329f96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "48ddb796-830d-4255-92dd-cb81055999d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65efbb0a-37da-4d46-b9a3-ad5c70736081",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2768497e-0c0f-4a3e-9ea6-ff6562240132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "044f115a-f825-4550-9855-9a956ef0ed6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ebb2246-e6e3-444d-b9b6-40d2c46fd5fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6e059a7-628d-445c-814a-bc7e195ff84d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "651faaac-ae38-4777-9a06-44849f960058",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e13d07aa-1565-41f2-b985-dd0fa17b5a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "598dd958-87ac-414b-9db4-43a6c614279f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8a311d0-54fe-4cd0-8e09-2ea44ad617f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7387b14a-5b6e-474f-ac55-388880100f92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2798e07-5d5b-40d3-9bab-4b3b96c43f29",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c2aa1bf-ff82-4aac-8314-78cffeceb574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4209fc15-e4b4-4727-a061-d579e83d8b72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "816f3aa4-71b1-4f3a-8358-fbe0af4d8d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d397ec7-68c4-479c-9656-aa15108d79ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75ecee41-068c-442a-8861-aca0779c5f31",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac0fbfea-0546-4c6c-844b-3be46ea9dc4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64421213-d495-4ba5-bbb2-de09258f4f97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91078505-3319-4d63-b7a8-8cc7b398a57e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0101698c-d926-4011-8ce9-2d69c84f16c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58164342-e257-4c49-b95b-fc8864f75bc1",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e00e835-8d30-4f3a-88ee-79c1c6358e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84a84307-6b15-4c3c-9276-bbb43b937e7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "974f1c08-61f1-4fc0-9c53-738530388991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64d86bb7-613e-47c6-918a-3ada310050d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5a999d4-d48a-4eb7-b789-2c41112f7dba",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30b57e3e-4218-4594-be50-ce4e11ac15c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "399c6386-e567-4c2e-98e3-3c064293082d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b76da62e-2d94-4fed-9158-7a9139a7f45e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3ac4669-dfb7-4ad7-9079-42a23ac196a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a6ec03-3fa0-49b4-b7b2-33df29903aa7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07107433-a1a1-41ff-99fb-432108e64753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7988eaf-ba1b-4acc-8837-4a976053adc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d36aa2-e90c-429e-bf10-bd2e5f2961b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b81bb3ae-3d60-495c-afe4-445278171626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "260840e0-8e53-4dc9-9b4f-b15fa6373f90",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff9b021a-013f-41e3-8bd9-b0c9c9e164f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df749c65-9040-4b7d-af2f-5ace3c19dbbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "098b4595-a1f2-4ed1-a5b9-4b6c1b684728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fca98c6-7f34-4af2-ad2a-b06897af63d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "577ea331-242b-4432-9800-f62683ccee73",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bad13a77-bcd6-4694-9c8b-411cd709e3e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e1779a0-19c1-436c-9473-6c21c3408f63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e3808aa-8178-4f0c-b085-f16bf7580c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69e5130a-0366-43c5-b769-2761bfe6b64a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d8d5432-2264-43e3-9205-1f7636061c9c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a98115-4d3e-4a1a-a18d-16acd3e2c39c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a067b597-810a-4310-a848-663b25126b50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b75bd2-2883-4397-b5c5-532945f507aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8da9275-25bc-4e6d-8338-e37876a88b58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edd6fb54-da42-4bbb-8f84-c2593e3b4ff5",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2728478-9819-4e51-8e90-1265a2435ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13940f90-e6bb-4988-ac23-e283b00b482b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dbd3e29-8a49-43ad-839b-50d005a87e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c92c822-608f-405a-b428-3f2c7b8694fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c11e6ef1-223a-49c7-8e6b-c3557ba83fef",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a4616d1-3f84-43fb-836a-8ef7d090008f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63c6c095-2ed6-40d0-bf1f-83629bc1a624"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec488c2c-b289-4a34-9fe9-38d2d0ef755e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14b8f1e9-24bd-4eea-a097-847f13e95cca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5905f63e-c1a5-40d5-ba05-eac311658cf7",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c69df348-a3f1-4ebc-9293-95c95970b911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34d967fc-ca23-4939-900e-32d3310c5439"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97eb036-244c-494e-b733-e8a16ce9fa29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24d5e273-80f6-49f0-885b-8a32b07c7a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a5bdc6e-f387-4b7f-873f-a2c838abbb62",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbbfaec4-7835-49af-a403-a538d8543e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bac80f9c-4174-4d6e-a98b-10b04b8c6455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b97e1de7-42b8-45f3-bfd6-407ca1cc62b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "49fad4b4-8fa2-4818-a290-5aa4b9ad5302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a8e6952-1bd9-4553-97bf-323d0e554ee0",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53dc65ff-7b6c-4b71-97c2-3ac38cefefec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cff75cc-1108-4ebd-a265-50bc9e07fb5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "843e8ef2-80bb-4db7-b9d7-da4b84f39c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1ac03fe-2480-4c3e-80f4-12d2f48ab601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3501e244-ceab-4ceb-83c2-d3f6b2387195",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f93e79-b6dc-43cf-a959-07f7afc149b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13fb0329-1203-4752-b782-bdc222e49d6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22e49be3-d2d2-4e1c-8ce6-ca73453dfac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6911376e-d6b3-4f2e-a5cf-c32a1064cae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de90e56f-6ba4-4c69-b6fc-93d4cafbaeb4",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ba468b6-9e09-4eb0-9cf0-f00a82284d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feb27180-8a62-43b6-ba71-f064b6307abb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02472687-4984-46ce-80b1-5c1c595305c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea8a2560-de42-4b17-b1a9-929b4ba27895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3557864a-3307-4cf6-86b8-191f5b5b3b16",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9efdd90-3796-4f74-b8c6-d370b9ee0642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08320958-3978-4c1e-9ac5-e644715af1eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1018e5b-856d-4616-bac0-c389a4e7df82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "130cb4e8-8495-4fac-b81b-a27abe79cda8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd864860-9738-4f43-8be0-bd6aa0606d93",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4bb9edc-2b87-461d-8f19-6618cb69574a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6325cfe-1ea2-4f19-981a-6384a886bd4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2736dc81-0d78-4684-b7f4-a2d2003ed5b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c044cb37-4b0c-4f34-9748-cdb1c8e1773a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03fccfbb-5b33-447a-924e-9c33c5ebb51d",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2bd02cb-8058-4f73-a7e2-6c8b84b5e11c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb16fa58-e6b9-40f7-8008-864849b77522"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58188fca-6c0d-4f1b-a754-c545a513bb54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcfe47df-52c9-46ca-be15-3ddc4237dec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5153a6e-26d1-457a-af2f-1f55fad03bcc",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff925ea8-e2d3-4bfd-9017-72452ab951e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01bcb1ce-5e02-49a1-b6a2-0e29a70cca68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd396053-6a84-4a17-ae70-1f64f0cb8e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f3cbf7e-2986-4f37-96e0-a9fdf3616fa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d4cc78e-4d32-438d-91dc-0b3181b3d72b",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf85add5-38e3-4b7d-900d-e8a6c0be4365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0accfa8f-88c5-4e16-8334-bdcab9ba0a4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bdc8a7f-8074-4be4-bbfd-a8225bdea015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b371586-30c4-4d88-962e-879c0fab077b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfaac02e-7b99-43f2-a38d-4bd80f3a32e8",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a27f1060-90fe-41a0-a3e5-53ca985bbda4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f9834ac-1db9-4d7d-8b9c-5e6e2c0eae2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d640851-a089-4b2f-914d-643fc77a515f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "956192f7-55da-469f-9c82-22a5d7835620"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8b5e9745-7fb0-405e-8698-43c424219534",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5848471c-aab5-48fa-b9a1-5e06f60361a1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc58517e-0d45-43a5-80ba-c560a0e24309",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8e4ed871-3e2d-4e60-9c46-3875daf79c22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5c80652-5127-41cf-b57e-34dd347add97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e937f126-b693-4a48-a0f1-d727f7aac474"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9cbe3cae-a516-449a-9bef-0d61ea9e485a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9833fcf4-85bb-42a5-831f-88e1f2cb04ec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5e2a7bed-c46a-4e1b-80d8-c0a5c6960f7b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "35acdfc9-a7f3-4948-abc2-db7b52035259"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b2cd4b11-4a50-436a-a3cf-3202dfc3f9bf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "eb322d38-455f-410f-874b-46174a721e0b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6c436ac7-579f-4a7a-a40b-314f9916b6b6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cf21256f-a071-48e1-8001-7d718e6647ba"
            }
          }
        ]
      },
      {
        "id": "dabdcd89-ce44-4d60-a6f7-b2aa80353997",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c1ec12ed-561d-4fbd-8bad-93219c9bfddb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "22356184-9f6f-47d7-bacb-dd2fb215c865",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "175ae3ea-9e52-4d41-b862-5655deef9f34",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62f2a06f-b622-4e7e-b8b7-a4d8fab6faf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b240468-e26e-4969-9a19-2f5c25a76401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b40c0fe3-511a-49b9-ba85-8f577f85db0c",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98653f67-4a3e-4043-bef9-33cb7ceea83f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed88c246-4c58-455e-a39c-26d7b329428b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b747e93-43d1-4231-a6aa-b8daecd6c17c",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf9ec571-39b4-4031-b13d-27297cfad771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "249ec6a7-1f75-4e31-b0c1-493806a78213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dde5b9a-e0eb-47d0-b2f7-7a67bd6f4424",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c68be131-21ef-473f-9ae6-e8485c8ad458",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c16ae23d-5762-40ef-b8b0-b275d6ca838d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a08592f-23cf-4765-8319-bf0f0fe40147",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51f7322c-0028-4fcb-b588-5c6ed1d1ed49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "749d7778-ad0b-4fd2-8f2a-79d1648b55e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f21f41a4-f6a5-4f12-b70e-7d53691f53a8",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "249b8d82-f7bf-4625-ac3a-f307d191e96c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "332dc4dd-4196-44ca-b1c7-0a9817c3e70a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a67e7f10-1182-429b-b4de-11db96a5f160",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c25724e-c725-48a1-9912-a6fe0e00ac2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e0fda7b-f664-412d-b05c-d4cc1e72943e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f7fca47-b83b-47b5-9294-3a5e8d25f8b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9b0065e-ed35-46c8-a886-3c50678a804f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11bdab74-5069-42b8-9547-ef30be47ab55",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fcec2af-0897-46ee-b409-8e4f252d7ae5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b153bcc9-af7b-4b03-a32d-677e4997e2d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd77d871-4a88-448d-b041-fb8ebccca998",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2babe68-0dda-4760-84ba-c261cb16e52c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2054e864-23a5-494b-8138-f7cc4f53e99a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe2adb4-69b6-487d-ac80-2a00c775a113",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6786a06-ed71-4741-84b5-f35c4bbef939"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7930fe80-f76b-4c6d-b29b-280a3660bd75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5c7c5f4-4c2b-4337-a5f2-d24c84983c4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d0de10-9c8d-4216-8601-deded1381bf8",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4abecc39-eb1b-4b26-8f2b-5bd68c872f09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48865dd5-572a-45c2-94d9-7e95ffbc1269"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "359c3b81-796e-4e95-b8f0-d85db2f8162d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d0ab654-9d96-4d16-8b97-7e17f73e8de5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57a203c6-9701-417c-a0d5-8983c71c097e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d608063c-0ffb-49f1-8b1d-f2ad1e2ee95c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58d1b9fd-1148-45f0-9aa0-2aa539bb0351"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a952a2-b3ed-433a-a730-6c14b5d59c14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f09567e4-650a-4402-b37f-df9b0fdd26e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfe68baa-6c30-434f-a69c-836932896b9f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f387a16-0cd1-432b-8d73-6750285bc8d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dd7061b-a287-4b05-b769-154adb5f21a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f156d0c8-5a3c-4fd1-8a35-343b7f62181d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0aa60fb-9384-4344-837d-bca567d97c6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "110560fd-c865-4c8f-863a-681d875f87cd",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e9f1a21-89f7-4019-8365-b9e867537951",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fd50723-43a8-41f8-b901-71502c490749"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa55bf3b-67fe-46c0-8fc2-d2d88bdacf08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f178433-2961-4003-9a23-d64261bc8707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8392fd30-a6c9-40bc-a5e0-7315d8cd540f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c985094c-925b-45cd-99be-9b84346c8f8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bee2018-3ae1-46bc-8125-164e7e0b0550"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a48df93-fd83-4e9e-89f6-b4ec02840e7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6633675-9586-41bf-9b4d-4bbe761940ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d43ad24-ad8a-4861-bf9c-0d54f08cd572",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5db30ec-19eb-4a7e-8a52-b435a62ab21f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "417b5391-23cf-49bc-8e5c-4056c13fb2cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85950b83-115e-4128-be3f-920c643eabee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d1de98f-f060-4fa8-8da2-a3bd313c79cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6edd1dcb-8e99-4510-9e90-b355b0178235",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31edbc40-7bec-4ebe-9b96-19110acf87c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5364f1b-3345-4c12-aedc-ebd6285ee6d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85cfe886-afbd-4d54-9a6f-ae3751574fbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95c99685-339e-4f14-9e7d-ab5c0dff84e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50af9758-8ffd-426a-8c5a-bd0844eeaaa7",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed176c54-812e-44f6-8a79-eb503ad7355a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82a6c832-35b8-4746-85bb-1558659ca024"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a06be43-0aa5-4416-825b-036c26269685",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e25ba1c-9d1c-403d-a54f-d9e4177665a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4edec177-839a-4d39-903c-0e8fe0f3536b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15dfa4b5-97b1-4be3-b3eb-9cac2dd7769d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dee84de9-11b2-477a-923a-d9e6d2ef3f46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94dea95b-dfa2-4663-90f4-fdcd021db174",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32e9fc22-f917-4d80-a69c-7f31de3e1cb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce6112d3-1497-42cb-9ce8-6e77588fbd96",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a3fe93-de2a-4834-b765-dcb047de6951",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d12d6178-5400-4d76-8a3a-25fca6b156ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1210129-8c46-416d-93f4-a974b8cfc5c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "312e9ce4-90ed-4cf4-9b85-115e68e97281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f79b4e0-2559-4ad4-95e0-cece6385b1ee",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83a0e040-bdd9-44cf-8032-258cc1f8244d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e5c5fa8-7558-4af3-900f-659362e4f682"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8e0c38a-8d61-4b5d-8125-f09c2aba549d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48fc8521-03ce-49de-a4f2-e6f7ff379974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba8e5edd-acdb-43db-ad96-1ba388a7fd93",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46ba9111-b5a8-49d2-932e-6f1d279f0d62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "014a39d0-6b2f-4ad0-a230-fcb9e1be7481"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f8a9eeb-a19c-42de-8fdb-1e58bfe5e5a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dd6a1ea-dc0b-4ca3-b6e3-6ce37140cf1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42b74400-74c9-4313-a3a2-5dd12124b8c1",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40202dd7-c7ce-4a15-9b17-0dc0c68ce5cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "649d2038-9779-47e5-8407-443409fc6e6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43a7d3d9-9197-4d75-b436-a02db572b43e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2449358-80e3-4eb1-ac75-c9cf78b9c6f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b41b9d8-1c74-4c80-8738-3ffe4ee47697",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e767b59b-e777-4a38-9307-1b256ad2f184",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6876b98d-e2b1-4fd3-af17-55785518d78a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cdcaf26-2771-47a4-9a43-268294b5baee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d26cfb07-4c8e-4fb9-84dc-ca31addaa78a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50a4d0ea-5c5f-4caa-8e9d-1ab68b13853e",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a3bed65-4712-4cea-b46a-cf83d7d53501",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "276785bf-718e-46f0-af21-47b72e528968"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d80171b-7b9f-4b26-80de-7aded6a14252",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2027029-2b8e-4cfa-b49e-17b2f8497923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d62135b3-542a-4fa3-8a6d-e133fd198ddb",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfc53439-c2e6-49d4-83cc-26050e83f0b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b144d9a5-f8ea-444b-a432-e36fb9fb44c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bdc2e33-b826-4a99-9405-75d92eb8e948",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7b1ee46-b585-4813-95ee-c5f079564ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0b20167-bb2d-430e-8ea6-985ad847648a",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f670d5dc-1074-4444-a3c9-fdf3c74872e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "795cca32-b12f-47e9-9666-aa4decd7bb9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a583ad0-ce83-4d2b-ab97-0e2fe951bf5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d57fb80b-90f8-4d60-ab02-bbc1272d3af1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c521323-d66a-4d28-8523-757bab8213a1",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91fad97c-8717-4534-bcb7-b1ec04dacd56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32388602-b4b3-4cf1-9f6a-8f7ffba22e95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "148dee02-8d2b-4613-9d3a-e08b1a217fdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62c91e13-2c96-47e9-accc-8a06069be1d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c14e49f2-161b-46bb-89ad-b4f923bdfaca",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba090bc-11be-4fd4-ae12-4a1e0fc218e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "231f3a66-c489-4d61-ac35-e40c973727d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07376991-bd23-42cf-8bfe-7434c1e882fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b40d6e5-f938-47bd-ab07-b5bdc1b1f558"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1887755c-91dc-454b-bc9a-9af3ac9da79f",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a6e076a-68b4-4537-85c2-e0fb68249a29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4c9d129-94db-4ff9-854c-c8a04c023103"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1485c522-95b7-455d-afaf-9443b84323df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d87ed0df-b070-4ad8-87ed-d03ee394a591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac149c8d-7b1e-47ec-a44d-d978eda258f2",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "683cf082-453b-479a-af5d-110449bf8260",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fb77a84-680e-4a22-a29b-3ca6033f991d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf70948-8b01-4620-8606-0650aced989c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68ede43c-d81a-46f3-a551-a86a01c712a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de77b2ec-8222-4abd-819c-4a341b3b7680",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31bd0c96-3561-40f7-9a82-2c67db81d264",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee16b8d7-817e-4bb2-a541-886fd3c4b642"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce7878df-08ae-4f6d-895f-66f3ab17a50d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9011d0a-b4ea-4be8-a25d-bebd8ad88af8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44bf2b13-a972-4783-9479-9e238b76045c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3d595f0-754f-45ce-b5a4-4d61dddff760",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45777815-394e-46bc-a436-4d0ff4fed139"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ad27a03-6b90-475c-a57e-553556736d34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5ce86ec-fc49-489c-979a-c228cad030e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3465350f-4643-4aac-9974-bb3e2736c29b",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a130c0e-afe6-47e6-a048-f53f90786fd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fda2965-2ff2-45d7-8fb2-3f032c043318"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59d9d1c2-9504-444a-aa7a-7959a5775b5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f7d4f86-0b11-4148-b408-cdaaf802d901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2566a4ff-61d8-478f-be2a-9ae463403d42",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3313f526-face-4b89-aa61-9a407cbebd43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f4e845f-f471-4278-a67e-f21905ed5c1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf4c2f3-2278-4e67-8458-8a8380a9af64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40aa26ac-a38b-45aa-a488-5d2e90c8e5b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0d160a8-7b7c-4c03-a65b-fdf64fd57479",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97ca7be-56c7-4199-8552-2cbe541dce0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7a6fa39-25a4-46dd-8693-8e6640d2e9a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "141e727d-e3a3-4b6a-aef3-d933edaede24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bcc0d2a-fde8-4b09-8013-5ee1c350a26c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29b6a96f-908d-47bc-821c-b40a2193056c",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db587cab-b73e-43fb-8f0c-8dc298eb3ff2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e54128c-1cc6-4c7c-9b5a-a59734a22f89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a4194e5-f4fe-4dfe-83b1-d5a63166319b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5bf91b6-73bb-4d2a-baa8-5bbc5b718fe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9b7df89-dd9b-43e8-ab15-10011264e38d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a99be2-5b2f-483c-9013-631aefcccc33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38fb2584-52d1-4a02-a714-90c56766fea9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d75742a2-dad2-44e3-a72b-b575eb62a0b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "184db108-3674-4d75-a40a-162a9c58e458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede097ce-3263-4fac-b2b0-3e93c22cb822",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae316c9e-fed5-4adf-9838-29da5e8b3f41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cb14d29-f8ae-4c3d-8c63-0d4853269911"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21cc03e6-2bb4-42c2-80ba-69820742394c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f8e68ca-114f-41df-abef-4744f9907cd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22540a42-4c53-4f03-bbcc-ad7ed7890cf9",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e319da8a-5ea7-462d-84f5-84924761945f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fdab457-2319-4199-9800-c10d07f872e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3b268d-050c-4c36-98ae-5b69aa8fe023",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad3987eb-ef33-41d9-9684-c3c48383f1d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ea97dc8-fef1-44a8-8dc2-7b24ff9c0da9",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0aa34f7-acce-4f3d-b6ed-8fe87a4c8e6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acfde64a-6467-498a-943d-201791a952de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b5aced6-89fc-4d19-9b38-4a0aff5db28c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd36e4a1-f3b9-4bc9-bf00-8ea13eb1731a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4d4b0c7-99cd-4bc0-a662-d2b0608c4eeb",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba1f534f-aa31-48fd-8819-dc2536d15f3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2cd28bb-8cc9-4c5a-a933-5ed58a7ded6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e20a6960-dda4-49d5-8b64-17fc10a56b71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b284d9cb-43b5-4073-8436-67071715bb01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "587ad757-d4b9-46e9-abc6-0f04ca51b05e",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ffd33c-b210-4777-bd94-9efb69b288ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10b3cc3b-7188-4f08-b9d3-7e77c4f16e52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "202d45a2-b0dc-43da-b042-f532cda8f4cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46841c57-0479-42e5-ac7e-edd3c5dd567f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f683c044-4f59-4e3a-88b6-8475c90bf957",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36e94174-8932-4d68-a5b9-8227cf8c9b3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "341925c7-d5a2-4d11-b571-80bb682faebd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea999447-88f2-4ba1-9ee3-5725c56bb70a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33a8aa28-cd4d-4abe-a8d5-a4cdb8ed4e02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e976c7b5-c70a-419e-ba3e-837062214ab5",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fea63f26-b36a-49aa-a129-d7d586ee32d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21b5ce8d-8013-4b05-a4bc-5187d9088aad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1eeac64-d127-40a3-b804-4ae9daef21a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be9340be-7690-46d3-a115-87f994c5826f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1482810e-2433-4680-8c66-a93e3e73ee26",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16c0a61a-112f-49e0-8ea6-fb51fd9c70c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9e89be2-9f7b-4787-9768-cfc6e8100494"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a23f479-b1a1-474f-a7a1-b8eea1d11392",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0d769b5-c753-48bb-bf00-10d84648c8f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b81e0ba-5ea1-4c19-bf77-08069fceca67",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff176ae-817a-49d8-82bd-8c0ad5beaa85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e03998a4-8aa1-4783-8e4b-bed124e2f51f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8e101c7-95a0-4361-887e-9e8e25fea231",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07a47ad1-3775-4a05-8cfe-3ca4b3a28da0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a48179d-a05a-4fba-bb08-41819fea85cc",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ec65d4-3c9a-4a46-9979-2c1452d3de5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6081247-1732-461d-b8ea-98eb2d0902f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b7b6c65-2748-4261-8607-a0f9c0d971c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59890909-9bf4-4749-a87a-aef3b2dfa743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1328c760-0f11-4ea5-8416-11c1f132bab6",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fca6e9b-d173-4d87-9e4f-b7a2c1d37857",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46ab318d-59f9-4167-80b6-b7faaa7a12e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d447cc4-8e30-4b27-b264-e615fa298fd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb794b19-9a54-438d-aa8a-a5cc6f6cc9f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1b0d9b8-9f0f-4323-b497-a0a283b2dddd",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31b411dd-4eb2-4b68-8636-ecec9e620316",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2215123-7c5e-4bef-b9bc-9bba7221f17e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e8a735f-2173-44aa-b765-d3e0b151bc0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81be55b8-d38c-4800-8d0f-9566a3f8240c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c4826db-5a4a-48dd-a77c-19dbc1182f9d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "963ed690-85e5-474e-b512-ee39cbe96ed3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a574e7d1-81cd-4885-a138-728ba2f81ed1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "693528e8-5820-4b24-9737-1220aec30de1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73a16be6-24da-456d-9e2a-a8cef6d3bcfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9498d059-f459-40f5-b373-075737735aea",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5201d7f2-aa1a-43dc-989a-5b85a40edfd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "996fa2bd-e0f8-4860-9712-abb75b3f22cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e5f1700-cf1f-4f6c-b76f-50275ea94db2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dc2465f-c59d-404d-ac8f-2e072b81be7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a37c53-8999-4b20-b7f6-6e9f775f2ed0",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d572f65-7bef-44a5-89df-921897c27141",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "204d63af-b7e5-4a82-9166-f383df394507"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79155c97-eca5-4899-98af-bd46d2d7b753",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5936646b-c123-4aab-89da-30b4667f55e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f127859-501f-4df1-b127-c7a28cdab909",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bada22c7-aa48-4094-9b29-404a84457320",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fcf0e94-b8cd-40f3-9375-4320c8e07e4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3bb6475-db04-413a-b4d1-4893627c0eca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d100dd07-7e3d-4d29-9485-25d25f74ba03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3716015a-0e90-46ab-a968-46043c5b501d",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff83751-defb-498f-a101-caaa75e75bf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91c413f1-e176-4115-b733-c0765895c061"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "473c350a-728a-4851-9c26-0b930311fbb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8faa830d-9ecc-4e41-aa5d-1d46f7444007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b029e5-0fa1-4b41-af8d-c56399e4b667",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fdf3baa-d055-46d4-83b1-390c5aeea858",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0b801fa-ba36-4c05-b020-7a9969e6d58f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c9d2112-6b4d-41d8-a5ad-2f86a48d35b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08aef794-8631-4538-90ee-6ab15df00eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4c319a1-1e0f-496f-808b-0fb0522eb354",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d9d83ee-253c-41a2-83cc-28da53ce24cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75740b93-d119-457f-bc31-5ccb33fe7eb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e960b8f-3ba2-4ebc-98d0-6502fefdbb00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8740df7-012d-42fe-b056-d12ac4148331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71bb1714-2c43-42fc-8681-d8122e958c64",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f484025-b805-4edc-b473-ffa4c7e4956f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "501ba77c-bf29-4c08-845d-6ca7830ed3f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9db5a0df-71a7-486a-995b-c4053ebfdc6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87bd791b-703c-4bf8-82fb-48b66aea3202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec3cd662-a7ad-4524-9ca3-04e57f490962",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a61f2527-c059-41e6-83d2-8ac9ca7b7d15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b3035d8-3461-470a-bbeb-a0a294933657"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81234b52-5b9c-4979-9840-ac4b8bb18582",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78033d25-4dae-4378-b022-4c7dfc2247bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4704a6c-e722-4ed9-b613-a87dab2e3d97",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92befbd1-2b05-4b25-b461-a3b6f16ce8f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2c0cb53-4d94-47f9-8a42-fdc143db0f1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a5b744-dded-47af-9915-7ea339244ae4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69d30211-d895-42d6-9ba8-f2fb5c03ba80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b5e3d3-b1a1-4b44-986a-4689cf1ab1fd",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c50b16aa-6555-4ae6-a8eb-1a7eba60074a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7836ca5f-4c77-4b5e-a422-b558be9300bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2d5ceb2-286a-4c96-9a8f-9b7612fd2f4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6717e5c1-5d23-44ca-8427-77aa331fc81a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9801cd3a-d3a2-4029-b4fa-ecc8df87a186",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d55d667-77c1-4e07-8c73-20fc7176a9e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f905b865-747f-4f37-8563-0ca1270f6cca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68465f70-b662-4e3a-81b4-8c3337a60319",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e2d2761-4818-4488-9835-3a4fbf15ed59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b3b04ad-76c5-47fc-8338-b47b7d284601",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae7876f9-83bf-4b13-8094-4b71f2edee67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea13b93f-17c0-43bc-8181-ed586ca8d68a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de2d9d56-15c0-4976-a341-8aae16590d24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f8781dd-e8b8-4fad-98b9-db5293a4201c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66b84802-3e93-4291-b054-005090011217",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea79ee4-b743-4dec-b7c8-cbfef78b5bb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1acc141b-7772-49b9-95fa-047efb7fd847"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14cd4ab9-a728-4224-8daa-8c65af245ad3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "139d32b4-9bb7-40be-befc-00f268a97ddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a89b4610-a980-4389-8c4c-0a3fd198c50d",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a61e8878-953d-4be7-a494-0d8e79977c18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1958a822-d239-4acf-877e-c06224324b09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b972b23e-f2cd-49cf-8a4f-3ce47ad6ae41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49f659e1-3c0f-430e-8d0a-07c4b884d59c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc90dfa7-1bab-4b6e-8da2-74e320a5ff31",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b731e21f-7817-4da2-91ab-2ea345c2f234",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0621bd98-4773-4f38-8b90-c4994a239079"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5ef5c03-8ec9-4b82-804f-5a54ff1dab17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9548171c-84ea-41fb-b36e-9c8781e56761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f207052-83f6-41d5-abe5-3d8c1f6a1b2b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd521d1e-bc2a-4adc-afda-037c1d58d923",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "520f1fcd-3f31-4107-9f83-56a6d0a29d2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5703a0da-5505-49a9-926f-765fde457d88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77097ace-e088-4f47-ae35-b953453cdf25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee50c5c6-1890-4039-9158-a96bb8c773fb",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c037ee0d-896d-4774-aae6-3e6087bcc9bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "722fcba7-ee09-4ceb-9311-874a6b76ed70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19fe67ae-7edd-4c5a-b984-8ab7480948e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10be3638-1ba1-4641-8325-5f9677fa0ffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e76ece8b-c7e7-42d7-9cac-eac8176e6a85",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9affd253-131b-4b28-b47c-a6dea2083a55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70f0c939-173e-4f64-9dc7-2764db107f52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57605494-f091-449e-9b96-8ff85febf39a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25e64783-3245-4b96-b106-77f091d8a6d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79c4495b-70a5-4c96-a612-f69a1aa87383",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "066e8fa2-df99-4bce-834a-89842e7641a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be3d5c99-599a-4197-bf83-4cae59e8a16d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e484e9-e4aa-4032-a469-84c3114fa689",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70afa9fe-6de6-4202-be26-d82410976652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d754d048-1423-4563-8143-1787ce4514f6",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e898bb43-474b-47b1-9d0a-b1bd5dd3919b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a46ab019-f5a3-4c21-a9a6-70192930acc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65944a56-7287-4d80-a78f-6245e3f6f7bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13a50075-62a5-4276-9a17-8fb6db7114c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba011f2-0635-42a9-b8ec-4619994ed922",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1c50425-6d3d-4228-bd06-7f9b21fa3068",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "210af0db-a248-4e86-9497-cd149769cea2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23404d2c-44ea-4c37-8dc5-d1a72fac7c68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e25dbaf-0744-4f82-8e54-a8e5b147bb4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e911ec12-db66-4c94-9f08-bc394f953ed7",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b21d8609-7d55-411f-9892-b7eda27d84ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32116885-5fff-431c-a0ca-14b7ee8139fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "778790ba-655c-44fe-9994-a56c05007423",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "547e1eba-3081-4fbd-a10a-35db4a62b9bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e22de8b2-bc3e-43f6-b5a1-9829fa1f72c6",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d6da8f3-2baf-49e1-95e6-a623a31adeec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0e7c3a6-37a7-4cc1-8958-86c46615e198"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b2c2ce-dc2d-465a-8fe6-ae47a949626e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89cb84aa-f198-416f-9bdf-4d88989370b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b86d865a-6ddb-4e68-9acb-04915d846365",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab9c0a4e-6d24-4ad9-b43b-3a8d782a8357",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c0b9a31-0020-4aed-80a8-1fe38fef7238"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd28911a-2eca-4379-a31b-ee56162d935f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83ce99eb-fac0-48b1-b3ac-9da4a3ebfad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "578465bd-7380-4cb3-950c-dacdd9002372",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be41aee1-54cd-489b-847b-370fdf0e9607",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3e6fbee-acd4-4c26-b7e6-3e6df943ef52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0a10068-1c38-4572-81b2-85d59e86a0b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2b10958-5f56-4f2f-8224-3cc350067b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d2c4d42-d627-4a6f-bef2-e5fa010ddb93",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b24b90ab-ceee-44fd-b764-7627465a2e79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91d1bc7d-35e7-4fb5-97c3-3edd76068602"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c6aae1b-4eb8-46cf-8994-8acfa4c8ae6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25045c5f-d0d6-44fc-a163-06d977a785af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3cd2b92-c130-4066-a1ec-62aab5e0ed8a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2d8a6dc-aaf1-4f28-a8e6-5fe0194ea10e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a38efe6e-b101-4f61-99e8-5f741ee2f3f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a72ec7-10eb-4355-95e3-ecf2fe8b49aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9ce6f3c-8276-4191-a287-f7f9988f83b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40e37cfe-48ac-4bbf-a877-8017a8eae2ca",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75a6fa81-d843-42de-8af7-af727fbf6ef9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea0554cd-cfa5-4e99-b1fb-9f7b09e04e6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "008c43ce-5345-4c67-9503-3ee413c20c80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "639bc9ef-b20d-4e88-a829-2adf3a17d90b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd15cf1-a448-4089-a2d9-a2c3c0daee2b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d6d73bf-c1fc-4907-9937-59bbad6b404b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a8f963e-e4ed-47b2-b8d7-0a9b21076896"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "879b6dff-0156-4462-8890-1167f810aa1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c5b6f64-0992-4878-997c-0577a8bc0d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1261a896-3c48-46c1-8d79-d7d3468882a2",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b41df082-dc22-4a1c-ab2f-d047e52013c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2d1b3f9-2061-47e3-bf41-fbfe29884437"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b2f1609-302e-44e5-a305-128a5154bdf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "531a0924-fc33-43e4-bf2f-bb4d8ac86ddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5779e09-a847-4ea7-bf55-9f2c915663fe",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "715f6a31-22c6-4ea5-b717-ee5d8235116b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "daf55260-e0b2-413c-a68b-00e8296ff11e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21288c1b-688a-4771-9ca1-16b07061c005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb963a5d-33c6-491c-b32e-a26030c83e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac09c35-5c19-401e-ac28-28c0c436a67f",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b429262f-67cc-4570-9a54-0b9c73aed794",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0597fb01-fbed-4d6b-9698-505f44fc44d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e2bee6e-cd78-4f17-afdd-446f7f6cc2ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "898f96b8-f554-465f-b843-c757b02339ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9559b159-9ee7-46e8-bb7e-fab44e0ed851",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d987d822-3055-4b03-8bd9-aea1f87beedd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32d1a079-b642-4f84-b8e8-6b8aa0fe88e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4965ce95-d20c-4f82-a117-fbdacfc52435",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae98b4de-42ad-4899-9cc4-1931cda53823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4b3923f-1cb6-432a-aff0-5f60fa367829",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "835e357d-eba6-4bd2-b345-9342a7b9d51f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea95aaea-cc08-49ff-b938-02784f8b637d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9098d601-b9d5-4ce8-8610-b68745586aa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b61c6310-a174-4825-a586-03a299180384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "193f052c-9a32-41cd-a92d-157fb6249b55",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2fc7438-a52d-4512-8526-f0c16674f008",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58407254-edea-424a-8a6a-4e28f2fa9a2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96333702-07cd-4b2a-b3e6-2bad32d88930",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "453f6805-3387-4e72-b267-e6e62aefa87f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1c644e8-6303-4e1a-929f-e94475d101b1",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fc38e42-505f-44a7-acdf-060a253ab6ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd8d761d-76a6-44a9-8137-81cc741311a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1797399-ec6f-41fe-8630-71ef03d1643c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "723fbb88-89d9-4e49-8932-092cc7555d75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e4e72e0-0699-4fda-bfd5-487f8010e7a0",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4464132-5356-4419-b66f-cdc6013e5f0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ea69cf5-df58-4493-bc09-1045d655934f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcdd07c3-8f4d-46f4-bc3f-f244be4d3a15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19da95b6-3a25-4afe-8ba4-9d56100b82a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac4ad170-4833-439b-8d2a-e39859faa325",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "531c2d95-810e-4ccf-a3cd-e06a7867d8b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "401096fa-dbf1-49b8-aa4a-63afccce73af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7aa7fe0-3825-4dfd-8e3b-74ff0de4587c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03522aa7-1a31-4927-9e14-84e9d900c460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a038b62-17d4-41ca-8d36-86838dc03ae3",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "707ea083-0e2a-4b69-b7a8-f2a25b1bcffa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea42f46f-84bf-4176-975a-528ed777f27b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1d5aaf-e473-4420-923d-16012648f122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "762bc4f0-51e6-4389-b79a-eb6b7c9592a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23a99fe1-3da3-4e2e-8e98-6aa7606b92e1",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd920ec7-6306-423b-bb4f-9b3cb7d6d422",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96c39495-da92-4038-8f76-7e357e795ea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5df7b2a-dc45-4d55-ac36-cc989622a1e0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e0602cc-cc82-4595-9986-ad9da53d71fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e57efe8-8192-4fcb-b9aa-387f40ebe9f1",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa940e2-833e-4175-9445-b568d5f4d432",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7899e9b-206f-483e-a18c-780c010b0d6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce3982d-afc7-4452-84c5-92dd08079c85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2711684d-bdf7-4f48-b13c-ea65ef6b18f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03f23dd4-c187-4a07-96e6-dd9fc98ada8a",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8906d90b-00ee-4158-97a5-b2748efd5f14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc9b0d22-baa4-44b2-9114-0af59d9ebfa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8a7ff85-aeb2-4f3b-bb3c-a39abb9327b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd5ea12c-7466-4200-afbb-1d2d729cd6ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6738962-40dd-4b20-9789-ff9302e0b97c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d28635-01de-4c51-8647-221f4c0444c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bbe81a1-0739-483b-ac3e-f6d6c6c5716f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4398f609-f501-4766-8509-e6181a6538c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f6dd21c-7169-40bd-91e9-7417e4b9b0bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e20f7513-68a9-4b83-81f2-5efd666bf6b9",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f3bb2fc-cac5-4ab9-aca3-736ee97b4e24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ec991c6-880a-45cf-8de1-8c9700e30976"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "165edd24-acc4-4803-964c-a5a6be954e41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86a1fc03-434b-4be1-ba09-119dbe348199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaf9737d-4ca5-42ae-b95d-488c47b2aad5",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "627aad37-b3a6-483e-8d0d-fee4c82fd5d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7b64ece-9e1d-4345-b799-6e791ea33dd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc4030f-9f99-40d5-8f3a-c9361347d87a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb708b66-2d6f-4584-ad5b-d12732ea6804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "743945eb-2703-486f-9f16-566a8a388bb0",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "609611ae-d635-405a-b7af-ef04fc0f183f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2fb2828-b684-4865-9fac-836d13d74951"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4b828fa-b530-4d78-b7ec-487d0b9a0a13",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c248be3d-c79b-4d8e-9cdd-0c975434746e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64b2c804-149c-4a9b-8985-87bd460e3162",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53d55363-e5e4-4f1f-b55d-0b6acd046027",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff5908e7-6b99-4b36-945a-774010abee24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c36dba-f017-4261-819a-3cf8b779aea5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "019a5edb-3638-47a6-b902-c7a448147200"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bdb848da-f5fc-40ec-8608-a97088a0e720",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "266b85af-5960-4bd6-ae41-f63c8c92d10f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "df54dd38-16fb-4251-913c-88c9a1a3243d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e5185204-fc77-4bbf-8bfe-fc334af5532d"
                    }
                  }
                ]
              },
              {
                "id": "26523d62-54d0-4031-8cbb-43c2955802e5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1f3f2caf-bf20-40ad-a6e8-0a2865fdcae9",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edaedcf7-ca06-4a85-9c15-71a151bce938",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "46ef1699-9de6-40c0-bb42-5c143a2af2d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09be6f07-968a-41a3-97a3-0723c4f2640a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f67a814c-02af-466d-8e1e-026f7b6043c2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "05783da9-4c19-434d-bc9c-55b043653745",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "443d8747-a71d-4c5d-9f39-bf76be677bae"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "702ec922-0daf-49f5-89f7-67d66ee2ed58",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8a55e00e-581e-469a-a6b3-f42b43c44959"
                    }
                  }
                ]
              },
              {
                "id": "68e80e87-76d9-48e8-aa5d-a372d22c438d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "0f9453ba-801b-4f0c-ab87-aea1cd4b4368",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83e19a7b-14c8-4bbd-95e1-b1fc5ecf6437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "784140d6-05e5-4d5d-a1b1-9fbba9392168"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c344cec1-b8b7-4fd6-b4d6-a92b2256eeae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c3e4453-bd21-412f-afd3-4d008827556c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ec4aac31-f61b-484c-a91f-7f083f6d6a11",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e5d1626b-c027-4822-a324-bac2a3980f6e",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c23366ef-93ba-43b3-ab15-b1e2f030261b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "fd37fc73-435a-4442-9f78-f0fee6ffd03b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5536388f-ed18-4016-b504-14266245e0b1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "862337c1-a01b-48b1-895d-12dd964300f2"
                    }
                  }
                ]
              },
              {
                "id": "23e85d23-65d0-41a7-b983-931420896457",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c6a5341-c924-45bc-84ce-5b0270ae9e23",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "effe99ab-c1ea-40b9-821d-d7c523b3fa02"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed1b8f64-f618-4722-ba2f-2c7673fc2212",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "34da83a6-ff1d-4164-828e-8701552e5cf4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "38a3571d-9e4c-488b-ab9a-64a81db9fed0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "678e00a9-d33d-48ea-9cb3-592569624574"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "061b4590-1aaa-476a-b7f0-a69a28460b10",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0943680f-87bb-4f8b-b67e-fa04ce815484"
            }
          }
        ]
      },
      {
        "id": "207ff775-cc86-4fa0-8829-225441a66efc",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b6dc1ed2-1633-4afc-a5fa-ed99116eb00a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "58aa5eca-c316-422e-8bb3-5ed9198c2cea",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bc01ce0f-5136-443b-a56e-9849917c9ed2",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d35bf6bd-25c4-46eb-8841-f8daf979e8ee",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "835c1080-620b-4b84-b109-3a22fa97ef7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4027a773-1573-4b36-8a24-ba50f4214dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3c106fd-b61c-492c-bbbd-5711e63368fb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ffe8ab9d-76e6-470a-9ec8-904bb6f38bcb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec0e512a-6659-416d-af7e-40f08a1c496d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c866f69-94b4-43dd-b05a-725751055755",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6464e7ed-a580-490c-8447-4526344c2d52"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "077a7f30-b45c-4b63-ba00-53eb44dcb4fa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ce7e0306-7cc4-447c-938b-ee47a8f0f397"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0eb36029-64c6-495a-8a6d-d683682f55e7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5334a16b-fab6-411b-b8ed-b76f47ca27c1"
            }
          }
        ]
      },
      {
        "id": "e34ebb4f-8c35-4953-bebf-2dad9845d095",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d3e18940-5cda-4157-9b6c-2d1c362b064a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "79824a1c-d1c8-457a-a93b-36e109f1951a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3ba2024d-eb03-4350-9b8b-6807de6150da",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c83a68-f191-4bcd-8f25-61f0bb4f81f4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a22f333c-5712-4108-8ba9-5a108afc7419"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2489b37-08e7-413e-b7f5-71ebe69349c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "62fd3a08-e4bd-40e9-b161-1555f94c702c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96eeb4ad-1d22-496f-a2ca-40a2ff69aa14",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "43c42a68-5dcc-4d52-b7b0-cdd0c6002717"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "803a8116-a6dd-4af7-bfba-0b24e2c092c4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e088b51-6171-439c-a6fd-37d463439644"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6f7691d0-cd1d-4f13-afc3-27d45859799e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3b7d759d-408a-4e92-af1d-da894cbc4fde"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f8527dcc-0d88-49b5-8e22-06ba08301aff",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a78f974c-fb35-4396-a9fb-3c3238f3177f"
            }
          }
        ]
      },
      {
        "id": "b0b94ef7-1cf0-489f-9738-a5af64893ee8",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "8a479f5b-6aa9-48e6-9043-0fdcade745fd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e9cbf33b-1014-4f89-9eb3-91e20710e6c1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ec091b57-ca22-423b-ab6d-06599a805f5e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c605994-f401-4db5-acbd-e6d1b4220f7d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94bdfcb0-7127-43a8-b381-289ef03bfe4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da39c44c-16f4-4c6b-9b95-fd800bdb9327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f1ea608b-fba4-4e2d-b797-d8eefd8d179c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4689f1fd-6ae2-4365-8ca6-6b2063ba429a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6115ee8a-a4d9-45c0-b59a-c98270419053"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "28bd1e15-a889-4ee8-bb8f-b91815794338",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f7ffc4ed-1c23-443c-8469-ed892b54050f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "60c3112b-290a-411b-95f1-ff2d018893a8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b9775bf4-f172-4ee5-9254-ecaa76970336"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eb5f043d-c6bf-4642-a3ca-197f98013f43",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6224d831-f32a-4baf-b23d-76a03d11a58a"
            }
          }
        ]
      },
      {
        "id": "4f64733e-2b28-4087-bc4f-a71912f040c9",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "644b4415-dda3-4aa2-945d-3ccaf0965cee",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "17609cd3-9bb5-43e4-aab2-3cc1614db2b1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b557c3db-a4a0-4fe2-a502-47557e8fc81b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "87cbe03f-abfb-4e1c-bf19-09e50ad14509",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f0d2038c-616b-4bc6-8b92-011ec9f9a46e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 110.54035087719299,
      "responseMin": 19,
      "responseMax": 1199,
      "responseSd": 109.40423651896637,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1709080373032,
      "completed": 1709080413900
    },
    "executions": [
      {
        "id": "a1671281-cd3b-498c-8985-3e1635509c1a",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a5336cd5-53be-4198-8e5c-5b7d67a99ef6",
          "httpRequestId": "6e24ae33-1581-4515-8695-471d0046ea17"
        },
        "item": {
          "id": "a1671281-cd3b-498c-8985-3e1635509c1a",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "e3450fe0-197c-471b-a528-5a0d8d06272c",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 0
        }
      },
      {
        "id": "ee63cef9-7e9e-4123-8a92-5df11f661edf",
        "cursor": {
          "ref": "075a07b0-baf9-4a03-bbf2-37a37591af2d",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e6554383-30ed-4589-9227-fe1471ac958e"
        },
        "item": {
          "id": "ee63cef9-7e9e-4123-8a92-5df11f661edf",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ea25ccad-1def-4f81-a43c-9b15557d3d9f",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 0
        }
      },
      {
        "id": "9f9272d9-6edf-410f-b2a0-0a471b9b52fc",
        "cursor": {
          "ref": "8cf784ab-3303-4138-a7e5-cac041fe345a",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ba935f5b-cacc-4619-af7c-fc8d52207eb7"
        },
        "item": {
          "id": "9f9272d9-6edf-410f-b2a0-0a471b9b52fc",
          "name": "did_json"
        },
        "response": {
          "id": "1e737084-39ef-4bef-b58e-73ce8990e905",
          "status": "OK",
          "code": 200,
          "responseTime": 625,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d31ffea-efea-4493-bcad-b542502c3f1b",
        "cursor": {
          "ref": "c2c00760-25a1-45d1-b502-d5f497bd3ef9",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "233a67a8-3525-4040-bd55-cf5197f5117d"
        },
        "item": {
          "id": "8d31ffea-efea-4493-bcad-b542502c3f1b",
          "name": "did:invalid"
        },
        "response": {
          "id": "39153a28-b3fc-46df-8333-2da7ffc7fa73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d31ffea-efea-4493-bcad-b542502c3f1b",
        "cursor": {
          "ref": "c2c00760-25a1-45d1-b502-d5f497bd3ef9",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "233a67a8-3525-4040-bd55-cf5197f5117d"
        },
        "item": {
          "id": "8d31ffea-efea-4493-bcad-b542502c3f1b",
          "name": "did:invalid"
        },
        "response": {
          "id": "39153a28-b3fc-46df-8333-2da7ffc7fa73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8911e54b-0376-4afc-964e-e34da7344ebb",
        "cursor": {
          "ref": "ad5fd3ad-9c79-4663-ba40-8519948635d2",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "bba3980e-d8a8-4712-ac84-fb66e7a1dce1"
        },
        "item": {
          "id": "8911e54b-0376-4afc-964e-e34da7344ebb",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "921ed6f1-fc65-49ae-a5a4-cee08f22dad9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 133,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0224766e-55f5-4f12-813b-ed4633f7fb1d",
        "cursor": {
          "ref": "da14f73d-db80-4d7e-b219-405b9ff45f9d",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f8f5285d-33a7-467a-861c-7d386fe09893"
        },
        "item": {
          "id": "0224766e-55f5-4f12-813b-ed4633f7fb1d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "3edb8e59-2412-49d5-826b-49d5a95ff9a1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 79,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0bc65bf-cae2-4897-a315-2bd734722cdb",
        "cursor": {
          "ref": "b512d482-8f49-474d-913d-0f9916744375",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "167d7023-4c22-41b7-9f6a-251a3d278ab4"
        },
        "item": {
          "id": "e0bc65bf-cae2-4897-a315-2bd734722cdb",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "31bc1bfc-82b6-4154-8475-4976ad9b9b77",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "418e77f5-8a87-48e8-84c2-0a439404b8ef",
        "cursor": {
          "ref": "ffcbd3eb-dd6c-414a-85cf-61c46672af47",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a28a629b-7e47-4b8a-a117-9883ae12956b"
        },
        "item": {
          "id": "418e77f5-8a87-48e8-84c2-0a439404b8ef",
          "name": "identifiers"
        },
        "response": {
          "id": "c8f7c2d4-681b-4a4e-a96a-d4eb21d91f4a",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33da89c6-cc73-4ead-99d8-82b2d3dbdad7",
        "cursor": {
          "ref": "c8466f87-2f6f-4752-ad67-1d1bb13c5d26",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "245e2f23-176e-443f-90ae-51e829c1b473"
        },
        "item": {
          "id": "33da89c6-cc73-4ead-99d8-82b2d3dbdad7",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9fb9c005-b86b-49bd-8ed3-2e2505b10329",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcbaf87c-ee42-43c3-83c5-5a8fb54fa263",
        "cursor": {
          "ref": "a520ea63-f227-4eb3-a5e6-aaa767939538",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e6863912-db71-445b-95d1-7252fff8b0e4"
        },
        "item": {
          "id": "fcbaf87c-ee42-43c3-83c5-5a8fb54fa263",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "4cdf52d4-b723-4602-a1d5-51b7cf9c8ab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c822191-bd6f-403b-8837-128fc4a7d9de",
        "cursor": {
          "ref": "8bfd5d22-21cf-426a-9f2f-a799df03a1a6",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2d3a9145-d54b-4726-af7e-b8fce69704b7"
        },
        "item": {
          "id": "3c822191-bd6f-403b-8837-128fc4a7d9de",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "1b754314-5e51-4686-a85d-96608b80d4f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56f98973-9df9-445b-b535-2dad2324f039",
        "cursor": {
          "ref": "f4f20970-a738-4c7d-91a6-5e180108b845",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5d1a10c6-76f3-4294-bfb3-5c8274efc542"
        },
        "item": {
          "id": "56f98973-9df9-445b-b535-2dad2324f039",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "0fc5d7e0-f09d-4868-b9db-4ff19fa85e41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "483cec5f-2b90-492e-bfd7-dab7709678fd",
        "cursor": {
          "ref": "cf30d542-af37-4658-bf91-a3078ce66e26",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ce270d89-2d13-4ca6-b847-31a33b064c0b"
        },
        "item": {
          "id": "483cec5f-2b90-492e-bfd7-dab7709678fd",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ca2708e2-cb38-4953-b11c-c1b700dd3031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa8c255b-e49c-4294-964f-3bf47b5f2753",
        "cursor": {
          "ref": "98a0e9ad-10e0-4690-91bf-1fdd751d286b",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "1f5a9326-256e-43b8-9849-9e9a8e97621a"
        },
        "item": {
          "id": "aa8c255b-e49c-4294-964f-3bf47b5f2753",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "7866f35f-8168-43a8-8fa9-d11992d5127d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12d8d3db-cd1a-4559-b26a-fc85048f525e",
        "cursor": {
          "ref": "e101d13d-92b6-4936-a9a5-d9c80a1e6d9c",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a7508b73-16db-42d1-9053-b1e2a0c2b6db"
        },
        "item": {
          "id": "12d8d3db-cd1a-4559-b26a-fc85048f525e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "2324adc0-69f3-43e3-a18a-ddfeaa2d90f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bb9e8b0-eb53-431f-b32c-b8829dc6f125",
        "cursor": {
          "ref": "c4943c6a-4c67-448d-b886-698143d016f2",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "99d60d87-dceb-4b31-b06c-a5ffa37c6a97"
        },
        "item": {
          "id": "6bb9e8b0-eb53-431f-b32c-b8829dc6f125",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b7f34ab2-2421-40c1-b8f6-3013c4845cd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbcaf7a5-1f66-4df6-8dbb-5b0632a70e33",
        "cursor": {
          "ref": "6811b3f5-cf9c-47c3-9cb9-58142e4d8261",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ccdecea5-92c1-41b7-b1a4-d5adf8b9dc0a"
        },
        "item": {
          "id": "cbcaf7a5-1f66-4df6-8dbb-5b0632a70e33",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e4d1096f-553e-4103-8315-8ff9ece68e90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "783bf8d8-0d97-4972-92bf-64ee9d7a5fc8",
        "cursor": {
          "ref": "8edfe7f7-afc2-4834-b1a1-db9956f8e949",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "9df6fd26-86ab-4dce-a5a6-cd01252de942"
        },
        "item": {
          "id": "783bf8d8-0d97-4972-92bf-64ee9d7a5fc8",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "381c982c-b95e-44b5-ac92-aa933f7c449c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02e2df2e-2b84-4a79-ba5c-bd10068caa64",
        "cursor": {
          "ref": "54cb2e9f-3998-445d-80c8-c34abb5b5029",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "399fe490-eca3-4ae6-963e-e3d711a71938"
        },
        "item": {
          "id": "02e2df2e-2b84-4a79-ba5c-bd10068caa64",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a7fd49dd-151b-48f6-8fd8-d273bbce224f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1a29f5f-ea43-41b0-9f29-5df607e4fb9b",
        "cursor": {
          "ref": "7f5e6eb7-9897-4d20-bf79-4855cf38fd28",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3e68b035-a4df-47a3-893b-8ca00be53c04"
        },
        "item": {
          "id": "c1a29f5f-ea43-41b0-9f29-5df607e4fb9b",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "72c5a1bb-475b-4fdc-913b-4221e47ee016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8fb1545-2f21-4305-afa0-d3de7794fc12",
        "cursor": {
          "ref": "45216fb4-3172-4ad3-a6aa-d871add2ff19",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a6ddf58a-d769-4761-901b-6eacde7254c8"
        },
        "item": {
          "id": "f8fb1545-2f21-4305-afa0-d3de7794fc12",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "9ca52a96-3ca2-46f3-ae84-f23f0ba30d96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10b9f05b-1dc0-4dbc-bf75-d3f18301d9b0",
        "cursor": {
          "ref": "77bd51fe-214e-49b5-b908-ff60c69c880a",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "fdc9d7fd-2703-4aa9-ac16-c382298c61e7"
        },
        "item": {
          "id": "10b9f05b-1dc0-4dbc-bf75-d3f18301d9b0",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "38907fd9-01d8-4792-b7df-a2a30f173b39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83ec104f-742d-4231-9b69-65f124abdab3",
        "cursor": {
          "ref": "2df11b87-1e20-464d-8fa7-6e8c732e11eb",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "295598d6-68fa-4c4e-92a5-c8dc4a773841"
        },
        "item": {
          "id": "83ec104f-742d-4231-9b69-65f124abdab3",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "dc53656a-90d3-46e7-9056-56a6706841ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b920c437-902f-4e67-b1cb-8b1b1b45a81d",
        "cursor": {
          "ref": "97ed569b-b81f-4378-88dd-1c044fc50285",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "044278ba-f099-4c2d-a718-e015bfec0084"
        },
        "item": {
          "id": "b920c437-902f-4e67-b1cb-8b1b1b45a81d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "0c544ced-b268-41b5-97e0-bfb9a8c26536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdb4a425-b257-43bc-82b8-613a6b422dea",
        "cursor": {
          "ref": "c9696cc1-4e20-495d-b4e4-2e0f74306c9f",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "68dbba42-fcae-4bea-a006-2ca062c0d73d"
        },
        "item": {
          "id": "fdb4a425-b257-43bc-82b8-613a6b422dea",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "672fe949-02c1-4473-b21a-f70b2c622258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd3fec51-195b-4c3e-b4e6-52331a382057",
        "cursor": {
          "ref": "e07b50b1-4c42-40bd-b88f-18d7ff74c110",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "4373b32d-31e7-482f-929b-7e23712f4a55"
        },
        "item": {
          "id": "cd3fec51-195b-4c3e-b4e6-52331a382057",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b41086e8-64d5-4088-8a0a-88462e306ac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30672faa-f973-4cf3-9f91-7690ebb06980",
        "cursor": {
          "ref": "60557758-5c1b-40d9-b104-f7bdd20687d9",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "bfa2a1f2-d050-40ab-95a8-07f91b439521"
        },
        "item": {
          "id": "30672faa-f973-4cf3-9f91-7690ebb06980",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "040e42e2-a13a-415c-be65-78f9c703be08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f7f586f-39f3-4173-9c49-976bdde1433c",
        "cursor": {
          "ref": "b828954b-4907-4b6a-87b4-d7f43e6a7207",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f914fc70-8fc6-4a42-8896-d28f82d5d125"
        },
        "item": {
          "id": "3f7f586f-39f3-4173-9c49-976bdde1433c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "d13d45e7-b7e3-4efb-bc76-726b3585282d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ab44ca-aff1-478e-9853-a8de56f9bf87",
        "cursor": {
          "ref": "f0661f40-9f39-4549-be35-20aacff9d80f",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "892bd5cb-c905-4815-803a-f3580c779870"
        },
        "item": {
          "id": "47ab44ca-aff1-478e-9853-a8de56f9bf87",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "29dce489-00ee-466f-b2bc-97b99aaaf285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "964ea03f-c11e-4232-a264-2505d82de19f",
        "cursor": {
          "ref": "620f5dbe-9111-4265-a179-d86dba93ec41",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "05551de4-4bbe-474f-8c4c-cbd1fd110a11"
        },
        "item": {
          "id": "964ea03f-c11e-4232-a264-2505d82de19f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "83b7d57c-3977-4ecd-8967-41c9671d6887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "217fe5cb-1b6c-4fdb-9b6e-9836ca75bcdd",
        "cursor": {
          "ref": "c5077b15-b872-48c1-8bf5-bb8bfc99cb56",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ccdc41ca-3de5-4748-9982-eae94d09a35e"
        },
        "item": {
          "id": "217fe5cb-1b6c-4fdb-9b6e-9836ca75bcdd",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "db6ae340-4ebe-4c85-b17b-80f6fb2ff83f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88115b48-aa0b-4c58-8cd5-3b1ee1503566",
        "cursor": {
          "ref": "662a5b93-3cfb-4af4-8f4f-42f06659e6be",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "84f65aab-7574-4426-9c7c-dc81d1096397"
        },
        "item": {
          "id": "88115b48-aa0b-4c58-8cd5-3b1ee1503566",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "ffe72181-5aff-4f38-8d85-ab3e5d4656f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13b1cc31-0564-4131-b79a-b4c3100a364a",
        "cursor": {
          "ref": "65e30818-fd10-4cec-8753-ffc98b098d58",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a55f214b-471d-4f07-bfe8-ca941f2268e5"
        },
        "item": {
          "id": "13b1cc31-0564-4131-b79a-b4c3100a364a",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "139a021e-26ec-4aa7-8624-7d05719080c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7bff635-872d-456d-bbec-2a7fb05b3ae7",
        "cursor": {
          "ref": "c4a82626-c7ad-4170-a73b-b16b21eeb2ce",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "7481a211-a7be-4459-a9cf-73a62ce59843"
        },
        "item": {
          "id": "e7bff635-872d-456d-bbec-2a7fb05b3ae7",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "fa828bfc-bf70-4a09-b121-ad434f02a59b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "245f5633-45af-46d9-93e2-6eb764eb055e",
        "cursor": {
          "ref": "cda6aa72-b4e1-4000-9601-22653e7c00cf",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "12c98827-ab43-4059-9b1e-28c8be5f31f5"
        },
        "item": {
          "id": "245f5633-45af-46d9-93e2-6eb764eb055e",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "6af2d7ff-1d8c-4460-9741-d323d413a245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3539f6bb-aac9-4efa-a31e-73cd886f724f",
        "cursor": {
          "ref": "109148a9-8c89-480c-a124-ea2fe2565671",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "19c4b5ac-961c-41b6-bb60-66892e89c67c"
        },
        "item": {
          "id": "3539f6bb-aac9-4efa-a31e-73cd886f724f",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b8b4bdb8-a874-4299-8167-6d4f130f74a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93822e4b-aa39-494b-9013-9294c4c12518",
        "cursor": {
          "ref": "09df15fb-6751-43c4-b909-53ccf37c8640",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5527da10-138d-417f-a09b-ed1a1237e9fa"
        },
        "item": {
          "id": "93822e4b-aa39-494b-9013-9294c4c12518",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "5b6aa699-1c64-411c-89ae-1532ff9bf69e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe909f5f-a873-4dec-b078-efa0df546bf2",
        "cursor": {
          "ref": "d53bbcf7-add7-4965-93f5-a744668a67a1",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a09d5e4c-8cea-4d21-ace8-9b1ec20bb696"
        },
        "item": {
          "id": "fe909f5f-a873-4dec-b078-efa0df546bf2",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e037dff1-957b-4af9-865e-84b6bf192d4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c571919-6b9b-4fa6-95a1-05e41ba97e2b",
        "cursor": {
          "ref": "cb444de3-741b-4960-a469-a8056be4faca",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ff0146b4-a9e1-48ff-bae0-e491f9388b4e"
        },
        "item": {
          "id": "5c571919-6b9b-4fa6-95a1-05e41ba97e2b",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "082c8a85-5f1a-4571-9298-6dfc07ca2bf3",
          "status": "Created",
          "code": 201,
          "responseTime": 714,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "2f900a96-ee98-4b37-8983-21fabd8276ce",
        "cursor": {
          "ref": "9e59b7f9-38a2-4483-855e-7d36cf35319c",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "3bfc1ecf-908c-4030-afb6-3fcf770b15e3"
        },
        "item": {
          "id": "2f900a96-ee98-4b37-8983-21fabd8276ce",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "13993a94-d9e4-4cea-a3ba-78a7447e35e1",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "19169aba-782b-4b7f-86ca-1597ce209fea",
        "cursor": {
          "ref": "c2bdfb76-f4a4-49c8-8023-5b8fb2c6b308",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6b20e8ea-d2d6-49cb-93fa-557fdd8fab62"
        },
        "item": {
          "id": "19169aba-782b-4b7f-86ca-1597ce209fea",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "495aa1e2-812f-4058-abda-590f3337a7a3",
          "status": "Created",
          "code": 201,
          "responseTime": 343,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "68d07214-61fa-4603-9242-c1e7577a215d",
        "cursor": {
          "ref": "5a348823-b0bd-469b-9c26-78cd03f58138",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ca84cf9b-2efb-4bc5-a910-05c133f8f022"
        },
        "item": {
          "id": "68d07214-61fa-4603-9242-c1e7577a215d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "59342af3-4c87-4e5b-81a3-0c0cea257381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a11748d5-7c69-4936-98b6-d56417543594",
        "cursor": {
          "ref": "b34e4ff0-477d-4805-adf5-fcebf784d0b6",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f7c6cb91-4def-4458-9a43-721bbb907fda"
        },
        "item": {
          "id": "a11748d5-7c69-4936-98b6-d56417543594",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "dce1c9e1-917c-44ac-bc83-686319e06750",
          "status": "Created",
          "code": 201,
          "responseTime": 356,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "adf3925d-705b-47d6-8669-2ec089bbae2c",
        "cursor": {
          "ref": "00eeea14-2056-453b-96ca-228404c1a1ab",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "e06265bb-4ca8-4eab-ae8e-ebe5c5d6ece3"
        },
        "item": {
          "id": "adf3925d-705b-47d6-8669-2ec089bbae2c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b0fcf4ba-eb4f-498f-aef7-0d23e5ce5c9b",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "94eb551a-2c33-4011-872f-a51e228cca8c",
        "cursor": {
          "ref": "0ac5e07d-ff05-41f2-b61e-aca06c6d29dd",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "89e57a5f-cf75-4e8e-8d38-7cd76e2cbeb0"
        },
        "item": {
          "id": "94eb551a-2c33-4011-872f-a51e228cca8c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "cd21ece0-c272-4421-8951-12791d365427",
          "status": "Created",
          "code": 201,
          "responseTime": 348,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "a7b5a3c3-d11c-4129-a6b0-0f4978423504",
        "cursor": {
          "ref": "7068000e-f382-4930-8103-0c0b61522028",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "4733b8f6-5273-4a74-a77b-375adebcef7e"
        },
        "item": {
          "id": "a7b5a3c3-d11c-4129-a6b0-0f4978423504",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "46b64b11-df21-4b06-a4e0-1f854832a882",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "b355e35f-286f-4dcf-8b6c-ae75959a9ccc",
        "cursor": {
          "ref": "0f258738-efc9-4c9c-bc96-118965df8371",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "99914331-6efd-4b71-a034-aa24d589118c"
        },
        "item": {
          "id": "b355e35f-286f-4dcf-8b6c-ae75959a9ccc",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "42b26b35-6666-4ac1-9a8a-0595c73ef053",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "ec06ecc0-7c99-41eb-8f2f-f8461864907d",
        "cursor": {
          "ref": "519488a0-9c3d-4b6c-b15a-f4e04968ceb9",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "bdeac3fa-d013-45e3-a755-a1c59a2d2ed0"
        },
        "item": {
          "id": "ec06ecc0-7c99-41eb-8f2f-f8461864907d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ccd690c8-2dcb-49e7-89d1-13f2d9b5e24c",
          "status": "Created",
          "code": 201,
          "responseTime": 379,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "aaede53a-fb15-4019-b787-1eadb9601b11",
        "cursor": {
          "ref": "ef5951d6-a786-45db-8581-ff89d9593078",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "3de18cd5-e169-4e00-8c22-a9f567472aeb"
        },
        "item": {
          "id": "aaede53a-fb15-4019-b787-1eadb9601b11",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "4ffbbffc-fb8e-4f58-b40b-750af66ca84b",
          "status": "Created",
          "code": 201,
          "responseTime": 326,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "11c619eb-f40c-4e1b-8bc5-a79b5753f23d",
        "cursor": {
          "ref": "1c2b5e36-7b32-4d05-86e8-1d9cf3d06512",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f94159f4-beee-4cc2-92bd-657ade11818c"
        },
        "item": {
          "id": "11c619eb-f40c-4e1b-8bc5-a79b5753f23d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "9c9355af-f218-4335-8423-c9e56e2a7016",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "edaab50b-f43c-489c-8ee4-3234b9f30339",
        "cursor": {
          "ref": "24bcc73c-5086-4993-89f7-11abf614a4c6",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "539e0577-710b-44fb-a5e4-43b294cd1c75"
        },
        "item": {
          "id": "edaab50b-f43c-489c-8ee4-3234b9f30339",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "fd32cc4a-c447-4d62-b07d-10f0966da0fa",
          "status": "Created",
          "code": 201,
          "responseTime": 339,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "ccc286c1-7b69-4619-9bf2-42bba049e818",
        "cursor": {
          "ref": "64ecd811-8838-47be-8c7c-35ba959151b1",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d3a4d502-1b3d-49db-a55a-655787c859f9"
        },
        "item": {
          "id": "ccc286c1-7b69-4619-9bf2-42bba049e818",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "add11762-4e94-4dfc-a38a-0e7aa5b4d629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13243f51-2865-4367-a9f3-e6b83b6763bc",
        "cursor": {
          "ref": "8ee0e2f9-ceb8-42e3-90d4-1a370f6957fc",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "648341f2-a2d5-4b41-b20e-3f00d85ea5d0"
        },
        "item": {
          "id": "13243f51-2865-4367-a9f3-e6b83b6763bc",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "30b9cdaf-686e-4e10-b233-56a8305b9098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36dc97cd-9b64-4fde-9336-3a05652a8de4",
        "cursor": {
          "ref": "397941b0-ae52-4187-a574-79491a7d3537",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "42317666-bf39-4832-b85b-baa02630d603"
        },
        "item": {
          "id": "36dc97cd-9b64-4fde-9336-3a05652a8de4",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "2b0aed7a-27f5-4ef7-bece-5a904e69475c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0feadcb-109c-433e-ac75-45387184a7f7",
        "cursor": {
          "ref": "a21e33f5-8a07-43d0-b61d-f2f7df4d0b4a",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "4714e647-6b06-49b5-8469-f40ce388c916"
        },
        "item": {
          "id": "a0feadcb-109c-433e-ac75-45387184a7f7",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4712011d-1321-4b7e-becb-3d8c6b966f72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d58a33fd-ee07-46d6-bf8c-8496d62df031",
        "cursor": {
          "ref": "0d226a03-b5e0-451c-a392-528368c4cd44",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "38693230-b52c-432f-ae6d-66a0c597c89a"
        },
        "item": {
          "id": "d58a33fd-ee07-46d6-bf8c-8496d62df031",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "10776af0-4838-4bd4-abe7-ae00b4d7d8d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6eed14a-7182-4012-b4f8-cec156814fa3",
        "cursor": {
          "ref": "7a72eb86-a6cd-42e0-bd29-d0b411aa84eb",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "caed9dd1-5cbf-4807-a350-584598c0c1aa"
        },
        "item": {
          "id": "f6eed14a-7182-4012-b4f8-cec156814fa3",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "adfcea1f-7c4c-4fe3-a5b2-fc6a46385cc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa216e49-aabc-4df0-8279-5e7da29fcadc",
        "cursor": {
          "ref": "304990fd-915c-4013-9f3d-324c44295c02",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "baf09161-06ba-4da3-9d3a-c68cb8070cdb"
        },
        "item": {
          "id": "fa216e49-aabc-4df0-8279-5e7da29fcadc",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "5fcc5dd3-05a2-4411-9526-3d22bda48ceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d997aa72-7e80-42ad-b69f-20a466a5ac3c",
        "cursor": {
          "ref": "0cfe93d9-ba1b-43c9-b8d2-119d9386e98e",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "060a6e8e-c7fb-4bf4-9c3c-ea07adbbedd8"
        },
        "item": {
          "id": "d997aa72-7e80-42ad-b69f-20a466a5ac3c",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "4464d8aa-34bd-4f69-b5f4-e0f6308c56fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dad46e59-e078-4fc8-91fe-ac571475f0e1",
        "cursor": {
          "ref": "5229f0e4-1d63-48c4-97fe-d2411e460d57",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b951b9c4-f510-4eae-9c5c-b0d888f6f5bc"
        },
        "item": {
          "id": "dad46e59-e078-4fc8-91fe-ac571475f0e1",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "82c1cd4b-0dc7-46ae-aefc-0e4d21971215",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e71a7d2c-f964-4b25-a0a5-4715dbe36dbf",
        "cursor": {
          "ref": "ccd33cc5-47b7-4fe4-8bee-6cbb41884a28",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "df5193e1-ca94-4482-a561-8361d94466f3"
        },
        "item": {
          "id": "e71a7d2c-f964-4b25-a0a5-4715dbe36dbf",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "eda30795-582d-4b17-9bd8-fdc4a84efb4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1895d6c-dc41-49b7-8b20-677a67c3c117",
        "cursor": {
          "ref": "139fa017-7836-4a26-96e7-ac6a406cbd3e",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "23c9208e-9e34-4228-8cfe-3312b69d6117"
        },
        "item": {
          "id": "b1895d6c-dc41-49b7-8b20-677a67c3c117",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a1ab313e-09ed-47a1-a8dc-4d60e53523df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e94bc9b-374c-4c93-930d-cf58f1abe5b5",
        "cursor": {
          "ref": "32653f06-89e2-425e-ab48-00b7697f9c00",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "f85d1ad1-ee6e-4d25-ab39-0de1bddca8bf"
        },
        "item": {
          "id": "2e94bc9b-374c-4c93-930d-cf58f1abe5b5",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "4a5d951c-7f3e-433e-ba5d-7147a7bc14c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9da24bd-78fb-41f8-8cd1-47a1a3c827fc",
        "cursor": {
          "ref": "8ffd8d0b-74d8-44d4-806a-41eccf30bb3d",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f6349076-a284-4710-964f-946aeaedf66a"
        },
        "item": {
          "id": "c9da24bd-78fb-41f8-8cd1-47a1a3c827fc",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "8f06bef7-b52b-4c85-8baf-77c3460d5cdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a5af8d-d8ca-4ef2-acd6-7baa0e0e3513",
        "cursor": {
          "ref": "a0d88271-5743-4c8f-915f-2aa282e921ca",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b01b51de-88da-482c-ae05-5351df4f804e"
        },
        "item": {
          "id": "91a5af8d-d8ca-4ef2-acd6-7baa0e0e3513",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "ff8b9f55-1ddf-4c42-a885-02ee897a56b4",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "c806fe0d-65e6-48ef-84b6-029990ee2ebc",
        "cursor": {
          "ref": "b8578e58-9848-47a9-8da4-0d0c770295aa",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "9f28e968-dee6-467b-922b-0874904180c5"
        },
        "item": {
          "id": "c806fe0d-65e6-48ef-84b6-029990ee2ebc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "215f73d1-437e-4466-bad8-c97c65eb23d1",
          "status": "Created",
          "code": 201,
          "responseTime": 326,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "2564028a-04af-498b-ba78-b4c4d1f69a97",
        "cursor": {
          "ref": "d2463dc2-24df-46e0-98ff-953ff6aa8e41",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "cd468a06-43b7-4028-966b-7a0f5b8f7d5f"
        },
        "item": {
          "id": "2564028a-04af-498b-ba78-b4c4d1f69a97",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b25b3146-3c67-4b73-9a9b-67ea127386b9",
          "status": "Created",
          "code": 201,
          "responseTime": 324,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "67f82e26-e4eb-43b2-bba3-0b076dbbcb07",
        "cursor": {
          "ref": "2e0845ca-9183-4f5c-a778-902c256f6d3e",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7663ba7a-7295-4169-bb98-da3d3ae1ba6f"
        },
        "item": {
          "id": "67f82e26-e4eb-43b2-bba3-0b076dbbcb07",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ef02da35-07f3-48aa-a406-03cef4d1048c",
          "status": "Created",
          "code": 201,
          "responseTime": 425,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "36f1ab99-37f4-467a-8bf9-5385323d4c0a",
        "cursor": {
          "ref": "0aa6eb8b-772c-4309-977e-5d247b8f9877",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "a19e76df-95ef-438e-ae0b-bfb57e5aebab"
        },
        "item": {
          "id": "36f1ab99-37f4-467a-8bf9-5385323d4c0a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "cc0baab2-8557-4db6-8de9-6f3f3965a7da",
          "status": "Created",
          "code": 201,
          "responseTime": 368,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "17753c54-0425-4eab-9509-6def3d16f4f8",
        "cursor": {
          "ref": "a438f8d7-6039-4cef-a8fa-839b3d00b4fe",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0c0d19f4-2d07-47ac-9f4e-a3cad5aadb3f"
        },
        "item": {
          "id": "17753c54-0425-4eab-9509-6def3d16f4f8",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "a2c8fe0f-8e32-4310-9d8b-4a6a847c181b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef8732d-35fc-4f02-9f2f-adcfe26defcb",
        "cursor": {
          "ref": "37d07971-a550-4847-8927-ac94f9b8e082",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "637acf7c-525e-40b5-aea5-88d803b2c812"
        },
        "item": {
          "id": "8ef8732d-35fc-4f02-9f2f-adcfe26defcb",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "d04513cb-4bd8-487c-8ba3-62fc7b2c5346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcc0598d-c351-4df6-8e2d-5b9c7bff83f7",
        "cursor": {
          "ref": "6bcf24a2-c984-49e5-8315-39e659668b8f",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "b45aaa32-f313-47ad-bcf3-39b7d3d9947f"
        },
        "item": {
          "id": "fcc0598d-c351-4df6-8e2d-5b9c7bff83f7",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "f31716b4-5439-4f0c-ae88-5d40818b1873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "284c24fd-dd27-498a-9660-456d429dca37",
        "cursor": {
          "ref": "5f1dc7b2-420d-4849-a545-d8d61bcce130",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "ba87cce6-1da3-491e-8ec3-7b70b0a60d13"
        },
        "item": {
          "id": "284c24fd-dd27-498a-9660-456d429dca37",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "a5b87263-48fe-4c89-a298-3e022c18ad93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4ba3f49-75ce-4265-bd57-833cf541cba8",
        "cursor": {
          "ref": "bf5e096f-c0a3-4fde-9102-01c779273486",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "701c87da-226c-47e3-adad-f94a3710b69e"
        },
        "item": {
          "id": "c4ba3f49-75ce-4265-bd57-833cf541cba8",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "93ef5aac-e156-4a45-bd1a-00da0701c8f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cfd6072-751a-4638-b5e4-ecb03c369aaf",
        "cursor": {
          "ref": "8853eac4-467d-41a2-a17e-b4c002d6fbdd",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ecabbd55-e419-4d1d-a011-fdf987f5a22f"
        },
        "item": {
          "id": "8cfd6072-751a-4638-b5e4-ecb03c369aaf",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ee93e875-69c4-41f4-b304-f6354e282a04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a730af-2fd8-460b-b0aa-0dd3c1080da6",
        "cursor": {
          "ref": "4fa226fb-f28b-4d0a-9c5c-54018a5faaa8",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2c1fd42a-d786-486f-95d9-75b3014a72af"
        },
        "item": {
          "id": "96a730af-2fd8-460b-b0aa-0dd3c1080da6",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9371f3c4-73f8-4ac6-9818-3eda57425a33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8889055-4774-4887-999a-fa73b4b45ca0",
        "cursor": {
          "ref": "ac189a93-e6c6-45ff-91c0-d27c5db79387",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "5c827458-7b23-45ed-aaf8-57f3b2421f60"
        },
        "item": {
          "id": "f8889055-4774-4887-999a-fa73b4b45ca0",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "8e227398-8f49-45fa-8280-088540b6fc5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87dbf275-1d5e-45a5-a50f-2b3d6243a2d3",
        "cursor": {
          "ref": "f8cd1005-a5bd-476d-afcf-eb9f514a40cd",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "56ab9141-cf5b-4519-87cb-6950ec28dcb3"
        },
        "item": {
          "id": "87dbf275-1d5e-45a5-a50f-2b3d6243a2d3",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "05c8a7fd-0dfc-41c8-a75a-e77ccdcd676a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02b09aa0-4887-4209-a187-5ee7b2486777",
        "cursor": {
          "ref": "18394ccc-1574-4618-9fb7-33b79639b318",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "6bb1d5bc-2742-4f4f-8127-1e88b2848220"
        },
        "item": {
          "id": "02b09aa0-4887-4209-a187-5ee7b2486777",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e5bb4b09-b1ad-4ad6-a381-d513d58c9847",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea94928f-a35e-41b2-a33c-27f28c683270",
        "cursor": {
          "ref": "af2a504c-4a5f-413c-bc0d-2e896b240878",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "387b801d-bafb-4c39-990d-ffd3b173c000"
        },
        "item": {
          "id": "ea94928f-a35e-41b2-a33c-27f28c683270",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "a269f9a0-c503-4172-b199-26b11eac2974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8f9b3e6-0b2b-4e19-9bcf-e285fb2d5e54",
        "cursor": {
          "ref": "37ddb956-5fbe-4e2e-8790-04bfd4592efd",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "017ff51e-28ad-4db1-8167-7efd6a71d753"
        },
        "item": {
          "id": "d8f9b3e6-0b2b-4e19-9bcf-e285fb2d5e54",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "6ad0dd31-46e1-46f9-bc18-490826936761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa5d1056-b9b2-4522-a5b1-eb03fae32dfb",
        "cursor": {
          "ref": "26341e74-35c5-4f66-9482-ca10a5942f49",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b95c79a6-66d0-4152-bf0f-0eb80c9aa64f"
        },
        "item": {
          "id": "aa5d1056-b9b2-4522-a5b1-eb03fae32dfb",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "cd45e134-d742-4096-a59c-f35685b28759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c681b90-88b1-4a8d-8c8c-7dcb78f96dc8",
        "cursor": {
          "ref": "a2ae8ca7-a369-41ce-8a36-34e9d00e53ba",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "410e2d44-ee47-4167-ba31-a91dbdea090c"
        },
        "item": {
          "id": "1c681b90-88b1-4a8d-8c8c-7dcb78f96dc8",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "4299f5c5-9758-40cb-9241-60bfdd0de005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e667eded-5a18-4f63-8154-3db332e2fb6d",
        "cursor": {
          "ref": "084a7ab9-a520-4f9e-8cb6-9dc5e0532c7a",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "344c29be-4a37-426b-966a-f003cc4f84a7"
        },
        "item": {
          "id": "e667eded-5a18-4f63-8154-3db332e2fb6d",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "89f3a5f0-bbd1-41ba-b572-061dcbe10253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69acec9a-741b-4a0f-a364-0e1668869a70",
        "cursor": {
          "ref": "b1a4dfb0-50e5-4ed1-ab25-27dc6ff7b956",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b29fab90-5428-4e70-9dfd-88c1fdd4fd49"
        },
        "item": {
          "id": "69acec9a-741b-4a0f-a364-0e1668869a70",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "2920f018-1d2a-4a35-b1b0-c75fb01039bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c04b71e-db95-4f60-8e75-3cef01b2454e",
        "cursor": {
          "ref": "bef6fd52-3cc6-4f25-8603-0c5c980ad650",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b4321793-3357-4e23-afd0-6fa2a0102b55"
        },
        "item": {
          "id": "8c04b71e-db95-4f60-8e75-3cef01b2454e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "15a3c3e9-d39b-47c4-b1ef-ef398621015e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdd7bfc8-f63c-41d9-9823-d9915ede751e",
        "cursor": {
          "ref": "2c8339b4-8b83-4581-be2c-c56570edb766",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a0b3d959-e531-45e4-bed5-1a7bb87674e7"
        },
        "item": {
          "id": "bdd7bfc8-f63c-41d9-9823-d9915ede751e",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "c5b7bf27-24df-4ae7-9f16-a4c4b7008715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7c5afe5-e161-429a-9c11-c83afe0fdf6c",
        "cursor": {
          "ref": "8f8ac0b5-b22c-4dc2-bdd9-29a04680d7f3",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "71f168eb-a2c7-4610-829e-9d27a4bad0e2"
        },
        "item": {
          "id": "e7c5afe5-e161-429a-9c11-c83afe0fdf6c",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "5dfd0fce-1159-4001-bbc1-3a87b514b2a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1cbaac8-cd67-4894-b0a9-e21dd81f8f91",
        "cursor": {
          "ref": "a01b2b02-5ff7-4ef1-bae0-a612d35afc2b",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "2574b611-d5cd-4cb0-8071-154f36a906a3"
        },
        "item": {
          "id": "b1cbaac8-cd67-4894-b0a9-e21dd81f8f91",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "6208697b-c237-43e6-b128-a7ac7e240ccf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c56e95b5-3cf4-42a9-b2ca-ede6f67ca380",
        "cursor": {
          "ref": "eb3630bf-e03a-4b65-85cb-33cfedad9b6f",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "f3df5c5a-08bc-4899-afe8-75fdf460c510"
        },
        "item": {
          "id": "c56e95b5-3cf4-42a9-b2ca-ede6f67ca380",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "15fabdeb-d25b-4e86-80ef-0c18544810da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa556db8-88b2-4c4b-8d9b-56b0ec4cf423",
        "cursor": {
          "ref": "088b4710-ce84-4adf-b5f9-aad4a715d8c3",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f658fdf7-002f-4163-98f3-de4c7773906e"
        },
        "item": {
          "id": "aa556db8-88b2-4c4b-8d9b-56b0ec4cf423",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "389fb895-7c3a-4b87-aa7a-87eee727da3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46f68916-cf45-4748-b54a-b237af986fd1",
        "cursor": {
          "ref": "7250c9ee-4ef6-4ed0-93e4-d26d9e8efe42",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "fecd8bfc-7379-46b6-8c5a-a9efd8e4038e"
        },
        "item": {
          "id": "46f68916-cf45-4748-b54a-b237af986fd1",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "1c34fffa-c5ab-4861-a23e-5bfa4bf44a10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e21d558-94d6-43df-8c0a-b0b100a1c028",
        "cursor": {
          "ref": "70797f4f-9dbf-4439-bae4-ee76a37d4eea",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f2efa351-aa05-4fa0-b516-1c740dec6fac"
        },
        "item": {
          "id": "2e21d558-94d6-43df-8c0a-b0b100a1c028",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "4df502a9-9425-4c35-9b3e-d37bc872e018",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14f842fc-f1d4-4618-8629-1e1b6e4f8a6d",
        "cursor": {
          "ref": "d2aad422-7ec7-40e7-9019-f31f70e327a7",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3f564f56-91a3-46f7-8e1c-e29a7bff63fd"
        },
        "item": {
          "id": "14f842fc-f1d4-4618-8629-1e1b6e4f8a6d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "cfb6fc40-24c9-48ff-b84f-fa673c9fa526",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "900bc6ac-fce0-4ffb-ba02-255569f55fea",
        "cursor": {
          "ref": "69e8533a-5449-401d-a767-1432570cf074",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "1bbc98cd-f31a-43e3-8c81-c2bf83cb9c4d"
        },
        "item": {
          "id": "900bc6ac-fce0-4ffb-ba02-255569f55fea",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "4ffe6b74-f2d0-4154-82ee-73d4034b8986",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6885f7d1-2eea-4c5b-af99-fc2f93f78514",
        "cursor": {
          "ref": "d456b595-b258-46e9-8f19-e5d3be2fa2d1",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "523112f3-502c-4ef5-baec-96fd96c344bc"
        },
        "item": {
          "id": "6885f7d1-2eea-4c5b-af99-fc2f93f78514",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "9f70f909-9cbb-48bb-a3b4-4d5a17f36537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8917b54-2844-408e-b6db-de4ce09c2383",
        "cursor": {
          "ref": "19f62428-82a7-4476-9c0d-d09a3ee7b066",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "df5f3780-26f4-4bff-b2ac-33e2becef6cd"
        },
        "item": {
          "id": "e8917b54-2844-408e-b6db-de4ce09c2383",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "16ae46ec-7610-4604-b52d-7771154c215d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e61faae-d0c4-4b1d-99ac-f21a45f01fab",
        "cursor": {
          "ref": "b838faef-af64-4ebb-992b-2df322d17cee",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a5893cac-1095-4fb9-b425-85f3f4b262f8"
        },
        "item": {
          "id": "9e61faae-d0c4-4b1d-99ac-f21a45f01fab",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "20bc469d-fa35-4bd5-8853-f8570a9b454c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9df977cd-3833-4c73-8463-afcbb7ea3b75",
        "cursor": {
          "ref": "e3fd1a66-4049-4374-8a9a-806a35f334e1",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "8dc124fb-c199-4746-8036-f2c0e6612ba6"
        },
        "item": {
          "id": "9df977cd-3833-4c73-8463-afcbb7ea3b75",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b821faee-2447-4f6c-9336-f6690663ed0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d99d8eb-8116-49fe-9baa-02ff6dd5d5c4",
        "cursor": {
          "ref": "7439b072-c33d-426b-aec8-3255a1b9933a",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "7e327ce0-3c60-4742-ac3e-016a22883fa3"
        },
        "item": {
          "id": "4d99d8eb-8116-49fe-9baa-02ff6dd5d5c4",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "791c2ffc-a968-4403-b04a-a686dfdd093c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad27595a-6e32-4032-bb6e-3f436c984e1c",
        "cursor": {
          "ref": "e744955f-47bc-45ca-9fad-7000146f6242",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "ceb0d53c-2771-4890-a325-2f577ea8d13e"
        },
        "item": {
          "id": "ad27595a-6e32-4032-bb6e-3f436c984e1c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "cbc6d27f-d743-4754-a0a6-53c32a9b8fa4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f144466-6784-4595-92e7-69939edb85a1",
        "cursor": {
          "ref": "049c7d83-2cab-4a4c-8fe0-48cae66fd4a9",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "7b033dad-ba23-4b65-a470-0022cb944b3f"
        },
        "item": {
          "id": "7f144466-6784-4595-92e7-69939edb85a1",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "f7e1713a-70a3-4e02-b72b-e3f30c015c05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "500d6867-eb77-48e0-a181-e7fae8cfdc4a",
        "cursor": {
          "ref": "65328398-994a-4346-adfa-f8d0d551b652",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "ecb5dd6b-99b4-4db6-9c65-bea57e799e3e"
        },
        "item": {
          "id": "500d6867-eb77-48e0-a181-e7fae8cfdc4a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "ed96eeb5-3530-41cb-9db0-09b25f97ce29",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "15c5a279-6b40-4334-ad0b-fe3e7492d1a8",
        "cursor": {
          "ref": "963380d3-1aac-4ad5-8390-0794b6dc5016",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d91c674e-c955-4ccc-b9fa-ffdb99ef82fb"
        },
        "item": {
          "id": "15c5a279-6b40-4334-ad0b-fe3e7492d1a8",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "01923f95-a016-444d-8090-093a41dbfd77",
          "status": "Created",
          "code": 201,
          "responseTime": 354,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "37d4d34b-d59d-45d3-ab23-9cf06a8d789f",
        "cursor": {
          "ref": "1468305c-22a7-4a87-a270-83daf84bf64b",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "852f2f1a-78dd-4c28-bd3a-30c7af5a09c9"
        },
        "item": {
          "id": "37d4d34b-d59d-45d3-ab23-9cf06a8d789f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e0855931-dae6-4a2a-86b9-c4d8dc4102f0",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c935a82-5a3d-476e-b55f-18a6494f5420",
        "cursor": {
          "ref": "2af433c5-c715-4a4e-a829-8cc5670b32b9",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ea325b8a-41f9-45fe-8347-35bc88449cdb"
        },
        "item": {
          "id": "0c935a82-5a3d-476e-b55f-18a6494f5420",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "afaefa1c-5b6a-4f94-94b3-86026b74464f",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bc9ce34-e484-429e-8883-5f6facfdb269",
        "cursor": {
          "ref": "0fbab60f-43b8-4c83-bc00-42faea3378a1",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "0cc69362-3dff-4bd7-b5a5-95fa491b4006"
        },
        "item": {
          "id": "4bc9ce34-e484-429e-8883-5f6facfdb269",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ed16223c-57ad-48ca-9092-3ddc28da68bd",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-02-28T00:33:11.796Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-02-28T00:33:11.796Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "87cda5aa-8363-406b-aa86-3dbd62f53950",
        "cursor": {
          "ref": "96d20046-d2f7-469a-a686-b8eb260a274a",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "5a92674b-568c-4e2e-a3b5-5ceee4395c0a"
        },
        "item": {
          "id": "87cda5aa-8363-406b-aa86-3dbd62f53950",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "cb95e624-82e6-4299-a090-41b662d32ee6",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc3c91e3-fc3a-4e8d-a44b-6c1f1f2d256f",
        "cursor": {
          "ref": "2d230b43-5d31-401e-b48f-ce3c13ce4adf",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "e1c5fcbd-42a3-48c4-9b87-aa8982a8072c"
        },
        "item": {
          "id": "bc3c91e3-fc3a-4e8d-a44b-6c1f1f2d256f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d4ece58a-4fec-426d-a1c6-1acaf1e3caa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0e6e0fe-5b88-4576-9e9e-81091784aa1e",
        "cursor": {
          "ref": "7200bf70-2ba8-4473-a12a-d1801710e244",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c1122b5f-4ac3-46bc-88cc-c06533c1426e"
        },
        "item": {
          "id": "f0e6e0fe-5b88-4576-9e9e-81091784aa1e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "47215ed7-f414-4ea4-b748-a4491a5aaf7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac6d5f8a-3ac0-41b3-b2e5-81cce6bc0bae",
        "cursor": {
          "ref": "f01e0ff2-b3d2-4fa6-910e-ff7d6661bbe7",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "6670e2d5-2939-454e-96e1-d83695592c30"
        },
        "item": {
          "id": "ac6d5f8a-3ac0-41b3-b2e5-81cce6bc0bae",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "30756bae-7b28-4bcd-b3fb-31b3f2d87f09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f256b94c-93cd-48af-8ad8-321d233fa229",
        "cursor": {
          "ref": "602e58fb-cd42-4b3f-9cdf-85b93667feb1",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "9591206d-9317-42d3-8f09-5d1076d107e3"
        },
        "item": {
          "id": "f256b94c-93cd-48af-8ad8-321d233fa229",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "488beb4f-dc3d-47dc-a7a6-a78405d1133c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad7ab5d-3eae-4620-9344-0b71da9f35b0",
        "cursor": {
          "ref": "cbbae52f-ab74-4a0f-ae5e-4d3a162c0f91",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "9c5fccf5-0065-4dbb-b78c-148a2219af1f"
        },
        "item": {
          "id": "0ad7ab5d-3eae-4620-9344-0b71da9f35b0",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ad7c6125-985d-4bae-8e56-e9a8ce58cbf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0bfec07-c1e3-4ab3-8def-3349423b8b3c",
        "cursor": {
          "ref": "ffa970b4-37d9-42b8-bdb5-dfb03e46f39c",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "de7efd4b-0b81-4386-922c-969f18f868af"
        },
        "item": {
          "id": "f0bfec07-c1e3-4ab3-8def-3349423b8b3c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b6e0b76c-5aa4-4ed4-8f6f-858d891bb033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18d42870-b7d7-4fd5-86d0-e7392a1e525c",
        "cursor": {
          "ref": "678a3e8c-2235-4a62-8a42-6e5d49291f5c",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "11b0a9bf-9632-4fc2-853f-74c6e5405c85"
        },
        "item": {
          "id": "18d42870-b7d7-4fd5-86d0-e7392a1e525c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d8cc780c-192f-49f7-9415-8cd583d8e37b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4da1d273-156d-49c4-be43-434c28b305e5",
        "cursor": {
          "ref": "8833d933-8b2f-445b-a377-13e53db476b7",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3168b778-8391-430a-ae7d-a1377b33d746"
        },
        "item": {
          "id": "4da1d273-156d-49c4-be43-434c28b305e5",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "fd8f4038-28e5-4ef3-a36f-0da217c3cdf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea6e2ed6-bc10-48d8-83f7-949d9641a00b",
        "cursor": {
          "ref": "7edf258e-ff05-419f-9794-4c40ddb4c906",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "190f66f7-07ec-4f63-a4c3-558ffbc8a2bf"
        },
        "item": {
          "id": "ea6e2ed6-bc10-48d8-83f7-949d9641a00b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a6cab7c1-6cda-49c3-b15d-a303af256007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c8e2b12-02d2-4014-b346-a1c887ab88ea",
        "cursor": {
          "ref": "418e9cff-948e-4bf5-b759-bd53972ca438",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d61188b6-6e09-40f4-bf95-204d313ba79e"
        },
        "item": {
          "id": "7c8e2b12-02d2-4014-b346-a1c887ab88ea",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d470b561-6fad-493f-a677-2f7de0ad951f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ad730cd-922c-4a71-a0a6-ae26a060d167",
        "cursor": {
          "ref": "6583d7dc-26c7-432a-8095-530444fc4b71",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "10b4b9e7-1bd5-4542-a56d-2a5d972860c2"
        },
        "item": {
          "id": "7ad730cd-922c-4a71-a0a6-ae26a060d167",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b6b84ff0-1d8a-4459-9f17-638198aae6bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "258326ee-3373-4e2e-94dd-938a20b93d98",
        "cursor": {
          "ref": "3568bd98-7585-472e-b2bc-32f806a5c61d",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "1e443b91-2861-4df8-a6c4-04f7b78a28cf"
        },
        "item": {
          "id": "258326ee-3373-4e2e-94dd-938a20b93d98",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1f87e240-fb47-4281-a8cf-b322e4caf6f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06d16889-eb24-478e-8b66-3cd5c874dc23",
        "cursor": {
          "ref": "2f5d0d80-0282-4995-9eb6-8ee5b492f046",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "5acbf9c1-4c9f-449c-8f8e-8b262a2571dd"
        },
        "item": {
          "id": "06d16889-eb24-478e-8b66-3cd5c874dc23",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "96c9baea-5abb-4e2c-95cd-4d8815fe28c9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 127,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "eae47316-5f32-4b7c-907f-8408f9edbf7f",
        "cursor": {
          "ref": "f01ac5b2-a4ab-4f6f-b4d0-dfa144219ee5",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "7273ee3f-a4e7-41a7-953f-32e0451b4885"
        },
        "item": {
          "id": "eae47316-5f32-4b7c-907f-8408f9edbf7f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "10f71ff0-8074-4a4c-9e22-dc5342deb136",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 124,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "0f475eff-5f00-4c79-864b-27ca5b7b617e",
        "cursor": {
          "ref": "25535531-4209-4a7b-96ee-6f04328b0dc6",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "6e44ce91-d3ae-43ef-925b-fc8bb5ca9464"
        },
        "item": {
          "id": "0f475eff-5f00-4c79-864b-27ca5b7b617e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "53b1d12e-dd4f-4954-aded-e14bb3df2752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e2522c6-ab46-45b8-8716-30389d2010d5",
        "cursor": {
          "ref": "3b9d10c6-f56d-4bba-9363-1d99fa09e286",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "25d42872-bd1d-4fe2-a295-4c14c807c45f"
        },
        "item": {
          "id": "7e2522c6-ab46-45b8-8716-30389d2010d5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1a25b535-5c91-4c18-a436-61df80521510",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aa6de14-fdba-4a48-870c-bd0784515793",
        "cursor": {
          "ref": "c5df1503-c89a-449d-bb90-87c6642fc8ff",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "3cc58642-b8e1-4577-955a-76a3192a9758"
        },
        "item": {
          "id": "3aa6de14-fdba-4a48-870c-bd0784515793",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "471fd5af-cdee-4bc6-8a3a-64a16fdb87a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5082401-8ddb-4f21-bc4d-74f56a2ea398",
        "cursor": {
          "ref": "27c429cd-ddc4-4fbe-8d78-f041b4e7ccc3",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "7f8b932a-fc02-4d32-9365-91cbd559563c"
        },
        "item": {
          "id": "b5082401-8ddb-4f21-bc4d-74f56a2ea398",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1622b4d7-2f25-4a9a-9b31-0a05540f375a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31686e6a-5784-4f02-bd26-52af208a9cda",
        "cursor": {
          "ref": "d07c2b97-6b1f-4761-b3c1-a7b968c56805",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e2ac3f44-5a82-45f8-87f1-5062125a4ba3"
        },
        "item": {
          "id": "31686e6a-5784-4f02-bd26-52af208a9cda",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "215bf88f-b44b-4ec3-840d-b77440145894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf629ea3-cc1e-47e5-8628-faca1421ef2b",
        "cursor": {
          "ref": "06c2fca9-2447-4478-a4b0-2b844513f6e3",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "7324a612-ccdf-4707-a2ba-a33368870ddf"
        },
        "item": {
          "id": "bf629ea3-cc1e-47e5-8628-faca1421ef2b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "35f98242-33c9-4856-af03-1b0212a57f20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0495a3f6-45fd-47b0-a9d5-7bd8cb211835",
        "cursor": {
          "ref": "5db82cb2-f921-4e19-8874-a87cd2edd7a5",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "51dfc740-8923-4338-a830-177e0ff05682"
        },
        "item": {
          "id": "0495a3f6-45fd-47b0-a9d5-7bd8cb211835",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "27a8340b-c8d3-4525-96f2-e115d192052c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59c6d32d-e1bd-48af-8d87-b1a90105a0f6",
        "cursor": {
          "ref": "adaf2b17-41f8-4268-84ea-2f90e17deff3",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "186ea2e2-5302-4e0e-b22e-a01270813e58"
        },
        "item": {
          "id": "59c6d32d-e1bd-48af-8d87-b1a90105a0f6",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "69ee43bb-e066-4ca9-a0df-e81275ea5f00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45322312-f4e8-4547-b2b4-567e665f0d4a",
        "cursor": {
          "ref": "dc1ffe2f-0349-4a8d-8323-f689481f1a28",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "19a438c6-54f8-41ad-8e0b-f4dd8e5277bf"
        },
        "item": {
          "id": "45322312-f4e8-4547-b2b4-567e665f0d4a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8e10ee91-7e50-43cd-bc01-a656602fabd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e1bd09e-56b9-4ad4-8705-071917d907be",
        "cursor": {
          "ref": "a8a738bf-31d9-4297-b8ae-fb131f1e7ef0",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "34daf6cd-cd4f-4ca9-8c18-75bfd2ae1528"
        },
        "item": {
          "id": "5e1bd09e-56b9-4ad4-8705-071917d907be",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "2171817c-eaeb-4ecd-92b1-b996ee579198",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "751ac0ba-a73a-4e10-b3dc-18489f111c4f",
        "cursor": {
          "ref": "d2370268-6ef5-4e3b-92d6-8c179c74e4c7",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "ec15ff95-d4da-4098-a14c-0963a8de3bd0"
        },
        "item": {
          "id": "751ac0ba-a73a-4e10-b3dc-18489f111c4f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "da8db285-fb0b-4589-9d14-b339043d8a4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14b8fd43-59c8-4886-89e3-07ba4f19ad29",
        "cursor": {
          "ref": "52bc9a83-f1ac-404b-871c-e77d5b19e350",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "75e33312-208e-410e-91a2-85d8f4f1b029"
        },
        "item": {
          "id": "14b8fd43-59c8-4886-89e3-07ba4f19ad29",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "dd08e287-6368-4084-9eff-de1622f4d18c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fec6ed63-16bd-4774-aae5-bad0e7aa3e83",
        "cursor": {
          "ref": "c9e46448-e19e-4639-91f2-29ac743d88bc",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "7853dccc-6a7b-4084-9be3-0b59719f0e84"
        },
        "item": {
          "id": "fec6ed63-16bd-4774-aae5-bad0e7aa3e83",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "fbbc1d52-8e63-49a1-bdf4-09d1eafe79bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cd6d0d4-5d8f-4b40-9145-b6f94e353066",
        "cursor": {
          "ref": "58c1e9e4-af6f-4bae-81c6-9655fd793cd3",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b285660e-48eb-4b7b-bcc2-0512da96b6d7"
        },
        "item": {
          "id": "5cd6d0d4-5d8f-4b40-9145-b6f94e353066",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7a2e0189-f21f-4424-b6e1-ef4183a782d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cea1da22-bb81-4ef6-b1b5-46512be12887",
        "cursor": {
          "ref": "0b0c10ea-fe93-447d-ba9a-692197247c59",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "ad4cafa5-a748-4a8d-99c4-5138c6c76e3f"
        },
        "item": {
          "id": "cea1da22-bb81-4ef6-b1b5-46512be12887",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "39dd0315-27a8-4dc2-81d1-4bc5041f649f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da0442da-6bf4-4e58-a356-6b33735fde18",
        "cursor": {
          "ref": "4ab9dec4-78b1-4c8d-8049-8489cf269782",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "86b2481b-8779-41e0-b5f4-26fa667ed381"
        },
        "item": {
          "id": "da0442da-6bf4-4e58-a356-6b33735fde18",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d1a99384-2c84-4368-81d2-cf68d89f196b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dff32868-834d-450d-81d0-7a6353e75fe0",
        "cursor": {
          "ref": "8dc19915-e817-4dc2-8492-7e93305e3e42",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ddc6378b-c8ca-4b08-a0a5-d68c853bb810"
        },
        "item": {
          "id": "dff32868-834d-450d-81d0-7a6353e75fe0",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e620b868-ca5a-400f-99fd-993b0fb45425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5de8206b-4408-4578-bf93-789fc45ed185",
        "cursor": {
          "ref": "fd4f90f0-a463-41e2-8ee0-bf0f2ac6c3aa",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "31c08d68-18c4-4a02-9b09-6f0956f07fa0"
        },
        "item": {
          "id": "5de8206b-4408-4578-bf93-789fc45ed185",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "31411cee-8735-419c-99cf-b14b3ba7dff3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 113,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "0cad6aeb-675c-44c4-928a-465b19b3e9f8",
        "cursor": {
          "ref": "08e045b2-8783-40eb-8eba-8cb14aa6e478",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "e9a6213f-74af-4dac-b650-8b1e9a5dce4b"
        },
        "item": {
          "id": "0cad6aeb-675c-44c4-928a-465b19b3e9f8",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a11a5a3a-4bb1-42b8-9471-ac41b63706a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a82a9eb7-edd8-48a4-a166-ccb0f3fa8769",
        "cursor": {
          "ref": "d20611ac-7729-4939-b51d-dd7e8230a59c",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "57e31d48-bf2f-4352-ac3f-2a01b95987e8"
        },
        "item": {
          "id": "a82a9eb7-edd8-48a4-a166-ccb0f3fa8769",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "471c6212-e3c3-4145-b736-7a2eb8fb946a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf30657-80f8-476e-bee3-6facd256350a",
        "cursor": {
          "ref": "d445317b-8da2-44cf-aa2a-a0f37e2a310f",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1d3d91d6-305b-4553-a0f9-9486114b75cf"
        },
        "item": {
          "id": "bdf30657-80f8-476e-bee3-6facd256350a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "bb48733f-8dcc-4158-b53d-ae470b469ea0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb42354b-790d-4ec4-b04f-b009e59eacfe",
        "cursor": {
          "ref": "3cc77e21-e4c3-4098-801d-ee03658b664c",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "937cd8e7-739d-4932-b3f8-35f5b753b6d3"
        },
        "item": {
          "id": "bb42354b-790d-4ec4-b04f-b009e59eacfe",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "03c10219-0e02-461c-bc34-a88561017738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7399d0ee-82d7-4196-996f-4d30cd8f897b",
        "cursor": {
          "ref": "e56918cd-0f55-4f80-ab05-dbe54b58d74a",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2108b5e9-ed9d-4e4b-9b30-612cea633f69"
        },
        "item": {
          "id": "7399d0ee-82d7-4196-996f-4d30cd8f897b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "aab8df09-876d-4de5-8051-337222b637d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c90043a-0790-4b7f-99ba-ee2d1f98c384",
        "cursor": {
          "ref": "bedf028a-7a20-49f1-92aa-59c7b9f81da9",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "9be1edbd-c25e-41a0-b66f-789843e8f4af"
        },
        "item": {
          "id": "2c90043a-0790-4b7f-99ba-ee2d1f98c384",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "86c360ce-4be2-4257-adec-005daa6777e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bc0a7a6-b9e2-4a8f-b54f-d95d4de4c71b",
        "cursor": {
          "ref": "49d71f1f-1b44-40f8-99dc-5f574af3a484",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "dbe0b417-53ef-4e71-9133-370174791141"
        },
        "item": {
          "id": "0bc0a7a6-b9e2-4a8f-b54f-d95d4de4c71b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "fa0216a2-9599-4a53-b079-7478402228f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f269d31-7bc6-43db-9eb1-087c4281701c",
        "cursor": {
          "ref": "d76bb3d8-6c5f-4869-b19b-726856905d68",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "918cb717-2d38-4414-826d-8aa30bd4b60d"
        },
        "item": {
          "id": "0f269d31-7bc6-43db-9eb1-087c4281701c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "173eca91-1b02-4739-9695-8aae72df4745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c09027c1-5820-473d-a87f-5d5f89245d0a",
        "cursor": {
          "ref": "ee46dcbf-9fcc-4a75-834f-fe3f6751b172",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c656d5e9-6d0e-4d8a-a514-2b3aba20f2b6"
        },
        "item": {
          "id": "c09027c1-5820-473d-a87f-5d5f89245d0a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ac23bb1b-645f-4643-88dd-bce5a9e419f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9261ef5e-a426-45b5-8540-db4f414f28aa",
        "cursor": {
          "ref": "c6b31549-11db-4d35-bbbf-ff6a9ebcd5c5",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "d060cda4-0483-4d30-bb2f-4e1b1bc71fa1"
        },
        "item": {
          "id": "9261ef5e-a426-45b5-8540-db4f414f28aa",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "92e70af4-9e94-4093-9e11-f7dbcf2bbc8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f72fdfcf-9b2e-4009-b740-d5907cbfcdc3",
        "cursor": {
          "ref": "7050ad5b-9c6a-4d16-b36a-ccd3bd25e696",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "ca86fe9f-bfed-466e-aeff-12a30375f335"
        },
        "item": {
          "id": "f72fdfcf-9b2e-4009-b740-d5907cbfcdc3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "9033b58e-7255-4c15-897f-d219ced891a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e915ff94-f554-4fe6-a192-a8ed1a8d4ca2",
        "cursor": {
          "ref": "46f6be7f-708b-4c1c-959d-8056ab6520f5",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "21cdba26-1536-4a68-863a-65987c9e54c3"
        },
        "item": {
          "id": "e915ff94-f554-4fe6-a192-a8ed1a8d4ca2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ddac8c71-5a09-4641-8094-0a42daaf56e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9055f17c-5c71-448d-a247-adf56532d947",
        "cursor": {
          "ref": "8467020a-d511-4236-a18c-d4f498a1902e",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "bbf2d937-7995-43d2-9911-8c640eed3e1c"
        },
        "item": {
          "id": "9055f17c-5c71-448d-a247-adf56532d947",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "eed8c4ad-269d-4baa-bec0-b12cdb03220d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "582320a5-f223-4251-a3b5-2bf14ba1cf4e",
        "cursor": {
          "ref": "c46091aa-af66-43ff-9c9c-aa7e2330d433",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "78d1e162-3fdc-4c22-b230-2d377e954686"
        },
        "item": {
          "id": "582320a5-f223-4251-a3b5-2bf14ba1cf4e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "58a65acf-d920-46d7-905a-2c61faa5047e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e96567f-3581-4289-807f-fcae2fafcb48",
        "cursor": {
          "ref": "9675da10-2693-4765-a338-aa213dd70d59",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "23c815ba-ca27-4594-a7d1-84fb42949581"
        },
        "item": {
          "id": "7e96567f-3581-4289-807f-fcae2fafcb48",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c0cdd33a-6949-4f77-a58d-38b629ab5e6a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 123,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "65efbb0a-37da-4d46-b9a3-ad5c70736081",
        "cursor": {
          "ref": "627d7eed-35bc-40ca-9830-64a7927d8d3c",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "a84a621a-fa76-4ec7-b8e5-cc96d70f3a38"
        },
        "item": {
          "id": "65efbb0a-37da-4d46-b9a3-ad5c70736081",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ca7df7eb-8f27-428b-afd7-f19908858365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "651faaac-ae38-4777-9a06-44849f960058",
        "cursor": {
          "ref": "e5668891-51bf-4f24-9a36-ef80a98afc83",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "a21d1827-e276-450d-bf59-9d31d35ac4cc"
        },
        "item": {
          "id": "651faaac-ae38-4777-9a06-44849f960058",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5560d63c-9fd2-4dbe-912f-3ebe24305682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2798e07-5d5b-40d3-9bab-4b3b96c43f29",
        "cursor": {
          "ref": "f6d4a5b5-cc25-41cf-bc86-d5f7bbd5bc09",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8fcf5a83-4846-4805-a849-bba38be30f6d"
        },
        "item": {
          "id": "f2798e07-5d5b-40d3-9bab-4b3b96c43f29",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "997ce5b8-561e-4d44-9371-086ff03e4762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75ecee41-068c-442a-8861-aca0779c5f31",
        "cursor": {
          "ref": "d397138e-f6bb-412b-add9-cbc9d4d253f6",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "2d66a9d6-4c45-4d4c-9d7c-96226bc00daf"
        },
        "item": {
          "id": "75ecee41-068c-442a-8861-aca0779c5f31",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "585ae066-a2fa-49f5-a750-23e341117ef6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58164342-e257-4c49-b95b-fc8864f75bc1",
        "cursor": {
          "ref": "51fdf492-562b-4ff2-8835-6f2a1771d8b9",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "31e7439f-a21f-4adc-9170-bf57ac996f59"
        },
        "item": {
          "id": "58164342-e257-4c49-b95b-fc8864f75bc1",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "da96f02e-0762-4474-8f90-3d145d2ace68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5a999d4-d48a-4eb7-b789-2c41112f7dba",
        "cursor": {
          "ref": "2fd564c8-b56b-4e98-bef4-923bab50fe81",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "55bfc411-3e7e-427e-a2da-f274f09f4605"
        },
        "item": {
          "id": "e5a999d4-d48a-4eb7-b789-2c41112f7dba",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9c2332f4-535f-42c7-a08e-8bcce22e129c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48a6ec03-3fa0-49b4-b7b2-33df29903aa7",
        "cursor": {
          "ref": "8c5452a6-a2db-4a52-a8ee-9ba00aa74672",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "abc23a11-2fde-49ea-b6dd-11274458b4f3"
        },
        "item": {
          "id": "48a6ec03-3fa0-49b4-b7b2-33df29903aa7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "618cffd9-b577-4d8a-bf81-d9ef4a944ad5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "260840e0-8e53-4dc9-9b4f-b15fa6373f90",
        "cursor": {
          "ref": "cfc4bc8d-fec1-4757-bc8e-ef61b413d5ad",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "bd8c6afd-c487-4cae-87b2-2dfc488bc5de"
        },
        "item": {
          "id": "260840e0-8e53-4dc9-9b4f-b15fa6373f90",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "18cb2bdc-7e0d-4cce-8a22-0632ae805690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "577ea331-242b-4432-9800-f62683ccee73",
        "cursor": {
          "ref": "d4964c86-94a1-45f6-bd6e-bb29e88c886d",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "4152e747-fdbe-435a-9d6a-8c40a51c2bb5"
        },
        "item": {
          "id": "577ea331-242b-4432-9800-f62683ccee73",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "030e3ba1-b289-41ba-8b0e-b99725a70b7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d8d5432-2264-43e3-9205-1f7636061c9c",
        "cursor": {
          "ref": "49f22744-0ed1-48c6-82b4-effdbdf29337",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b0fff75b-230f-4e4b-b914-cf8d4b6f3831"
        },
        "item": {
          "id": "4d8d5432-2264-43e3-9205-1f7636061c9c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "29b200cf-8c7f-4315-af0b-526eee93904e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edd6fb54-da42-4bbb-8f84-c2593e3b4ff5",
        "cursor": {
          "ref": "0f67fec4-644b-4a85-b5ed-ba58d9e1d21c",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "1f30d582-5da4-43cd-994b-78481d6a5add"
        },
        "item": {
          "id": "edd6fb54-da42-4bbb-8f84-c2593e3b4ff5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "6a5913d3-1a07-4ae3-9fc8-c84a0a7e4dd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c11e6ef1-223a-49c7-8e6b-c3557ba83fef",
        "cursor": {
          "ref": "8848ee6c-1952-4275-9499-e3176c5a7de3",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "8a36ce38-817d-44f7-b727-37a0ab90b734"
        },
        "item": {
          "id": "c11e6ef1-223a-49c7-8e6b-c3557ba83fef",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "fea2c709-047d-4413-b543-8aae4d4f149e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5905f63e-c1a5-40d5-ba05-eac311658cf7",
        "cursor": {
          "ref": "b77ff768-ae9f-4a2a-b9b7-b6bf6107eaf9",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c2ba172e-f9be-4aac-920e-271e88424ccf"
        },
        "item": {
          "id": "5905f63e-c1a5-40d5-ba05-eac311658cf7",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c98edd10-a921-4881-bee7-5c2165e822ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a5bdc6e-f387-4b7f-873f-a2c838abbb62",
        "cursor": {
          "ref": "59d636dd-a389-4774-b1ec-0a9736a8b3f5",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "51b472e5-81b1-4221-80a7-2909b6fc18d4"
        },
        "item": {
          "id": "4a5bdc6e-f387-4b7f-873f-a2c838abbb62",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "674273e0-fe44-4bf4-a291-b8eabeda4d3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a8e6952-1bd9-4553-97bf-323d0e554ee0",
        "cursor": {
          "ref": "550e4fb6-b795-45e9-ad1e-624b3051d2e7",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "38eb562c-b7fa-4d3c-952c-109cede8cb14"
        },
        "item": {
          "id": "6a8e6952-1bd9-4553-97bf-323d0e554ee0",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "208daf8f-6a82-47fe-a651-4cbe31cfea0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3501e244-ceab-4ceb-83c2-d3f6b2387195",
        "cursor": {
          "ref": "fb9403cc-a18f-4a0f-bf65-5dc82e4f10d5",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "192bb926-4428-4044-882d-7d6fcae5e224"
        },
        "item": {
          "id": "3501e244-ceab-4ceb-83c2-d3f6b2387195",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "66b56d70-e942-4e4b-abfe-0ef334a4e210",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de90e56f-6ba4-4c69-b6fc-93d4cafbaeb4",
        "cursor": {
          "ref": "4966d916-85da-4b5e-8b5c-bac1f4b21d00",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "49fc6c9a-4929-4fb8-9938-a4b8bc247dc0"
        },
        "item": {
          "id": "de90e56f-6ba4-4c69-b6fc-93d4cafbaeb4",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d6fc7d85-286e-4c16-86a4-5b758fbca58b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3557864a-3307-4cf6-86b8-191f5b5b3b16",
        "cursor": {
          "ref": "16e37e1f-0271-4f84-931a-4b4abb783ade",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "df44af0c-b99b-4363-8bdb-d2c7da6602eb"
        },
        "item": {
          "id": "3557864a-3307-4cf6-86b8-191f5b5b3b16",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "ab67be45-f8c4-4be7-b1fe-2414b281e720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd864860-9738-4f43-8be0-bd6aa0606d93",
        "cursor": {
          "ref": "aee34f16-76c6-4ce9-9b5c-d1da3994daa8",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "8826b64c-f0b4-42d7-85d5-0bf527a76828"
        },
        "item": {
          "id": "fd864860-9738-4f43-8be0-bd6aa0606d93",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "008596c1-9cda-4dc0-a64f-59d136ca61e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03fccfbb-5b33-447a-924e-9c33c5ebb51d",
        "cursor": {
          "ref": "70f2d88a-a458-4080-ae0e-9eb918ef2c9b",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b1e08435-5fb4-47da-be72-017f59aabb3f"
        },
        "item": {
          "id": "03fccfbb-5b33-447a-924e-9c33c5ebb51d",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "917a2937-eb0b-4d24-a49d-0bd87741ea10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5153a6e-26d1-457a-af2f-1f55fad03bcc",
        "cursor": {
          "ref": "145db4cb-d085-45b8-a204-8fac925ef274",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d819a5fd-fdbb-4d75-8a35-9a6007fe64c2"
        },
        "item": {
          "id": "e5153a6e-26d1-457a-af2f-1f55fad03bcc",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "ec491310-083b-4ea2-b5b0-2c0a1e062d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d4cc78e-4d32-438d-91dc-0b3181b3d72b",
        "cursor": {
          "ref": "7ea0510f-2e49-4ac5-bcbb-67ad22709221",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "d66efd8a-8f25-4034-b725-fe6ca76e069f"
        },
        "item": {
          "id": "9d4cc78e-4d32-438d-91dc-0b3181b3d72b",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "6d296436-a167-43c1-9b83-1f6272d33a99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfaac02e-7b99-43f2-a38d-4bd80f3a32e8",
        "cursor": {
          "ref": "58afe488-e009-4652-8311-5d56010007b9",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "757c04ae-a9a0-4fdb-ab07-f487b7acdf81"
        },
        "item": {
          "id": "cfaac02e-7b99-43f2-a38d-4bd80f3a32e8",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "bfc3d2f1-c6b1-43e7-8cb9-87faf3b7557c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5848471c-aab5-48fa-b9a1-5e06f60361a1",
        "cursor": {
          "ref": "62be91f8-4bc8-4fd8-ba1e-f47a55c16a72",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "289a4538-61ed-4ec7-bf35-03513d962ed4"
        },
        "item": {
          "id": "5848471c-aab5-48fa-b9a1-5e06f60361a1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f4b95434-72dc-4de8-8a5c-660fadad089c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "175ae3ea-9e52-4d41-b862-5655deef9f34",
        "cursor": {
          "ref": "4e517ce0-f7f6-4e48-a044-bc03f5db7c8a",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f25bfd47-d0c1-43f5-a1f8-7439e51fe2c3"
        },
        "item": {
          "id": "175ae3ea-9e52-4d41-b862-5655deef9f34",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "98afb8bf-a01f-4c08-b9b6-388db8d3058c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b40c0fe3-511a-49b9-ba85-8f577f85db0c",
        "cursor": {
          "ref": "b63bc5ee-6718-4eec-adbf-d233f34b8efc",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "839019a9-1ca8-4a17-bb31-41be874b9f12"
        },
        "item": {
          "id": "b40c0fe3-511a-49b9-ba85-8f577f85db0c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "37c53486-fa8f-4e6b-98fe-31d1d5dc8369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b747e93-43d1-4231-a6aa-b8daecd6c17c",
        "cursor": {
          "ref": "ba2fff75-3510-46ee-8be6-adcd0a8a4782",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "8ee61b45-1517-4c0e-8f3c-f1d8c2a78b2f"
        },
        "item": {
          "id": "0b747e93-43d1-4231-a6aa-b8daecd6c17c",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ea5e3e7e-56cb-4116-aa23-819f1f1a2028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dde5b9a-e0eb-47d0-b2f7-7a67bd6f4424",
        "cursor": {
          "ref": "2f7d23a2-2833-4cfa-8ab3-21a38eec3b87",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "41c65c42-2e1e-4ac7-a84f-7dea78858de2"
        },
        "item": {
          "id": "9dde5b9a-e0eb-47d0-b2f7-7a67bd6f4424",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "97ea9f09-deca-43f7-a4e2-0d6f66e0908c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a08592f-23cf-4765-8319-bf0f0fe40147",
        "cursor": {
          "ref": "ae07d276-7e3a-48f5-9437-5e1e5e24f018",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a906a316-3e52-446a-877e-30d86b3c67dc"
        },
        "item": {
          "id": "8a08592f-23cf-4765-8319-bf0f0fe40147",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "0509bd8a-5f4a-432e-9e36-59b59594c3da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f21f41a4-f6a5-4f12-b70e-7d53691f53a8",
        "cursor": {
          "ref": "915c270b-5bd0-416c-9d5e-b7a2dcb7f6f0",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "13df4113-d166-4fe2-836d-464d20b00539"
        },
        "item": {
          "id": "f21f41a4-f6a5-4f12-b70e-7d53691f53a8",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e64bf46f-6109-4600-9989-a93ab568a347",
          "status": "OK",
          "code": 200,
          "responseTime": 195,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "a67e7f10-1182-429b-b4de-11db96a5f160",
        "cursor": {
          "ref": "630ea966-ea7d-4680-998f-12e09ce07a76",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "eb0b6911-5960-4c94-b91a-c68c4ffad356"
        },
        "item": {
          "id": "a67e7f10-1182-429b-b4de-11db96a5f160",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "2da56d7d-286c-486d-a57f-c3f9a19631ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11bdab74-5069-42b8-9547-ef30be47ab55",
        "cursor": {
          "ref": "bf1170d1-b841-41f5-869e-a5cc2ade8b26",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "7543d5fe-e18c-4c33-a6ee-d67f590d9eab"
        },
        "item": {
          "id": "11bdab74-5069-42b8-9547-ef30be47ab55",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "eb5a701a-0fdf-4b4b-8874-c1c4cf44ce0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2054e864-23a5-494b-8138-f7cc4f53e99a",
        "cursor": {
          "ref": "fb2da860-b68c-4870-b7f0-2e60b43b20d5",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "2639b257-d7ab-4315-be02-9c584ec9e58f"
        },
        "item": {
          "id": "2054e864-23a5-494b-8138-f7cc4f53e99a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "176498f2-e6f7-4a5f-a0d2-0631162d268f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8d0de10-9c8d-4216-8601-deded1381bf8",
        "cursor": {
          "ref": "550b4722-0c22-4cc7-9fcb-d2cb622c47b3",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0d263278-7bf6-436f-b24e-d543f72c85d7"
        },
        "item": {
          "id": "f8d0de10-9c8d-4216-8601-deded1381bf8",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "50d218e8-71ec-46fe-bf0d-ff46a0fb6d09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57a203c6-9701-417c-a0d5-8983c71c097e",
        "cursor": {
          "ref": "7b94a2b3-5288-4376-81bf-72dc50a3e8fe",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "912fb15e-d369-42ed-ab8e-be545d1e7cf3"
        },
        "item": {
          "id": "57a203c6-9701-417c-a0d5-8983c71c097e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "73e088b9-af67-4e93-93e6-e490cbd22351",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfe68baa-6c30-434f-a69c-836932896b9f",
        "cursor": {
          "ref": "cd835c6f-b984-475b-9d15-a74b6cd61dd6",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "bd76878b-a493-42da-8b0d-e45d7e6977cf"
        },
        "item": {
          "id": "dfe68baa-6c30-434f-a69c-836932896b9f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "be0679fc-19ab-45dc-8bee-e0469e657c9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "110560fd-c865-4c8f-863a-681d875f87cd",
        "cursor": {
          "ref": "b590658c-7f03-4064-a2f1-160854362066",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5d38aaad-990c-4132-8228-18f6cb204728"
        },
        "item": {
          "id": "110560fd-c865-4c8f-863a-681d875f87cd",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "294d17d0-3329-4cec-bbd8-a45117026e3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8392fd30-a6c9-40bc-a5e0-7315d8cd540f",
        "cursor": {
          "ref": "6c537b9f-a112-4439-8d22-2f4448ff3c01",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b7644d82-4747-4081-8778-b5af414f3183"
        },
        "item": {
          "id": "8392fd30-a6c9-40bc-a5e0-7315d8cd540f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "55716a00-93b9-4fcf-bb75-2f72832bb84e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d43ad24-ad8a-4861-bf9c-0d54f08cd572",
        "cursor": {
          "ref": "fbab14fe-1633-49fe-aedf-4b962c78a559",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "17904019-adaa-4987-8115-d4cc59fe8447"
        },
        "item": {
          "id": "6d43ad24-ad8a-4861-bf9c-0d54f08cd572",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "7e27b8a7-25e0-4d06-925c-2cafd0977e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6edd1dcb-8e99-4510-9e90-b355b0178235",
        "cursor": {
          "ref": "35a5f835-7628-4d24-ae6e-729b1aa6f1ed",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f372a1a5-dcf4-48f6-baf6-4be79b52e733"
        },
        "item": {
          "id": "6edd1dcb-8e99-4510-9e90-b355b0178235",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7a11a0d4-c5ca-4afa-96bf-dd220d8dcb64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50af9758-8ffd-426a-8c5a-bd0844eeaaa7",
        "cursor": {
          "ref": "f7834ab2-6892-48df-9621-24c075bceb8e",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "77a9322c-6c43-4634-ab6b-1e38e92fdd43"
        },
        "item": {
          "id": "50af9758-8ffd-426a-8c5a-bd0844eeaaa7",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "012d2aa8-e81b-403c-acbb-46bd0a65b49d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4edec177-839a-4d39-903c-0e8fe0f3536b",
        "cursor": {
          "ref": "702ad14b-7ff7-414c-b7e2-2c26f475781d",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "cf3df984-77e0-406f-b718-6b9b9dc30997"
        },
        "item": {
          "id": "4edec177-839a-4d39-903c-0e8fe0f3536b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "3c0eb787-eefa-4205-8272-124bd0e8797e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce6112d3-1497-42cb-9ce8-6e77588fbd96",
        "cursor": {
          "ref": "7cb7618e-1933-4025-b4a7-13658e89a2a7",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c434deaf-316c-45a0-8511-4bc7626de89c"
        },
        "item": {
          "id": "ce6112d3-1497-42cb-9ce8-6e77588fbd96",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c31abfdc-bc17-4395-baef-d2f7209971f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 150,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f79b4e0-2559-4ad4-95e0-cece6385b1ee",
        "cursor": {
          "ref": "9958a532-732f-45b3-b1cf-784e48885b3d",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "644b6c2d-b5e4-4f0a-80f2-ddfabe8efec5"
        },
        "item": {
          "id": "4f79b4e0-2559-4ad4-95e0-cece6385b1ee",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "196ad538-bd71-4659-a728-f34bc7966ce1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba8e5edd-acdb-43db-ad96-1ba388a7fd93",
        "cursor": {
          "ref": "0092bd12-f073-4fcd-9169-7b4ebc7e4cfc",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e715d740-1a02-485e-bf9f-c18ce398e018"
        },
        "item": {
          "id": "ba8e5edd-acdb-43db-ad96-1ba388a7fd93",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "835d683a-09a2-470d-9f45-9e49e3986307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42b74400-74c9-4313-a3a2-5dd12124b8c1",
        "cursor": {
          "ref": "ad590ef5-d4a6-487b-bed9-3891f1e90905",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "850a4564-d5ba-44c3-ada8-9623764fb81c"
        },
        "item": {
          "id": "42b74400-74c9-4313-a3a2-5dd12124b8c1",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d162d54f-fa22-429b-a327-47d4c72fc3a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b41b9d8-1c74-4c80-8738-3ffe4ee47697",
        "cursor": {
          "ref": "2fca65d2-a123-4d25-9146-1fe36f8caefe",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "99485f6e-2257-4394-9195-beb8e102692c"
        },
        "item": {
          "id": "7b41b9d8-1c74-4c80-8738-3ffe4ee47697",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f32564c5-7a3f-4056-9348-98bbe0ed7085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50a4d0ea-5c5f-4caa-8e9d-1ab68b13853e",
        "cursor": {
          "ref": "a1cd1d5f-96b8-4f64-8c91-a55ebeac22bd",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "f2365577-53bf-4592-a043-16b80080276f"
        },
        "item": {
          "id": "50a4d0ea-5c5f-4caa-8e9d-1ab68b13853e",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "d4e29203-2e3e-44dc-bae2-3ee37865908c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d62135b3-542a-4fa3-8a6d-e133fd198ddb",
        "cursor": {
          "ref": "7e2300a0-5850-44d7-9861-e3dc2620f3bc",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "95e84d94-4576-4e18-80c0-a54f0528c33d"
        },
        "item": {
          "id": "d62135b3-542a-4fa3-8a6d-e133fd198ddb",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e767b834-c56c-4bc2-a5b1-500b2329a95c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0b20167-bb2d-430e-8ea6-985ad847648a",
        "cursor": {
          "ref": "84966e60-0145-4e23-9f48-636bd876b455",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "1c80f5ba-d656-4d50-9ebb-e735b0cedce5"
        },
        "item": {
          "id": "a0b20167-bb2d-430e-8ea6-985ad847648a",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "8320ae5e-abe0-453e-aba6-b916ff432307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c521323-d66a-4d28-8523-757bab8213a1",
        "cursor": {
          "ref": "18a117b6-ee38-48d7-a1b8-e617151d2a3d",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "4facfe98-8f6d-49eb-a0a6-d23433d699b1"
        },
        "item": {
          "id": "3c521323-d66a-4d28-8523-757bab8213a1",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3505a2df-5e1f-4d3c-ae63-7296135990f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c14e49f2-161b-46bb-89ad-b4f923bdfaca",
        "cursor": {
          "ref": "ddc072ea-9cac-4b60-a3aa-068d26910ae0",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "2778ab89-ed9e-4cd6-9155-401ff2d96ad0"
        },
        "item": {
          "id": "c14e49f2-161b-46bb-89ad-b4f923bdfaca",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "72adfd92-49af-4918-99df-a337213fcdc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1887755c-91dc-454b-bc9a-9af3ac9da79f",
        "cursor": {
          "ref": "1b7cb812-2249-496f-9e3a-26aff3630b88",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "b4b905c6-740f-4398-8b6d-e33194c5ba2a"
        },
        "item": {
          "id": "1887755c-91dc-454b-bc9a-9af3ac9da79f",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "2e1d08d7-450b-41df-b487-3089b882051e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac149c8d-7b1e-47ec-a44d-d978eda258f2",
        "cursor": {
          "ref": "97e9a78b-ed8d-4c75-ba78-e6a7ed6902c4",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "a0146b68-ae97-4c09-b031-af49a471fe4a"
        },
        "item": {
          "id": "ac149c8d-7b1e-47ec-a44d-d978eda258f2",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "0ff7b7c2-1108-45e3-b4ba-7fbce377d304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de77b2ec-8222-4abd-819c-4a341b3b7680",
        "cursor": {
          "ref": "c025b8c2-e17e-4428-83eb-75d021b6d087",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "f421dcaf-1b67-4e23-ba26-d1ec02eb96c7"
        },
        "item": {
          "id": "de77b2ec-8222-4abd-819c-4a341b3b7680",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a8b14ac6-1894-4de0-814f-42ea86d278f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44bf2b13-a972-4783-9479-9e238b76045c",
        "cursor": {
          "ref": "1d784907-317d-4778-bb7c-7d913563c302",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "7ad78d96-3e07-4f6a-afe3-33b08d1e89e3"
        },
        "item": {
          "id": "44bf2b13-a972-4783-9479-9e238b76045c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "d26f0faa-6497-48b0-ad02-50630158ad17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3465350f-4643-4aac-9974-bb3e2736c29b",
        "cursor": {
          "ref": "e346d2fb-031b-4acb-9a0a-3a682d586fb2",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "bf9c32e9-0279-4782-9ae5-31c8196a17ce"
        },
        "item": {
          "id": "3465350f-4643-4aac-9974-bb3e2736c29b",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "70f77385-7379-400a-952f-2160953aad22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2566a4ff-61d8-478f-be2a-9ae463403d42",
        "cursor": {
          "ref": "975a829d-f4f6-4946-81e3-2b477b1f8486",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "0eb65df1-bbd8-4720-8c94-76a39457d1a9"
        },
        "item": {
          "id": "2566a4ff-61d8-478f-be2a-9ae463403d42",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "ac83cf7e-8ec8-4959-af63-8f95763a7525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0d160a8-7b7c-4c03-a65b-fdf64fd57479",
        "cursor": {
          "ref": "321dd4fd-e7a0-4258-9a2d-cf596b4a73bc",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "eafff46d-31f3-43f0-ba87-0ca8e2c8ebdc"
        },
        "item": {
          "id": "e0d160a8-7b7c-4c03-a65b-fdf64fd57479",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "8d119e14-2272-496b-a1de-0ad83d7767f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29b6a96f-908d-47bc-821c-b40a2193056c",
        "cursor": {
          "ref": "2cdb4e3f-04a1-401d-9a6a-ab13d751db8b",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "81bbd20a-f86d-469f-976e-91d9aec91493"
        },
        "item": {
          "id": "29b6a96f-908d-47bc-821c-b40a2193056c",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "e59744fa-ac67-42b7-b0f3-cf44e1df32c1",
          "status": "OK",
          "code": 200,
          "responseTime": 178,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "a9b7df89-dd9b-43e8-ab15-10011264e38d",
        "cursor": {
          "ref": "c2f83de6-9c8e-4ebf-b7bd-8267f88a34b8",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "387d0646-6b96-42e2-9c95-e475466d4124"
        },
        "item": {
          "id": "a9b7df89-dd9b-43e8-ab15-10011264e38d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "f3f33104-5af4-4220-a789-0c6d99bffdd3",
          "status": "OK",
          "code": 200,
          "responseTime": 184,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "ede097ce-3263-4fac-b2b0-3e93c22cb822",
        "cursor": {
          "ref": "897f8b60-7924-4d6f-adaa-6e6978389cab",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "7d9c7926-60cc-4c5d-a8da-9c81ab534352"
        },
        "item": {
          "id": "ede097ce-3263-4fac-b2b0-3e93c22cb822",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "7688c2b9-a1bb-4c6f-874c-6bee36cbdf49",
          "status": "OK",
          "code": 200,
          "responseTime": 178,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "22540a42-4c53-4f03-bbcc-ad7ed7890cf9",
        "cursor": {
          "ref": "a522ac95-6475-4963-a959-f03dcc6ba603",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ef6534ea-45db-4359-8ffa-4e42bdf1d7e1"
        },
        "item": {
          "id": "22540a42-4c53-4f03-bbcc-ad7ed7890cf9",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "4fac80cc-4b73-45c5-bb78-a481a2c2be17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ea97dc8-fef1-44a8-8dc2-7b24ff9c0da9",
        "cursor": {
          "ref": "ca755e8e-5d37-4320-afcf-2e36e54f6288",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "83822e07-2847-4eac-846e-e8e8652da6c1"
        },
        "item": {
          "id": "4ea97dc8-fef1-44a8-8dc2-7b24ff9c0da9",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "96c04ef4-27dc-4089-8a8f-963d42434942",
          "status": "OK",
          "code": 200,
          "responseTime": 205,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "c4d4b0c7-99cd-4bc0-a662-d2b0608c4eeb",
        "cursor": {
          "ref": "6e6e58fc-46fb-4d29-ac67-4ce71c367b6a",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "6367c751-e195-4114-9ab0-cb61841f3ff9"
        },
        "item": {
          "id": "c4d4b0c7-99cd-4bc0-a662-d2b0608c4eeb",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2ee3c2b8-0fc6-4c90-9041-e747b5a27f36",
          "status": "OK",
          "code": 200,
          "responseTime": 171,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "587ad757-d4b9-46e9-abc6-0f04ca51b05e",
        "cursor": {
          "ref": "a846c86e-1bd4-48a8-bdef-387b1bf37307",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "f7e23454-1cdf-4957-bed5-d157b21c9490"
        },
        "item": {
          "id": "587ad757-d4b9-46e9-abc6-0f04ca51b05e",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ee20c21c-bea1-4bc5-8ee3-e21354112aee",
          "status": "OK",
          "code": 200,
          "responseTime": 179,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "f683c044-4f59-4e3a-88b6-8475c90bf957",
        "cursor": {
          "ref": "c8c9e4d5-d039-4a2f-b3b6-583a71145789",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "7c215a16-e0b3-4e35-8d46-013cf61c99d9"
        },
        "item": {
          "id": "f683c044-4f59-4e3a-88b6-8475c90bf957",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4b8a8ddf-7b71-4324-9a6b-a63fac4af86c",
          "status": "OK",
          "code": 200,
          "responseTime": 1199,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "e976c7b5-c70a-419e-ba3e-837062214ab5",
        "cursor": {
          "ref": "3fe1b22b-155e-42e9-9ed9-b7168f9e41d1",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "40d6bd43-441c-4d96-8bbf-31c7f1388430"
        },
        "item": {
          "id": "e976c7b5-c70a-419e-ba3e-837062214ab5",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "cff300fd-c703-4290-bf29-34cbe2f1fced",
          "status": "OK",
          "code": 200,
          "responseTime": 190,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "1482810e-2433-4680-8c66-a93e3e73ee26",
        "cursor": {
          "ref": "c21da416-9125-4ef9-86e7-9f9d5b8b315b",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "9aafafdc-60c9-486b-bbb7-2c6479334848"
        },
        "item": {
          "id": "1482810e-2433-4680-8c66-a93e3e73ee26",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "3f7f9275-b56d-407e-8473-5b6a2c72314c",
          "status": "OK",
          "code": 200,
          "responseTime": 171,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "0b81e0ba-5ea1-4c19-bf77-08069fceca67",
        "cursor": {
          "ref": "e82c2918-81ec-404b-b8b2-ffed6a5309ed",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a64b3655-ae09-4fa7-916b-86852a421728"
        },
        "item": {
          "id": "0b81e0ba-5ea1-4c19-bf77-08069fceca67",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9b9e65eb-f3da-4154-ad1e-63ea358e04e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a48179d-a05a-4fba-bb08-41819fea85cc",
        "cursor": {
          "ref": "a04d4a6e-6565-4795-87ae-6cb9f045278f",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "80ddc90c-490d-40f3-9130-bee9fa07660d"
        },
        "item": {
          "id": "5a48179d-a05a-4fba-bb08-41819fea85cc",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a6fa9218-cb31-4e43-8857-39d49ba3086d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1328c760-0f11-4ea5-8416-11c1f132bab6",
        "cursor": {
          "ref": "a52e4078-98cd-463a-b2a2-73be2413ee33",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "afaac446-4b40-4ae4-91c5-0af71e5baa84"
        },
        "item": {
          "id": "1328c760-0f11-4ea5-8416-11c1f132bab6",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "fff6073c-3eb3-4e0f-a66b-60dd6cd8df7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1b0d9b8-9f0f-4323-b497-a0a283b2dddd",
        "cursor": {
          "ref": "54780d92-8ad7-48c9-b903-edec9a66addb",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "6621694f-316b-481c-9d60-89513ddf2b9c"
        },
        "item": {
          "id": "b1b0d9b8-9f0f-4323-b497-a0a283b2dddd",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f169060e-aba4-4c4d-9206-a4036c808c46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c4826db-5a4a-48dd-a77c-19dbc1182f9d",
        "cursor": {
          "ref": "bea894f1-2c49-424e-9f68-66bdc8ee05eb",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "079eefa0-833f-424c-a129-aaea7538f8ab"
        },
        "item": {
          "id": "9c4826db-5a4a-48dd-a77c-19dbc1182f9d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "bb1d8e76-b0e1-4092-808f-b25021916005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9498d059-f459-40f5-b373-075737735aea",
        "cursor": {
          "ref": "6240aa5c-73f1-4865-b4c3-aa87dbcecc51",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "7588a6f2-8346-4567-96f0-38cd9455aa43"
        },
        "item": {
          "id": "9498d059-f459-40f5-b373-075737735aea",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "9fbbfd7e-13fc-4c72-b46b-628fa1071642",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81a37c53-8999-4b20-b7f6-6e9f775f2ed0",
        "cursor": {
          "ref": "7060365c-fe50-4b43-bd03-ee58aae65f67",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "6d818e33-bfe8-42ec-aa9a-7ce8873282d9"
        },
        "item": {
          "id": "81a37c53-8999-4b20-b7f6-6e9f775f2ed0",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "1e51bbca-7d23-472c-9ade-2d196bc4b099",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f127859-501f-4df1-b127-c7a28cdab909",
        "cursor": {
          "ref": "e6868f96-202c-484c-bdc9-625f7434769b",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "007cef2c-d66b-4e50-994b-8fb9d27f7c7e"
        },
        "item": {
          "id": "8f127859-501f-4df1-b127-c7a28cdab909",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "fd7e897a-5dd7-4399-a70d-b37af1f748fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3716015a-0e90-46ab-a968-46043c5b501d",
        "cursor": {
          "ref": "4b11384c-0902-47c2-964a-0c215ffad014",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a86e5a16-4251-43c4-b93e-7d42f275e42f"
        },
        "item": {
          "id": "3716015a-0e90-46ab-a968-46043c5b501d",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "2dbabffd-c8ac-411e-b9c9-4ceebf558856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b029e5-0fa1-4b41-af8d-c56399e4b667",
        "cursor": {
          "ref": "1b69c0de-6cf5-462a-9deb-e2ce919797b6",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8da33c16-cc44-420f-b97c-3f2f58cf9bc5"
        },
        "item": {
          "id": "46b029e5-0fa1-4b41-af8d-c56399e4b667",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "6df2fbf5-96ae-4448-9ff3-3a1dc9efa061",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4c319a1-1e0f-496f-808b-0fb0522eb354",
        "cursor": {
          "ref": "949c4442-89a0-4975-8a70-fd39d23e5569",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "d5ef1a80-f9bc-4913-85ac-482bc7ef1331"
        },
        "item": {
          "id": "c4c319a1-1e0f-496f-808b-0fb0522eb354",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a38d02a2-8e7f-4335-ba1f-32b37f5d5be5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71bb1714-2c43-42fc-8681-d8122e958c64",
        "cursor": {
          "ref": "f4faaa68-d725-41a2-9fbb-f6d83757e11b",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "2672f7be-2ede-49a4-a127-2d285e298dd7"
        },
        "item": {
          "id": "71bb1714-2c43-42fc-8681-d8122e958c64",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f440d875-de9d-4cd6-8134-34400b06ee15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec3cd662-a7ad-4524-9ca3-04e57f490962",
        "cursor": {
          "ref": "3bd62a09-4751-4beb-b8ed-d5fa8f1e8edc",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b171460c-d75d-4975-853b-27227f650bb0"
        },
        "item": {
          "id": "ec3cd662-a7ad-4524-9ca3-04e57f490962",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "12a4a373-5375-4cc0-a807-ac697aea1e4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4704a6c-e722-4ed9-b613-a87dab2e3d97",
        "cursor": {
          "ref": "1682c230-fdbc-428f-ac14-052b0289057f",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "198a2c5a-c48e-44dc-983d-bc1e30be5403"
        },
        "item": {
          "id": "a4704a6c-e722-4ed9-b613-a87dab2e3d97",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e7231e92-aa51-49b8-aab1-46370060cc50",
          "status": "OK",
          "code": 200,
          "responseTime": 179,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "58b5e3d3-b1a1-4b44-986a-4689cf1ab1fd",
        "cursor": {
          "ref": "65d9fc72-bc7e-477a-8c4f-e716d170835b",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "18236de6-f53b-4862-bbc1-12ba9b64d59d"
        },
        "item": {
          "id": "58b5e3d3-b1a1-4b44-986a-4689cf1ab1fd",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b4ada458-64ff-44b0-9ef1-c74bd38078de",
          "status": "OK",
          "code": 200,
          "responseTime": 185,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "9801cd3a-d3a2-4029-b4fa-ecc8df87a186",
        "cursor": {
          "ref": "50461023-fb58-4285-8aa7-82fe4aabdf22",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "64042020-9f25-4570-9abc-5a7e39351019"
        },
        "item": {
          "id": "9801cd3a-d3a2-4029-b4fa-ecc8df87a186",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "4230221c-6631-4700-a31f-39342031f5e1",
          "status": "OK",
          "code": 200,
          "responseTime": 182,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "4b3b04ad-76c5-47fc-8338-b47b7d284601",
        "cursor": {
          "ref": "32995e4c-e119-4c25-9b36-0424f639389b",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "f38dadda-fdfc-4bb5-98d1-4343124abba0"
        },
        "item": {
          "id": "4b3b04ad-76c5-47fc-8338-b47b7d284601",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "13971fc9-37a2-4bc0-8cde-2fdca17fa33b",
          "status": "OK",
          "code": 200,
          "responseTime": 187,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "66b84802-3e93-4291-b054-005090011217",
        "cursor": {
          "ref": "7af6a2d7-5e90-4598-888f-64777da021d6",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "0782c95a-c425-40a9-9c71-4b22624aa678"
        },
        "item": {
          "id": "66b84802-3e93-4291-b054-005090011217",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "904775d0-bd93-42cf-ab85-c6094e12bfa2",
          "status": "OK",
          "code": 200,
          "responseTime": 178,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "a89b4610-a980-4389-8c4c-0a3fd198c50d",
        "cursor": {
          "ref": "8b316a9b-6e73-4b7f-b7ec-7c45b75d4625",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "6b52312f-d563-4136-9a4d-f2645d056455"
        },
        "item": {
          "id": "a89b4610-a980-4389-8c4c-0a3fd198c50d",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ec187575-37ce-4746-9f97-9c2c350199a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc90dfa7-1bab-4b6e-8da2-74e320a5ff31",
        "cursor": {
          "ref": "c074652d-22ff-4e68-a1ae-c7b01d68646c",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "bd1bcbee-59b3-4c74-bbb4-9d73203d3e85"
        },
        "item": {
          "id": "bc90dfa7-1bab-4b6e-8da2-74e320a5ff31",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "f3761b63-10c5-4b20-ad78-2463db2ab0d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f207052-83f6-41d5-abe5-3d8c1f6a1b2b",
        "cursor": {
          "ref": "5297ffe1-bc72-4721-bf8f-586e7d257dd6",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "e87b7db7-84b1-4c17-a43d-937731e28108"
        },
        "item": {
          "id": "8f207052-83f6-41d5-abe5-3d8c1f6a1b2b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "669b0b4d-9c7a-45d8-ba29-1d280c866aed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee50c5c6-1890-4039-9158-a96bb8c773fb",
        "cursor": {
          "ref": "eb861856-9529-427d-97ed-c46e1f0676aa",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "76122a81-de9b-4ae4-a782-20bddd5f3cd9"
        },
        "item": {
          "id": "ee50c5c6-1890-4039-9158-a96bb8c773fb",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "14df8610-62dd-4452-8c70-91552ae51592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e76ece8b-c7e7-42d7-9cac-eac8176e6a85",
        "cursor": {
          "ref": "76f6e256-f099-4d08-b048-a578214b0fb4",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "8b9a877b-23b2-4ef2-a47e-2ea24de32850"
        },
        "item": {
          "id": "e76ece8b-c7e7-42d7-9cac-eac8176e6a85",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "e28f2d74-7e8a-49d3-96bb-007354fd7349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79c4495b-70a5-4c96-a612-f69a1aa87383",
        "cursor": {
          "ref": "b4e9eb1b-7655-413c-90c8-9bde22beec21",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4440919b-03f8-4d4b-8d2b-919dccdac501"
        },
        "item": {
          "id": "79c4495b-70a5-4c96-a612-f69a1aa87383",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2ba3eb99-a23d-4f71-a842-683fd9fdd7a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d754d048-1423-4563-8143-1787ce4514f6",
        "cursor": {
          "ref": "47d0e8db-ea8a-406c-870b-72ecad972fbc",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b1edc58e-5473-4a04-abb9-8bddaa293382"
        },
        "item": {
          "id": "d754d048-1423-4563-8143-1787ce4514f6",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "00b6045f-86ce-4a24-9f2d-279bf3ceb99d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ba011f2-0635-42a9-b8ec-4619994ed922",
        "cursor": {
          "ref": "782a3c2d-58c2-4337-93d5-3b6e88b89323",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7bad501f-f978-45e9-b9d9-675d6ac62d08"
        },
        "item": {
          "id": "4ba011f2-0635-42a9-b8ec-4619994ed922",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "39145ece-ca5f-41f0-92fd-c85002560e26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e911ec12-db66-4c94-9f08-bc394f953ed7",
        "cursor": {
          "ref": "a61c314d-9fb6-4af5-8d6d-572381ebe77e",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "19fbbd95-7fcf-43b0-a9b7-b338b09aef8d"
        },
        "item": {
          "id": "e911ec12-db66-4c94-9f08-bc394f953ed7",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "c199eb91-d53a-4bb4-962a-b5e241f5d1ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e22de8b2-bc3e-43f6-b5a1-9829fa1f72c6",
        "cursor": {
          "ref": "786f5e59-3ba5-4000-9c2b-2abb8cec9f14",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "6258d4da-9d6e-4d84-9c89-8d553fe97662"
        },
        "item": {
          "id": "e22de8b2-bc3e-43f6-b5a1-9829fa1f72c6",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "ce589004-e473-40f4-b375-b3b19293a755",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b86d865a-6ddb-4e68-9acb-04915d846365",
        "cursor": {
          "ref": "9d5eea3e-5541-439f-851e-5640a0240ecb",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "ead65f5c-9169-405a-94a6-84e1e047202c"
        },
        "item": {
          "id": "b86d865a-6ddb-4e68-9acb-04915d846365",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c64f2d09-8da7-4553-ab31-6bbbf4355461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "578465bd-7380-4cb3-950c-dacdd9002372",
        "cursor": {
          "ref": "4906454b-26b1-4247-ac99-836e74718477",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "0a7f359a-389a-41fb-a6a2-2846590fe293"
        },
        "item": {
          "id": "578465bd-7380-4cb3-950c-dacdd9002372",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "229ea991-551c-4c8f-9183-6be4cf67e381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d2c4d42-d627-4a6f-bef2-e5fa010ddb93",
        "cursor": {
          "ref": "b5753c58-ec25-4233-819c-4dd9a2ff8ea8",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "801fec41-4969-44a3-85f9-b380a2b6192e"
        },
        "item": {
          "id": "9d2c4d42-d627-4a6f-bef2-e5fa010ddb93",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e19e7851-bfbf-470a-b2d1-3fb40a4a16c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3cd2b92-c130-4066-a1ec-62aab5e0ed8a",
        "cursor": {
          "ref": "558dd8ff-c49a-400e-b626-d78c4b890b30",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "889b8821-f0b8-4bcb-bb3b-0683c22f829e"
        },
        "item": {
          "id": "a3cd2b92-c130-4066-a1ec-62aab5e0ed8a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "55885680-db8e-47d8-b3b7-08d2a326b321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40e37cfe-48ac-4bbf-a877-8017a8eae2ca",
        "cursor": {
          "ref": "ffbfa5ae-f8dd-4732-bdbf-357658c2bebb",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "609092cf-d85f-4139-9c38-567c50ec61ea"
        },
        "item": {
          "id": "40e37cfe-48ac-4bbf-a877-8017a8eae2ca",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "df977426-c033-4101-89b2-be8aa3b1a242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd15cf1-a448-4089-a2d9-a2c3c0daee2b",
        "cursor": {
          "ref": "8925f730-da65-486c-8180-a8680fda05ff",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "cc1f5af9-0435-4e38-8a33-42a9f4d38062"
        },
        "item": {
          "id": "6dd15cf1-a448-4089-a2d9-a2c3c0daee2b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "99744239-9059-4b3d-b4e8-91f0b42a6805",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1261a896-3c48-46c1-8d79-d7d3468882a2",
        "cursor": {
          "ref": "7fd3ba2e-34cf-478f-b42d-cd680423e87a",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "f46d7ac9-4691-4555-b3f5-cb01cd28a82e"
        },
        "item": {
          "id": "1261a896-3c48-46c1-8d79-d7d3468882a2",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "1a851a0e-6927-4af5-8244-0df3e4d516e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5779e09-a847-4ea7-bf55-9f2c915663fe",
        "cursor": {
          "ref": "f32132b7-eb2d-4716-abbe-afa5b434e969",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "0fd32735-650a-4e02-8ade-8d8d036c38b2"
        },
        "item": {
          "id": "f5779e09-a847-4ea7-bf55-9f2c915663fe",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "336b1e73-a3cf-4fce-9aaa-a7921818e13f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac09c35-5c19-401e-ac28-28c0c436a67f",
        "cursor": {
          "ref": "c4712090-4eed-41c5-9150-169fc0e44cf9",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "8899b3b6-33cd-4bcf-bbd7-93da11256daf"
        },
        "item": {
          "id": "8ac09c35-5c19-401e-ac28-28c0c436a67f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e67bbb6f-7ac3-4cae-9dff-02c5473d17e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9559b159-9ee7-46e8-bb7e-fab44e0ed851",
        "cursor": {
          "ref": "26c2e9a4-180a-4399-b537-1a2d89c346c3",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "8145dcbf-5686-4182-9043-e0a433c697c2"
        },
        "item": {
          "id": "9559b159-9ee7-46e8-bb7e-fab44e0ed851",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "8bac02e7-4828-40d2-8ced-b18dd7c34cee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4b3923f-1cb6-432a-aff0-5f60fa367829",
        "cursor": {
          "ref": "d9a50e60-8770-4bff-8382-4ee059befe40",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "6732986f-e968-481e-bc2f-cc91908129cd"
        },
        "item": {
          "id": "b4b3923f-1cb6-432a-aff0-5f60fa367829",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "39c17dcf-2213-4dd5-a9c0-4c04d2eae19a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "193f052c-9a32-41cd-a92d-157fb6249b55",
        "cursor": {
          "ref": "8a496d2f-2d12-4f8f-85cf-2bc5204692b5",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "0d4c3ea7-e51b-4682-9c17-19051197f55b"
        },
        "item": {
          "id": "193f052c-9a32-41cd-a92d-157fb6249b55",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "b4ac2490-ca73-45b5-b042-618c64f80986",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1c644e8-6303-4e1a-929f-e94475d101b1",
        "cursor": {
          "ref": "8fde45b1-b540-4ed8-bba3-ef8a7dc03534",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "f51214f5-16bc-4396-a685-89e68aebf5a9"
        },
        "item": {
          "id": "a1c644e8-6303-4e1a-929f-e94475d101b1",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "56be8c48-bbf7-4a85-ad33-1648715c53ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e4e72e0-0699-4fda-bfd5-487f8010e7a0",
        "cursor": {
          "ref": "a887bcce-1684-4a3e-9836-6d140684becb",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "ec8312e1-c481-4a3a-be0b-08331ce7485b"
        },
        "item": {
          "id": "4e4e72e0-0699-4fda-bfd5-487f8010e7a0",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5a6b5a41-0f86-4938-ae3a-1bc5c5fd740b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac4ad170-4833-439b-8d2a-e39859faa325",
        "cursor": {
          "ref": "8fca73a2-5b03-45da-9eac-fce9736a5d17",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "2276ce7d-622a-4856-a82d-f43022c01732"
        },
        "item": {
          "id": "ac4ad170-4833-439b-8d2a-e39859faa325",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f44f3e14-a18e-4c1c-ae3d-ef43a3678786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a038b62-17d4-41ca-8d36-86838dc03ae3",
        "cursor": {
          "ref": "c5aa7a1f-5ac7-4916-876c-cbb47de0ac73",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "29ce9bfc-56f9-4a22-be1e-2d5c2bd722e4"
        },
        "item": {
          "id": "3a038b62-17d4-41ca-8d36-86838dc03ae3",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "9fed604a-1128-4068-b9b2-5ed2cc2c09cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23a99fe1-3da3-4e2e-8e98-6aa7606b92e1",
        "cursor": {
          "ref": "90c6c161-21bf-45ea-bcf1-86664897b110",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "bb989945-007a-4eee-b7a5-6d8555d60650"
        },
        "item": {
          "id": "23a99fe1-3da3-4e2e-8e98-6aa7606b92e1",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "223777ae-9ce9-430f-af9b-6fce966b7a98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e57efe8-8192-4fcb-b9aa-387f40ebe9f1",
        "cursor": {
          "ref": "4acb4b5b-fb76-472f-8501-b52287ccb636",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "859b7607-e666-4891-88c4-e1dcaa8a9c43"
        },
        "item": {
          "id": "1e57efe8-8192-4fcb-b9aa-387f40ebe9f1",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9bdda8be-f393-4874-8efb-b16938e6548e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03f23dd4-c187-4a07-96e6-dd9fc98ada8a",
        "cursor": {
          "ref": "6676affb-b1ba-4cfd-aa64-59bde1ff5089",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "d9c9ab80-6410-42fe-b65a-ecffa62bebf7"
        },
        "item": {
          "id": "03f23dd4-c187-4a07-96e6-dd9fc98ada8a",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "7c664ad5-ad52-407c-ba29-7c5696aa3f5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6738962-40dd-4b20-9789-ff9302e0b97c",
        "cursor": {
          "ref": "8db170bc-75ec-4672-ae8a-504da9de99b1",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "104d1961-15bd-40ea-958d-1d91864ebf77"
        },
        "item": {
          "id": "e6738962-40dd-4b20-9789-ff9302e0b97c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "abfca9fb-090f-46d9-9a4e-f625d31af546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e20f7513-68a9-4b83-81f2-5efd666bf6b9",
        "cursor": {
          "ref": "c9dedd28-2d36-4cd8-b8de-d452ec3828d2",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "57c934a5-9ca2-4abf-b9fe-bedacda7e431"
        },
        "item": {
          "id": "e20f7513-68a9-4b83-81f2-5efd666bf6b9",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "40dca352-ab88-437e-8836-3229cf8367b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaf9737d-4ca5-42ae-b95d-488c47b2aad5",
        "cursor": {
          "ref": "69bc0adc-4542-47eb-ad3f-bc6f74da4843",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "7015c4a9-b8f3-4220-a675-f52b6dadac7d"
        },
        "item": {
          "id": "eaf9737d-4ca5-42ae-b95d-488c47b2aad5",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "c99a5b62-9ee5-4b5b-97e5-5f2f2908a7a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "743945eb-2703-486f-9f16-566a8a388bb0",
        "cursor": {
          "ref": "8461c460-05f1-464f-9ce5-b02e047bfa5d",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "62c8657b-e279-409f-8092-b99ed0b9ed61"
        },
        "item": {
          "id": "743945eb-2703-486f-9f16-566a8a388bb0",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "98c7a776-2c37-4d27-b951-2147ac0c4182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64b2c804-149c-4a9b-8985-87bd460e3162",
        "cursor": {
          "ref": "fd02ce68-d600-4560-9eef-0cbffa8cc02e",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "600a7a6b-31b4-43f1-a9ce-97b8c601d884"
        },
        "item": {
          "id": "64b2c804-149c-4a9b-8985-87bd460e3162",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d159af17-2fd8-4859-b0ba-d8e5ffe05c68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f3f2caf-bf20-40ad-a6e8-0a2865fdcae9",
        "cursor": {
          "ref": "d2b9775d-6fcc-47cb-bcca-99accb0ecb43",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "7512414d-739f-4e4d-b736-7faabc32f55f"
        },
        "item": {
          "id": "1f3f2caf-bf20-40ad-a6e8-0a2865fdcae9",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "8268b176-eebd-4afe-9afd-75f173aa6257",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f9453ba-801b-4f0c-ab87-aea1cd4b4368",
        "cursor": {
          "ref": "d519ab32-f11b-401a-8eee-f621331420b9",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "f62ef8d6-bc01-4c93-a239-fdd6f54fab89"
        },
        "item": {
          "id": "0f9453ba-801b-4f0c-ab87-aea1cd4b4368",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "85467775-f24f-4fb0-890e-3969db81ffe4",
          "status": "OK",
          "code": 200,
          "responseTime": 181,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "e5d1626b-c027-4822-a324-bac2a3980f6e",
        "cursor": {
          "ref": "bf8eac3e-1275-406a-99ed-51dcc2415c88",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "129494dc-a672-4971-b71f-9b598efc0709"
        },
        "item": {
          "id": "e5d1626b-c027-4822-a324-bac2a3980f6e",
          "name": "credentials_verify"
        },
        "response": {
          "id": "2c53b708-5844-4483-b90d-53d4dde45903",
          "status": "OK",
          "code": 200,
          "responseTime": 182,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e85d23-65d0-41a7-b983-931420896457",
        "cursor": {
          "ref": "8e88d8ea-a785-44d1-933a-2e56e52473a9",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "21def8ec-07b8-4c5b-967b-5d13217e119f"
        },
        "item": {
          "id": "23e85d23-65d0-41a7-b983-931420896457",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "58aeee69-f993-4ab3-9e48-573dc3c7e00c",
          "status": "OK",
          "code": 200,
          "responseTime": 166,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc01ce0f-5136-443b-a56e-9849917c9ed2",
        "cursor": {
          "ref": "a0d95c5d-f4d1-4413-88e1-194ad0fa8b41",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "25bae486-7def-4acf-9dd0-007cdd5d3960"
        },
        "item": {
          "id": "bc01ce0f-5136-443b-a56e-9849917c9ed2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8bdf0f69-3bb8-45d7-9edb-bbb42ef974f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc01ce0f-5136-443b-a56e-9849917c9ed2",
        "cursor": {
          "ref": "a0d95c5d-f4d1-4413-88e1-194ad0fa8b41",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "25bae486-7def-4acf-9dd0-007cdd5d3960"
        },
        "item": {
          "id": "bc01ce0f-5136-443b-a56e-9849917c9ed2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8bdf0f69-3bb8-45d7-9edb-bbb42ef974f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba2024d-eb03-4350-9b8b-6807de6150da",
        "cursor": {
          "ref": "b9855818-8c2b-4a09-a7e6-f48eec6b99a9",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "3657741e-97f5-46d3-98af-15b929cca9ee"
        },
        "item": {
          "id": "3ba2024d-eb03-4350-9b8b-6807de6150da",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0242e834-5c83-414b-9785-4db2ba1e4e00",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec091b57-ca22-423b-ab6d-06599a805f5e",
        "cursor": {
          "ref": "f3de0b55-17cf-42a4-8037-1d0189fea39f",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "bd28e7fa-1dbf-41c7-8a0e-278daab0f474"
        },
        "item": {
          "id": "ec091b57-ca22-423b-ab6d-06599a805f5e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1002704e-adc1-4b4d-9140-b96f2a87f37c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}