{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "507f06dd-4a12-4f05-a7ad-c7903d72093a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "628ad6b7-9838-433c-b635-63e8d29ce32c",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ef434392-2cea-41dd-981f-988207b9d012",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f3473686-4873-4611-9994-bfa866e3864f"
                }
              }
            ]
          },
          {
            "id": "9268eba6-83da-43a2-9b35-2f4803c0d7f6",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b045516a-c1e3-484a-8803-48454d97ede9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "81e053df-ea4a-4685-b439-1b43ba1f899b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "fd5d967f-509f-467d-9092-fe693328b1c0",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "8826ffce-156b-49a1-9c77-de5bc8c55b2c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9d6ae472-d3d3-4c2b-be42-95a519adc3fe",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "728f7abc-3f09-4a64-9dd1-d70cc05d4b9c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "244d8d57-82ff-4992-a341-b89006b7d551"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ccae69ba-7f3d-487e-ae7e-3cb70ba8e39b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fb4d9768-6a8f-48f6-bab4-6b564a3997bc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "335b7c48-f4e9-4ecc-8152-7fc3e5c4d982",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "26811209-ccaa-46fb-8344-7dc274bb6e89"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "05762615-3261-47f9-b840-e4cdb880ac27",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "1e052017-9017-460c-9359-953ed8887c0b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "94aa3590-34e6-4af6-9d07-987fe793c274",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e3cc18e4-f42b-4468-8fdb-35d907289f3e"
            }
          }
        ]
      },
      {
        "id": "dd252d07-01a3-420c-8b7c-a45ace546046",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "cb834ea4-21d6-47e7-9059-09df80b4e037",
            "name": "Negative Testing",
            "item": [
              {
                "id": "52fd54d7-c3ad-4559-9a65-0c5fe3d58d6f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2e5fb74e-80b4-4085-b2b4-18e0d5f22c94",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42bf9357-82f5-441b-a803-95663dda2eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "af1814a7-4682-4039-b651-bfa00b8113f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61faade2-abfc-4dd3-b94f-aed0597611ab",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acbddeed-915e-407c-8e09-0a9aaed6b26e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f19e20e4-6e6a-420d-9121-2b103821ab07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cdce4f4-22d8-4d2b-ab16-3efec46480d0",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad6db35c-fe85-461e-9c55-be700b027951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2624f19d-8341-4309-acc8-c6e7c099d5d2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "834a0b0e-bd3d-411e-a2fe-1ea89c3f3134",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "768c7acc-1a3d-49b7-9660-c57bce3ba07d",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b24562-c930-411e-b31e-7755b902e531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2ec6005e-7dd0-4c5e-b908-5898f6a0f501"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c8805ea-514e-4276-86e1-e6f2eb7e4b2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "317576c1-7e73-4f2e-9e16-ee5da6e91b3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc276284-8744-4ed0-87a8-b90f2f893d4d",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ab8c7d-7ddc-4031-9208-46dd8580d983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "03454979-2b57-43bf-a29f-d4b5a4d9a252"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce9408a1-cda1-42f0-8702-b52e2b30be73",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "592c28ea-7c52-4ac3-9fcd-1f0fd0ffd3fd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "52fe320a-8f5c-400d-b0db-68d7beca9024",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bbeb5de2-d8ab-418d-8dc6-a76ab6bf5f77",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e4685883-cb28-40fa-8b9c-14208124d7f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e76ddd82-a174-425f-99a1-86cb6a361379"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e6254241-110c-4186-b0db-30631dbfd66c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "4bc9c319-db3f-44e4-81e8-53523daa78ac"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a52b474c-9189-4361-8777-e11e4a02bb33",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7102c5e9-84b6-4a56-a573-33e180366546"
            }
          }
        ]
      },
      {
        "id": "b36e6e7b-579a-49e0-9473-cf3a47ef4d83",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "01f8280a-a0e4-4d5d-a94f-4ff3dd831dd9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4b7331a9-088f-4308-b5ba-be9161acec7a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "2dc09c39-ea94-4100-a1dd-86ff4544da82",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "538fd7f8-6162-42ca-b34f-576b998930ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7efa5c43-d1a3-4676-9390-1e17f11c343d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50bd2029-31c6-46c8-bee9-1e60756c813a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b81a0da3-a73b-4374-9b4a-eb47277ac2ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f8f03e7-0d92-44da-b345-cc04bd3f28bc",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f6809a8-c7eb-4561-9b23-ff8b0adf41b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1733d621-af2a-4029-a460-9d8ab887fa9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "163eb122-f2af-40a9-8cc8-c8f1579c3de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "51d2f7ff-2694-4bcb-8361-ee1159648b63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c441fe3-9487-4b32-aba3-a5f91431e19b",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "623c0943-8c51-4821-8982-098a361d1f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f0797cb-d4e6-40b5-88dd-8e8cb57fac76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c377725f-b019-49c8-a830-9519f9ea1579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d6a7ca49-3631-4ac0-b363-e4f9e694e8bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1491893a-bece-46a9-b6fb-8061ee5b10b2",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eab7a8d1-a171-418a-821d-264858f72cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3d51d9e-bcac-449d-8002-038ee1006007"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e781a806-7f67-46bc-bc77-b9268de51960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dec36682-9f9d-45db-a1eb-3e6a7834e26b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051ade1b-8781-4a69-924f-02dc8259ded0",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a485ff85-f4ab-4e61-a22f-5a1ca4de42ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44958272-712e-4372-b0e8-66b88e3bfacb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a1a180-0bcd-4922-9177-c3c769277638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "97036e5f-7542-40f3-893b-e1699dfc6eab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5c35a1e-fd81-42f7-8872-3a539392b1f1",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "805dd620-e646-49f9-8050-16965d627e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25f39a2f-78cb-4c8e-948f-70ebf7331ea5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b5a614c-2e49-4e15-b38f-39812e33608e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d332720f-2c16-44b9-8b4f-819a89a2ad82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2e5d025-156e-4c12-b10c-ba20a930e08f",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf579e96-a6fe-4588-895e-cd9f55bb517d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdb39a49-c14c-431b-bf15-33cf4c6745e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "371d4c4c-5117-4dcd-aacf-cf8508476fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a748408d-bd2d-4ea8-bcd2-8821666c7d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9365aeb8-cbf9-47f0-a69c-39d0c18d3452",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79445025-a3ff-46b8-9983-5c4e737bc4e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8006ab88-a4b9-43be-bd3e-f65a0210a31d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50806cbb-1481-4f17-b250-2d0bad70609b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d5d03f8e-1fb2-45fb-bfbd-2054f6de82df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f781e3f-77df-4e09-af60-b731771703e1",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f57850-2b61-4c5b-a04f-d1ac64f718c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "028d3458-b659-41ea-ba98-13cdbfbc3214"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1554afa3-1c0a-4f2b-ae86-878d3214897e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9905040c-958f-4728-84e8-0f3b6328c4f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c5d0de-5a68-41ae-ad8a-63ae4727a9e8",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c66995a-45ae-41bc-a821-47624f5f62cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94e38534-46a1-4c62-9873-131201cbd84c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e6b4dd8-5684-47a4-ab2b-603569ca8ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d702d32-71cf-431b-8c7c-3ac6ea18abc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfed66a7-1eb6-49db-915a-984ca854cc30",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b561811-e20c-42dd-a4e5-f06507d65474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11730d73-3863-4806-9a38-412948e846f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca99a635-309c-45e1-85de-12a6a38f8600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "32ca7091-f30f-4fd0-8f9f-d4a36a347f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6819cb4f-0647-4d64-bfcb-ff0b15315159",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82cc3098-8873-4fb8-883f-51979311a932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b444797b-fd2d-44b3-a3d4-faa4937244dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43265c0e-4335-403c-9b6f-b82502140fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "20a6a70f-8964-4862-b052-5588bffed9ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12fcf5da-29d0-4752-ac34-e2ae18f91d34",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bca88c6-7ea5-438d-bb16-25e7ed294320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "246839c5-cd07-4676-8437-d7cc14600ae0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4861554c-73fc-43fb-8d1f-2a12fd099a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e376abe-3f1c-4365-8c1e-0fc82a524353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff27c066-f227-4b4a-857f-87edb1f297a1",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b38dbc2-2c82-47a7-8d1a-56166fe06329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d55c752b-bdc6-4919-8e06-833d0f2cad8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b94e9303-4cb2-4658-ba58-e4f65c7a42eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d780bddf-bddc-4e49-bb62-3789d8251342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e83aa5ba-5a4f-4b90-9b41-73eefaef3c4f",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eb1f24f-5c99-4218-8ed3-1574cee7a3d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "295a43fb-c5ce-443e-8289-681a90bdc925"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aac7671-009a-4b6c-9f03-d92464d708bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28646c8f-7735-4b4b-80e9-cf8a6d859bc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "308d35c2-f1ca-44b4-9099-586a3f5d5fd9",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee08d98-57c1-4b3a-bbc2-1c0d3b751f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fdb1d91-6926-4df3-bbb3-0a21a10217fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab55dc3-cc19-495e-a89d-0659bd725b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b84a3bda-8fa3-4e17-9ca8-7785f4475e91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4b7fb83-d6e2-4330-b441-373cdb7c3125",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f76f13d4-1265-48c1-8357-b95800a1d50b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "571941d6-3075-4ed7-8113-c4737efe7ae2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "641ea871-c6cd-4460-a7d4-36a6b3141b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0207fb47-43a1-47fa-8f71-d21f14bfa81c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cfbaa7a-d333-412d-8c44-9335c746ad9d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b76317-7468-4bc2-b781-8a0fa7bdd169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dc24e94-abd1-46a1-b0db-03794fe40bcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ea8bf7-76d6-467f-99df-459f559cd2a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "824ea2b4-5eee-4f34-a167-f57a15d84c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a0fd71d-5f42-4d86-9f5d-bd4def2d3d99",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56f15b13-1ed0-4765-bac0-44e4ddd4b15b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d80a671-afed-4d0b-8b07-07caf61f1b6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5601f0-909a-414e-8cc7-79274ef9033a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f1bedda-eef8-42dc-847b-1dda4a1a79bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db22ac6f-e54c-4877-9aff-1d200f685a53",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fce9272-d4bc-4e7a-8bc8-93752f44e73f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "045c653c-4bae-44ca-aa47-8418e1bcd218"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77aac15c-1f65-4491-b7af-f76ade1442c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8972ef40-d65e-48a1-9929-6609a960b8ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffad1773-626e-4fae-bade-3be270b256e8",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d92dd3a5-9889-4a19-8f97-9376e1c441b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf2446c9-8804-4943-943e-424f34416ca0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f33c0596-635a-42a4-b48c-d9295325d170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dafab6d2-9d30-4cc8-9274-a4c5995b86c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09bc9ef9-8252-424f-8d6d-435e900df9e9",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "840f59b6-f079-4ec9-b7ef-d226f5cc7888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62b5a1e4-3d9a-4532-bb94-0edbfb246d7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b542c098-d2e2-4786-9682-5a3940ae2877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7beb236a-e3b9-4f5e-8ae5-c72806d5c5a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21b10f30-fc1e-4cc1-b688-5f89f7da46b5",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c3f6fb-53da-4b51-9a3e-9705c366563d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f146b65d-3ce4-4d35-a0b9-aeeffd0f7791"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a7ed7a-4b26-4902-885e-990b7cded885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9d6d51fe-1608-44e5-a742-18b6e00e63e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3bada1f-e2df-4649-9f55-69425ed6eb6b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89c94846-5fb9-4b52-8d8e-50280b80be8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1b313e9-5877-4bd5-8f4c-f3b45f20e963"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7183ede4-3c50-49b0-a0dc-7376d4784f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ebaeb86-3f53-4943-a9de-d89d995e1f8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaefcb95-88bf-4124-a1cc-34ecd8a2c854",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f968a92-a85c-4967-81f6-448508958c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c38f5f9-9ffa-4b69-863d-ac90fffd1570"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46d2d282-c25f-4b93-a00c-b85848b9aead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c9169d1-1b05-4d71-a81a-cdce962ceb57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5853436-50af-41d2-82cc-193daa083691",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbbc3e3b-ec6b-449e-9371-2dffcdc0aa5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f736614c-3435-48ef-9a09-b977876747dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c326bf1c-39f3-4f47-b39a-b2eaf6bf04c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b74194d7-33c5-428a-b558-955fe8778eb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d374a6e3-6b25-46c7-bd6c-c423694b1acc",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d842f71-b088-46e9-9918-6d482b89c263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f9ac2b6-02c9-4f0b-bbe3-578d2f0af03f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19abc99a-a014-4788-b288-3ab2fde8e8cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "77c11a73-8d1b-498b-a77a-13d8b91c4598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5520dc30-4a43-4ff3-8f19-a9d226fa70c0",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6b5a3b8-6d81-4ee6-87a8-c06291712b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66328849-0af7-468b-8368-17162f2fe2ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "528a1875-adbc-41b6-a6b9-1aa2b37b7338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3b3c034-83d8-4120-b4c8-9cf1fa6750bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a54580-8093-4f0a-8778-43a664cbd6a1",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3dc7e56-5f23-486c-bb30-51deb11c2d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95b4e21b-14d9-4f93-a110-c988b695e14e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e5771ab-a084-493e-8e5e-f886894814fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c1332e2-e0d0-4171-a453-601b05838fb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "436523da-b299-4991-825f-ef3587fc24d5",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7edccaa-4ac4-40bd-8cda-10ac200d3de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aef545c-3823-45cc-bc42-94eacb21d850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65385e79-683a-4788-bbdb-45d3031547bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "93dec26c-25e7-4445-90d4-30e4cf1dacdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcbd6ef2-09e8-41b9-a450-d5cc3195a0f4",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33249f61-b0b8-4439-91e3-710cd3b403ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "727ab2c8-8bdb-40da-802b-17abb7d36401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4294418e-2b72-47a0-a326-4ef48c3ca479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f35ea9e3-c858-489e-9fbb-f7a7878a6c2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b029a48-ec5f-4911-bbea-0503de813dea",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98f92e32-b335-45bd-8bb4-4aaf41af1261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7375890-2d83-4cb8-87f3-3b576403a302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fce4495-27c3-4af2-b6f1-0ef33f5fee77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfeb69e7-7e80-41b6-813d-6de959aa0000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85870b0e-52b7-4970-bdd7-e1ea3936d2bf",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e5f5b4c-89c7-4df9-b068-f46d1a4ed21e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cad99e59-cb95-4d7f-a6d5-ce457c01ab28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b38c598b-a16a-4fdf-ad07-8358dc3e93e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6006f35b-d914-46cd-872b-46d2c9daaaa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "625b3b18-8614-49d7-b28a-65aafc120e0f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a92b17-9d3e-4694-a509-f41fd6fdb9d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3332425c-1342-4b4b-91d5-c3fb4468f345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b18850-4d64-4056-a1e2-d2c673d18c84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e40864e-79e3-4246-be1c-8729e25f0d12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f81c5c-ecd3-454b-8658-089442ad4f38",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f013da7f-bd4d-4b77-b981-6c8b1ec42048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42b74bf7-179d-4fe5-8e52-f7979b56d033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d2dfce9-5f7a-47cf-ac03-bab4b773fb68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "059e3b10-7ecb-4ab1-ae32-4a289616900c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e6f01c1-3295-49a7-8e5d-3dfd2b94fc7a",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db2128ec-4ee0-4d69-b5ea-56a79f7646e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "353110c6-bf5d-4114-ac02-cf9ea8eae143"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84d25974-a846-412b-9b2e-1baf95f5c8e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "67750887-f050-4ce4-8b0a-570b157ae2d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6cad482-9cc4-4c32-813b-47457f11771a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "037af142-a57e-4e85-a175-0743ed2da799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83b94a35-2d1a-44b4-b78e-e88bf008797d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a52fc5-6f23-475a-b0ad-f7bd76256d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "002d8ee8-b233-4a92-a91f-8c7fb500c25e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cab1257f-51e7-470b-ae1d-e22c7c7192dc",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2507c08-d939-4637-8e5e-63c4a193a84d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac0ffc12-c796-42cd-aeb8-4fc7a59ed413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d09de2-8d17-4445-9827-a1bb2019bf9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3dc2c321-7135-487c-873f-07fcbc096be7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd9c00c6-8150-4e3e-bb13-00463e712760",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "725240b5-e8a9-4fec-b2b3-f41c6ea86508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18d70e91-2c09-42cc-960f-99a60759593b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da2f5d8-272e-40fb-ae0d-14e70fc2ec21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a20bab3-f6b8-4491-ad62-83a7f8dad564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be24a116-6326-42a2-aee9-f5ec069bd50c",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96406dfe-cc9e-4264-91d3-8b51ee5722c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfe5ee6f-cc7a-4fac-827b-3d76e436d93a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1b5a0b1-6e9c-43d4-abab-f4ad23e80aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a275416-95d6-45b1-97ce-d6697ffebef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7cd83a7-55eb-4f9f-b7c9-63b92203faf8",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9047fe58-7d1f-47bd-bfda-83e36ad2a59b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b6eabe3-b020-40ea-8946-f2b0832010f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bae481a1-b9c4-4e56-8a80-b41c62fa6528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ca3e38d-edd9-48a5-96c1-76e59a04bb68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f1fe559-ee05-476a-9447-335c6891c889",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d054905-9d33-4b73-9cae-13caa57cf872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e2f5a7b-3db5-48f2-b008-c3b5b6bb1ff1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f187a4c9-36ad-4703-9aad-80929535d136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "0550d6b8-c801-4c6d-85f0-ef9b1f0046bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15018159-462b-45aa-8112-ddb4a2b66a90",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36b254cd-c549-4c30-8657-7ee1730a1516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caeb037b-0330-4cfc-b5cd-76f508935c12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d5d5b38-9765-424c-b4c4-c9295d073f1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7285c329-86f1-4d14-884d-e23a2234398f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "814bca1f-106b-4bb6-be14-9f4e107ca1d6",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d47a9426-ef3b-4e5f-8a24-9fe963cc0bcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f2b23a9-41ff-4925-97f0-36d01e91a6e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2b79182-ac8f-4456-99d0-e0527f2c2862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "f33d4524-a9f7-4cb6-b1cf-0113fc6fcb8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81abee35-db64-4575-b1fd-1b9015ab2630",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8363c324-0f97-4302-a884-b48d7000d365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f36afc2-d2a2-4659-9605-872a7216b618"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5dc24eb-8d6b-4dd1-8a3f-3eafb69e4c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4be44bb-dc00-44ea-b808-4fb3a8da2a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19604531-0e00-4ec4-addd-6e2af043893b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cac567b9-205a-4dc9-8112-666fc3b85a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db2afa63-f84a-4804-a52d-94486b9b759d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e2002d-40ae-4145-abcf-a4a3574d7373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6aa1cec2-1bf1-4aca-8f6a-bf9100b51837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fcd7f17-9853-47be-a741-7f5c4b92a971",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb3f39b0-53fa-41cb-aab8-475bf454f5be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb5a1344-c78e-4eaf-9fff-205988c08437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "504295a1-d74e-45df-ab65-8c087d069c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b7dc771-75fa-4b68-8bd2-a0a2f2d729c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba4d58c1-0ad5-4e6d-adad-de2b62faca50",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94df342a-56c5-4fe4-a719-b12dbd7138a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "605596a6-732b-46be-928f-7128dcb32059"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a8742c-73cb-42b6-80dc-91af96f0d79d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7919c7f8-a067-4305-a57c-2ffdb9784945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "989c821e-6ea6-48ab-a873-79766d0bb826",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5895a82-bfe4-4883-8c62-84590999e9c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ce839a1-7b79-478c-b3c2-0546b25d6d83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a633880-4f8d-460e-aea9-d63fe29e92f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4dee90e5-801c-4447-8ed3-e0332fa38054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5180d0a-f682-48ee-8606-ea399686880c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36675cab-a787-4857-a487-ec337a492c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "008e0be0-f22c-44b7-8190-7de51793eb25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf39b19b-cbd4-44e7-89d4-26d82f6e1e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3e5e8db8-e3e6-42dc-9734-082d2ea720aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5bed411-60ed-4a54-acfd-99f26abaf191",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82248662-9ab0-4da5-815b-dfe4379b593d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d19f4e5-7d74-4fa4-8c35-32ccda1d3be8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f66d219f-813e-42b7-88d3-610564b4cce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "c209eab1-77f5-477b-a0b2-ed3df42adf92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e426e1cd-a32b-474b-b893-27b0cd37a6d3",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d14c41-b505-46cb-ba1a-a14af18b99e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9965e2be-c141-474d-a1a2-3a2b9d0dd1a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f556dbf-8abb-4f40-bc4b-929294b37e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7959ef27-43e8-46fc-82fd-ef12652bd312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36abc5fd-cea3-45fc-9d18-d9f75f282964",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c540893-19f7-448d-b3ee-a9ba19e5edb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c179a8b-db7d-4a32-805f-293c9f52a34f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "864e2a32-85cb-4410-a670-606023f7dc0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b66ea95-90b2-4579-a1b4-5a8950764751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc3a2ca0-0ce1-4393-9117-e3aaaa2dd33f",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "201b1f3d-f7d8-4b5f-89e6-09ea9f1290b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6810bbe7-2ce4-448f-9e7c-c7ed0ff90569"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7d91601-e201-4b39-a79a-a5f3dcef969b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ae42599-ef5c-4afe-904f-eccb4cc80df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3924dbb2-f22a-481d-8ab9-ae524351ecec",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "759f6d8a-5f12-476c-9078-5a151ab06e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cda10f3c-8ef5-42bb-9a39-66579acfe723"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7baabb32-2d76-4cb3-bf88-9d1221a2fb49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7bccced-5b2b-45cd-82da-e17ea33258a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dea2d4d-6912-47f9-9686-d1627c3d8655",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "071ce5fd-4351-4195-a9e4-1529e98f48f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69114257-3308-43a9-ba24-63478b7aadf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d97dc31a-7e83-433d-a29a-957173cb5297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8b53102a-aaff-41a2-bb23-1f08d0fff428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "034ba96e-8f95-4214-b0ac-146fd2a3d169",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc05827-82fc-450b-920d-9675de52ae5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05073bc8-4732-4c82-bbe6-1a7d711667a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "222fee6c-f2a5-4805-ba34-4ff0afd1d76b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca9b3269-dee1-44da-b117-cc81079cd5b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b8ab06c-199a-4a68-b94c-aacffd3f5da2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "862a3d6c-a620-4769-88c8-096552a6ada2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a035a8c6-ea80-4e4b-a99e-17391dbba747"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a496a046-f4ab-43fa-a40d-acf893f502cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "07c71cc7-c763-42a7-98a9-47f3c168091e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f5972be-9069-4836-bdee-d0f35918a19d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ed9fcad-5bcd-48f5-93a4-1a684450cea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3666cb07-1475-406b-abcd-eaa017215ea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b98c36e-6129-464a-a7ef-aa7ddfc57c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "556dc18e-3718-46ee-a7f4-c9139729e98a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14123b77-b874-4648-ae40-23781a99259b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d19903-517c-4d7c-a4ba-a31a0cec5a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "771cd8fa-a1d2-47c1-9041-9f14b9dcfdee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f735ae6c-4c8a-43d9-a060-cb1ff0210828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8bdb448-0753-492a-84b0-c81bac97b0f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c3aabd4-ba7e-406e-bbdb-c33e932074ed",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8500f9e3-05dc-4ebf-b7c9-15114ff41ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e47a0b92-8c4a-4323-aff1-f56fe1013c7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1aaf82e-a218-48ce-9ed6-331017210081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a3d18ab-75c4-4e1d-9689-42372dd9594a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "654673ac-25f0-485d-924e-11ae7996493a",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5716a0e-c81b-4e19-94a1-0f52b68984a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e580fc3-43f5-49e9-b5c2-04247b835624"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fffec6e-65fe-4386-90d2-f484ddea9f7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "10abb256-cd05-485d-9b50-c09907f51724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "878167f1-d804-464f-ada4-3ff9cdcf080e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df70f83b-8717-4377-8e7b-10c95c310ad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27f7fa39-bf2e-429b-ae8b-a41c78fa5384"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f66750c-5879-4609-9340-18290b449629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "22b13823-f188-4855-a51b-75a07e72ca5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dee36ca-0b5c-4e0c-b190-d3f8ee707e11",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b6a5ff2-4f43-4e8c-8d1e-57378d1856cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a111a7e8-756e-4925-b7bb-afbcedbd9062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7c18d0f-4de6-4932-90a3-7f6e18fe73bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aba3c8a8-95f9-4dcb-9b72-b05eddfc7d36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3225d11-9012-4f91-a3e4-a51b08f5a21f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86e065d9-dbd4-4a0d-8334-7aa980aeac70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b54c94c-834f-43c0-8929-8a74e697dc7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f65b59cb-2b70-4550-82ac-55fd5fe54018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3496297-0c06-49be-adb3-c8f617e0ed63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "593046b5-6127-4077-8b1d-63c0f82115cd",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "594f4d6a-26cd-44a2-b5e1-0769a273c96c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e379859f-392d-4eda-97eb-cea14b67eb34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c5c4800-5ca3-43e8-95cd-20a2b6945eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0efc6848-dfa3-46a7-8c56-362043c36cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56145bda-3cfa-4a56-980b-427fa661c02c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "934ce6ad-ed88-4bc4-bb5f-28ece771b65c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88ed8845-4418-4161-8ab8-256d1fc8c1c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90a2fe78-b740-4167-9c3f-d912d67fd060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "25696a52-8eb2-42b6-a0a0-37bc6d45c6d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a8560ec-1202-4b4b-ad9f-b1713e6db848",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91d1c48e-16cb-4dea-a9f3-50b05d4ae5f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8df65671-8551-40eb-b098-ff6a57b43bfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7e3ea40-9e23-412f-8fd3-0f6c2e8c963d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "35375aa6-676c-4d82-b613-e18340201e27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58167229-a68a-47a3-85fb-fbc99cc9e961",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "824f8b90-b215-4f00-b653-eed18cae62d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "668c4965-a3f1-4b06-8d93-8ba4b21b5784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e37d0d-6e51-4b88-8fe1-65171599fb37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f8c6c32-c373-4533-b9aa-ea87460881cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f8d4cd4-1e5a-49a3-85d2-f8a0c98ea5df",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf7fe31-d3e9-470d-ac88-8d67ecf9db82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a17a1c37-e8f1-4c19-971b-26d4790bc1bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1105ffc-dfe2-4e07-a895-8dcf5dbff0fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "643c63ed-ba0f-4d26-b86e-e5013b8c3d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12b67da5-d0f7-4214-baf7-18356c5d3601",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70ace8d6-51ca-46e2-a746-5483ec817012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27b685f6-f500-4805-919a-c99db2c5ef6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ae35ba-3601-430c-bebb-9725cbe3861c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "69e6818c-ad3a-4379-9570-8472fee89fdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee936f99-a858-4596-b883-9f16ac775215",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a497d48-b725-499a-82dd-6117e08372db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa730374-ccf3-4e21-9baf-92697a9b070d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeab342c-d553-4d30-b5c1-3a833940a0c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e74e86da-60c6-4317-b854-8474142f5645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e57cb2c-56ee-4698-80d2-e23bed30a175",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0893fd31-b236-460c-96ed-ee5df155e6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf68b4d9-337f-41e2-b105-960da3017293"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a778d66c-fb0e-4bab-a5fe-41262cacf9b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "360055b0-fc31-483b-b9aa-d4c6f3e56de0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "829c66f8-1946-483a-9002-99f358d1f1ff",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e480197b-984c-4cd6-b091-7b38690718bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba207d36-2555-4596-85eb-65d29314c582"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b711c0-bab8-4d53-b74e-c43d511293a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b76fa9f7-1be1-4ef4-b39b-e700fd96b53b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "268878c1-f3f6-4d77-b8dd-b7520896a537",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9cad5be-8317-4055-afd6-6da8d33ff587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34101fba-e125-4060-8498-3789d6cb0779"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a63bab19-8f2d-4a46-b38f-d252de0b9797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7cdd569c-65e7-4760-a945-76ec60ce20f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f624ecd6-823e-4cb8-acac-63392ac1c620",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db9c684-24e7-443c-807f-0623599f98ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7dbc182-d4c6-48aa-a991-92d31979b1e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd25718-2fd4-4392-b5df-a0f89d3c64dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a30d941a-d3db-4e01-9733-77432370bbc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e86276b-00d6-4cc0-80ee-011809513605",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c8f480-c633-4d69-bc6d-c640797ec464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7867324-2f70-4e2b-878d-e84e469bd87b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e2011a4-ac1c-4388-9e75-673714b7d6d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "04d909ca-9de0-4461-a7cf-14263a900663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c3b4bd6-d0bf-492d-9aa3-b51e3d103fda",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b19e483-1f77-456e-9df4-2fca79d2442a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "653a2a89-7667-41f6-98fe-6eca7a8ab4a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6719567f-6d94-4db4-8631-e0e20c78de68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5e3ee7f-f3e2-4936-8a23-b47e609b7463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce186a5c-c453-4404-80b8-71f15621013b",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7002fe3-4ab0-4ec2-a08f-ae81a5386083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bd957a8-f5f9-4e8f-a4d2-1b45553bc353"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e08a07b-0217-46a3-90e0-7bfa89b229f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d154c239-37f4-4c6f-ba10-ce4b07285d1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a50f173f-6543-4d29-850c-9a9535401e80",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "937e1574-19d8-490b-9c83-49ac99564511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f186b74-83a7-4a33-ab48-ff709fa819eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "262f91f7-1922-4717-bf5c-bc34b16bbdfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b48645c1-f999-44b3-af67-84ff5d3762b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6593a3b3-4063-4393-9c79-9fb051c5202e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6967af0a-7d16-49ae-a188-21acd30822d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01418670-3d16-4268-9dc9-54eea888bbf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ea3b1c-24d5-4366-9654-40daaed615b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "23278fc4-2217-41c3-82c5-a20df5af24cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2a5bc8c-e393-436a-a5c9-bf4aa0a60aaf",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60fef699-5cc9-4487-bd85-ca7da37bb830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40577f75-d64f-4a35-9115-56ea92cfb3e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7b063c0-1d6f-44c7-855d-3fb7a1b55db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "11f0272c-3543-4ac8-afb3-ebaa78e4b9d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fbec90e-69ea-4ba5-a6d1-20b9a0cf619a",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b56339a-f6f7-4e8c-a123-b9f3434907c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a3e09e9-d6c9-4687-9271-fb49fe2c27f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "362ccc03-24bc-4b81-a77a-f4e534aae71e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfaf4b02-f17c-4ea5-a539-1eb8a72b08f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9262f30-8558-4b88-803b-0a8a158ed890",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e795b57-41d2-417a-8353-1301403dda52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4d10b5e-69dc-4b18-a5e8-eb06b65456f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c071dc4-b11e-41a9-a1fc-8639c04039f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1b3ffa1-c607-4c8e-a82f-d81dac840b23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7824d876-ca7d-4738-9af8-22d5db1b59e2",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9a4c16c-d9f6-446c-92f2-017d13041881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80a2f46d-3b50-4126-8f4d-c1586fa4f507"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1de819af-d40c-4e8e-873c-b5d728d52658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2f0ae5aa-9766-47ad-90d6-28c3b8b6ff0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e03d0e-9d32-41b8-bf53-9f8903de0b05",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1beca67-d5ab-41b1-8247-83704230dfbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cb70471-654b-4b75-9361-2b4c560a5827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d25c2598-f6f2-447f-ab1d-1ce36e93c6d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b180c323-4bca-4b7f-a02d-60973122859a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72869563-1bee-445c-84ca-0917261bf092",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cda68d1d-8488-4e89-8889-f0208819e4f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "671010e6-16d1-4a37-afcd-cc2e83dfb7a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fa28a59-6405-44d0-83af-04d247835b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0443d782-ee31-4ffe-b8b6-5e5d3eea24bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d6d7e9b-dcf4-431d-bb30-0d2b15f412a2",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca9a845f-1b6a-487c-a8cd-c0c461e331af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e50bb166-58d1-4c25-ad19-5de09a2544a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a6dcc13-13a0-4bf0-a4a1-d49a8d9c7bf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb96a64a-d350-4022-acda-2e020f9eae40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65d2e626-381b-413b-b230-2fcc8a30b4e5",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "836f6fce-d473-4952-9257-7bd4cc22be1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "922227e0-f5ef-4ffe-bd9f-3cf0a141e649"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92349839-41b2-42dd-b5a7-a311cb848ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "332aa5fb-c1e1-47bb-8808-cb688afd63e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93ebab1d-b684-40e3-8e5b-ef7a59bafd7a",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ceaa3b3-1df4-46fb-bdaf-dfc7ee6757b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38b24864-92a9-45f3-9981-adb889b0c561"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57278a34-97d5-406b-8a97-20e429cb568d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c5670c7-5b05-49f1-81cd-3fb8d8bcc16b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f737d241-692b-493f-84f7-622acebd592b",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b77cae70-b2e0-4bbf-9410-0f9165d47f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06ad1bce-40ff-45d3-b169-ab82bd1202de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0470b7e3-ceb4-4ec3-852e-452e728e2049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5df49989-f256-452d-a0b6-d77d9d8b176d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab00645c-f172-40c5-92b1-404991b3736c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b5764b6-8df8-43c2-adf8-1debd8fc5982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "02963cd4-12c8-491d-8249-49a89de177fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "862a8b00-4e1d-46ad-8835-b16a0cc923f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d3d2fa14-3e78-4e3d-9e64-4350e9ac1999"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "59333957-da63-4d59-8393-fdfa101826b9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bd556711-01da-4af6-8d29-adc2d35c80c8",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8485f972-dd56-4260-92c4-ee4704a2ca9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "128f25f8-9aef-4429-8db0-bfddffae4432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f509737e-f091-4ffc-8ded-38e8231b47e3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38e14ef8-a695-4d81-8ee8-058f65cf8dbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb1fadcf-0de6-4686-a2a1-4cb93a28e51b",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "051cdc41-3133-4b58-a587-fc93e2f776dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc2c9b11-86db-41f3-a54b-02d170bb03f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27d1b8dd-bb13-4fb1-986b-314c237beb1a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4a478a3f-590d-4845-a05e-badfbf83ae37"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cbab5581-f67e-4933-ac33-fd4f3d2ce434",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a6ceb369-f7e9-4892-aeab-d78f3dd0f643"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "141f3294-e6c6-40a0-bc8c-841da3b764d2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "378e716a-1bd5-4b5c-bb1c-3c6cedc038c1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0a65d6ab-4404-4eaa-8c84-477db5d3faff",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "17a8587e-bb39-4c80-8b47-ef4854b9c809"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cfc65aac-07c6-4eee-86ef-eac1e844962c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bee9dd7e-c267-427c-ac07-51ef4eed3b31"
                }
              }
            ]
          },
          {
            "id": "a4c7e7e3-3920-4785-a8b8-514bad166c67",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d9692a08-ba41-4476-921a-7ca62de9b405",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ad821d8f-6f59-489d-b161-aca21e223bd1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "92e28daf-bee1-4f5d-bbc4-f331be96e4ed"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "91b9f9ee-cbbb-419a-a517-963191cce712",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3ab6ad0e-d338-4419-a9de-b2b6d7be8547"
                    }
                  }
                ]
              },
              {
                "id": "12987749-d839-4c68-a94b-d0c6a1146b9a",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "30f24755-9b3d-4afc-9b5f-a2e6dac3f234",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6b5f2ad5-83e3-4a9b-9bf5-2a62a4fc80d3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dc6d4c69-4f59-4982-be78-9f33b258fe89",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ed198119-5185-4edf-85e0-592064c3b45d"
                    }
                  }
                ]
              },
              {
                "id": "0d71d24e-48bf-4eaa-86da-2ab91e33067a",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "09d1887c-9ca5-4a0b-b668-217cd6200ba6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d06ee733-3a31-4f47-9f0f-ffa46465292e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "25420149-10bb-4699-a839-03c218189899",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bb8a6da1-4068-4ac5-9661-a474ac4884cb"
                    }
                  }
                ]
              },
              {
                "id": "a81175a6-6b4b-4c33-8eed-1cccc655b03e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a85371d0-d835-40ed-8cc8-6735481918c0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fcb8e229-d86b-4282-8e8e-7325fe860cb1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2fffe848-269e-4adc-a038-1c7259f37776",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "405f073f-db32-40a6-81ee-bc96dd138811"
                    }
                  }
                ]
              },
              {
                "id": "5e50fd26-0db6-4530-93c5-88341abb3878",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d50739f7-9590-4bf2-9374-1cfc98f03924",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "14cc78a1-74c5-4473-aee1-d98d7b564edd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ba71cf7-cb21-4f17-9bcc-d9d16a6a37a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "1152b522-23d2-429f-a08e-7888e740188f"
                    }
                  }
                ]
              },
              {
                "id": "05fcbb36-dfaf-4b09-9e9d-5e707ab672b7",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8dff7614-8278-4b03-840f-5fb6d59f5d0a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cdf0efe7-816e-4670-b4ca-ed807db221ab"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9de9c276-1713-4885-ad84-5ec0e57af568",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4df4c0cb-e30a-4f93-9513-536ae2d6942c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2f5f8e4f-690f-48fc-bf39-7014926551ee",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ff67f0a0-ec4e-4e4c-b27b-5bddb4d39398"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7a480ee9-06fc-4747-9893-90bb744312b0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "64d51663-5990-46ef-85f0-de08466e21c0"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ac4503b2-a549-4bf2-ae5c-d861439004df",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "1c673cbe-2b2b-42e7-9752-e238f3968e2a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "36eeb880-4506-4156-b05b-8e2e620c6f3f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d4ab3bb8-1824-46c5-8fed-07cf5d465c65"
            }
          }
        ]
      },
      {
        "id": "d7dba342-30c6-450d-909e-87456abc6cda",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "09b5f59e-c09c-48ba-b18e-76f818611486",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b88f2eed-bf99-4323-9d36-d5d55dba09b7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2cac051b-5a2f-4129-935b-4e034e9c0120",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc9f3235-a013-4911-a358-3d234ace6881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aa9cbbe-83d5-4876-bf06-b5bdf58c98de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8b51cd2-5542-4bf8-bb74-ce4068ed294e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "1659b9bc-5cc2-414a-ab55-cfc9a799bce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf162b29-a66a-445f-a317-1473c6813e54",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0675fe7e-bf0f-4baa-b19b-9051041ef5a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a86845b-57c4-42c2-8894-b8402139a3c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd9178a3-daa0-428c-9912-b73791ca4977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a189b8a8-e1bc-400e-a750-f232c5027457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "207bc082-cde2-4109-ba66-438ffaf50520",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3484c9a4-8b3d-4ef3-9265-f2a879f990b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8dbbedb-d8b8-4894-8b70-d54889e9bddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a7cf268-34e2-4f61-891a-1bda2935e008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "73f01b58-18de-4cd2-b815-9c4d5fddbfaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f722728f-c3de-417e-930a-96d393ae0c3c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e172a9d-d340-43ee-8a9a-599ab925886a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bc33902-19ea-4e03-8cb6-8e3506b956bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91143079-36b2-4565-a73e-305a73a15ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddad6ee8-15c6-477b-a52c-bd239978903f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a99df17-335a-46f6-8d75-9ee40c26e66e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4352a72b-be48-44af-b353-75dcb4b302ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a4a0e89-8343-4836-be19-c8133284fcd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2293baa6-95a1-412c-8140-afdbb5c65ce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c06fce6c-0536-4f5a-b031-a01fa147b70a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba3d280a-2b2b-4b56-a017-fdb921a0ac49",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c4f6ecb-5405-44c0-8f3f-6cb49c3bab85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7de8ab6-f0e1-477c-9e74-e015c2fb4370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc8f2384-eba2-4a10-b37a-dfa7d6ab3b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d588033-b574-48df-8a61-868235fa947d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "358a4057-66c6-46a7-a13d-926f14790285",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6babd289-2d1c-45f6-8b72-45c2b405114a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44e74fe9-cc65-441e-97cd-2f19de5d8f97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7256606-0b62-4178-bbdb-b3cff561c6f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2ec6bff-b5b2-4199-96a4-7a4020ca3294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6be07706-922c-4c16-b8e7-1b0a7992ce6b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b758d5-2c35-407f-a86b-2ba0b5a2ba5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d53501d6-1d93-42ff-a572-efb0d2aea799"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc997a40-394e-4a4b-9bfc-b051c8448e83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5336ca27-477c-4738-aa6b-27d70f85cea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28921544-19f4-4946-a768-edb81aff9d04",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "229f8a99-3026-4931-b9ae-13eb120303d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9946e01d-d916-41b0-a34e-41b3448e5919"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62366d73-d33f-45a7-a07e-2f8032a963fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4aca1b5f-2f95-4ee5-954d-afdbfee7a1e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7166399-3081-4e7f-ad4e-7af1bbbb67d6",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b153f23d-c6aa-42cf-b227-9e0123fc0044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f75bd7e8-eed1-4d78-b9cc-5857ace38514"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9616522-3379-4e5f-90d9-68a9a8862449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "353cd948-ce5b-4250-bfee-54097d84d23b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40374753-04cb-473c-98b1-4cc931dedd02",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae51e8ef-3432-44ef-97d3-c4a959d79c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38d20ad2-a8fd-4c44-a77e-225c95b60929"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86c9c3db-330b-4259-8938-9a4903041211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "bfc2bec2-d557-47dc-b64f-faacd7470981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcc1dfc8-2d1b-48b1-9fb4-09ad07ef2381",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8bdb5cb-1b66-471a-b5d3-a9318386562c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9c2e1da-2c4b-42e8-8798-5f044c3b0979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b82bc7d5-2296-4839-89ff-cfb3c880745a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7f914e70-bd65-47cc-99ca-04d16e745f0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad863341-8c8d-44ff-9f8d-01192f77d904",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef9e9ba1-c8a4-4727-8d2f-2e13c671e7c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8d31e3c-66a0-4428-b3f6-8c81f51a2fbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "657ae9a6-9734-4109-8caa-89b3e198c6ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "998457ed-fbd0-4a39-b37a-f7b9c81661d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75a5616d-ce09-4a16-aa79-08a61ff832ab",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4069171-b954-4756-aa0e-117796a9eaa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9930302a-12f3-46c6-ad73-cd72b89cc524"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d4f7728-7009-4b05-bd17-b739de996b8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3e832b4-319d-4f36-a0b2-cf441cc85176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b73191-d729-4939-b93e-4d31245d340e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d4e739d-9de7-4160-b78b-9f6c586e2832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1677017-9457-446d-90de-2d1c5638e9e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50dbbfcc-1e72-4093-a61e-679ea131f28b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "26e4e62f-3b19-43f3-a36d-ffdef77793dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4602bfee-2067-48d7-b39c-1042f5456322",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc9f654-8058-4e5e-a806-a4e991adb750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe30870e-d82c-4f7e-bb3a-c5c56eaffe23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dedb52ee-3734-47ad-b1c6-e64595d46445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a0c7406-60aa-4fc4-9491-3c3a2dabba00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3943f23-0c3a-405d-869b-03b4bc060c11",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df141307-e05b-4a0d-be04-d9b454422a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f034f4be-e534-428e-8a2b-b301fe636d83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e7b848d-8f95-477f-9664-2fba141d6504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "919445a0-6209-4b3b-acd3-e95ec74d9dba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba6b93cf-fd96-4d6f-a0fa-8f96dc97c39c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a819175-6bd5-4f57-9b97-fb2a5548b733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a1d3d44-5d55-4d65-9d73-446c3ad793ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f26a5391-aed7-4d1c-bdd3-b89bf10e7e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d85e8a85-f263-4a99-9654-266c9acd5d33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c104fcd3-9fea-4070-9060-9cd3c638faa1",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8893ca71-c532-41a1-8cb4-05a1e8ad2544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd886a82-882d-49df-b060-48f7ee172028"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38c9e97e-66ab-4898-aa36-ea6b0fc4d322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "157b13ea-455c-4ce1-9e86-c7a847fa4916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa633f40-dafa-4008-8b7a-82148f1138ac",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a50b75da-bd1e-4012-ae6c-e7f1e6f76413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26e4547c-c3de-43bd-8f49-8d4f34323c59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e2922b3-387c-4713-900a-778a7de951dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "457fd419-36f5-4da9-ad6d-3589347e7d91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d77a83c-ede0-41fc-8598-3185ded10a24",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed58ce8f-a6e2-4d76-b4f4-1fb2e5fd0cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ffa4188-2fd2-4b57-8c40-384da036b2ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7e443f2-2cd8-4e13-b1f1-4d6d015c42a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a52e79f-15e2-403e-bf3e-310755ec5afe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ed6a03a-995c-4798-98e2-4fb5c9bc9a53",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b6cbcbd-d58a-401e-a2e7-0f5795b3c447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6cbe4d2-7302-488c-90d5-bb4dd35e0f8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7959d6c-4349-4cd9-9fe5-0a9d6c84f240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da3143dd-d608-4401-a75a-181c6f90f59e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab3e988-8bb9-457b-9910-845af3c59fb8",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ebd1319-f65d-4946-a77b-1492f25117d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64226e72-ac4b-4359-b417-7e0461ed7b9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9874cc67-517e-46e7-b861-289c45ad4c03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c97a06f6-7d7d-4308-9645-cab1863c1b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a967930-6f09-49b3-9776-1e929b312fa4",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c4209f7-8cde-49e9-aafa-62ec317e8a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a06834c0-9db9-4573-9759-5370335a27e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3618c35-e510-4549-b4c4-494d16386a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "100887df-6182-491f-9dbb-ee819e96bdf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "932bec1c-da67-4272-9dae-0928406f047c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb71de28-d9a1-4f0a-8708-13679c4c1e58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "713b757e-5d65-45d5-a7ad-6e84015bd898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd48fcf-8953-4b7a-9a83-d9962a0121f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7a478fa-953c-446e-a152-323ca6b316ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfd64915-abd8-42e3-97a7-ae34b264c3e3",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "065d917e-6d3b-4b6c-80b6-5ab7fe99410e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2a1fe95-02b1-4f0b-b57a-a6f92a0b9e6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eacb3aab-b225-4d75-911e-fc372f98f74a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "67c5cf10-7740-4934-a1f8-3f5d6fb0c9d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7130f75-77f1-4060-b92a-ffd29dfd75b5",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af6ebdf1-844b-40e1-b0b2-43a68e10e795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e972014-2b0d-4fde-8dc1-30ae45227473"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7b8857b-a7bc-4e09-bf43-8eea06e69d07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "427cb8b6-68ec-432a-b981-30ea44b1da64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a1b162d-8977-406b-82a0-3baf459b27b4",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0892d16b-70e1-4fb0-a70c-bbb861e7815b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6290a70d-266f-4c48-961b-04597ee85615"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "849b9887-2a85-4e91-96d4-99a17f0ef7cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "712f839a-155e-4dd0-81f7-b24bb6c84f13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84408102-b703-442b-8b82-1d63f616eb5c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38d164b2-f450-4293-8112-a1ca6f9f7de1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dbe25b1-fc5b-42e3-a403-9352519dc73c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50056f61-829b-4f8e-93b2-0f9eee985e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c5a8893-ed67-4e6a-84fa-56a01ce75d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "304d3c65-007a-4a26-9fc8-f63c133fed9a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae6430b-d951-4428-a262-2699210b1e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1d5e70a-43ca-4dc5-acc1-c8f5df8121e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0403039-e14e-4048-8b24-35e901f2ad27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c49660c-7dab-45a3-a1de-d521a6ada710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d11e2b4-0ad2-48fa-a8e7-85a178db1153",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d26021a3-1978-4352-99e8-13158124faa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0debf447-03e2-435d-912e-7383b1231911"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a716111-02bf-4186-9396-b314e4fab904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f578dbeb-01be-4462-99f0-ac010d947c39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c819ed78-d828-4009-b4d2-ad09ebae0a50",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e8a9fd-1454-450a-ab41-91d9d2d140d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cad7ed5-74ab-4a21-a928-5ac6c833c395"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3589a490-ff11-465e-8eca-c83953b7a5b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8ff16b3-df05-49b1-b2f2-50c0b2550f7b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "91a044bd-52e7-4710-aa2b-bf0de4f809a2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7f76bbd6-dcbc-4dca-a548-4517732a71a6",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a136638-98ef-45b2-bdf8-597f7d8919ec",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9a8835d3-3de4-486c-ab2e-9756fa40694d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "004df4da-14eb-4b78-8d3d-b4678f07afe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d4e7d1de-289b-437f-88f3-38a225e25576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "075d97c4-04df-4834-8dd9-f3be610fad30",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77ecce38-08b3-41a2-b696-c17f17cd6be6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "07c776c3-b7fc-4c9e-aec3-db5fefffb66b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ddadd3-3171-49b1-9377-a6345bd974d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6976b5c2-b7e0-4047-bd53-65fb94fb99f2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b07e7c82-3125-4fc2-821c-4c4962d670ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "13c65ad0-97dd-401f-8e4d-0962bdd65349"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "63ac2f07-888f-4bfe-b357-f9364707c5d3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "733efc4e-65db-47ce-ae3c-78e10fd599a0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "27bcda67-45ed-4f66-a92d-f3530333a939",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "db2773fe-651b-4759-b34a-063d848e0266"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c56e52ba-d94c-4f73-b447-0cace59a17f4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "38b2efcb-650a-43a1-89bf-2cb48296adeb"
            }
          }
        ]
      },
      {
        "id": "5588cf1d-6cbe-471d-bb46-e9613bbcd2b6",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "bba26c4d-fc02-487f-b30c-28e81ba0ee9a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0530c3ee-ccc8-44ef-a84f-676d20735ae5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "daec3953-eff8-45c1-aaa2-927d553f305f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff681638-2cca-403c-8a49-8a1ba0405624",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5df3aa0-f4fb-4304-a267-22d1d1c585b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84da5a0a-db33-4b4c-9581-e39b3d5e7e13",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dba26d57-2501-4e04-a7c9-ca6336d1a09d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cf1bbe6-5202-4177-9b99-9fdf1eb66d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e66d430-466b-498d-818d-21f770843a4f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "765e472e-b830-41ad-afc1-a46577f67a42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99ec3dc9-3318-4d89-af37-7b43d40878c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c92f4c2-df67-4063-880a-c881cfa8fb85",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfdf00b8-431d-453b-85ad-8c6b0e2e4d86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2b7f208-1ec9-417f-a309-86dbec707ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93b0fb24-fe11-42a1-8787-2ab63219da48",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c3c187-65b0-4a96-8930-86195f0554c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a76a521-d61b-4c6e-9e01-41928466844d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e951eb6d-0364-4633-a6ae-db40ce15e41a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70c35875-25d1-49af-b947-302d460e5314",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4676d167-7262-489c-8091-0d42e9750cdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78412b74-9756-4925-b473-850c0cd91d83",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e841e719-0b57-4e9e-8039-fdccd1e910e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a3bea69-1aa1-4d4a-ae89-fcafb185dd8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ea668e-6969-4bc5-9a09-e9503ffc3ae4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c028cc73-e682-4465-8f3d-745940636f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f8ff53b-de1c-4dd7-82b6-1dd851ef26c4",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4417c1a7-59d3-46b0-b736-632e22d603fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f7f162d-ac26-4cf4-81d6-0e57829e4abc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61dda3d3-1fb4-4486-9226-0047c6f4e4f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0884816-f1a7-4c11-b22a-1d4d716de2c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27b2fa7f-c597-4363-a374-fc8b893226ae",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b3d8169-2c3e-4221-9336-fc97f81c723e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3406c884-868c-43b3-ba50-ced50ff92c57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f15737ec-6c2b-46d9-87af-1a02028aa542",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9de844e2-a1ca-493a-a570-49d50026c81c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28641dfa-425b-40ba-b4cd-c65b4fecf54e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b9deb04-544b-45f3-a7a8-73c4363aba6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ebe65e9-ea6d-417d-bc43-38d0fef074a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf566fd6-cde2-42e5-a097-430a4b6fb234",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d8337b3-899d-4502-9fb2-344e10689184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e6d0b10-292a-4cfa-84a8-027b61d77540",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6083e01-5de9-4b0e-b387-3f52a9d042f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81815b59-d678-441a-883c-bf8343bc5fa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf334e1-0c5d-41da-82d4-6ac3ccbdf1e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "378acd18-7435-42aa-813e-75b7c2ddbbec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3711c6fc-5998-408e-be77-3b515cb6a472",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a08a96cb-af81-4e79-9723-e10692ea1fa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44a4b63c-8c82-4614-8845-903cc5f49861"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc29e195-b705-44e3-9207-3d885683eb87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "653fda1e-95b8-496c-a927-b2e6d9d8f2d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8c491f6-60ed-49bd-a90a-98264f7a5467",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63da0f04-8555-4045-a5c2-88b14b37dccb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41075ed3-8677-42c8-8a4c-869fc07f08ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2fd102a-c556-4817-a669-90dfd876cb83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09a9c7c0-1462-4735-bda1-7ae2b348a20b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f32ce651-9295-44ec-aa86-c38621bf4cba",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc07d77-3809-4cd1-970f-e628c2963de9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd34b998-550c-4eee-b8e0-b8d162485fa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce6d45bb-24c7-4296-b3e7-dd81cde12864",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f2262b0-34d5-4dac-a6e3-4ea1daa15976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53e5c9d0-90f4-42bc-a610-e1e6d6462325",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f89ace64-a7aa-44a4-a307-be3b13c7f3b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f57685e2-649a-4910-befc-acdd60878970"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbc97002-f469-4bf0-b368-6ab90cccf4d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e97e6f78-b3c6-435a-823d-7a6bfcc1c772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dc75024-aade-4039-accb-13b97e7c1b4d",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "450dbc28-efc9-440a-bf91-c8452b3f082a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c716e9b-937a-4e9e-8a78-56d52a0cfbbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2039d0eb-e33d-4cf2-987a-e2fabe44c1ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d06e8cc4-8a1a-45ca-8d9f-bbf89e81264d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c9e9184-c98c-4748-8d19-a834d7c33d0c",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15292dc1-8516-4e67-b590-68d969f11adb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bb74da9-29d1-4119-94aa-ca276d4e6295"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2858ff1-c26e-4883-9979-9d8f9fd1e787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "948d148d-40ad-4c92-acd4-902fb038ec62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbbcf009-412e-4384-b96e-42c83b50ccc8",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a77a789b-4a27-4273-aace-cac6f3ca241d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69d0bf14-96e9-4bdf-9f18-69841537f583"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adfc7738-a40b-434b-bb2c-6463fab77823",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fe06be9-562c-468c-bda2-9d94c56b1e9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb0e52c0-a4a8-4078-adb1-062c137c33f5",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d36da7ec-82a7-449e-b3d7-c142291f483c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dfaf483-0e91-43e5-9fa9-993c0f1318dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1ace681-d2aa-4ad0-855d-372afb10988b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea06c74e-6193-4d85-9bc6-a9090425c4ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3815c857-20e0-4bb4-a0ed-7de9de4b9c51",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ce7453-7c00-4510-a198-645b43bad332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e15bf9f-2f0c-48b8-afbc-8d3c277f5ff9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b13b223b-6654-442c-b19d-14060b329a63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c84a4c4-1f91-4726-aa84-d92cd0321b1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c85ccde-a83a-44b3-a577-fc8bfa4e4bd5",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "655274d7-1a8a-4cfd-a2f2-0392f634eb43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6d71c52-a5b8-4a0a-a457-d42aeb595868"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7bf9538-df47-4102-a3c6-6af88de985b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b42df48b-7b08-4eb0-8aea-c8d8732f9c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb56c4cd-e99a-4fb9-a399-eb45446b2ba3",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "463b45ad-4196-44d0-911d-9e028293d61b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6be22d5b-32d0-4fc4-9aae-da44985bad6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f0c1647-c6b4-4399-b897-47e55219f635",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c1dce25-37a9-4829-b503-5fa78bd12417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba11e3a5-e601-45f4-8bd4-ae3089442c3a",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "967da778-a621-4fd9-b2ae-d3c6519fe8d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac504e6b-7cbb-4459-97b5-71aaa4610b94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26dcfcf7-9da6-435d-aa19-7953a19c0068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40fb22c0-79f5-45ff-84ef-b94b48f1e1cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "909985b9-04cd-4c25-9235-058210ce17f6",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b335dc1-b1fb-429d-bd5f-868de5c9364f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58953037-5800-41c3-a1c8-ae77c4f1ab80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1bf2972-4e8f-40da-a4da-43f71d8f3536",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8164f8e4-933c-4f3d-a6e5-b1afaedea54e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2c46aa1-30be-4e4e-8334-56d42396875d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c747050-a142-4bbc-b192-34f013718745",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a98e08a-f7d9-426a-b800-a47243df891f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24fc61ce-c7ae-4055-a217-11bef8341f2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e897950-1ca3-48da-bfe2-3726c41cd8d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36d825b4-1424-4306-8c8e-df1d2d706c17",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f61228fa-fbdc-4320-bfee-8623af9cdf12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac759466-8042-4154-81c9-5e0d11950b58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2326b392-c79d-4693-a122-f8c57d4a5dde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b65b2a35-2569-4016-b578-3f8dcb8ee859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6324f75-a2c4-4695-9d74-3f07121ad4f2",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb5660a-c4a7-4203-a5eb-642efdeb778c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95d84623-9d54-474f-beb3-9223d3d77a94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da9058a0-d82a-4390-945c-8310005f1c67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83ad32d9-3f03-4103-bdd3-6e1e489cc2d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35615673-b265-4251-8ba7-43c1cbd3f9f4",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4111198d-a9ae-4f6a-8da5-dcb9da2ef354",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ab65049-9c8b-41e7-978a-5fea2bc47c28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f559e79-b4e5-43d7-8e6b-0bc545f8162b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9a398a7-ed97-4cc5-bc8a-a9b71b970fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b83bc13c-e983-4e9a-84d9-dbceffd673d7",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49ce48d8-d957-4c6e-bf75-ad21e7f7cfcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cbdb633-31e4-49c1-95d2-e9d5c04a4f9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c1f27dd-56ed-4844-a203-315862c4021e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37157831-cd78-4b53-a033-c1d45fd7e158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87e9b288-d5e8-4713-a5db-1a14cb51bcd6",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd7e6eff-0c88-4890-9c4a-240c29084ca8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e16d42c-f686-49cb-856b-5c6707b666eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eb6f2ef-0114-4246-b3cf-208bdbdc88ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0da54bc-aab3-4b91-89b1-64d4b11dcddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74727828-ca52-4851-ac9d-e483b7ec5991",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "078d0c7e-11ff-4604-aaf4-2cf76a1cfbb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc0a3d05-9b09-4028-af61-d6c6e8b7bae2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ff7c9e-4bb1-4faa-a17b-a9393d5be75c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22d2ed67-5405-4ff0-b8ad-360a304bb4de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d913327e-9a78-4d67-9721-dc4226ee9a98",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d9fff5-6201-40e9-b6e0-7f70d53e87a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4e5fff1-a5dd-42b3-99f4-508623a5e5f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0396c236-4d33-48e4-9edd-dde43406c5be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5002fea-461e-4202-830b-f1ff4f3ff543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1248d58e-bffd-4482-ae66-cf2ff422a0bb",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c8e0b97-9e45-4b23-8f4b-2db21a495779",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b533bf6f-fa8c-4deb-8567-34d4c85e2a20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "297a84a9-0d37-41f8-ac39-f28a653ec249",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "190826e1-a8fb-4c55-a8b7-186534b1f911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d5ebd8f-0776-4e16-8151-1b32172a9dcc",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21bb25ae-1d91-4996-b22a-9ab254ba8867",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4544e85e-3106-4519-852b-a44fe6548f38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9924aa62-e621-4eef-875f-cd7f0a762bb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "863ddcad-26f1-4621-b0cf-c8b4eebd03f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbb8090e-995d-46a1-b304-06b1240ae97b",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d77749f-2707-49b1-8b11-49a7614ec770",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dec42c01-d2d1-41d8-bfff-dd33fb3948b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f292746-b0ed-4666-91a9-734f01da963a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23494d41-0165-40cf-b16b-f3d86644ade0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af87802-3fa7-4514-89d1-b27dc74c0ab4",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08f97711-cb50-47ac-8bb7-878515f2f52d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "548ba551-57ef-48df-b3cf-2eec7dd1eb9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f2f68b9-292c-4a9c-98f1-a78f1a2f2a24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e6d575b-9f69-4e21-b369-c60cc10e6514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6291149e-eeb1-4af8-90a5-f2e93c43467b",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0334d5fb-8890-42f4-a40c-3a7ee92f1b0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b36e534a-6112-4cc3-905e-8658a86c11ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "357fb820-8932-4abc-ac33-4ca55126356f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c832dd4-499a-4bff-bbb2-4519b51e22ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "043ae164-9e59-4869-89ff-48368d4f6055",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e922c7f8-0ad9-46da-bfae-daf2db63e49e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "679cf6a1-8706-4f3e-bbc1-795f19cb9d3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a281ec7d-5bd9-4717-b162-a73001bd5e5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1d43663-d4ea-4200-8685-79cea40aa54a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32ab0945-b003-490c-ae60-0c8a39124406",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f501c44c-bf86-4cc7-b55c-cebc810d2b7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4448186-c4ce-4efc-8869-47e0c84c65a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a4a6a7-eb8e-4513-b3b4-3224460ce68e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c08c7e4-f3ae-4ad9-b0f8-c947953a3d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ac52ce7-bc44-4d9e-ba1d-a563d866994c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a170c5fe-9a8e-4c8f-a596-6b52d71329af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0faac0d7-135c-40f9-a280-884051fddfc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fe82e17-1d5d-4c47-9a52-5da039f7888e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86739113-35d7-4323-aa39-f6bbee33f920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c42bd2-7dbf-4501-889d-df6a45b98b60",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42685d18-c4fa-49fe-9830-e3d52c903719",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28a0f2b3-8c04-4504-a42b-e67fa608a588"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc2d1fdf-8d26-429c-889a-4f4bc2f02f91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fca724f2-1520-45aa-bdfc-2b4b5fc6da37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "016bf29b-02f3-45bc-a334-6484f6069a50",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12a9203b-5a77-4393-8e20-a73332f6c825",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebb05297-ef05-4864-93ee-94151e72c255"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b010aeb-6a30-4af6-a224-300977562922",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2d89ff7-16f7-4cfc-ba86-51ab254e1d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "081f2c38-cf58-4081-95d6-5660049abfed",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "493e9547-d5fb-423a-b1a4-f0b126352df9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57933753-b94c-4fac-b78b-4ca6567a1efc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "298681ea-9d15-4dfa-a426-3e69355cb2ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce782cfd-5564-41a0-87e8-9d321a689d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d776e20-6354-4af3-8712-5f8f35b94d3e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f31158cc-6c2c-45a5-9c20-310027490f81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cb0d7f7-1aab-476d-b843-336657a85876"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd53c338-49f4-40b9-a8a4-712a68a28f1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ba2fc92-b83a-4b9f-ab5b-e3137020bb6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb929eb-8b6b-4a50-9562-7c2761766032",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83534d99-dcdf-4b63-8fcc-fdac11cc76d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a4b5f7c-5926-4618-8946-8a123cd760ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d261458-a05c-4dc6-9894-49920c3db937",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2da9454-f41a-4134-b512-2b895e677a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa94c5fe-7044-4521-89d9-92bf95803a0e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3de6eaa-10fd-4177-8dd2-8b39ddbdc481",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cc0e698-f70a-4ff8-880b-20cb4bf84d48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d271b3-3002-429d-8471-4b88939e5899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b86dd62-b518-496c-896b-82d23144dc6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fbca138-ace9-4894-92a4-88bff49450e1",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8c89c89-7320-4bdd-bf16-7eb342b384c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c3bb70a-a79e-49c8-b780-92453444e377"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c61a34-afbd-4fb4-ae7c-7bff05f92871",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77877ffc-c3ff-4ff1-a8b9-a0c84724a5bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8eee7e9-dfba-4fc2-8ed6-45ebf9631e60",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9295639a-4d8f-479a-83be-b4756292f278",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bff9fcc-5491-4618-a302-765c77de6a20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "458f08ae-6032-49e3-a0c9-fe55b2dae0df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d9ff477-323c-4a7c-8623-272400624784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4b156b2-9da4-4747-ba34-9db781cf7a42",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1242087-f653-4b2e-805d-6ede24881d3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "240ef0ce-48a1-4ebf-94ac-96dfbaade7eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c39d1146-4c26-4dbb-8512-760c41295e1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fc138ac-5ee1-4f8e-9026-0db35041ff92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5af8545-a92c-4b44-aee4-1990316634c7",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dcf8cd4-4e35-4299-8614-10a4dcd2d914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "449f40b1-b11b-4d4b-9df0-55ce01038fe2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c45e5459-2225-4e71-961b-c84864382b7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddae1dbf-a613-47d6-ae5e-d40e32b3c302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea2b45f-8ca9-436e-aa86-b300dbfcd4aa",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d36538e-1e10-4dfe-81e3-d304ce83e019",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3008823d-d3eb-4677-a4ce-a91470a1c562"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de2e2972-5174-45ce-bb02-4c7eee7375ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af2968ac-f8ed-4534-b14c-47c5f9495e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a4bb8a1-8f67-44e4-b371-6efde4d7eef0",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e4709fe-463c-4271-83f4-873104f1c6a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04664982-399a-418c-9bad-b43916fcfc7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef4b91d-7cea-4b14-bd09-76e20f197557",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1463585e-ae7b-4df2-8c76-c12307a02dc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c11a65e7-9d0b-4295-9e2e-7e86f62a11a8",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "038e7c6b-00dc-4e4f-9a46-05518a21294d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c00da734-f71b-4903-8fb2-907ef63bac93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d86f57a6-a2c2-4b76-9294-9dbeead06905",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67dee064-267a-47e1-b9d3-de7c22aa392f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e355cc6c-972a-4b8d-967f-30b187ae3958",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06286c2d-e4d2-4b81-b823-2f4462ec06df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b291346f-4096-4a92-896f-bf3143858759"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd8b84a2-890b-4869-b6ee-63fe860d442d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c6d3ac8-a96e-44f3-a59b-c47166e12f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78838380-c055-4418-9a09-c6d5d1303caf",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d6fbd1c-74a5-4e93-a43f-45943f218d27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "468101f0-f4a8-4499-8e30-3dcf08b9f2cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f11cff19-2371-44bb-a655-a74d2c02c56a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56b4beba-28bd-45c1-b406-b3d0b16c25d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "690ae371-a506-4fdc-a766-080b7c01dd88",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b9f129-3ef6-4dcb-ac0d-b02c92301f11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95d69430-4664-4220-9027-778a75b238f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a44357a6-4ea8-4d58-b0f8-2798e7b289e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d93e1b81-e1a4-4fa7-8fc9-954999e316a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "697035df-2f9b-4b29-8f60-512fce37963d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a729eff3-4d3e-44ea-978f-348565b47401",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c71cb4a2-1e93-44b3-bf3a-4ea650644bad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a23bddcb-e46a-4a70-969d-2fb81f534ed0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59934f6b-eca5-43d1-8ad4-bcb38347c753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6416b09-fefe-4017-9a5b-1fac5746a58b",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea3614ad-a325-4ca9-a2d3-ed3c2f988adc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "259412cc-7035-44b4-8d7c-013fe6a9ee7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30742153-dd3b-4c83-bec3-6ef2c3191ec4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0fbbc2d-b57b-4abf-b0a6-692cc933e4a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd01b35f-1d5a-4f6a-878b-749740eaf59b",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23bf9895-b147-4d57-8bef-3bb168bf5652",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e11c8b2-666c-478d-99cd-022ac99f0791"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f95ef4b-0084-4234-9ed1-fae94aea8725",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05341aee-e28c-453c-a4b3-5d3175513165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5014a0b-9f48-46d2-950d-b242a8a67360",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d85c9fd4-8772-4ac6-b6ae-b025b9bf267d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8103e0a-7f40-4e85-bd58-d7568e6eb2f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c32dcc-cb3c-4974-9402-5d4703c19e82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44148b83-db23-47ef-9c0d-286ae954bd7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36d7a2a3-9fef-4ff2-a68b-d79c80795fee",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22e1d621-90ac-41bb-80db-56f14bc49c81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3ebf7c5-bffd-4d74-bd3c-e84cfa5d1b26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09e6ed93-8d17-44c4-a8ca-d98b22155b65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cbf9105-9595-4054-a1eb-5934c41105e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb6bc5fc-581e-447a-a9b6-9f02430692f1",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d1fc3b-6f3e-4a91-958d-2ae12eccabe5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7adbd174-17d0-4101-a715-b769d6ca6921"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e24d689a-a067-4132-aa59-91dc8f3dbeb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "697aef2e-868e-40ff-a378-a564fdb02c72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88454c3b-0b90-48e0-bf0b-ce6c6ac699e4",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fa16a8c-307f-4c52-8758-8705874b95cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06767a83-d8b5-4c8d-a5ae-13a94f2c2bfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de4d0e8d-9554-4585-9120-fea5f3c4dcf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7f78c08-0a19-4514-8793-bdaa098fbcc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6044f888-3901-440b-8d2a-536a9726f737",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ce210fd-08aa-4d6c-acfe-14ce40c17d1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53b9289f-af44-4d3d-8e0f-1af9176dd484"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80e7cb5f-9e12-457a-8a52-b2ed0ccbefba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b9d25ef-e50e-480e-bf49-896355ea3bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9758c2ad-f2de-477e-b8cc-3715767b478e",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4c08c53-c51b-43aa-a6c0-535ebce6c0e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4a7d993-9c77-4a37-bdb4-0e98eda3fa89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3594adde-509c-4bcf-9c12-e2b41689c01e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "533b08d9-ca55-4fe7-b08a-f1608dffd467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "955fb41c-3c06-4022-954b-36d1a7e174d0",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e51130b6-1b7e-456d-980c-67efcc997219",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "348c2d6f-047a-4b89-b841-b0083195caa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9948731-784f-4680-b1c5-5aa4dac45736",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aab54c4-14e9-4b4a-ae97-7ebf477c56d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9641b029-bd43-40a6-99d8-e6429487fe16",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eadfd756-e808-4efb-b48b-cbbe7e08b9d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3cc9984-076b-4b3c-90e5-e5a719942ce9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ada0dc0-61df-4bea-a9c4-58ed25cb29a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce3e37eb-c875-449a-a182-48a3b2c8dda1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c0fd6ca-5c8b-4b1c-9c10-2e5550506014",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ca1800c-af84-4422-a09a-e8fb60611599",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba567bc2-ee49-400c-b56e-96e717e52f83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fea8c52a-d201-4a64-9b85-6875febdea6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51193a16-f8a8-4c04-9486-ee51a6e27651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdba4010-e37e-49cd-82de-8af6312a9ef6",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c99fd7e-c13e-4fe8-a944-9d0cc353d99e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1726c2b-8c92-4809-b157-817d502dd132"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd69aa91-ff14-4e63-b176-620645a40914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae90df67-ebd2-489d-a12b-259f9598659f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c18dd9b-9b39-4628-88bc-46069c42bc2d",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb6e44de-9779-48ba-9562-7f2dde32625e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15de8034-f2f5-4ddf-8176-36c354fd12ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd0c990c-388c-4677-972e-b2084b824c45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d7542fb-9e2b-48f3-9caf-ed6a84ed7620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe756e6-b251-4d74-a246-f3a44221cd9e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a86c21d-1af8-469a-9aed-b3aa591eff2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53071bb1-02e5-46a0-83a2-853da919b636"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb98d736-91c0-4f9c-88b9-2fc2d7e72421",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "105183a3-945a-4c39-826c-a80557677a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c47c5ff-6bdc-4765-a2d1-eb89e14e2079",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66b5c91b-35a5-40d2-9678-1f150ad784a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16360d8b-3088-4fae-bb41-92e25bd4ebf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dabf8de-7b36-470d-8785-251650ca8387",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18715dc8-c883-489c-b665-f6fd8d1d8943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f44164-90e3-459d-b755-c15e2f66a70a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bc9b84c-18e7-4acb-b1ff-69e787a440c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5372b1b-7a05-4585-91b0-0a537cc4f26c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "920767d3-5bbd-485a-9301-b49d689764c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "244fab56-83f9-4a3e-aaad-15db3c710860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0246a1a9-9f28-4f71-b878-1affdfe837a3",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7357c2f-b442-45f1-b0d2-2573647db481",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df7b5ed3-39c8-40e9-b682-96efdc0394c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c23f726-4834-4429-82ee-f896005f6404",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f9cef2b-86ef-4883-b9b9-c93484fc2a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f10e391-58e6-4dec-8038-752bb49f6716",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00e87f4d-f2ca-48ea-8592-9bd7ea7f6312",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e9ff81a-cdcb-4217-aaeb-40a06c2a1d4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bd773d2-6562-4402-b6a8-4ecfe6826ee9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a19ee2fd-8474-4120-94c4-0bd0aa39dd5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd056e21-323e-404a-977d-013dde9ff082",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d258cdff-9314-45c2-9cd6-746be65a9689",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c37ce7f-1372-4823-a25c-a51eac0132f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cf34f09-2ce5-48b9-ba6e-9bc07969813b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31ddc02c-61f0-4f65-996d-8fdc7fa95e3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23326e1c-24de-42e2-a285-6dbd7a8bc92f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe49235f-46c9-48d3-819e-093dbe2aa2a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef2bf807-a241-4578-b229-966ac39e5399"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3d40e4a-4c4b-4ec2-9769-23ae4e82feca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "852cd140-e924-497f-837f-0fdc47344684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79cc99d9-6b9c-485c-9ffd-16989379f25b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f96ef1-85d9-47b4-be9b-d6c91ea41230",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54b94036-1c57-49d3-8d61-b797cc5f7afb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89afed1f-7ea2-409c-acfb-b24b3d2d11bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29bd8ff7-d868-4ab8-8ca5-7003da40a268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fda516a3-c7d9-4de0-9250-d215b616e68d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ad12ac-c4b1-4811-bbd6-2e0bc2813895",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1130bfa7-7e83-44c2-99ae-7b1729667ca3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cc4cd12-7ab7-45bd-835a-19466adc52bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70f69bb4-280e-47de-8cf7-35340fa3ef30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc901777-bf7b-4b0a-9ba5-9cc2f12de1bf",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f678af79-50d3-463a-88d5-dd3058172486",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9f74a71-6983-44db-af2b-3f0257e1f685"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc7199b6-c035-41a3-9f20-d4348c4a1942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fde28769-9545-4af1-8b8d-daf8d824a834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37607605-63f8-4fd2-ab47-d9628d2f7702",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bec4bae-70ac-4978-82f5-7701fb25be48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ae6657e-71ff-4f3f-aea0-b585dd880d69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15dff473-7003-4cf9-b172-ef5feddae7c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f9a8824-3975-4a09-b0e8-0813cbef2755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b65b3ac-5659-4aec-b4f1-73a43b3fc538",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7ea891f-a742-4124-a887-142f08afa8a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88c50566-86c2-4aec-b779-273ad48e11e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b5c8f04-d893-4b1d-b384-b1f1f39d0d2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2dc0abb-6163-4b49-bdc7-e43ea01f81d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bf4337c-2824-4d17-a50e-751b0e0af1ca",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "559c53a3-3df6-42cf-bcca-afdb05a3469e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddb71307-7bbd-42cf-ac71-759758d45d04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc1b8753-554b-4f94-8647-1d0759c4d365",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e003ed79-4583-42bf-ac42-8ba1d0c4e0b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf05767c-bb5b-4869-9e48-2c92bac8a208",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d87903a-6873-45b9-9d5e-41df2ba2d6c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "baa5db79-592e-48bd-b01a-ef9fb82b81de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52667d49-caf9-46a1-bd01-5b6ab369f2cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3850b00e-e1e7-495c-a691-cd2aa86bc7ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcb7540d-596d-4e7b-baab-245e6e9c1b0c",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c68fa9c-8c80-44cc-8c03-9c57eca8ac4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e99dfbce-221b-468e-b4ab-f1da4bdfcf5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad4222b-6518-4d84-ae15-9b82616764f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17b7f7d6-1a56-4aef-95b0-932d962e21a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7972a7f4-17be-4cbc-bf19-daf9d78e7d32",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "945c7518-a2bd-4102-8cdf-6d89fce90d22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c786124-e827-4be3-87f9-6d2e8a015f77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a96999de-0a55-44fb-a8b4-e8bbc9be28dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8bffb76-3204-4ef9-92c8-eb8fca1862fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7124294f-4f2a-48cd-a88d-06259edaf7d6",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ad5e14d-1e82-4993-80e8-5bbadb945122",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09bd5d1d-5af6-4b0d-aeb6-66dd1ab765d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c6e7ee-9f02-4c1a-9067-2d888d871300",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8af87750-7ab5-4b80-8bee-78e9ff11a6ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "204753b9-5f93-4267-93cf-442213140c7f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d6dc0aa-4521-4730-a415-8b9b5117727a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a382b28-9e39-427a-ad7c-735a66f0c408"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d395bbd-047a-4c90-bebe-93c3c4d9ca49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc39fe69-017e-49ed-857c-7382458acf5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f1db3eb-ceec-4745-ad6e-ca4348cb1415",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a57f342-b781-4292-afa3-590f1247d116",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1493df12-6137-4b8b-8080-384dc9065c8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63cd632a-3768-436e-a834-f7105a1fa04c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50913e76-0c0e-44f5-ad89-77ee9dc64913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71231d25-5fef-4bdd-8b6a-44c2e2a727ed",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d184e5e8-b794-49de-978b-c147a96fd847",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f210aa9-b9b2-4700-9b41-995fab3bbc5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bce846d4-07e0-4d5d-9952-129a0ec6cfc1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22666f19-9eb5-44a6-ae28-7d816c25e862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca049755-b29b-4b2e-948a-98cc754cecaf",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18e331c9-f300-4b9a-a13a-0b27b3ed44ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "742d287e-c399-4e11-9ca6-fb1d1612a328"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f8968e6-ae10-4d42-997e-00700787d8d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "741ea97c-7692-44f0-8d91-cb7c4caaaba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f023977-dacc-4a5d-bc49-63d52ba261bb",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41713f77-ce22-403f-9726-ec9b0288b653",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "543a31fd-7aa8-4fd2-9f30-e7cdc409a561"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3981436c-4011-4129-9d6e-399c82c100a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66299bfc-c244-47dd-ae01-f362bf1c98db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "769983b5-b584-4854-ab37-47bf2bbea38b",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2151c44-0d64-4d97-bcdb-227eba6b073a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a5b80ae-5ec8-4aec-a71e-509b853aefbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f8624e-627c-4cab-9fde-7c92955e7bf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2745da0-3a23-4456-884c-125d77f3d277"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b73dbf6-b6fe-4489-a5f5-c6801e5d33d6",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30f5463f-afcb-4b91-bd7a-688af13488e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9daa5c66-186d-4e85-a9a2-a743bb09bb07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65273163-de49-46e0-8527-9dd83ce69921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c69fb82-dd6c-4f19-8e3e-65255b1718bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca822fc9-e82b-48e2-bddd-0fe90048fc1d",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdefdc86-d239-4496-ac66-948bd4d99e19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63271d8c-ff36-4b23-a0d7-7be49f1dae62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d16a9163-02cb-4b9f-9a9b-35c4227d2c76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "147502ed-e1b6-4694-a476-82b63b90dcef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64e927f9-9d66-4835-8fe4-ea58795b862f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f66cff56-d1fc-431c-b773-3746155c3c32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "070bef9b-4edd-4f39-8f97-61bf3c8e0ee8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84be2c09-9c6d-4943-8193-6aac0ec1da60",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d583b57d-ee50-4f43-b2fc-8733c5a945e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62fa1274-d919-4399-bed7-10f6839d59c6",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9cb0bb3-406e-489e-836f-6df85924b1fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09775237-15f7-4534-91b3-5127a7f3b17c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8703aab-252e-4fc6-bd33-9ba9fc190800",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05fe92a0-0a0b-4679-9612-b58717774f8c"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "de6e0b64-32d1-440e-8cea-f86d6309db26",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e718b9d-35bb-4bb7-9abd-95fba54676b4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f745d0d-3993-46ce-b41e-3d80ae6ee13e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "52165843-1a71-4200-8fc0-6d4c003ccea8"
                    }
                  }
                ]
              },
              {
                "id": "d7673b35-8c2d-4244-ae03-87ac28bfe925",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "092da3bf-e775-4f9d-b46d-87d8617c5171",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43ebed9c-6c21-47dc-a537-be185f11fb7e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a07c0e4c-da0a-4a24-801f-99f9967abe3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d01c73-f2fb-4ed5-bf01-1b1e0b2bd09d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6bfd7250-f469-4e00-9d64-6521334b0427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbe19ee5-1cb5-4641-a6ab-5963fd2e43c6",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8554391-9799-49f6-b92a-aae6ed01a9ac",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "eadf16d2-95a0-4828-9c6d-7817ca4b3bde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "393f25b2-aed2-4885-b0d9-cf5c677ba061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a416ae36-f2f8-44a1-97ac-09a2700351c6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "18913419-099b-40b3-9619-0cbead4f62a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "82cda157-4f5e-447a-a07c-a6f5a753c61d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b8c116a-0941-4b8c-b0a5-f4bc58097e80",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1b32c5fb-7486-45fb-8d9d-8cf708c71a65"
                    }
                  }
                ]
              },
              {
                "id": "f5563a24-c7c8-4408-b364-ca8c8770e11f",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "399a82c4-e1c6-4578-a413-06df371e3788",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b11c86-e97d-4140-9ff3-e54676cacb43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "43096526-6708-4b35-8387-42594ccd48a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed057518-8ebb-424f-883c-05795181f9db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b359389-bae4-4f44-b160-fd5f14ac3675"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "fdfaf649-7362-4772-96af-a5b38a5cacbf",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d9479b06-4567-41fd-979a-c7940228222f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "085d42a6-2616-4f9b-99c7-c98ff0b6f659",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8c9002cc-da78-4a1a-bb15-f2193c5f82e4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "34337732-c771-4e22-bdca-7ce70a5ac97c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "febd6163-c6b4-44a9-845a-06f0ba0ab25d"
                    }
                  }
                ]
              },
              {
                "id": "93698110-0959-4e1a-9457-f14823e15a9d",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8448935b-beae-4198-9bb9-dec62b41c3a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b96b9b75-49b6-45ee-9540-a2aa716b0d19"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "79643d1e-0869-4362-9093-e71b74820198",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f0c23878-8c0e-4d4b-a4e3-c5cab2406497"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "716ce84d-f850-4f63-9fb8-1fcf72c3269c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c23ac80d-7fe6-4950-90da-cfc9ef6546fc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cfff2991-719d-4882-a23a-e9b692a3a268",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f2aca07a-a15d-44c8-817b-aa6a2665befc"
            }
          }
        ]
      },
      {
        "id": "31d34108-e570-46e7-922e-bdf275b1daa4",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "92ad9336-dcc5-4753-99ea-4cb9fd3b2420",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0d08c44b-44ee-4864-a210-7cbd377e1131",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cbd9725f-568c-4974-bad5-05fda98f7fb9",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "335c1578-3bdb-4256-b413-7842d630f3ee",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4179533b-dbda-4b3f-ba41-58278a101657"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d6c4d97-1db0-4a21-87be-ef5732051f79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "65322525-b004-48c7-9fe7-33439e00bd8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f524d67f-b74c-48b8-9a0b-a9258525c48a",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8747fe55-d38f-467c-b12d-87b6dc5a28cc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8c770e38-6ee6-4379-886c-b2c7d4d9e195"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f69e35b1-6a00-4864-8cda-9cdb3e6c05f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e0ab17ed-c6d1-4dac-840e-feee1f41c5a1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3921dac1-a84d-4542-a61e-971391b3f4f8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "343b2507-321e-4749-aa3f-b5480850d54c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "41d18efd-056c-4487-a42d-9065f96cb70d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a12712cc-fbf1-405f-8726-c5bb9b59528b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1cd07c38-7d59-48d4-a73d-531fea8019cf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b17aeab1-c08b-423f-b51c-53a9db27dff9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "59a244fb-b7e8-4f4f-8bf0-85818f7c72d4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "42a20799-f3f0-4bb3-9b2d-db839a25b10c"
            }
          }
        ]
      },
      {
        "id": "1095d036-628c-43c9-a12a-f065970997ad",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "337aa07d-9ee1-4caf-9790-1c79a035d089",
            "name": "Negative Testing",
            "item": [
              {
                "id": "144c0b66-66a0-46d8-829a-76a3cb315b06",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "94c3dada-9e9b-4d88-8a5e-016ee9bd9da5",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "539c9692-ae41-47bf-bbe9-40423a1506e5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b65796d9-160f-4d16-9a8f-69fe1a78810d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e8dea8-8b9e-4180-b081-792a40a4a1e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e38cadab-673d-43cb-b8dd-4028ebc8d4fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87d3444d-6d6c-4174-a2d7-88b6d9f593fd",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5763a759-27f0-4392-8dc1-089d56819c01",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "96908579-71bf-463d-9f27-dd81c7ff12bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac57ae0a-5498-4e33-966e-9eec6f9479a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "021c3251-d2e0-46ec-ad41-5e68b4f5a75e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "de278a7b-8a07-475f-853b-a09ce8c305d2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "32904c78-9483-4352-adf3-6b131575eda9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "234564c0-a0da-4a64-9646-e8ba1174ea12",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "63c19b7d-1c85-47ba-9345-f874d7a2572a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b28554cc-00c2-417c-a299-c75d5c16f0d5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "be30af28-0ea1-408c-89da-dd79be61cf80"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9ce0b1b9-a226-4c71-a25e-0f4a76f9403d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "da538959-74c9-472c-aebe-dd3f56e7a95d"
            }
          }
        ]
      },
      {
        "id": "cb46a588-cb1b-4206-92d4-dd8fcac3dd3a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "639959d9-53cc-479a-9681-2a4567f9ee93",
            "name": "Negative Testing",
            "item": [
              {
                "id": "efb1b30f-64c1-4ce2-84c3-65fa753720cf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cbefabdb-8150-4314-834e-3e7fe4b9740c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90e5b824-cad0-4a56-8b0b-a06484c10fad",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1da65f27-8ad7-48b4-90a3-2868ce9b1a55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56b0488a-aaa7-4487-95df-76a39c532a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "067ac315-c8b4-49c1-a908-eda6eed72dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf67869c-dc78-424c-ad46-a58be2841c45",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35bab1f0-5d12-456d-b2ef-3663275fc916",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "29e52469-4061-4e0d-ba24-586c35dfce49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c338876-c280-4a38-8b4b-91765ab64876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ecc9b981-8725-410a-a8db-f0825415c6ff"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "81237557-2f15-42da-a7aa-0e1d9b449db8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "97f8cb5a-3706-4afa-b051-5e32c3070eff"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d56b91ae-4e81-42d4-a396-9c91b904dc40",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dc7ca616-b29b-477b-9edc-e0742704d78f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cd49d729-26d4-4406-900a-5ef1f55c4b35",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5706ccc4-b001-4527-b4b2-3b9289c59820"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f3aa474-fea9-4884-a95a-66f97ee5eb1b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d44508da-38d3-462d-9199-2d5261192c33"
            }
          }
        ]
      },
      {
        "id": "7ca28172-4f68-42b8-9099-101b2e64782c",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b15c9853-5f2d-4d34-ad8b-45c3680a4ae0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d14397db-b1af-4db2-be6c-c2a9dc964d91",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "47b15b69-0da2-4712-a67e-757a25a0b09f",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f5b5aa43-617f-456b-b90d-ca3750a11911",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "599da52a-8a15-4443-ab04-3175defc4292",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 296.30769230769226,
      "responseMin": 22,
      "responseMax": 9134,
      "responseSd": 836.7571777739428,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1684542944816,
      "completed": 1684543032951
    },
    "executions": [
      {
        "id": "628ad6b7-9838-433c-b635-63e8d29ce32c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3644e53c-0e4d-452f-96fe-02a234c4f246",
          "httpRequestId": "171fcf7b-6536-4899-ab75-b9e4acaa700f"
        },
        "item": {
          "id": "628ad6b7-9838-433c-b635-63e8d29ce32c",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "275f7cc2-2561-486a-851d-b296b4976df6",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 0
        }
      },
      {
        "id": "9268eba6-83da-43a2-9b35-2f4803c0d7f6",
        "cursor": {
          "ref": "720db777-974a-4f82-b42a-f887a53134a0",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "db479bad-a864-4f62-81ad-0e6ced2f428f"
        },
        "item": {
          "id": "9268eba6-83da-43a2-9b35-2f4803c0d7f6",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ea4b25bb-131e-4787-a5ca-ca67ec2e18dd",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 0
        }
      },
      {
        "id": "9d6ae472-d3d3-4c2b-be42-95a519adc3fe",
        "cursor": {
          "ref": "065838e4-45f1-4d28-88a3-1f9b8eee2c2f",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "339a55d1-05e6-40de-8eea-22214f1a5c63"
        },
        "item": {
          "id": "9d6ae472-d3d3-4c2b-be42-95a519adc3fe",
          "name": "did_json"
        },
        "response": {
          "id": "3bdd6232-5cf0-453c-9dd8-88cae31de773",
          "status": "OK",
          "code": 200,
          "responseTime": 427,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e5fb74e-80b4-4085-b2b4-18e0d5f22c94",
        "cursor": {
          "ref": "041ed592-68b9-4076-b12b-6da8ae4969c6",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "df23732b-5d0c-4b76-bfd8-346437601ebb"
        },
        "item": {
          "id": "2e5fb74e-80b4-4085-b2b4-18e0d5f22c94",
          "name": "did:invalid"
        },
        "response": {
          "id": "a61d3515-4ace-427a-9664-8bc96be9c2c1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1385,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "2e5fb74e-80b4-4085-b2b4-18e0d5f22c94",
        "cursor": {
          "ref": "041ed592-68b9-4076-b12b-6da8ae4969c6",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "df23732b-5d0c-4b76-bfd8-346437601ebb"
        },
        "item": {
          "id": "2e5fb74e-80b4-4085-b2b4-18e0d5f22c94",
          "name": "did:invalid"
        },
        "response": {
          "id": "a61d3515-4ace-427a-9664-8bc96be9c2c1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1385,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "61faade2-abfc-4dd3-b94f-aed0597611ab",
        "cursor": {
          "ref": "fe00315c-0a8f-46b4-8512-7e179aea2161",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b59d1860-a2f5-4a29-8590-f669dc4fb8a1"
        },
        "item": {
          "id": "61faade2-abfc-4dd3-b94f-aed0597611ab",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "0f4f80c4-c678-4dce-81d8-3ab21c6fcaa9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 67,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cdce4f4-22d8-4d2b-ab16-3efec46480d0",
        "cursor": {
          "ref": "0339b221-96cf-4676-bb9e-e3dcc65a5284",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c0a06bd0-20cf-4abc-9a57-e15e4f2030bf"
        },
        "item": {
          "id": "6cdce4f4-22d8-4d2b-ab16-3efec46480d0",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "866933df-e75b-4898-aeba-e637fa676da7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 71,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "768c7acc-1a3d-49b7-9660-c57bce3ba07d",
        "cursor": {
          "ref": "ed39a18e-7289-4169-8385-2a7881ebc71e",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e5e15f9f-3dc4-42fa-b954-9b7f637e8150"
        },
        "item": {
          "id": "768c7acc-1a3d-49b7-9660-c57bce3ba07d",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "081da746-572a-4513-b095-84901e20fdb6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "fc276284-8744-4ed0-87a8-b90f2f893d4d",
        "cursor": {
          "ref": "316e329d-cb91-4e8e-9a0d-7826237b161f",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a89e21c8-2c24-4470-8304-e91334ca26c0"
        },
        "item": {
          "id": "fc276284-8744-4ed0-87a8-b90f2f893d4d",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "107bbf42-e73b-41e2-9d2f-9460b2e74a15",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "fc276284-8744-4ed0-87a8-b90f2f893d4d",
        "cursor": {
          "ref": "316e329d-cb91-4e8e-9a0d-7826237b161f",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a89e21c8-2c24-4470-8304-e91334ca26c0"
        },
        "item": {
          "id": "fc276284-8744-4ed0-87a8-b90f2f893d4d",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "107bbf42-e73b-41e2-9d2f-9460b2e74a15",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "bbeb5de2-d8ab-418d-8dc6-a76ab6bf5f77",
        "cursor": {
          "ref": "84814c47-c11d-4706-be5b-79f316f34564",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "273c5f56-ab17-4472-8ceb-e4887c92207d"
        },
        "item": {
          "id": "bbeb5de2-d8ab-418d-8dc6-a76ab6bf5f77",
          "name": "identifiers"
        },
        "response": {
          "id": "1ed2fe03-8bb8-4d96-92ad-30e2c100e568",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dc09c39-ea94-4100-a1dd-86ff4544da82",
        "cursor": {
          "ref": "88fdb455-fe3d-47bc-a894-9b27154da69f",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5529c2ae-ded5-46d2-8513-a4ad09705318"
        },
        "item": {
          "id": "2dc09c39-ea94-4100-a1dd-86ff4544da82",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "39e11220-e6c8-4388-8b6d-3be4d3f189d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dc09c39-ea94-4100-a1dd-86ff4544da82",
        "cursor": {
          "ref": "88fdb455-fe3d-47bc-a894-9b27154da69f",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5529c2ae-ded5-46d2-8513-a4ad09705318"
        },
        "item": {
          "id": "2dc09c39-ea94-4100-a1dd-86ff4544da82",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "39e11220-e6c8-4388-8b6d-3be4d3f189d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f8f03e7-0d92-44da-b345-cc04bd3f28bc",
        "cursor": {
          "ref": "5137ba86-2d09-4aba-aa33-e47afaf8b7be",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "16c21c11-4b3e-4ee4-910e-b14f141448c7"
        },
        "item": {
          "id": "4f8f03e7-0d92-44da-b345-cc04bd3f28bc",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9da778c5-45df-4b54-95c3-47a39d788e3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c441fe3-9487-4b32-aba3-a5f91431e19b",
        "cursor": {
          "ref": "58d9e559-c6c6-44dc-a89b-db6f7f89a66a",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "6d5b1131-634f-4e97-8de1-daa57ecae7d6"
        },
        "item": {
          "id": "3c441fe3-9487-4b32-aba3-a5f91431e19b",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "35462157-3847-4317-96a1-65deb6a250bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1491893a-bece-46a9-b6fb-8061ee5b10b2",
        "cursor": {
          "ref": "2a613bab-2128-4e1a-bf85-b85c5643b791",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "db49846c-2c8a-4f08-bbe0-3ab1172589b3"
        },
        "item": {
          "id": "1491893a-bece-46a9-b6fb-8061ee5b10b2",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "d8de0846-0e2e-46bb-a0b1-2bd8000636e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "051ade1b-8781-4a69-924f-02dc8259ded0",
        "cursor": {
          "ref": "7e13a6ea-0622-4653-946a-eec6d0f993c8",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "24da669c-774a-48e6-b3cf-f59e265e88d5"
        },
        "item": {
          "id": "051ade1b-8781-4a69-924f-02dc8259ded0",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ab7e79ed-bc55-4d1c-b312-9f666a98c234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5c35a1e-fd81-42f7-8872-3a539392b1f1",
        "cursor": {
          "ref": "a9216c56-3924-4e0e-ae1f-a31172be7c55",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a0016f5a-a021-4def-bf9d-2443b52c1e3f"
        },
        "item": {
          "id": "c5c35a1e-fd81-42f7-8872-3a539392b1f1",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "85b51285-2656-489f-a467-235acfcbf653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2e5d025-156e-4c12-b10c-ba20a930e08f",
        "cursor": {
          "ref": "36e7f5a1-1a64-4db7-93e3-c31bfc276fda",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ef34ed46-d74b-44b9-a3d2-d50bb0ab980d"
        },
        "item": {
          "id": "b2e5d025-156e-4c12-b10c-ba20a930e08f",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "1b590f30-9111-4e29-93ca-263a0d484073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9365aeb8-cbf9-47f0-a69c-39d0c18d3452",
        "cursor": {
          "ref": "098aa31c-abaa-403f-b7c0-c59544b4c553",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "7116353c-9602-47f7-a186-58abf267bb26"
        },
        "item": {
          "id": "9365aeb8-cbf9-47f0-a69c-39d0c18d3452",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4dc3c350-1762-4290-9725-0e6b04175890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f781e3f-77df-4e09-af60-b731771703e1",
        "cursor": {
          "ref": "79536a77-b67b-4485-9d50-8f5d21d3863a",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "5b664c56-e02b-4820-b5ae-5787ed7f56ca"
        },
        "item": {
          "id": "3f781e3f-77df-4e09-af60-b731771703e1",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "bfa51e0b-2f1d-4951-8523-32a8facc788f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c5d0de-5a68-41ae-ad8a-63ae4727a9e8",
        "cursor": {
          "ref": "aa44d729-7ee0-443c-8f5a-95c30ca0e2cb",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "017f9a67-9c11-45f4-a973-dd5977f3eaff"
        },
        "item": {
          "id": "74c5d0de-5a68-41ae-ad8a-63ae4727a9e8",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "67f36b83-f866-496c-aac4-b2edcff84d2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfed66a7-1eb6-49db-915a-984ca854cc30",
        "cursor": {
          "ref": "4f56841c-3f11-4123-ad87-85fc57c64084",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "228224df-37e7-414c-85e4-320c640d8447"
        },
        "item": {
          "id": "cfed66a7-1eb6-49db-915a-984ca854cc30",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "36f64430-8579-48f5-813f-4943179f559d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6819cb4f-0647-4d64-bfcb-ff0b15315159",
        "cursor": {
          "ref": "3db76808-3c95-4005-bc7a-8041c64855ba",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "0901a9d9-8f2b-4fee-abc0-d8c2dbc5f410"
        },
        "item": {
          "id": "6819cb4f-0647-4d64-bfcb-ff0b15315159",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "6011ffc1-1e7b-4785-b239-33a1f4578097",
          "status": "Created",
          "code": 201,
          "responseTime": 997,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "12fcf5da-29d0-4752-ac34-e2ae18f91d34",
        "cursor": {
          "ref": "57ff391b-aa2d-4c0d-b1e5-23d54a484bac",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "82c4eb0c-b5b7-4232-8648-90121d762fe1"
        },
        "item": {
          "id": "12fcf5da-29d0-4752-ac34-e2ae18f91d34",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "9899f408-d4b9-4584-9d15-784b0bb211df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff27c066-f227-4b4a-857f-87edb1f297a1",
        "cursor": {
          "ref": "2b3c4291-5434-4e0f-b431-4f909bd8ae38",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "6cf9beae-3075-4ea9-95c3-4d49b7f3a9a8"
        },
        "item": {
          "id": "ff27c066-f227-4b4a-857f-87edb1f297a1",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d0d37b3d-e5ba-4f41-a68d-370548c586ac",
          "status": "Created",
          "code": 201,
          "responseTime": 9134,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "e83aa5ba-5a4f-4b90-9b41-73eefaef3c4f",
        "cursor": {
          "ref": "0a53d693-468d-45f3-be3b-02e094eecd1d",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "36705a1e-9bfa-4bf4-9aea-2646d37b0c59"
        },
        "item": {
          "id": "e83aa5ba-5a4f-4b90-9b41-73eefaef3c4f",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "b94e150a-d19d-413e-8d14-12c85f0dceaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "308d35c2-f1ca-44b4-9099-586a3f5d5fd9",
        "cursor": {
          "ref": "d9a29655-a3af-4b36-917c-79dad6fdea23",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c1e14b89-6437-4e16-a778-081ae2e25afd"
        },
        "item": {
          "id": "308d35c2-f1ca-44b4-9099-586a3f5d5fd9",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "1c6ea7b1-75a3-403c-b3d7-73402a0d9353",
          "status": "Created",
          "code": 201,
          "responseTime": 4341,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "f4b7fb83-d6e2-4330-b441-373cdb7c3125",
        "cursor": {
          "ref": "393aadb8-e85d-43c9-befe-456aa1e803f4",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0bea880f-dc9a-4434-b970-12206e549eca"
        },
        "item": {
          "id": "f4b7fb83-d6e2-4330-b441-373cdb7c3125",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "991c2528-463e-4b50-a763-dbeff9f8c4e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cfbaa7a-d333-412d-8c44-9335c746ad9d",
        "cursor": {
          "ref": "276cea6f-b16d-4325-8d19-145554fa57ee",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4d087a67-3e02-4066-bdbf-6cf6274f55b3"
        },
        "item": {
          "id": "1cfbaa7a-d333-412d-8c44-9335c746ad9d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "0eb96629-ce48-4ca4-b514-2b24f6217146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a0fd71d-5f42-4d86-9f5d-bd4def2d3d99",
        "cursor": {
          "ref": "9cae46ce-1cf9-42c9-9df4-d2c87fa32e18",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "1bd22260-041e-493b-b805-174ce30f15d1"
        },
        "item": {
          "id": "2a0fd71d-5f42-4d86-9f5d-bd4def2d3d99",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "e824c571-160d-44e9-bf96-79b6c2410393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db22ac6f-e54c-4877-9aff-1d200f685a53",
        "cursor": {
          "ref": "231ae625-1a0a-43e7-8bbd-1328b887b479",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "341680c9-632f-4fa5-95e6-5d118124b667"
        },
        "item": {
          "id": "db22ac6f-e54c-4877-9aff-1d200f685a53",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "ad7d5f3c-9374-4a4e-8a9f-c71150eb6b23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffad1773-626e-4fae-bade-3be270b256e8",
        "cursor": {
          "ref": "4059fdbd-2830-4195-a65c-1a75ceed9171",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c2589a02-46bf-40e1-a2ba-f312835810bb"
        },
        "item": {
          "id": "ffad1773-626e-4fae-bade-3be270b256e8",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "dec6a37d-f38f-477b-beed-0aafff5ebf76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09bc9ef9-8252-424f-8d6d-435e900df9e9",
        "cursor": {
          "ref": "ca725517-c32c-4c1c-beb5-d8db766bd868",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "e1edce73-ee38-48e7-b72f-ed14e39b70ac"
        },
        "item": {
          "id": "09bc9ef9-8252-424f-8d6d-435e900df9e9",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "fada52d6-9134-4e5a-bed5-b7878a7ea56e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21b10f30-fc1e-4cc1-b688-5f89f7da46b5",
        "cursor": {
          "ref": "8afc176c-956f-463f-a78c-43fb9291cf8f",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4dc74f99-cc12-4c51-bd61-d04a78072590"
        },
        "item": {
          "id": "21b10f30-fc1e-4cc1-b688-5f89f7da46b5",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "06e46c15-65cc-4d10-90d4-37169abbc726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3bada1f-e2df-4649-9f55-69425ed6eb6b",
        "cursor": {
          "ref": "59ee5ec0-d08d-45d7-a8a4-bda5f14eca2d",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "23f317d7-1076-46c8-a644-4548dbdff4eb"
        },
        "item": {
          "id": "d3bada1f-e2df-4649-9f55-69425ed6eb6b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "639f18a5-1772-4665-a6ea-e7b49c5070f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaefcb95-88bf-4124-a1cc-34ecd8a2c854",
        "cursor": {
          "ref": "2ced5c5d-2985-422f-88d0-877ad6cf6769",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "986d0ecf-d854-4c71-bb83-75bc16b5af64"
        },
        "item": {
          "id": "eaefcb95-88bf-4124-a1cc-34ecd8a2c854",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "3c39dfe7-339e-4384-a18d-d106d6f3536d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5853436-50af-41d2-82cc-193daa083691",
        "cursor": {
          "ref": "32fa5f0c-6d89-4cba-90ab-7a7a7a9b40f2",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a327eab8-ab41-4769-bef7-f4ef7f7376ad"
        },
        "item": {
          "id": "b5853436-50af-41d2-82cc-193daa083691",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "f63bbd65-62b4-47ad-8def-7cba64606a1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d374a6e3-6b25-46c7-bd6c-c423694b1acc",
        "cursor": {
          "ref": "d1131688-6d68-46ac-8bc0-77ff5d0f76fa",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "21191388-2ddb-4721-9493-a7b2f3716538"
        },
        "item": {
          "id": "d374a6e3-6b25-46c7-bd6c-c423694b1acc",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "48fb8b5b-60ef-40dc-86cc-e0356577295e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5520dc30-4a43-4ff3-8f19-a9d226fa70c0",
        "cursor": {
          "ref": "726fbc38-62c5-4075-9dc2-629adce0b825",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c0c68a48-ec7c-4fbe-8c13-5e5d31efaa1c"
        },
        "item": {
          "id": "5520dc30-4a43-4ff3-8f19-a9d226fa70c0",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "86f4ab92-8bc1-4fe3-8392-0ce6ee372b41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8a54580-8093-4f0a-8778-43a664cbd6a1",
        "cursor": {
          "ref": "5e3f6aab-6291-4f0b-84ae-b1f23cbd7aab",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "4816c1ef-32f6-418f-8ebc-c711dfe91f73"
        },
        "item": {
          "id": "c8a54580-8093-4f0a-8778-43a664cbd6a1",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "130327d6-380c-4ec0-b050-a0062a43684f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "436523da-b299-4991-825f-ef3587fc24d5",
        "cursor": {
          "ref": "20fc7590-3dc9-4e91-9cd5-5dd30a6afbf9",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "7c051657-6766-42f9-9a90-a66c8767ad53"
        },
        "item": {
          "id": "436523da-b299-4991-825f-ef3587fc24d5",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "7b7b7124-b44c-434c-a6fd-acf593205b85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcbd6ef2-09e8-41b9-a450-d5cc3195a0f4",
        "cursor": {
          "ref": "1d2c481e-9ae1-4388-91c9-0f8f6fac3942",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "eac2639e-14cf-4997-a4a1-74fa4d5ae7c5"
        },
        "item": {
          "id": "dcbd6ef2-09e8-41b9-a450-d5cc3195a0f4",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "1bea094a-397c-4ffc-a82e-bd80442ecf4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b029a48-ec5f-4911-bbea-0503de813dea",
        "cursor": {
          "ref": "41a94559-ec68-43e6-82b7-fb6470907a7b",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "1626566d-fac1-48c3-bba1-6a13d86baa2b"
        },
        "item": {
          "id": "8b029a48-ec5f-4911-bbea-0503de813dea",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "dea4de4a-2edb-4d16-ab30-7494fec6ed74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85870b0e-52b7-4970-bdd7-e1ea3936d2bf",
        "cursor": {
          "ref": "828d5af0-9e25-46d3-9125-ea0c2ab890e3",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "490fae67-1c5c-4222-acf8-4b96bd252a3a"
        },
        "item": {
          "id": "85870b0e-52b7-4970-bdd7-e1ea3936d2bf",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "4c5c7ff3-93aa-4601-a9dc-f7f1202eea44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "625b3b18-8614-49d7-b28a-65aafc120e0f",
        "cursor": {
          "ref": "a6d5924d-ae68-47df-aacc-eff67dc0b10a",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "790779d8-657f-4d99-b4ca-3034e5e83f31"
        },
        "item": {
          "id": "625b3b18-8614-49d7-b28a-65aafc120e0f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "dec8a82e-7b37-403a-852f-5633653c259c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09f81c5c-ecd3-454b-8658-089442ad4f38",
        "cursor": {
          "ref": "b0fb67b6-d08d-4297-b7f9-d980a9c2fab5",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "5a72693a-0ca8-4d09-84ce-f20fd9d0a3e0"
        },
        "item": {
          "id": "09f81c5c-ecd3-454b-8658-089442ad4f38",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "c532a596-7ebc-4f21-9481-ff3d7cf86924",
          "status": "Created",
          "code": 201,
          "responseTime": 2835,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "1e6f01c1-3295-49a7-8e5d-3dfd2b94fc7a",
        "cursor": {
          "ref": "7282c65d-1394-4a03-8a28-3007d8402028",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "d7d0f068-a389-4a2a-af1e-e3c3186b92fb"
        },
        "item": {
          "id": "1e6f01c1-3295-49a7-8e5d-3dfd2b94fc7a",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "10964602-1b97-4410-a177-88014e130d01",
          "status": "Created",
          "code": 201,
          "responseTime": 2103,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "d6cad482-9cc4-4c32-813b-47457f11771a",
        "cursor": {
          "ref": "211ed229-ac63-4690-ac2a-aabd241c9ac7",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e079068b-633b-4ab6-bf64-2668845aa372"
        },
        "item": {
          "id": "d6cad482-9cc4-4c32-813b-47457f11771a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "72ac6917-1940-4156-a080-dec06889369a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 135,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cab1257f-51e7-470b-ae1d-e22c7c7192dc",
        "cursor": {
          "ref": "981f00cc-2484-4f06-bc73-fc7e46fb7453",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1f1a887a-e47d-4bd0-97f9-93c4cae7d9bc"
        },
        "item": {
          "id": "cab1257f-51e7-470b-ae1d-e22c7c7192dc",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "7a1d322e-b6fc-4328-85a6-cff84a65e030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd9c00c6-8150-4e3e-bb13-00463e712760",
        "cursor": {
          "ref": "cb65f890-ef74-4c50-9beb-362c306bb9b8",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "17290fb2-806e-4631-92fd-b1d3872b0278"
        },
        "item": {
          "id": "dd9c00c6-8150-4e3e-bb13-00463e712760",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "1ff1d4f6-0343-45e7-ac20-649e0237d216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be24a116-6326-42a2-aee9-f5ec069bd50c",
        "cursor": {
          "ref": "fe2592a1-673c-4b8c-b100-19f0b94f89fe",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c2cb2860-d4a5-4f62-8e6a-0ed57add08ee"
        },
        "item": {
          "id": "be24a116-6326-42a2-aee9-f5ec069bd50c",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "bbfc1f75-b24a-4f52-a142-b4c0ca0366c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7cd83a7-55eb-4f9f-b7c9-63b92203faf8",
        "cursor": {
          "ref": "16888cdb-0f2e-4455-b7e0-bc9edc1023c4",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "63650f12-bd23-448a-9b31-b1f85abc6fe4"
        },
        "item": {
          "id": "b7cd83a7-55eb-4f9f-b7c9-63b92203faf8",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a9f05f2c-86e3-4074-816d-d505a3091fac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f1fe559-ee05-476a-9447-335c6891c889",
        "cursor": {
          "ref": "1e3544df-2872-4e84-adca-95ba4d71096b",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "798abddc-5dd1-4540-9090-e657412cba20"
        },
        "item": {
          "id": "3f1fe559-ee05-476a-9447-335c6891c889",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "b501326b-e0e2-4cd2-b3c9-d0e6fc9d4b4f",
          "status": "Created",
          "code": 201,
          "responseTime": 2054,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "15018159-462b-45aa-8112-ddb4a2b66a90",
        "cursor": {
          "ref": "90825c27-5cec-4ac1-8c42-6a96626dc30e",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d966f275-5911-45a9-8332-a6821a5a31de"
        },
        "item": {
          "id": "15018159-462b-45aa-8112-ddb4a2b66a90",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b76cf791-3b5f-4d51-b668-1fa4e6b8946c",
          "status": "Created",
          "code": 201,
          "responseTime": 2511,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "814bca1f-106b-4bb6-be14-9f4e107ca1d6",
        "cursor": {
          "ref": "563120fc-9c20-41a2-b996-3d25fedcc8b6",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b2cc53c0-fb92-4a61-9056-88da53506172"
        },
        "item": {
          "id": "814bca1f-106b-4bb6-be14-9f4e107ca1d6",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "8b6481c0-5085-453f-ac32-29ba66e9eec8",
          "status": "Created",
          "code": 201,
          "responseTime": 2780,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "81abee35-db64-4575-b1fd-1b9015ab2630",
        "cursor": {
          "ref": "b24da9da-e2ec-480e-8dd1-602632824b0c",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "0e8281ee-f032-4237-a3fc-cd3dafbef7c3"
        },
        "item": {
          "id": "81abee35-db64-4575-b1fd-1b9015ab2630",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "d2524483-edf9-4b63-a443-43adc6c9dca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19604531-0e00-4ec4-addd-6e2af043893b",
        "cursor": {
          "ref": "6896a39c-6e85-447b-a0a6-fc7e70caee25",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "5bc56fa4-223c-42f0-b3c1-0cbea8b1c7f1"
        },
        "item": {
          "id": "19604531-0e00-4ec4-addd-6e2af043893b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ee3cd750-6ad7-4acd-a0d5-04e98a922c07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fcd7f17-9853-47be-a741-7f5c4b92a971",
        "cursor": {
          "ref": "9a4a4e52-3f5a-49bc-aed1-eca3d30a27f5",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3c70127b-0e03-4290-9af3-0bd87e89b9e8"
        },
        "item": {
          "id": "1fcd7f17-9853-47be-a741-7f5c4b92a971",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "1a8398f3-3de0-44da-ae8c-f8feb3fc546a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba4d58c1-0ad5-4e6d-adad-de2b62faca50",
        "cursor": {
          "ref": "27aa74c5-aa4b-40e9-b2d9-b161f9ac47cb",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "cacae047-887e-4aae-a2d7-bae0fe3b664a"
        },
        "item": {
          "id": "ba4d58c1-0ad5-4e6d-adad-de2b62faca50",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "3790d975-99a9-4d01-adc9-7e210e666d45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "989c821e-6ea6-48ab-a873-79766d0bb826",
        "cursor": {
          "ref": "aeb881b6-d379-4c47-9587-73618822cc6a",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "3690293b-5e80-4c94-a789-10bb4ee842ef"
        },
        "item": {
          "id": "989c821e-6ea6-48ab-a873-79766d0bb826",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "9967890a-95cb-4c51-9cc6-1fbf180fcdac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5180d0a-f682-48ee-8606-ea399686880c",
        "cursor": {
          "ref": "449b92d8-7365-438f-98a2-78f704577843",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "92542256-d826-4566-aebf-2685b75c20f4"
        },
        "item": {
          "id": "e5180d0a-f682-48ee-8606-ea399686880c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "3a72c296-fb9f-4f8a-a6e6-2ce7e93c089f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5bed411-60ed-4a54-acfd-99f26abaf191",
        "cursor": {
          "ref": "eed48ea0-ef7e-49b3-9343-dadeb5b49fc6",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "c980a430-86cc-445c-a820-3ea7afab1755"
        },
        "item": {
          "id": "f5bed411-60ed-4a54-acfd-99f26abaf191",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "57c265d3-97ae-4bed-8aeb-e7f64b01ca49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e426e1cd-a32b-474b-b893-27b0cd37a6d3",
        "cursor": {
          "ref": "811b3967-5215-4dec-a105-9c7bcb4a62f0",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "5517968b-4de6-419d-9c75-957ef29c539b"
        },
        "item": {
          "id": "e426e1cd-a32b-474b-b893-27b0cd37a6d3",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f1e68d2d-31a4-4cc6-b4d0-8be684fa9d6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36abc5fd-cea3-45fc-9d18-d9f75f282964",
        "cursor": {
          "ref": "a6f89f16-a902-4dda-8440-2c563e186920",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "a0d5fc22-cc21-4d47-85aa-7cfb84471b00"
        },
        "item": {
          "id": "36abc5fd-cea3-45fc-9d18-d9f75f282964",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "05da3a15-c925-4573-906b-33de1bc8a9fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc3a2ca0-0ce1-4393-9117-e3aaaa2dd33f",
        "cursor": {
          "ref": "151c6d96-f835-461f-9d34-17b32a28b301",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3f58885e-fdac-4e9c-b4e7-b0dd959e062b"
        },
        "item": {
          "id": "fc3a2ca0-0ce1-4393-9117-e3aaaa2dd33f",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "74b89227-0f60-4470-ad8e-c9410a543981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3924dbb2-f22a-481d-8ab9-ae524351ecec",
        "cursor": {
          "ref": "eba2a512-dd99-42c9-b002-4636f2b4e926",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c3bdcac9-55b0-4463-b7e5-10fba0a694e5"
        },
        "item": {
          "id": "3924dbb2-f22a-481d-8ab9-ae524351ecec",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "5ef5f68e-b1f7-4e74-9766-52744f923cd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dea2d4d-6912-47f9-9686-d1627c3d8655",
        "cursor": {
          "ref": "9818976e-22d6-42a5-8d3d-77ac2b1b40f7",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "f66fc310-b709-4d36-8915-096c612e8a38"
        },
        "item": {
          "id": "1dea2d4d-6912-47f9-9686-d1627c3d8655",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "fee3fccc-634d-4277-ab3e-2585fac9b7bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "034ba96e-8f95-4214-b0ac-146fd2a3d169",
        "cursor": {
          "ref": "82b4e67a-4d21-4206-aa04-eaf88d3d93a6",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d026b5e4-cf5b-42ca-956f-db26ed984b4d"
        },
        "item": {
          "id": "034ba96e-8f95-4214-b0ac-146fd2a3d169",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "2e2aacc8-a7d9-4484-b496-6c775c8540ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b8ab06c-199a-4a68-b94c-aacffd3f5da2",
        "cursor": {
          "ref": "55552bca-8468-48ef-be33-6da1bda1fad4",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "122a42aa-5802-4702-8b39-c758641f28dc"
        },
        "item": {
          "id": "4b8ab06c-199a-4a68-b94c-aacffd3f5da2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "38a009ca-3135-4e93-91c6-5d08ddbfed68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f5972be-9069-4836-bdee-d0f35918a19d",
        "cursor": {
          "ref": "c032839a-bc3b-4845-95be-119e2c6d2d47",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "c2a37dc5-7bcc-4f3a-8672-0cbd57041840"
        },
        "item": {
          "id": "2f5972be-9069-4836-bdee-d0f35918a19d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "7ec07c4f-61e3-47d7-a918-b9af8b38d69f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14123b77-b874-4648-ae40-23781a99259b",
        "cursor": {
          "ref": "ff091cf0-a1dc-4211-a343-ac2acc57ed09",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f8b41964-48e9-41d9-a172-f225739123c3"
        },
        "item": {
          "id": "14123b77-b874-4648-ae40-23781a99259b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "64c3c8e2-dec8-4b36-b880-c93b98e80d52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c3aabd4-ba7e-406e-bbdb-c33e932074ed",
        "cursor": {
          "ref": "1b5c2746-5ddf-48d3-8562-73980c9ccae4",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "2b492dcb-3e42-45e2-b3ea-e1392e161841"
        },
        "item": {
          "id": "6c3aabd4-ba7e-406e-bbdb-c33e932074ed",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "0cc818a6-3ecd-41f6-9283-6d0a3908a402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "654673ac-25f0-485d-924e-11ae7996493a",
        "cursor": {
          "ref": "93b9a273-b89c-462a-a076-fdcf042fea0c",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "8bfce957-4b18-49ce-bc3d-d83bd8a47aec"
        },
        "item": {
          "id": "654673ac-25f0-485d-924e-11ae7996493a",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "5f1a51bb-f83d-4492-bbb2-c469731db6ea",
          "status": "Created",
          "code": 201,
          "responseTime": 3257,
          "responseSize": 976
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "878167f1-d804-464f-ada4-3ff9cdcf080e",
        "cursor": {
          "ref": "1a8d2904-120e-4318-aa3c-9d95bb4cec00",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "83f618ab-ef7d-4a7b-99c8-6d7b442d8e2a"
        },
        "item": {
          "id": "878167f1-d804-464f-ada4-3ff9cdcf080e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "2e4da3e6-5a7a-43bc-ba91-0987c2439936",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dee36ca-0b5c-4e0c-b190-d3f8ee707e11",
        "cursor": {
          "ref": "ecafcbd8-6981-4c85-913a-79b87f3d9473",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e5e56079-e8dc-4864-a322-28dd3efa008d"
        },
        "item": {
          "id": "3dee36ca-0b5c-4e0c-b190-d3f8ee707e11",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "2792be4a-bc07-44a0-9a7c-085ba267de3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 153,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3225d11-9012-4f91-a3e4-a51b08f5a21f",
        "cursor": {
          "ref": "6ecb6294-1fd4-4699-b6ce-299a4a7365a8",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "240a777e-bf07-417c-ad43-827f96b58268"
        },
        "item": {
          "id": "f3225d11-9012-4f91-a3e4-a51b08f5a21f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "dd481353-8812-4a00-a53a-49a26373a8dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 184,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "593046b5-6127-4077-8b1d-63c0f82115cd",
        "cursor": {
          "ref": "55fd8887-b9af-42e6-a0a6-8b7584f02397",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "43bc6074-709e-4c64-9bf7-c421368a080f"
        },
        "item": {
          "id": "593046b5-6127-4077-8b1d-63c0f82115cd",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "99b58f85-5b67-444d-898f-ec6d79cb14f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56145bda-3cfa-4a56-980b-427fa661c02c",
        "cursor": {
          "ref": "389446ea-a030-4185-b4c6-dc818f4def25",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c7e5c492-1099-420f-97a8-c6822b3d08a9"
        },
        "item": {
          "id": "56145bda-3cfa-4a56-980b-427fa661c02c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "c4a5df0b-953c-4c38-af58-28649e346af1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a8560ec-1202-4b4b-ad9f-b1713e6db848",
        "cursor": {
          "ref": "ac1e50d2-8d3e-49a1-af6b-28d319022e83",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "56c113e5-eef3-44d6-b1aa-e6cfe8f19084"
        },
        "item": {
          "id": "2a8560ec-1202-4b4b-ad9f-b1713e6db848",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "fd767c39-0f15-4920-8f8c-97e19f297270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58167229-a68a-47a3-85fb-fbc99cc9e961",
        "cursor": {
          "ref": "459221da-ce10-4177-81b7-8dd3a018db4c",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "721691ec-ac5f-4e0a-a3a4-22960fd374f0"
        },
        "item": {
          "id": "58167229-a68a-47a3-85fb-fbc99cc9e961",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d7e32e54-4ddc-467b-9d16-66c88acc8f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f8d4cd4-1e5a-49a3-85d2-f8a0c98ea5df",
        "cursor": {
          "ref": "c6621432-e9ba-42bc-9a28-33e83bf2ac9c",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "3edd8486-eed9-48af-a5b3-6b15b4254b52"
        },
        "item": {
          "id": "2f8d4cd4-1e5a-49a3-85d2-f8a0c98ea5df",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "78a4ce71-f354-49bf-8f82-61f34ebc0ec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12b67da5-d0f7-4214-baf7-18356c5d3601",
        "cursor": {
          "ref": "41ae1156-5766-4450-af3a-6ede06a3344c",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "571ecacf-704e-4a31-af6e-63a3ffbff237"
        },
        "item": {
          "id": "12b67da5-d0f7-4214-baf7-18356c5d3601",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "69aca84d-e15b-44bb-aa17-aca666dd9c97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee936f99-a858-4596-b883-9f16ac775215",
        "cursor": {
          "ref": "ea396dd1-eb26-4089-bf97-353d5b3a61e1",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "d2cfc9aa-f2e9-42ee-95dc-046109e024c6"
        },
        "item": {
          "id": "ee936f99-a858-4596-b883-9f16ac775215",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "dce60b8c-3fb9-4c6d-b040-387d6a91524e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e57cb2c-56ee-4698-80d2-e23bed30a175",
        "cursor": {
          "ref": "770b2240-1ce7-4715-bd10-315f24c410d2",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "1bb00b90-6fd6-4571-b9eb-ee5b762884b7"
        },
        "item": {
          "id": "3e57cb2c-56ee-4698-80d2-e23bed30a175",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "9b766441-ce69-4148-be79-de91ceda9696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "829c66f8-1946-483a-9002-99f358d1f1ff",
        "cursor": {
          "ref": "45827371-ed12-4734-ab14-341480064a83",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "7bbecffd-33ea-450b-8637-4b8eee1dcf42"
        },
        "item": {
          "id": "829c66f8-1946-483a-9002-99f358d1f1ff",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "87f032ce-9a9c-48ed-befa-3fb8da3de6b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "268878c1-f3f6-4d77-b8dd-b7520896a537",
        "cursor": {
          "ref": "fa1a57a2-0473-48ea-b8e4-527cedcaefb9",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a1f85c9a-6b4d-4f5c-a9c7-6e0a5886a0bf"
        },
        "item": {
          "id": "268878c1-f3f6-4d77-b8dd-b7520896a537",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "db7c95f6-9d42-46c8-9d4a-0740c7c3d4d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f624ecd6-823e-4cb8-acac-63392ac1c620",
        "cursor": {
          "ref": "d73b82e4-77e7-4fc9-abd2-3a76c5279348",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "24d70bbd-67c1-4319-aa43-602fdbbbd821"
        },
        "item": {
          "id": "f624ecd6-823e-4cb8-acac-63392ac1c620",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "17d22c30-8050-470f-a9f3-f7adb2a18850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e86276b-00d6-4cc0-80ee-011809513605",
        "cursor": {
          "ref": "6a53b818-1c9c-4d78-9d56-ca3d97489dbb",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "005d94dc-edb3-4278-b22e-d326b857dd35"
        },
        "item": {
          "id": "1e86276b-00d6-4cc0-80ee-011809513605",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "2470962d-5b24-43bd-a9e4-46f40ef3d42f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c3b4bd6-d0bf-492d-9aa3-b51e3d103fda",
        "cursor": {
          "ref": "879004e8-3925-41bd-9c81-2226f27b899f",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "7b7b4ffb-4da2-4b06-a4ed-9f535971c46a"
        },
        "item": {
          "id": "7c3b4bd6-d0bf-492d-9aa3-b51e3d103fda",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "49123f72-1f49-40b4-8851-7aba7b8f6716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce186a5c-c453-4404-80b8-71f15621013b",
        "cursor": {
          "ref": "92356d1a-d244-459e-a34d-de4977a9cfed",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6602aa52-cc5c-4731-b819-084659e1e3aa"
        },
        "item": {
          "id": "ce186a5c-c453-4404-80b8-71f15621013b",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "04faa8bc-8d52-4a25-9aa5-d9657d96a218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a50f173f-6543-4d29-850c-9a9535401e80",
        "cursor": {
          "ref": "f47673a1-d642-4904-adf1-10cb5123953b",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "5983f85f-75ce-4aa1-a052-ca391c5f558d"
        },
        "item": {
          "id": "a50f173f-6543-4d29-850c-9a9535401e80",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "56d51b9e-ace3-4e41-bf03-944734ffa4f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6593a3b3-4063-4393-9c79-9fb051c5202e",
        "cursor": {
          "ref": "60bb35f0-0498-42fd-8959-4c0b70a2ecea",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "d25d690c-7fd1-4191-914e-84e669e308a4"
        },
        "item": {
          "id": "6593a3b3-4063-4393-9c79-9fb051c5202e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c24d48b4-ffeb-4a4d-8418-ccc47a3470ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2a5bc8c-e393-436a-a5c9-bf4aa0a60aaf",
        "cursor": {
          "ref": "0eb57f70-0ae7-42e0-8492-fdc8d31f802a",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "6c6bf5a4-0709-4f13-bc61-bb9ab2fe9e0f"
        },
        "item": {
          "id": "f2a5bc8c-e393-436a-a5c9-bf4aa0a60aaf",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "0461bffb-2b89-44e8-a3fb-dcfcebfaf58b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fbec90e-69ea-4ba5-a6d1-20b9a0cf619a",
        "cursor": {
          "ref": "62c52ce9-94ed-4b34-b0cc-4771f80bc50f",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "2ebe1dfa-00e2-4fad-ac99-eb17f53dfb35"
        },
        "item": {
          "id": "0fbec90e-69ea-4ba5-a6d1-20b9a0cf619a",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "9dc53f4f-adb6-4146-ba46-7e2fd81b7513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9262f30-8558-4b88-803b-0a8a158ed890",
        "cursor": {
          "ref": "5c1913cf-3939-4b30-a972-60acb24ea464",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "aeada16e-a1d8-4d58-bb14-32e90e8950c3"
        },
        "item": {
          "id": "b9262f30-8558-4b88-803b-0a8a158ed890",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "0a76f6a2-a61b-4237-a455-071363346652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7824d876-ca7d-4738-9af8-22d5db1b59e2",
        "cursor": {
          "ref": "fb0ef6b3-fb10-4a69-b32f-1bc507590cc7",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "548c21d8-3fab-4d1b-9c11-8a410bafc15f"
        },
        "item": {
          "id": "7824d876-ca7d-4738-9af8-22d5db1b59e2",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "efe395f1-faf4-4e14-ab36-d03b64809802",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18e03d0e-9d32-41b8-bf53-9f8903de0b05",
        "cursor": {
          "ref": "bf03359a-c5f4-44d0-bd5d-b010045f55e8",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "817ef90c-66c4-4b60-aed8-332d0bfa0a38"
        },
        "item": {
          "id": "18e03d0e-9d32-41b8-bf53-9f8903de0b05",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e4f59f3e-a194-4d6d-b9ae-f053944ddc7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72869563-1bee-445c-84ca-0917261bf092",
        "cursor": {
          "ref": "6891d010-4fda-449f-abf9-d28cd7bd854c",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "bff446a9-9868-40f6-aede-a52ce7e925b9"
        },
        "item": {
          "id": "72869563-1bee-445c-84ca-0917261bf092",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "0a93fe28-bf46-484d-9ba1-dbe4c25ead89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 160,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d6d7e9b-dcf4-431d-bb30-0d2b15f412a2",
        "cursor": {
          "ref": "1f8753ac-05e2-4369-bc58-f06dd6085b79",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "03163f34-3d50-482f-939f-846434c2362c"
        },
        "item": {
          "id": "9d6d7e9b-dcf4-431d-bb30-0d2b15f412a2",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "dabc7058-a097-4ce5-9dc9-4cf01cd32021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65d2e626-381b-413b-b230-2fcc8a30b4e5",
        "cursor": {
          "ref": "b54f543b-cdf1-4707-add7-e63d424b7cc6",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d295ff02-b61e-4be9-bcf8-a8e10e63ebde"
        },
        "item": {
          "id": "65d2e626-381b-413b-b230-2fcc8a30b4e5",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "93d08138-8c60-49ad-a17c-0efae9028294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93ebab1d-b684-40e3-8e5b-ef7a59bafd7a",
        "cursor": {
          "ref": "bc3ec126-4042-470c-9bd0-d9fb531cc7b6",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "f862609e-6dfd-41b1-9b78-bc56ab7bde82"
        },
        "item": {
          "id": "93ebab1d-b684-40e3-8e5b-ef7a59bafd7a",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "c4780ac8-26ee-460e-9f56-b3cc0c0e8718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f737d241-692b-493f-84f7-622acebd592b",
        "cursor": {
          "ref": "714ac3dc-d771-4b0c-9371-e664e2dea190",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "049a3d01-4a33-45d2-a393-ea3fa38950ef"
        },
        "item": {
          "id": "f737d241-692b-493f-84f7-622acebd592b",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "ba166721-00ac-4cb1-b399-7568aa0d2976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab00645c-f172-40c5-92b1-404991b3736c",
        "cursor": {
          "ref": "c7ae3bd1-ae14-4522-b93b-097f43e30808",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "78427605-ef4b-478f-971b-48cf203aa3f3"
        },
        "item": {
          "id": "ab00645c-f172-40c5-92b1-404991b3736c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ce2fb26e-3470-4429-97f2-b7d01953832c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd556711-01da-4af6-8d29-adc2d35c80c8",
        "cursor": {
          "ref": "2ecc5cdc-b56a-4a4a-81aa-46f8819c2298",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "ac62ea81-e2cb-42d1-9ba5-6f73d372a8e3"
        },
        "item": {
          "id": "bd556711-01da-4af6-8d29-adc2d35c80c8",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f3e6b175-2cc5-419c-9889-b5d449249e36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "cb1fadcf-0de6-4686-a2a1-4cb93a28e51b",
        "cursor": {
          "ref": "3a906ad8-2899-4f63-9c53-1a31de7f7a0a",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "89114437-fd01-4617-b797-1079a5ffcdb2"
        },
        "item": {
          "id": "cb1fadcf-0de6-4686-a2a1-4cb93a28e51b",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "ade580ee-39c1-4d2a-af15-b92e7f25765e",
          "status": "Created",
          "code": 201,
          "responseTime": 2203,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "d9692a08-ba41-4476-921a-7ca62de9b405",
        "cursor": {
          "ref": "77c06f64-0a33-44fd-810b-7eb94f198000",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "2b0b7445-7377-41aa-a6fd-eb1dc05f5289"
        },
        "item": {
          "id": "d9692a08-ba41-4476-921a-7ca62de9b405",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c1908040-fbe9-4814-acb6-d0758b55c3a4",
          "status": "Created",
          "code": 201,
          "responseTime": 2319,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "12987749-d839-4c68-a94b-d0c6a1146b9a",
        "cursor": {
          "ref": "c7fdd0ff-5d98-44ab-9521-998a34e71267",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ab98b6ef-cada-49f2-b23a-4ad3c9308aa8"
        },
        "item": {
          "id": "12987749-d839-4c68-a94b-d0c6a1146b9a",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "1f88f0e1-446e-4c42-8be1-e1e8c30e5450",
          "status": "Created",
          "code": 201,
          "responseTime": 2507,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d71d24e-48bf-4eaa-86da-2ab91e33067a",
        "cursor": {
          "ref": "b7bfcf82-d6b2-4e90-a0f5-e4e3e54c0275",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "2c2e29be-fdcf-4900-a5e9-43789b74a3e2"
        },
        "item": {
          "id": "0d71d24e-48bf-4eaa-86da-2ab91e33067a",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "ed25de0b-b64c-4197-b2cc-b5297665edd9",
          "status": "Created",
          "code": 201,
          "responseTime": 2321,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a81175a6-6b4b-4c33-8eed-1cccc655b03e",
        "cursor": {
          "ref": "89c120b9-e2eb-4a03-a626-9525610cd03a",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "156a159d-7e18-4960-9cd1-9931b4c6f00d"
        },
        "item": {
          "id": "a81175a6-6b4b-4c33-8eed-1cccc655b03e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5d971eb9-a568-48d8-9c98-d0ce6f083a4e",
          "status": "Created",
          "code": 201,
          "responseTime": 2497,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e50fd26-0db6-4530-93c5-88341abb3878",
        "cursor": {
          "ref": "27dd717c-79a7-4657-bfcb-49548318b914",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "00afcda8-2f47-4168-a74b-e07cabeb65b8"
        },
        "item": {
          "id": "5e50fd26-0db6-4530-93c5-88341abb3878",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b4211993-e5c6-4b10-878c-69bf7be852be",
          "status": "Created",
          "code": 201,
          "responseTime": 2265,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-05-20T00:36:43Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-05-20T00:36:43Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "05fcbb36-dfaf-4b09-9e9d-5e707ab672b7",
        "cursor": {
          "ref": "9f229771-53b4-45f8-8441-e61bc9e682e7",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "3da66522-8396-4726-887d-fec6126737eb"
        },
        "item": {
          "id": "05fcbb36-dfaf-4b09-9e9d-5e707ab672b7",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "79272a3d-2857-4d19-92d2-07fdc75e735b",
          "status": "Created",
          "code": 201,
          "responseTime": 2516,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cac051b-5a2f-4129-935b-4e034e9c0120",
        "cursor": {
          "ref": "bb4fe008-e4b1-4b55-8e31-810370694ff0",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "54326f56-08da-4792-bd53-2f53a61742c5"
        },
        "item": {
          "id": "2cac051b-5a2f-4129-935b-4e034e9c0120",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "daac4f68-ea50-402b-85e2-15f263f34ee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cac051b-5a2f-4129-935b-4e034e9c0120",
        "cursor": {
          "ref": "bb4fe008-e4b1-4b55-8e31-810370694ff0",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "54326f56-08da-4792-bd53-2f53a61742c5"
        },
        "item": {
          "id": "2cac051b-5a2f-4129-935b-4e034e9c0120",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "daac4f68-ea50-402b-85e2-15f263f34ee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf162b29-a66a-445f-a317-1473c6813e54",
        "cursor": {
          "ref": "104e3075-1bea-4f2f-b47c-698e4e9f8684",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ca4aff9c-f8f2-4f82-b2f1-f6adb5927b05"
        },
        "item": {
          "id": "cf162b29-a66a-445f-a317-1473c6813e54",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "227e30c8-a08e-4d44-93a7-9953d4940d0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "207bc082-cde2-4109-ba66-438ffaf50520",
        "cursor": {
          "ref": "8c3cf3fb-8cd1-4c41-906c-9bfb1137a219",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "5359c6e8-3dd0-4102-baf2-5f593ce05c4d"
        },
        "item": {
          "id": "207bc082-cde2-4109-ba66-438ffaf50520",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0a947193-1ae8-4f6f-828e-11420c82e654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f722728f-c3de-417e-930a-96d393ae0c3c",
        "cursor": {
          "ref": "d6c9542e-3279-4b0c-9b6c-edb42a748ae4",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "51da2879-5c79-4621-8cbd-b0649c4c32fe"
        },
        "item": {
          "id": "f722728f-c3de-417e-930a-96d393ae0c3c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b8a73001-2519-4d12-8a41-39c311a41626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a99df17-335a-46f6-8d75-9ee40c26e66e",
        "cursor": {
          "ref": "c9667a3c-759c-45e9-ab65-956c123a6eb7",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "75fbcf02-15ae-438a-b3ae-e82d4666d24f"
        },
        "item": {
          "id": "3a99df17-335a-46f6-8d75-9ee40c26e66e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a5d6b864-7eca-4b59-8e57-5149c604665e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba3d280a-2b2b-4b56-a017-fdb921a0ac49",
        "cursor": {
          "ref": "d907bcb1-062c-4938-bea0-e5131ebd7af7",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "95b67f01-96c9-4f79-a8a5-714428118959"
        },
        "item": {
          "id": "ba3d280a-2b2b-4b56-a017-fdb921a0ac49",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e08aba2b-cdaf-4f1d-9761-0e7d4a183b8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "358a4057-66c6-46a7-a13d-926f14790285",
        "cursor": {
          "ref": "028cb875-7b23-4b76-9f79-7b2028eff9ec",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "8311171b-2478-4b25-a9c1-0ca0ba7954a2"
        },
        "item": {
          "id": "358a4057-66c6-46a7-a13d-926f14790285",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "69c431ad-ba98-4e7d-8f89-500e5a079383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6be07706-922c-4c16-b8e7-1b0a7992ce6b",
        "cursor": {
          "ref": "61d9907f-069d-4801-904c-fee06e669c73",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "2067b065-0526-471f-97c8-9edbbbe8532b"
        },
        "item": {
          "id": "6be07706-922c-4c16-b8e7-1b0a7992ce6b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "44a3c164-6fb1-46dc-959e-3b75582f4271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28921544-19f4-4946-a768-edb81aff9d04",
        "cursor": {
          "ref": "897d8be3-7974-439d-9d28-1e8a757cf416",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "38ba4307-afe6-4ebb-85d7-4c45da5cf92a"
        },
        "item": {
          "id": "28921544-19f4-4946-a768-edb81aff9d04",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b32552e0-3db2-47da-895a-543640e2e3d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7166399-3081-4e7f-ad4e-7af1bbbb67d6",
        "cursor": {
          "ref": "87e97979-635a-4f75-a735-432e5d8deb21",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "4a65390e-b6c0-486c-9b2d-a7ce41238900"
        },
        "item": {
          "id": "f7166399-3081-4e7f-ad4e-7af1bbbb67d6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3aa36890-1994-4c34-b7d1-14f38123d37a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40374753-04cb-473c-98b1-4cc931dedd02",
        "cursor": {
          "ref": "7ce6c2b2-60c3-4b13-b077-3e9236d174e2",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e88e0603-7058-4f5c-aa00-1ef7b65eb651"
        },
        "item": {
          "id": "40374753-04cb-473c-98b1-4cc931dedd02",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5d38e9bd-5747-456a-8e73-d5c7419f7db8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc1dfc8-2d1b-48b1-9fb4-09ad07ef2381",
        "cursor": {
          "ref": "871c5f30-62e4-4815-bb31-af8d09a9e0ac",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "6baf4f53-81a8-40e6-9277-f6dfd451685f"
        },
        "item": {
          "id": "dcc1dfc8-2d1b-48b1-9fb4-09ad07ef2381",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "7f86a34c-c3f9-4c70-acbe-c90903ff1551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad863341-8c8d-44ff-9f8d-01192f77d904",
        "cursor": {
          "ref": "848d0c58-2c53-4631-8f66-9050f6162eac",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ba6d7e59-0692-4cb5-9523-39e70a86e4c5"
        },
        "item": {
          "id": "ad863341-8c8d-44ff-9f8d-01192f77d904",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ffbada77-27bb-4ff4-b20e-f74e8ee6e357",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a5616d-ce09-4a16-aa79-08a61ff832ab",
        "cursor": {
          "ref": "e7a8fa00-ca94-4287-9d50-7bdcbc1553ea",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "7e4a5404-f1e5-43ba-89b8-f50318884106"
        },
        "item": {
          "id": "75a5616d-ce09-4a16-aa79-08a61ff832ab",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d7a9c2fb-2489-450e-9d92-8d34954bdaa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56b73191-d729-4939-b93e-4d31245d340e",
        "cursor": {
          "ref": "2ba88d6c-deca-4f37-9cbf-b9a42311ea21",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "cfb752dd-637a-4121-877a-299be0803906"
        },
        "item": {
          "id": "56b73191-d729-4939-b93e-4d31245d340e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "cec62e78-79e5-48b3-a035-204b5d16213a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4602bfee-2067-48d7-b39c-1042f5456322",
        "cursor": {
          "ref": "8b15cabe-d501-4ae5-9487-f2a2c56ab7e1",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "aba7ff7c-d7fb-44f9-bffd-f5de1cc3eda6"
        },
        "item": {
          "id": "4602bfee-2067-48d7-b39c-1042f5456322",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f47128c9-139c-4539-b406-302e1b4c488f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3943f23-0c3a-405d-869b-03b4bc060c11",
        "cursor": {
          "ref": "ef5c10e6-0dcd-4030-b53e-baca0f8fe32f",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "14ac2e0a-3af7-4380-bf4f-d0a363c6c014"
        },
        "item": {
          "id": "f3943f23-0c3a-405d-869b-03b4bc060c11",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "be613302-65c9-4313-a10f-170835493f50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba6b93cf-fd96-4d6f-a0fa-8f96dc97c39c",
        "cursor": {
          "ref": "fdf11b5c-9e6d-4a66-9f13-dd1928f0a5ed",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "df2f9fd7-939c-495b-9dd1-883c1d39e17f"
        },
        "item": {
          "id": "ba6b93cf-fd96-4d6f-a0fa-8f96dc97c39c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "713a3847-24bb-482a-bd7a-1c0585f6ada0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c104fcd3-9fea-4070-9060-9cd3c638faa1",
        "cursor": {
          "ref": "ce7f8878-9956-4ed1-a785-e0eecf903675",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "00513160-bc96-4cc9-8ba0-84b732dbc907"
        },
        "item": {
          "id": "c104fcd3-9fea-4070-9060-9cd3c638faa1",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7de8efb3-c493-49dd-9517-23399f5044b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa633f40-dafa-4008-8b7a-82148f1138ac",
        "cursor": {
          "ref": "e507536b-2ecc-437b-8488-bae683ef3092",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "592d7557-8d17-4896-9836-085fd27725bc"
        },
        "item": {
          "id": "fa633f40-dafa-4008-8b7a-82148f1138ac",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "85e85453-f61a-4fdb-8a66-b831c7bb4611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d77a83c-ede0-41fc-8598-3185ded10a24",
        "cursor": {
          "ref": "8a4f7f45-e814-4113-92f3-7f547117f7d2",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "b4b842c6-7b6f-4688-8604-4960dbfde625"
        },
        "item": {
          "id": "1d77a83c-ede0-41fc-8598-3185ded10a24",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "294491a8-8bfe-418a-9c74-deb1e42582c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ed6a03a-995c-4798-98e2-4fb5c9bc9a53",
        "cursor": {
          "ref": "af1ecafc-7292-4d91-82a6-d17ab2a34fa1",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b7eecb12-b4a0-444a-a4af-e1053b658f58"
        },
        "item": {
          "id": "5ed6a03a-995c-4798-98e2-4fb5c9bc9a53",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "45cb6cdf-8110-4b9b-ab31-9cd568e80f43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aab3e988-8bb9-457b-9910-845af3c59fb8",
        "cursor": {
          "ref": "f005b30f-d9c0-4b8f-9287-9c6a8e58a515",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "1c8ff9cf-17cc-4e8d-8593-84bcc951b3eb"
        },
        "item": {
          "id": "aab3e988-8bb9-457b-9910-845af3c59fb8",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b03ae4e2-d4c7-4a2e-8641-3b9844b4977a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a967930-6f09-49b3-9776-1e929b312fa4",
        "cursor": {
          "ref": "a2939aa6-a576-4cad-8f72-936d2fc166cc",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "be17bcfc-aad1-4755-a520-537becab888e"
        },
        "item": {
          "id": "7a967930-6f09-49b3-9776-1e929b312fa4",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "41a21e95-8dd4-4e48-95f0-3005788762a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "932bec1c-da67-4272-9dae-0928406f047c",
        "cursor": {
          "ref": "eaba4648-0aa6-4419-89c4-ff00875bb6ea",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "d82ef905-6c71-4fee-90f5-3724720609e1"
        },
        "item": {
          "id": "932bec1c-da67-4272-9dae-0928406f047c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5e5ab418-c24c-4d81-92bd-e72e4b80100e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfd64915-abd8-42e3-97a7-ae34b264c3e3",
        "cursor": {
          "ref": "f7fd12d7-3e50-4c7f-b1a2-6febda61ba03",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "6cf36ede-b20c-46a2-a9eb-b0dd2d97cd5a"
        },
        "item": {
          "id": "bfd64915-abd8-42e3-97a7-ae34b264c3e3",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "9338fe70-3901-4f87-9142-f78fe17a8d27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7130f75-77f1-4060-b92a-ffd29dfd75b5",
        "cursor": {
          "ref": "e90003f4-16b3-4c65-bf32-b2892c833f75",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "db230000-3e38-4311-89a4-8c785d275471"
        },
        "item": {
          "id": "b7130f75-77f1-4060-b92a-ffd29dfd75b5",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c0f77099-06ed-497c-97dc-7d81d0726b77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a1b162d-8977-406b-82a0-3baf459b27b4",
        "cursor": {
          "ref": "1b888b10-a56b-4150-8a06-c971aa89e473",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c5fbf92b-0af3-4148-be6d-51f0aff7414f"
        },
        "item": {
          "id": "3a1b162d-8977-406b-82a0-3baf459b27b4",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "37aa44a5-f235-4bfb-9a37-ace82153fcb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84408102-b703-442b-8b82-1d63f616eb5c",
        "cursor": {
          "ref": "242b880e-f557-4d8f-8458-e6061ba39c7d",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "8caa79ae-3799-4518-9f97-66566a9e757e"
        },
        "item": {
          "id": "84408102-b703-442b-8b82-1d63f616eb5c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "289f574e-f465-4149-994f-5357b9651c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "304d3c65-007a-4a26-9fc8-f63c133fed9a",
        "cursor": {
          "ref": "0048be90-0f60-493f-9889-4be2a1c0aec5",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "bf084899-b1c8-4ed6-8153-7cebf57ed7c0"
        },
        "item": {
          "id": "304d3c65-007a-4a26-9fc8-f63c133fed9a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4a241103-26da-4130-a173-74871b7d43d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d11e2b4-0ad2-48fa-a8e7-85a178db1153",
        "cursor": {
          "ref": "3762384f-70b2-4b49-bde0-abc24c82acb2",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "a60e9c9a-40c9-42af-b834-c05a3ea4bc23"
        },
        "item": {
          "id": "0d11e2b4-0ad2-48fa-a8e7-85a178db1153",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "fd1a3603-21e7-43a9-ab9e-b2fbf3924b12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c819ed78-d828-4009-b4d2-ad09ebae0a50",
        "cursor": {
          "ref": "92d8624c-8b71-4c93-85ca-192ea100111c",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "f2d22039-8fd8-4d7a-9626-f79455ac64e2"
        },
        "item": {
          "id": "c819ed78-d828-4009-b4d2-ad09ebae0a50",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "c9b91df5-b33a-45e0-95c8-bb67db666f95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f76bbd6-dcbc-4dca-a548-4517732a71a6",
        "cursor": {
          "ref": "72a1ea2a-b9a3-41df-aec4-5964bb6ca4c4",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "656f20a3-2647-493a-abe8-825ad76b3437"
        },
        "item": {
          "id": "7f76bbd6-dcbc-4dca-a548-4517732a71a6",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "190a1dcc-2908-4464-87e8-e1e77f004e6c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "075d97c4-04df-4834-8dd9-f3be610fad30",
        "cursor": {
          "ref": "a637df87-9c93-4947-bd0a-36c814ca13c5",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "c15d6230-8075-4543-b451-9028a8cf7ff1"
        },
        "item": {
          "id": "075d97c4-04df-4834-8dd9-f3be610fad30",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "11a8e230-11b9-4a95-8a30-9022c4c4c47e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "daec3953-eff8-45c1-aaa2-927d553f305f",
        "cursor": {
          "ref": "792b4f57-3a44-442f-909b-d619c907ef3e",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "eb860bd3-426e-4604-b9fc-ac76f8ff051d"
        },
        "item": {
          "id": "daec3953-eff8-45c1-aaa2-927d553f305f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "00e4090d-33ea-4070-bc57-0b5bca903df8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daec3953-eff8-45c1-aaa2-927d553f305f",
        "cursor": {
          "ref": "792b4f57-3a44-442f-909b-d619c907ef3e",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "eb860bd3-426e-4604-b9fc-ac76f8ff051d"
        },
        "item": {
          "id": "daec3953-eff8-45c1-aaa2-927d553f305f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "00e4090d-33ea-4070-bc57-0b5bca903df8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84da5a0a-db33-4b4c-9581-e39b3d5e7e13",
        "cursor": {
          "ref": "7b3c7ae3-0e76-49a7-a2b8-03e7d58d8b62",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "981579f1-197b-4bfd-9432-be6a961e2c23"
        },
        "item": {
          "id": "84da5a0a-db33-4b4c-9581-e39b3d5e7e13",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "eaa53bb9-c89f-4692-81a5-62e124eb125d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e66d430-466b-498d-818d-21f770843a4f",
        "cursor": {
          "ref": "bea52f79-6bfe-440e-ad4c-ec9060c19c3f",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f7aeacf6-6418-4edb-a14b-47f2327129be"
        },
        "item": {
          "id": "7e66d430-466b-498d-818d-21f770843a4f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "a1845f38-4dfe-4745-baaa-6ed0f4b0e72d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c92f4c2-df67-4063-880a-c881cfa8fb85",
        "cursor": {
          "ref": "1d257639-4b37-4a5a-b5ae-387e47b88672",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "a04300c9-ae30-4942-9065-195ce043bc2c"
        },
        "item": {
          "id": "4c92f4c2-df67-4063-880a-c881cfa8fb85",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "4db46d6b-48d6-49ce-93b0-043a5195fdb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93b0fb24-fe11-42a1-8787-2ab63219da48",
        "cursor": {
          "ref": "a2f19f8f-5ae4-4e5c-b74f-f0b8ff054793",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "a1877c56-e474-4049-b560-521d37b3fbc3"
        },
        "item": {
          "id": "93b0fb24-fe11-42a1-8787-2ab63219da48",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d0f7357b-78de-4b23-b623-32da2ec61c9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e951eb6d-0364-4633-a6ae-db40ce15e41a",
        "cursor": {
          "ref": "6cf14f6b-bb82-498f-9877-284859a31d46",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "bda9f5d7-f238-485c-ae60-09ef2c98e6b3"
        },
        "item": {
          "id": "e951eb6d-0364-4633-a6ae-db40ce15e41a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c7f7ac91-1978-40d1-b2ce-4724470b5f0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78412b74-9756-4925-b473-850c0cd91d83",
        "cursor": {
          "ref": "83abc704-22e3-4080-a6a5-a08b458b6344",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "53b978ca-116c-4a44-9734-3385cc246e81"
        },
        "item": {
          "id": "78412b74-9756-4925-b473-850c0cd91d83",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "949977da-0828-4083-8e6b-82402161e575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f8ff53b-de1c-4dd7-82b6-1dd851ef26c4",
        "cursor": {
          "ref": "cc00c938-bf16-4103-8876-09a647076b12",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "98e67df9-029a-495e-ab8f-0ee878a166a7"
        },
        "item": {
          "id": "1f8ff53b-de1c-4dd7-82b6-1dd851ef26c4",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "4383775a-9157-48b1-ae1b-a4450f4ddbbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27b2fa7f-c597-4363-a374-fc8b893226ae",
        "cursor": {
          "ref": "99876329-f0a4-44f1-a59b-c526d532e06d",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "bf435b3d-daf2-4ec7-9d62-06040f4941b0"
        },
        "item": {
          "id": "27b2fa7f-c597-4363-a374-fc8b893226ae",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "0cb68952-10da-45e4-8071-7e7164e8c425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28641dfa-425b-40ba-b4cd-c65b4fecf54e",
        "cursor": {
          "ref": "000c2f08-8900-4918-91a5-95e38d9f8afd",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "7c0934e1-9b4c-468a-bc95-ebede27430a6"
        },
        "item": {
          "id": "28641dfa-425b-40ba-b4cd-c65b4fecf54e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "654086a2-6dc9-4bd2-969c-a29b1bf124cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e6d0b10-292a-4cfa-84a8-027b61d77540",
        "cursor": {
          "ref": "a70c46de-e51c-44ce-90fb-5947fe6f527c",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "15abdf0c-d705-4ba3-86c1-7ae22a100c02"
        },
        "item": {
          "id": "8e6d0b10-292a-4cfa-84a8-027b61d77540",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "4d9dd328-c384-4459-8230-00be7b2e64f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 161,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3711c6fc-5998-408e-be77-3b515cb6a472",
        "cursor": {
          "ref": "deefa1b9-e2eb-4c12-b3a4-b1a8c494c5a1",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "09265a03-df55-4794-8ab0-3d8e8bf307df"
        },
        "item": {
          "id": "3711c6fc-5998-408e-be77-3b515cb6a472",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f0dda445-1b15-462b-b3e5-98a4ddaad9b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8c491f6-60ed-49bd-a90a-98264f7a5467",
        "cursor": {
          "ref": "9e1e45b8-3dbd-4b42-ba2f-1a8e63ec6384",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "073cef5f-8c38-459b-b367-35d1ce329496"
        },
        "item": {
          "id": "a8c491f6-60ed-49bd-a90a-98264f7a5467",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "100b2ced-bbd1-485a-b904-3d0702a63d00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f32ce651-9295-44ec-aa86-c38621bf4cba",
        "cursor": {
          "ref": "9a594dc0-b4f3-4097-835a-25373fe5cc33",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "be4c24ba-01d2-45f6-9fda-f8646138a47e"
        },
        "item": {
          "id": "f32ce651-9295-44ec-aa86-c38621bf4cba",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f2d1e4ee-47cb-42be-8fd1-426f7eba0d99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53e5c9d0-90f4-42bc-a610-e1e6d6462325",
        "cursor": {
          "ref": "0ba9ecfb-1441-4d88-b3be-d29779b9736f",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "d813357a-bb58-49c5-a579-6c279a00c371"
        },
        "item": {
          "id": "53e5c9d0-90f4-42bc-a610-e1e6d6462325",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a1956d69-25c7-401f-babc-e676e1b82ffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dc75024-aade-4039-accb-13b97e7c1b4d",
        "cursor": {
          "ref": "d01bd752-9dfe-488f-a1d4-474d6aaf4e63",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "2a89d75b-600c-4e39-8bda-12a126bf50b9"
        },
        "item": {
          "id": "1dc75024-aade-4039-accb-13b97e7c1b4d",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "a38c616c-16ef-4396-894e-ca9eecb1038f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 180,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c9e9184-c98c-4748-8d19-a834d7c33d0c",
        "cursor": {
          "ref": "0168deb6-507d-4ad7-9090-41b535b7d082",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "6b073e5b-05bc-456f-a037-e09dce17a3d5"
        },
        "item": {
          "id": "7c9e9184-c98c-4748-8d19-a834d7c33d0c",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "5b1cfdb1-fd5c-47e5-9808-ecb414dcdcf7",
          "status": "OK",
          "code": 200,
          "responseTime": 258,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "cbbcf009-412e-4384-b96e-42c83b50ccc8",
        "cursor": {
          "ref": "031cc4fe-7351-4aeb-9da7-96b2548c81af",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "f8a515e9-d5da-4f8c-b7e8-08883ca893fc"
        },
        "item": {
          "id": "cbbcf009-412e-4384-b96e-42c83b50ccc8",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "45d1aa66-1b46-435d-b0f3-73416fb7a73e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb0e52c0-a4a8-4078-adb1-062c137c33f5",
        "cursor": {
          "ref": "68f20d46-9a7e-4bb4-ac46-91e87d162d38",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a81abf28-0f8c-40c0-b1e8-f1f2ff3b3181"
        },
        "item": {
          "id": "cb0e52c0-a4a8-4078-adb1-062c137c33f5",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "9aaf7d41-b5f6-449c-ba80-1ef26e2a40cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3815c857-20e0-4bb4-a0ed-7de9de4b9c51",
        "cursor": {
          "ref": "3961943e-ad99-4402-96a2-8eedd7bbb52b",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "1153ab40-11af-476e-a926-8fd076f90d25"
        },
        "item": {
          "id": "3815c857-20e0-4bb4-a0ed-7de9de4b9c51",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ae036c21-e677-4b3a-ad28-21f8793c3689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c85ccde-a83a-44b3-a577-fc8bfa4e4bd5",
        "cursor": {
          "ref": "07881796-3e3b-4b44-a37b-ce99c3a1f899",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "6d1d54f7-46a1-431f-9f55-5f0acf7c590c"
        },
        "item": {
          "id": "2c85ccde-a83a-44b3-a577-fc8bfa4e4bd5",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "6cbcc50e-ef3e-4dd4-b57a-056d63606c47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb56c4cd-e99a-4fb9-a399-eb45446b2ba3",
        "cursor": {
          "ref": "6d443afd-a07c-4e6d-8808-00f9a47a2dba",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "4eaef480-7e36-40e6-a54f-f1ccb5f60c03"
        },
        "item": {
          "id": "eb56c4cd-e99a-4fb9-a399-eb45446b2ba3",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "782d41e9-1d29-4642-bb9f-542dbed0f242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba11e3a5-e601-45f4-8bd4-ae3089442c3a",
        "cursor": {
          "ref": "21ec581e-381f-4463-a435-311005951679",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "6670b9a4-940b-4ea0-a37d-fe7e6fa8d540"
        },
        "item": {
          "id": "ba11e3a5-e601-45f4-8bd4-ae3089442c3a",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "32ca85d1-8d87-4b4e-b7f2-c90e4d12b9cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "909985b9-04cd-4c25-9235-058210ce17f6",
        "cursor": {
          "ref": "2513fb1c-17e1-46de-9b8a-fdcdf23820ee",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "8770153e-fcfd-4259-9ef8-85ab8518c5cf"
        },
        "item": {
          "id": "909985b9-04cd-4c25-9235-058210ce17f6",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4fb406f4-5edb-4aa9-bbc1-b790d932a3f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2c46aa1-30be-4e4e-8334-56d42396875d",
        "cursor": {
          "ref": "e1a3d097-42b2-4661-a589-f51942729ab2",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "f65395f0-0189-4052-9d1c-be662394743a"
        },
        "item": {
          "id": "e2c46aa1-30be-4e4e-8334-56d42396875d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "1e82be0c-ac37-4cfe-bebb-4df7b6b8acf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36d825b4-1424-4306-8c8e-df1d2d706c17",
        "cursor": {
          "ref": "c2d95ba4-3a55-4b45-866b-66a3efd18a5b",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "748862f2-88ac-4142-a5eb-eb11e73abe15"
        },
        "item": {
          "id": "36d825b4-1424-4306-8c8e-df1d2d706c17",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "678eab64-0292-42a7-8cc6-80e242077b54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6324f75-a2c4-4695-9d74-3f07121ad4f2",
        "cursor": {
          "ref": "6bbef42d-0842-481f-a4e2-37961982166d",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "8f65bd78-94aa-432f-bc6c-a96d827a2e85"
        },
        "item": {
          "id": "b6324f75-a2c4-4695-9d74-3f07121ad4f2",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "eb369e7c-07bd-4cd9-8aad-f2eded175606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35615673-b265-4251-8ba7-43c1cbd3f9f4",
        "cursor": {
          "ref": "0544317b-5ef1-4923-a661-356fe6dd162a",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "79b44872-a7fe-430c-a32a-211a2ce88c8c"
        },
        "item": {
          "id": "35615673-b265-4251-8ba7-43c1cbd3f9f4",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "de6fd4f7-32f5-48c9-89bd-a46592d90f85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b83bc13c-e983-4e9a-84d9-dbceffd673d7",
        "cursor": {
          "ref": "6fc9be8f-f93c-42da-8cbc-27f8fe16bcde",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "86262144-aaea-4366-9c4c-d7abbc2813ea"
        },
        "item": {
          "id": "b83bc13c-e983-4e9a-84d9-dbceffd673d7",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "8c221f19-aa93-4a9b-9a64-dfde1faf8d1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87e9b288-d5e8-4713-a5db-1a14cb51bcd6",
        "cursor": {
          "ref": "8be03c2d-41b0-4618-9112-50aa32ad747b",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f27f7cc9-79bb-498b-bdae-0eb5bf0d2dd3"
        },
        "item": {
          "id": "87e9b288-d5e8-4713-a5db-1a14cb51bcd6",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "91f01262-f7ee-4019-9f2c-4bc23954dc42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74727828-ca52-4851-ac9d-e483b7ec5991",
        "cursor": {
          "ref": "687d627d-6bb0-4cf9-91d3-e44d3770e906",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "50a70dba-6184-4939-879f-0aa8648ed0e0"
        },
        "item": {
          "id": "74727828-ca52-4851-ac9d-e483b7ec5991",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "ec221837-ed19-45e9-bd17-1e60d0e16747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d913327e-9a78-4d67-9721-dc4226ee9a98",
        "cursor": {
          "ref": "eef25c6d-5431-47c1-9ad1-318d59c4553b",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "1394c1dd-846a-44a5-8a9e-17205afd1c82"
        },
        "item": {
          "id": "d913327e-9a78-4d67-9721-dc4226ee9a98",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "5665a78d-127e-42fc-b189-bb72e2bdf2a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1248d58e-bffd-4482-ae66-cf2ff422a0bb",
        "cursor": {
          "ref": "7dd78bae-0380-4641-b9a4-8060722fc02b",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "dbfb5869-8b04-4024-9172-4b38dce33811"
        },
        "item": {
          "id": "1248d58e-bffd-4482-ae66-cf2ff422a0bb",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d21badf7-b1f5-4b1c-8f5c-4b1c85f20c14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d5ebd8f-0776-4e16-8151-1b32172a9dcc",
        "cursor": {
          "ref": "e9e81331-98bb-4b27-8d28-a8500b1b48c0",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "9d934ae3-2cb5-4db8-ad8e-1bf81caddf08"
        },
        "item": {
          "id": "3d5ebd8f-0776-4e16-8151-1b32172a9dcc",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "b953cc6c-9696-41c2-a947-b05bd8f89b72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbb8090e-995d-46a1-b304-06b1240ae97b",
        "cursor": {
          "ref": "2cc8897d-a3e8-456a-a944-b9758bffe4d5",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "c8e17ba5-fdf2-48ba-b719-1bf94a0a0dd9"
        },
        "item": {
          "id": "cbb8090e-995d-46a1-b304-06b1240ae97b",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "17463548-aef2-46e3-aede-9ed1b0951a0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0af87802-3fa7-4514-89d1-b27dc74c0ab4",
        "cursor": {
          "ref": "d7551285-9d5e-462c-9dbc-7537cef80ebd",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "129237f6-0469-4dce-9e82-a4244f66b6f4"
        },
        "item": {
          "id": "0af87802-3fa7-4514-89d1-b27dc74c0ab4",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "68492dce-400e-4f4a-875e-76492d30281a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6291149e-eeb1-4af8-90a5-f2e93c43467b",
        "cursor": {
          "ref": "a1203c4e-9285-4df5-9fe8-1840ae1041a5",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "77fd08fb-36e0-40c5-8675-cb625b357512"
        },
        "item": {
          "id": "6291149e-eeb1-4af8-90a5-f2e93c43467b",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "e4509eb2-6451-4c77-b097-5507ac4b55e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "043ae164-9e59-4869-89ff-48368d4f6055",
        "cursor": {
          "ref": "0239fec8-2975-4187-8a17-6a13b2cb0867",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "076cedd0-ff67-41e4-be23-b076b33a8ab3"
        },
        "item": {
          "id": "043ae164-9e59-4869-89ff-48368d4f6055",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8d9ff3e2-e5b7-4848-9d65-96a6f5e0e74b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32ab0945-b003-490c-ae60-0c8a39124406",
        "cursor": {
          "ref": "bbe12c77-ef47-4015-b2f8-7a67c05ba56f",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "eba30e6d-5475-4301-9973-d10159428716"
        },
        "item": {
          "id": "32ab0945-b003-490c-ae60-0c8a39124406",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d916e398-d389-4109-a576-8f694b6e27f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ac52ce7-bc44-4d9e-ba1d-a563d866994c",
        "cursor": {
          "ref": "ef4fac00-2b3f-4ab1-ab10-a1c01b173190",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2bd5821a-75fb-4eae-8571-355235095f1d"
        },
        "item": {
          "id": "1ac52ce7-bc44-4d9e-ba1d-a563d866994c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "1a64e6b6-42ce-4d1e-ac50-8872e20a91b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13c42bd2-7dbf-4501-889d-df6a45b98b60",
        "cursor": {
          "ref": "d33b757f-78a5-41c2-9e41-925322af4728",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "08823e45-c18e-4875-9311-7e533fdd2b33"
        },
        "item": {
          "id": "13c42bd2-7dbf-4501-889d-df6a45b98b60",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "bd91fb76-46c5-4348-850f-bbb0192cc263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "016bf29b-02f3-45bc-a334-6484f6069a50",
        "cursor": {
          "ref": "855bba0f-18fa-4db9-95b9-a24d0b4baa5e",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "fbcef679-0db7-4a9d-b866-b5c22f3a3cbb"
        },
        "item": {
          "id": "016bf29b-02f3-45bc-a334-6484f6069a50",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "8cb4fa33-f2c0-490d-ae6a-5e055546b3a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "081f2c38-cf58-4081-95d6-5660049abfed",
        "cursor": {
          "ref": "77200189-109a-49d6-98a7-fe9dd0f22755",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "3cb2dcc8-db64-463d-b438-a091620eddbc"
        },
        "item": {
          "id": "081f2c38-cf58-4081-95d6-5660049abfed",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "49afaaab-1624-474b-94d7-0bdaac52ee13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d776e20-6354-4af3-8712-5f8f35b94d3e",
        "cursor": {
          "ref": "c7f08ee1-5885-42dd-8852-b95ea1db7e08",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "edbbd9c5-eb44-4893-9f3f-cf06d285d19b"
        },
        "item": {
          "id": "4d776e20-6354-4af3-8712-5f8f35b94d3e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c42ef1e8-42f2-4edf-bd73-ad2a1db7456e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb929eb-8b6b-4a50-9562-7c2761766032",
        "cursor": {
          "ref": "dac91874-4442-4f5a-bfed-c53632d44061",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "c7871be2-494a-4c37-9999-5bf19385239f"
        },
        "item": {
          "id": "beb929eb-8b6b-4a50-9562-7c2761766032",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "801f3ff8-4abb-4666-bb14-37d401456470",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa94c5fe-7044-4521-89d9-92bf95803a0e",
        "cursor": {
          "ref": "55280042-84d1-47c4-9cdc-465c23893239",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "6fbdb88a-643d-4cd5-a931-09f257e69c86"
        },
        "item": {
          "id": "fa94c5fe-7044-4521-89d9-92bf95803a0e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "239c83c0-bd16-4c8e-97f6-0b6048f3191b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fbca138-ace9-4894-92a4-88bff49450e1",
        "cursor": {
          "ref": "ffdd9af1-0d3c-4ae7-aaf6-8d4bcb1d773d",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "3961be49-6941-41c8-a32c-b7341152871b"
        },
        "item": {
          "id": "0fbca138-ace9-4894-92a4-88bff49450e1",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "24f0c488-4a22-4811-9533-d324ecfb6c7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8eee7e9-dfba-4fc2-8ed6-45ebf9631e60",
        "cursor": {
          "ref": "eb3280c1-2f38-46d4-9379-dad62086a5bb",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "d92b9055-4093-4ad2-a65f-c862be000d67"
        },
        "item": {
          "id": "a8eee7e9-dfba-4fc2-8ed6-45ebf9631e60",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "6fd0b321-60b3-45d1-9d2e-6a2a1096f4e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4b156b2-9da4-4747-ba34-9db781cf7a42",
        "cursor": {
          "ref": "f6bee7e4-7682-48fa-a920-fd033e63bdf3",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "25ef86fb-b0cc-4884-bc4e-0a1cafb87b18"
        },
        "item": {
          "id": "c4b156b2-9da4-4747-ba34-9db781cf7a42",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "4435e881-164f-42ac-860d-1f8c7e9cfffb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5af8545-a92c-4b44-aee4-1990316634c7",
        "cursor": {
          "ref": "f0448905-bd4d-4de5-89e0-676a16d51cc6",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "35946cd8-0172-4feb-878e-8b5a9f67580d"
        },
        "item": {
          "id": "c5af8545-a92c-4b44-aee4-1990316634c7",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f3d8e785-3714-4a98-80f2-4d32652c09de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea2b45f-8ca9-436e-aa86-b300dbfcd4aa",
        "cursor": {
          "ref": "893a6bcd-9ab4-4a23-9849-a595556eed20",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "aa0565bd-fa15-4a92-9320-adc37896f050"
        },
        "item": {
          "id": "0ea2b45f-8ca9-436e-aa86-b300dbfcd4aa",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "17234b12-d554-4aa8-bc84-69651995e677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a4bb8a1-8f67-44e4-b371-6efde4d7eef0",
        "cursor": {
          "ref": "786fa760-5009-44d2-9474-cac6b88bacd0",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "d276c7cd-e0e3-4dbf-92a4-a51c4d434e2d"
        },
        "item": {
          "id": "0a4bb8a1-8f67-44e4-b371-6efde4d7eef0",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "491dcab4-50ed-4282-90cd-61c4ee735874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c11a65e7-9d0b-4295-9e2e-7e86f62a11a8",
        "cursor": {
          "ref": "3d71d78a-7149-4cd8-996d-65cae56b816b",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "57d43b08-036d-4505-9bbc-fce2ca9e4929"
        },
        "item": {
          "id": "c11a65e7-9d0b-4295-9e2e-7e86f62a11a8",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e8c197d4-9d8c-43df-8c7e-24efb148b87f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e355cc6c-972a-4b8d-967f-30b187ae3958",
        "cursor": {
          "ref": "ee283f88-fbe4-4587-8791-8cea45c319b7",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "e180bfb8-cb32-4aa5-891a-4f0edd11e2aa"
        },
        "item": {
          "id": "e355cc6c-972a-4b8d-967f-30b187ae3958",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "4d96b105-4e78-4a7f-8b45-b85844e88837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78838380-c055-4418-9a09-c6d5d1303caf",
        "cursor": {
          "ref": "c4f10766-4812-4703-a460-a323b946e7ed",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "69816365-2d27-4cac-b483-e8eae41dbe18"
        },
        "item": {
          "id": "78838380-c055-4418-9a09-c6d5d1303caf",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "68a8246e-129c-4056-9acf-cc0ba7ad864f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 139,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "690ae371-a506-4fdc-a766-080b7c01dd88",
        "cursor": {
          "ref": "6f26dc40-21bb-494c-b439-8e6a042028b5",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b1fe796b-25f5-41ee-be6b-c965f2256905"
        },
        "item": {
          "id": "690ae371-a506-4fdc-a766-080b7c01dd88",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "0773141b-1036-4039-8c41-3de6117307ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "697035df-2f9b-4b29-8f60-512fce37963d",
        "cursor": {
          "ref": "fc1d3b83-796d-4fb6-891c-2e8c74ceb312",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "181df3b7-ba5b-4c0f-ac16-61d1ae9240ef"
        },
        "item": {
          "id": "697035df-2f9b-4b29-8f60-512fce37963d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "7bf7d4e4-ad4e-4610-aed6-98baa321e8ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6416b09-fefe-4017-9a5b-1fac5746a58b",
        "cursor": {
          "ref": "0ad81335-409a-4234-ba76-02417ac359c7",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "62cf2dd1-b43d-4842-b0d7-8bb5eb1588e4"
        },
        "item": {
          "id": "d6416b09-fefe-4017-9a5b-1fac5746a58b",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "67a6d2fc-eeff-443b-ab05-222c40c9c95a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd01b35f-1d5a-4f6a-878b-749740eaf59b",
        "cursor": {
          "ref": "fccab8e8-164d-4a36-98b2-7369cd07cff5",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9eb9146c-d3da-4afb-907e-bfffc3891fbe"
        },
        "item": {
          "id": "fd01b35f-1d5a-4f6a-878b-749740eaf59b",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e7819a02-bee0-4c2f-96e3-3e65a87bee62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5014a0b-9f48-46d2-950d-b242a8a67360",
        "cursor": {
          "ref": "a50be708-0b65-49fb-be49-2c8dd83af2fe",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "602da783-144e-4db3-b4f6-db7c19bae57f"
        },
        "item": {
          "id": "c5014a0b-9f48-46d2-950d-b242a8a67360",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "470f6954-83f3-4101-89e1-f146a3af0d60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36d7a2a3-9fef-4ff2-a68b-d79c80795fee",
        "cursor": {
          "ref": "78e67f6f-33e2-4368-8d76-f3c952b739e1",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "9167e011-e656-4583-a3ab-2bae062f28ba"
        },
        "item": {
          "id": "36d7a2a3-9fef-4ff2-a68b-d79c80795fee",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "7496ed94-e353-41a5-a425-775dc8f4f00d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb6bc5fc-581e-447a-a9b6-9f02430692f1",
        "cursor": {
          "ref": "1f70d470-644b-4827-900b-5d85d33fab6e",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "de063b88-e057-4c33-a83e-a3ec124932b5"
        },
        "item": {
          "id": "bb6bc5fc-581e-447a-a9b6-9f02430692f1",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "5f2aaa53-70d6-4200-8055-419eb0a20315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88454c3b-0b90-48e0-bf0b-ce6c6ac699e4",
        "cursor": {
          "ref": "7943db95-58a5-48f0-81d2-4b0000b4df88",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7507a8cb-82a7-41b0-b9b5-bc635d3d359e"
        },
        "item": {
          "id": "88454c3b-0b90-48e0-bf0b-ce6c6ac699e4",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "f1c79990-3887-44ff-803b-df6d08995aa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6044f888-3901-440b-8d2a-536a9726f737",
        "cursor": {
          "ref": "1973ceee-83cd-4c24-896d-c5060186596c",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "84d11833-8a4c-4158-bfdd-4c69e25e164b"
        },
        "item": {
          "id": "6044f888-3901-440b-8d2a-536a9726f737",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "23915304-22af-44a3-b2e0-da77964014a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9758c2ad-f2de-477e-b8cc-3715767b478e",
        "cursor": {
          "ref": "dff981e2-fd82-4587-beab-d0335a4fc2b8",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "6745cbb8-49b8-4a42-b9ae-c9fe827683e3"
        },
        "item": {
          "id": "9758c2ad-f2de-477e-b8cc-3715767b478e",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "47a38572-43bb-456c-ae4c-b77513f96b8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "955fb41c-3c06-4022-954b-36d1a7e174d0",
        "cursor": {
          "ref": "f2ff5ba6-7383-48d3-b6f6-c5d60b830be1",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "41a00867-adf6-49b7-ab7d-1a7347748f2d"
        },
        "item": {
          "id": "955fb41c-3c06-4022-954b-36d1a7e174d0",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "4119ab04-d290-45f9-b9bc-6f46e3faefac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9641b029-bd43-40a6-99d8-e6429487fe16",
        "cursor": {
          "ref": "7335b3ed-1e4b-4baa-bd25-dbc98d7a63fb",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "d62f803c-974b-4759-94d6-4ad72d33aba0"
        },
        "item": {
          "id": "9641b029-bd43-40a6-99d8-e6429487fe16",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "af4a4ccc-f977-4d96-96cd-87bf679b2d6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c0fd6ca-5c8b-4b1c-9c10-2e5550506014",
        "cursor": {
          "ref": "cb841808-52b2-434c-8a74-45b5dba60ece",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e4afdc7b-a043-4859-973a-b24caf16ae5c"
        },
        "item": {
          "id": "4c0fd6ca-5c8b-4b1c-9c10-2e5550506014",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5f5653be-3f32-48a2-a57a-26e92ca2a483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 782,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdba4010-e37e-49cd-82de-8af6312a9ef6",
        "cursor": {
          "ref": "fbb5fdfa-22d3-4978-802f-a46733f92190",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a44c53cc-e882-4de0-8f17-3af1a9678caf"
        },
        "item": {
          "id": "fdba4010-e37e-49cd-82de-8af6312a9ef6",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b86cd64f-92f4-4745-88e3-95fb8c1f8c58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c18dd9b-9b39-4628-88bc-46069c42bc2d",
        "cursor": {
          "ref": "8be31afd-2388-4494-831a-e1930b32ae14",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b2de3f8a-1258-43e5-9a99-bccb354a7b52"
        },
        "item": {
          "id": "2c18dd9b-9b39-4628-88bc-46069c42bc2d",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "080e1067-f4be-4c10-9218-5b39ef736855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebe756e6-b251-4d74-a246-f3a44221cd9e",
        "cursor": {
          "ref": "0033cd12-099f-4a33-812e-dbc3e6de140c",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "0f250098-5ffc-4f5a-ba59-34715cd711c6"
        },
        "item": {
          "id": "ebe756e6-b251-4d74-a246-f3a44221cd9e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "a05bd1e3-c353-4730-b4db-33aa5841732b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 137,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c47c5ff-6bdc-4765-a2d1-eb89e14e2079",
        "cursor": {
          "ref": "3a40b87d-9e92-4d6d-ad99-22e5cfd88b2b",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "ebd08a28-4db1-4c28-8e7f-ca393ee8f713"
        },
        "item": {
          "id": "0c47c5ff-6bdc-4765-a2d1-eb89e14e2079",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "9565adb0-6d74-4aa8-8eb2-db24d14c203a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f44164-90e3-459d-b755-c15e2f66a70a",
        "cursor": {
          "ref": "27573502-076c-4264-86b8-ae681ee5efd8",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "7cc3bb33-2ca5-49e5-88d2-97a8baa21504"
        },
        "item": {
          "id": "59f44164-90e3-459d-b755-c15e2f66a70a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "4518d0d7-fc73-4a84-bd24-3e757e443cb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0246a1a9-9f28-4f71-b878-1affdfe837a3",
        "cursor": {
          "ref": "3f32f48b-090f-45bf-900f-b8b64548e111",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b6b7c467-9872-4a29-b113-57268c755e63"
        },
        "item": {
          "id": "0246a1a9-9f28-4f71-b878-1affdfe837a3",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "61b855da-6ed5-409b-ad8b-2f42ebb3ec2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f10e391-58e6-4dec-8038-752bb49f6716",
        "cursor": {
          "ref": "c768c33f-68a0-4e88-91b0-ee026fdec20b",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "72337948-f91f-4123-aee1-4dccbde2602d"
        },
        "item": {
          "id": "4f10e391-58e6-4dec-8038-752bb49f6716",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "18d2ef7a-8a66-4c79-91fb-14403d7fab85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd056e21-323e-404a-977d-013dde9ff082",
        "cursor": {
          "ref": "a18c2bfa-31df-441f-a9cc-d8425a5e8b46",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "7419ad98-9a58-4164-a7b6-64f98dd708ed"
        },
        "item": {
          "id": "dd056e21-323e-404a-977d-013dde9ff082",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "7eefd07e-9112-45be-989d-d3706f3a0376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23326e1c-24de-42e2-a285-6dbd7a8bc92f",
        "cursor": {
          "ref": "4e652ccc-b15b-4435-b78e-ec8cca8a2eae",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "a3a312f7-f70b-4280-afd8-60fbe91dd4ed"
        },
        "item": {
          "id": "23326e1c-24de-42e2-a285-6dbd7a8bc92f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "6ee089e7-d0b7-4afa-9da5-de55432f4dcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79cc99d9-6b9c-485c-9ffd-16989379f25b",
        "cursor": {
          "ref": "129bf712-04be-4594-b83c-ae2d2a258ee3",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "9d47d1f4-c746-4899-a0c1-d09105de6226"
        },
        "item": {
          "id": "79cc99d9-6b9c-485c-9ffd-16989379f25b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "911a678d-0141-490d-b1dc-4dd874466a17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fda516a3-c7d9-4de0-9250-d215b616e68d",
        "cursor": {
          "ref": "6653ddfd-9dbd-45b6-8cbb-3946fcaba5b3",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ff13ca69-725c-4a63-9347-9c48459a9f73"
        },
        "item": {
          "id": "fda516a3-c7d9-4de0-9250-d215b616e68d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "2e3a73b9-7c8f-47e5-9162-a1d6d35bedc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc901777-bf7b-4b0a-9ba5-9cc2f12de1bf",
        "cursor": {
          "ref": "64014a0e-9a4e-4a20-9858-b6d6f957ea35",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "de724fcf-b723-4552-bc86-6c01871a7ecf"
        },
        "item": {
          "id": "bc901777-bf7b-4b0a-9ba5-9cc2f12de1bf",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "fc56937f-f911-4ac5-b6a9-858bdb31551e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37607605-63f8-4fd2-ab47-d9628d2f7702",
        "cursor": {
          "ref": "0ba60395-32d9-474e-830b-99b5f03b4e81",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "73fa6e81-16ce-46b6-be6d-88c75933aaaa"
        },
        "item": {
          "id": "37607605-63f8-4fd2-ab47-d9628d2f7702",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "05af56fb-a553-4e7d-b8bd-47dff6e7d4f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b65b3ac-5659-4aec-b4f1-73a43b3fc538",
        "cursor": {
          "ref": "ba5d2156-f012-401d-89b6-aaae405ab524",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "6fd2ee22-da07-4566-858a-e8119db17deb"
        },
        "item": {
          "id": "9b65b3ac-5659-4aec-b4f1-73a43b3fc538",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "22b4bcab-be3b-44da-bd5b-40e1c6c0311d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bf4337c-2824-4d17-a50e-751b0e0af1ca",
        "cursor": {
          "ref": "dd140204-f482-4f55-9410-cbf661a289ca",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "6dd0c747-e22e-4a9a-93be-ffd0200de202"
        },
        "item": {
          "id": "4bf4337c-2824-4d17-a50e-751b0e0af1ca",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "6ea890c5-01d6-4258-b8d4-ee59c89680ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf05767c-bb5b-4869-9e48-2c92bac8a208",
        "cursor": {
          "ref": "3f2a154f-b196-4cf2-8bd2-66851f4a98b2",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "83c887e3-0a1d-4464-96f6-bd3f9b0042ed"
        },
        "item": {
          "id": "cf05767c-bb5b-4869-9e48-2c92bac8a208",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "aab2511b-620f-4836-a471-999ff59be31b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 164,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcb7540d-596d-4e7b-baab-245e6e9c1b0c",
        "cursor": {
          "ref": "31ed7efc-0909-475c-9797-c1906445d604",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "b78d7649-e182-460a-85c0-bd50297344f7"
        },
        "item": {
          "id": "fcb7540d-596d-4e7b-baab-245e6e9c1b0c",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "90086d47-bc60-475d-a207-b0c4996988e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7972a7f4-17be-4cbc-bf19-daf9d78e7d32",
        "cursor": {
          "ref": "ce819be5-f203-4dc1-b600-22701383e2bc",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "9e810174-a03f-4311-9811-dd82cbbb6c23"
        },
        "item": {
          "id": "7972a7f4-17be-4cbc-bf19-daf9d78e7d32",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9ca3532a-ba31-457e-b6f1-d1fb4863920c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7124294f-4f2a-48cd-a88d-06259edaf7d6",
        "cursor": {
          "ref": "b0704ffb-3dc9-4254-bd15-d660cd6e9550",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "85a72c4d-7e24-44fa-944d-76c09fb231f5"
        },
        "item": {
          "id": "7124294f-4f2a-48cd-a88d-06259edaf7d6",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "e0af7afa-8a31-4435-808b-60ea1ef9906d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "204753b9-5f93-4267-93cf-442213140c7f",
        "cursor": {
          "ref": "34ef2a73-67f2-4ce0-ad8c-c22028ebd73f",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "0b9d95a6-1de2-4c99-a444-74438b7625e1"
        },
        "item": {
          "id": "204753b9-5f93-4267-93cf-442213140c7f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "13db3e0a-2685-4069-8c9c-671ce28dd1c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f1db3eb-ceec-4745-ad6e-ca4348cb1415",
        "cursor": {
          "ref": "6c9be0be-052d-4aec-8e8e-bb44d19bef60",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d7ceb54a-2809-46fe-b160-c525aa080b9d"
        },
        "item": {
          "id": "1f1db3eb-ceec-4745-ad6e-ca4348cb1415",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f56fbadb-3831-4082-bbe4-a69b506bcff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71231d25-5fef-4bdd-8b6a-44c2e2a727ed",
        "cursor": {
          "ref": "e325917f-88b3-448b-9e76-5214fcee20c5",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "46c31abf-6420-4dbc-88cd-a7079d71a017"
        },
        "item": {
          "id": "71231d25-5fef-4bdd-8b6a-44c2e2a727ed",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "3fb58f5d-6558-4f5f-bc0d-9a394f4c3b8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca049755-b29b-4b2e-948a-98cc754cecaf",
        "cursor": {
          "ref": "83a6ab7d-befd-4024-b9d3-cf2926408b4c",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "9ea1a103-e3e6-4e92-9105-80dd83513468"
        },
        "item": {
          "id": "ca049755-b29b-4b2e-948a-98cc754cecaf",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "ed71f42f-5de2-4cd0-b6b7-2845d6e5a122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f023977-dacc-4a5d-bc49-63d52ba261bb",
        "cursor": {
          "ref": "38f4304c-18f4-4a77-b00c-7ca54329ce05",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "0913e340-fb13-46a6-97a6-b217fe53cddd"
        },
        "item": {
          "id": "8f023977-dacc-4a5d-bc49-63d52ba261bb",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "93f83f13-300d-4fb5-a7e7-648ea8fad60f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "769983b5-b584-4854-ab37-47bf2bbea38b",
        "cursor": {
          "ref": "3648b563-b2c8-47b7-9ef2-e302dd1ffced",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "13fd44d4-bccc-4f4a-80ab-740882ccd63f"
        },
        "item": {
          "id": "769983b5-b584-4854-ab37-47bf2bbea38b",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "6d9abcac-573f-410e-ab3c-1df78f97b61c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b73dbf6-b6fe-4489-a5f5-c6801e5d33d6",
        "cursor": {
          "ref": "1be60c14-5c9c-4637-90c7-97a00f29cdf5",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "fc70845a-f9e7-4afe-b2a7-83a57d67a3cb"
        },
        "item": {
          "id": "6b73dbf6-b6fe-4489-a5f5-c6801e5d33d6",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "70bf6622-3247-4d7a-9654-4c931b892596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca822fc9-e82b-48e2-bddd-0fe90048fc1d",
        "cursor": {
          "ref": "bd9bc857-7e6f-437b-b40b-a596ffc0293e",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "69a5bb72-7ff6-45eb-81f2-40ea2a668960"
        },
        "item": {
          "id": "ca822fc9-e82b-48e2-bddd-0fe90048fc1d",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "bf17df50-233e-4e49-835c-a11f67227333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64e927f9-9d66-4835-8fe4-ea58795b862f",
        "cursor": {
          "ref": "a0a9d97d-df1c-4cae-b14f-0f4cf1d76b78",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "09510823-45cb-494b-9391-e990cc8dbce7"
        },
        "item": {
          "id": "64e927f9-9d66-4835-8fe4-ea58795b862f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "5565d3f6-6b71-41bb-8e2e-0e486501caee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62fa1274-d919-4399-bed7-10f6839d59c6",
        "cursor": {
          "ref": "995349f2-a4b3-496a-8dc1-88bfbd4ba2ad",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "a95a3e90-b75c-4f10-a389-d27404fc20bb"
        },
        "item": {
          "id": "62fa1274-d919-4399-bed7-10f6839d59c6",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "b2da9516-d954-4f79-b1fb-0c7281b805c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "092da3bf-e775-4f9d-b46d-87d8617c5171",
        "cursor": {
          "ref": "c62aad2d-5f26-4349-a32a-bc45e7418b57",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7da4848e-8e48-460e-b521-ff5287f0d8d2"
        },
        "item": {
          "id": "092da3bf-e775-4f9d-b46d-87d8617c5171",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "952538b9-8247-4c48-bd19-529fe66f6cf7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "cbe19ee5-1cb5-4641-a6ab-5963fd2e43c6",
        "cursor": {
          "ref": "9d66dd7d-c6db-420a-ba41-2ce259851c2d",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ce2b8743-7254-45b8-ac16-6af9604efc0b"
        },
        "item": {
          "id": "cbe19ee5-1cb5-4641-a6ab-5963fd2e43c6",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "7c4a4f78-b827-4b71-868e-71a24da8b67c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "399a82c4-e1c6-4578-a413-06df371e3788",
        "cursor": {
          "ref": "cab21dfb-a145-49e7-8d22-3de99d0b04d1",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "5b1e4a1b-586b-4ad6-9f42-a0fdac68e5ab"
        },
        "item": {
          "id": "399a82c4-e1c6-4578-a413-06df371e3788",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "38520804-b1cf-43f6-a0f9-9aca83657fb6",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9479b06-4567-41fd-979a-c7940228222f",
        "cursor": {
          "ref": "126582c5-4288-4341-ac86-25e34150d124",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "940375d3-97ea-4ee3-a46c-ef86f6c83697"
        },
        "item": {
          "id": "d9479b06-4567-41fd-979a-c7940228222f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "4f44ae3f-cb9f-47b7-a001-fe368e991750",
          "status": "OK",
          "code": 200,
          "responseTime": 1879,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "93698110-0959-4e1a-9457-f14823e15a9d",
        "cursor": {
          "ref": "28068b2d-4097-4983-b8c1-76048bb1d7ac",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "446dd003-ce1f-4d48-9bc0-9075afee3105"
        },
        "item": {
          "id": "93698110-0959-4e1a-9457-f14823e15a9d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "59f4dda9-9a2c-4faa-a8ce-456baf74fa33",
          "status": "OK",
          "code": 200,
          "responseTime": 2950,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbd9725f-568c-4974-bad5-05fda98f7fb9",
        "cursor": {
          "ref": "560bd344-2c07-4317-9574-129c3450ea81",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "33befa67-42b8-44b6-a258-2c1baa8df328"
        },
        "item": {
          "id": "cbd9725f-568c-4974-bad5-05fda98f7fb9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e65cdb3d-45b5-4222-a35b-9668715586aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "cbd9725f-568c-4974-bad5-05fda98f7fb9",
        "cursor": {
          "ref": "560bd344-2c07-4317-9574-129c3450ea81",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "33befa67-42b8-44b6-a258-2c1baa8df328"
        },
        "item": {
          "id": "cbd9725f-568c-4974-bad5-05fda98f7fb9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e65cdb3d-45b5-4222-a35b-9668715586aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "cbd9725f-568c-4974-bad5-05fda98f7fb9",
        "cursor": {
          "ref": "560bd344-2c07-4317-9574-129c3450ea81",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "33befa67-42b8-44b6-a258-2c1baa8df328"
        },
        "item": {
          "id": "cbd9725f-568c-4974-bad5-05fda98f7fb9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e65cdb3d-45b5-4222-a35b-9668715586aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "f524d67f-b74c-48b8-9a0b-a9258525c48a",
        "cursor": {
          "ref": "0882203a-a55a-4998-b021-434c90f799c9",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "2508be51-e16d-4425-9e70-18ea2e61eda8"
        },
        "item": {
          "id": "f524d67f-b74c-48b8-9a0b-a9258525c48a",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "476f12f9-324c-4b22-9515-62e0a66f4741",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "94c3dada-9e9b-4d88-8a5e-016ee9bd9da5",
        "cursor": {
          "ref": "db032a50-364c-499a-9e75-915738f576c9",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a0aa8b94-c756-4116-8776-e2b4a587a777"
        },
        "item": {
          "id": "94c3dada-9e9b-4d88-8a5e-016ee9bd9da5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4c881f55-717a-47a5-8225-dcbf7c980bea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "94c3dada-9e9b-4d88-8a5e-016ee9bd9da5",
        "cursor": {
          "ref": "db032a50-364c-499a-9e75-915738f576c9",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a0aa8b94-c756-4116-8776-e2b4a587a777"
        },
        "item": {
          "id": "94c3dada-9e9b-4d88-8a5e-016ee9bd9da5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4c881f55-717a-47a5-8225-dcbf7c980bea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "87d3444d-6d6c-4174-a2d7-88b6d9f593fd",
        "cursor": {
          "ref": "a303acf5-e1e7-4d73-88e5-5f800a1a9b7f",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "0d537a21-00ae-49e2-9a57-f3d03c8ff1a7"
        },
        "item": {
          "id": "87d3444d-6d6c-4174-a2d7-88b6d9f593fd",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "01dd7356-2067-4836-a3e2-6ade27957e44",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 217,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "cbefabdb-8150-4314-834e-3e7fe4b9740c",
        "cursor": {
          "ref": "9782dfc7-decb-4453-a08d-80ec8a474092",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "f4be6870-49b6-4be5-8ed7-e6f868ea8af2"
        },
        "item": {
          "id": "cbefabdb-8150-4314-834e-3e7fe4b9740c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1c54aec6-462b-4137-a0dc-d3b34cf92cf7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "cbefabdb-8150-4314-834e-3e7fe4b9740c",
        "cursor": {
          "ref": "9782dfc7-decb-4453-a08d-80ec8a474092",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "f4be6870-49b6-4be5-8ed7-e6f868ea8af2"
        },
        "item": {
          "id": "cbefabdb-8150-4314-834e-3e7fe4b9740c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1c54aec6-462b-4137-a0dc-d3b34cf92cf7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "cf67869c-dc78-424c-ad46-a58be2841c45",
        "cursor": {
          "ref": "3a51ad8d-7bff-4778-bd0b-f0322dfbe73d",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "83d1b035-1797-4ef5-bc2b-f81c51ace9c9"
        },
        "item": {
          "id": "cf67869c-dc78-424c-ad46-a58be2841c45",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "c5c6b718-33de-444d-9370-5ccfe1cb5bca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 162,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}