{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "01c539f7-6f38-4ce2-bec1-0d0fd5683a81",
        "name": "Clear Cache",
        "item": [
          {
            "id": "4f87cfae-a96e-47ea-ab85-970ccbfe818d",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "18b0fc84-9b68-4964-899f-4994ab76cf4a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1e4f7230-4eb8-4423-98f8-0f1b7d0b3dc4"
                }
              }
            ]
          },
          {
            "id": "5cfa1b1e-f78c-47e6-93a2-79a405d7b6ee",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ec3eff01-0ab7-48a4-9d2b-46f106e0e1ca",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "94d8d1ab-b579-4261-bfd4-2432d4143c99"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "932478fe-cddd-43db-8288-00337a6d836a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "f2fa05e0-a045-4d53-8019-e618c9372555",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7e3684f2-5002-4b3a-bc26-1a2fcb85d83b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a37adb19-8b1d-4b60-99cc-db937e250423",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a3df2955-852c-4f73-9ee8-c3168a2b8c4a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4002f75a-25ab-4a01-9aaf-e8d8ee70f09f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2c41ed9d-b6b2-426e-9527-07cc1e729497"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b51e6804-f0e5-4e06-8488-0025c1095f7f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e5298eb1-e524-492d-a099-d47177ae2ac9"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1001b54b-1ef9-43f8-9a8e-882e023be787",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "73591610-3450-4781-a585-173e7b89a456"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fc4b5e1e-204d-4c32-8b10-4d4d2fe9964f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d6659512-498e-4ce1-b35f-c578e7641ba7"
            }
          }
        ]
      },
      {
        "id": "2bb9dbd1-d692-456c-a6e7-ee535414529e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ef591724-cc86-4f56-b8a5-f6b14afdb00d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0ca52245-94cd-4618-92c7-b49012c50f27",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2ada5ebd-ebf5-42d2-8377-ba9b0f185a4d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5386904b-0217-44c9-9252-64894e61d3c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7311ead5-1671-4fd1-908e-71a0c0113534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90119ee5-fae7-4688-993b-f814de2807dd",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "136f9a3d-2c69-4123-9f4e-824815b4a50d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e7cb581e-bd78-4403-abca-dfe61cbd6adb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36804a3d-4087-4366-b7b0-7163cdbc8f40",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f1345f-b982-4df1-a267-f2d236502a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5bb484d9-8f01-4d9d-a3da-295ba11f99e4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d1de26cc-8fb8-4996-8bbe-108f3204ef0a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d4c61a4b-18c9-4d53-816a-1477fd6bef15",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53e16fdd-e350-49a7-9b54-7fede48986bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5e989ed6-6892-42fc-977d-c517979c84fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa710be9-8a07-4237-a7b4-6f0b4ac1246d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10203345-3984-4040-b0db-d04233f3439a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8d45742-65e2-4995-b250-e573b86b085e",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1704c1f3-8a37-4f1e-8c21-bd2f7111ac99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "73899e88-1784-4584-a044-a90a6b7a23da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a1633a7-182c-4f91-b191-c1a793a952d9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "aa260739-ed46-47d0-9e39-fabd14360003"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "de3981e3-628b-419f-b458-c399ee2cf00f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "01834720-1f13-47ef-9f4d-2256df944c14",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fecf6fb8-6d1f-40ca-9a2d-3a2cccbbd15a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "7194fea1-a926-4f57-ae01-b7a19dc7ba33"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "519a7dc9-b732-4930-854a-f796d7796883",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "ed2ee198-cb56-4060-ad5d-e55b378282cf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c50e4845-4330-462d-867a-f557aaa7c2e0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9dd7ec22-77ae-411c-93ce-696ad6226521"
            }
          }
        ]
      },
      {
        "id": "a1ffac75-5ee4-4d2e-83aa-c996d3aa9495",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "0bec11b9-4fc9-466e-afbd-cec7e3bd76ff",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3a4f0193-269d-4382-969f-daee15537bc3",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "0ac3faf8-e342-4382-8d8c-f12b7a05a5af",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d19271c0-9c5d-4119-8da3-58fcbff5dc2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8499d10e-81a9-433d-944e-de0c679fa67a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee888165-84a3-4237-b4f2-8a59d5a48b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4fba2ccb-acb0-43c3-b5d7-4810a1ec08a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b6c752-f6b4-4aca-a458-f1eae5668792",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b026b7ad-86b6-4631-bf16-68bc0fa01afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0147d56-ecd0-464a-8cc7-eef37b801137"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16f68655-13b7-4bc8-8c4e-6129f2dcdb26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31ec1704-c005-4d76-beab-90e8a39ae8e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa2f35f-b6aa-4b52-834e-e8e361730803",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc458aa9-c41c-49f1-99ff-13ca6a05b482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4087b26-e5b8-4df4-8779-b1d6dc7e9d7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c872b2f0-0424-423d-8f98-1766212f0ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a97f4b46-6ff0-4dad-914d-907e7269212e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "514440a7-b70b-4319-8907-c53eaf86f0c9",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abb1c18c-cf77-425e-97f4-9de5e4842742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb1a0342-2326-47e4-b7f6-e024153a13e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c417f912-8387-4f75-985c-ed5a925c1b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "88179b93-0b06-4932-8439-141d9a182d49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1f6e6d1-ee7b-499c-98ae-17ceb53a281b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3f461f1-97ef-4301-a412-f1de32fbad7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d67902ff-5ce6-428e-980b-a8193f168dd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1debfbc5-ca5d-46a2-93fa-fc1e9978e478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e90c050-367a-4bdb-ad0a-d7b1d043b4a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af5f275d-4784-4d92-96ed-b451f3dbfb65",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39894301-ea5d-47d3-a646-efe316fd1a97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "814ec8e6-2fef-48ee-a78e-051bf216adbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "671b7728-86ac-4202-a7fb-edd13e2fce6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a78894f0-6717-47f2-a86a-477c823d5388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7979e148-482f-4527-bccd-415810a08436",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a420e78-06b4-4390-8e6b-23cea6efd73f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a8c98d2-22d9-459b-8dcf-65aac6928b4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "818c9ddf-740d-40ad-8021-36287a7cfd4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f8c94e6-1512-4721-a9ed-8a9aab2887ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a283829d-885c-424f-b5e1-d59d5aa8b4f8",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be44b804-a398-4164-8b9c-0e254931f3ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b06c0e8-2d87-45dd-9771-924be0dd4713"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3bd1f4a-1c7d-41cb-aee0-91d18e5a91f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4600d0dc-4f51-4750-9f63-c6aedb22c8d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "240e51f1-ef2d-4814-aca6-d751a4adfaed",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "456ab95d-23a6-4b5d-8c04-41b4a19263ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "831eea14-7911-446c-ae94-c5214cc24ae9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53639948-4fe7-41e0-91e7-869f9b3eb076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5acd04d-9eb7-457c-95d4-e6e33072bae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19cc8c63-e7a0-4fd9-ad41-0647da505c84",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ea6f8ce-d64d-4ad6-9970-45a3e9e0b21a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b29ee29-0044-4f98-b293-63cc9e081b3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea8955a-70e5-45e9-b936-6c1215c2a531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3212104f-7002-4a32-a3d0-f6cb31033f3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a796d123-77fe-43c5-8fbc-d31a42d7b165",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09209106-8fd2-466b-a826-a740dcd6eca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c71a4f60-cd8e-4e5d-becb-aaa3bfef2c2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb97e2b7-c7b7-4b6f-85e6-13804b414b4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62dafc78-ba85-4fb6-9184-0462294f1ed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b1327a-da86-4100-bb98-954c0168762c",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d734b8-5c72-45f2-95a6-de846ab7736b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0922892a-3fc7-4735-aba4-81c8fc541387"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48edd27c-45bf-42c7-ac27-319123fc53e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8e1de378-26ba-4b5a-a7a6-37d5001cb530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdb609bf-bc81-4184-b42a-d6471900177c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdabc81a-4b55-4c16-b0f4-b76e4aaee270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0041e95-a5c5-4cf6-b4d1-54e88e001ba8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f4aa6f8-4691-4c3c-971b-97ccdd42be1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "744c9ed4-7dd0-4fa4-a62f-3238957a1f12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c39fca-eaf1-4e79-8bb0-19c763706151",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaa15898-48d8-4125-9427-c22535e48b87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffab2025-b384-4aa8-abf0-289b55b60d2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69bd5a78-e4e3-4ad9-970e-7a1ae036c4b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e83ccf1e-8f2e-4fa3-aadf-6643161474e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9e9669a-c627-4687-9d7c-e17d7b2f4479",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2e3a0d8-aeef-4f2c-953d-94cf44ee04a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36fbdd33-d0af-4e5b-8d3e-fe74c4df3326"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f208301b-b769-4554-9fd9-f06e5e652946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bb5f4ab4-78f7-41f6-b3a1-d271362cd2e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5844902e-41c1-4e02-8a1d-012dcf365afe",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21761d8b-91f9-42ef-81a3-2ebadd26a1bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f1f4638-fb04-493b-be15-5e23634f2c82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c5c758a-0bb9-4473-be47-5221672eae82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "025473e3-e2ae-48fc-8c9b-a3240d7ce7f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ce4a70b-585d-4a2f-8058-e8ff946d9181",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb441819-1e1e-4a90-97d9-04bdf6aa8511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43d709d4-7fd5-4763-90ec-872232c8b0ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "212dead8-6ca0-402a-9be4-398d27dc8172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "477eb70e-366c-407b-8be6-fc4ad0bdba9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "022ae9e6-d96c-4493-94f9-ee7f481e87d3",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f031aa71-757e-43ea-814f-58ba1d282a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30587024-17c6-4923-b88b-23129c2cef0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc4edffa-6f8e-40d2-954d-9cba3e8035fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5cda15ad-b8de-4039-8c19-fac8413cc3c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "671a1faa-cf00-41e1-91f6-8b2dfa040ca5",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0795dea9-41a5-4be2-b091-a4e7ed4aaf0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01dc3f5f-d618-4090-b36a-fcd947f2e70e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb1fc468-44dc-42e0-bacd-f3ef1ccc0d40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4c54df0-c8f6-4e57-a611-1ea5ed04f9e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48dca48a-5953-4d33-bf18-7a20fa260597",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c36096a-4c24-4337-8cfc-e9c178f5901d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa5398f8-b4c0-4bd7-b8cc-54ba99028e5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c8667b-ecc6-49db-8411-355ab06a4114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "746923cb-4d6b-4028-bdb4-51bad8bfd3d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f7d858-6d76-473f-9cab-6f523467a276",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b000626e-592a-4e49-9a31-6513da7073b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "529c98c3-4187-49e5-881d-cbd14b4cd935"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faccd3ea-5a93-432f-99b9-d1126b19bb4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6cb3bc73-5b4a-459c-8f8b-80ffeef83db1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7142152-84d0-4b1c-b3b4-026254ddc190",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a86c04-8396-4e86-a078-038a34c6167e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "547448b0-92ad-43ad-8439-acdb7b35ba1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ba0b77-c505-44ac-a3d6-b5aed546f8f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e17c519e-c9ee-4c7a-b001-3b605ec3871e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f55cb8bc-5114-44af-8b85-61704fbd2764",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f54301e-f7cd-48c9-90f8-41518623c99a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49a3fc43-ce29-45d4-9c37-dadb65b077e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91b676c0-090d-45c8-b2ca-22017717b528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d95ceb25-3d94-4cea-9e34-6a4577cf84e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d31e2fc-02e1-495e-aa97-95848f064d4f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f8be09c-e6f4-45a9-a619-c0534e6f666a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af0ca855-3b47-4171-b2ed-b614d395f111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b87b752-19db-4bb2-b754-57690bc77397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d36a822-6b8f-4221-bd4a-77b489192d47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01db71e5-45b7-498a-9f28-fa894f7afdeb",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba885d7e-23eb-42e5-88e1-4b53510b7728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ef13960-4298-4193-b50a-eb3f64659b4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80256885-9540-48ce-b9c9-6153d636144b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "afa61218-9c30-4c32-a93f-e30bfc239827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d937fc41-b465-41bd-b761-6fa7ad520744",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bddafca9-934e-42a5-99b6-d1f212c46edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a455906-032e-443d-83fa-37cdadcbbf4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf5d805-c72d-4fb2-9e6f-ba581aceaf48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "69787265-cd1a-4a67-a17a-0aaf50ae2de1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87bfff14-4c2e-49d5-a251-b2f93c8a039c",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfea0860-fa42-436c-8d3a-bbe9124bdc4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b83986d-b799-48fa-ab29-679d3dd75a6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a1af1b-80b8-4ed9-bc61-3aeb4e5a7d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "07ccd466-990b-43da-b974-6f237b1f0a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9142574-2863-4b84-91cf-825fc911d1d9",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7efe757-1ec6-449f-a499-b87c2c53ec43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb6e08a9-b22c-4d04-8826-f8770296e4d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a282c1a-de02-446f-a275-3eab2dfe0c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2bfbd704-1dc0-4806-b7fd-6bff8121c33d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cf532ef-22dd-4c02-8274-5abb16590e91",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca1f2f7-c027-4c1c-8da1-9a720187f117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76453b30-d271-4a88-9205-cec11a75b32c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c1d094e-d0a8-47d9-a227-dbfad929a110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9ee173e-9a90-4569-b530-3ef9f7d880a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64661239-ea74-4e4f-aeea-bf63b64e9afd",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23660898-c703-4c0e-b623-6de383a45bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbe4b8c5-698c-42f5-a8c3-4f33b3ec70e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d952e6e1-c24a-436f-b49b-b6ef2dfa6414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3f068bd-c637-4b47-b9a6-28585d3ceac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26fe1d75-e94a-4355-8495-85d133b7019c",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b3cc28-aa01-4ff9-9459-2338af164d39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b742bd13-01f5-4512-a88e-14cd49293b1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64e94109-8021-4dda-8fe7-1adb09ede5a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cce7d150-2f38-44f9-b0ff-3d5021113748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f63ac46-158f-4494-af03-16345ade0649",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16f5c620-6239-4a6e-a288-20f82d610f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a89a505-5d3e-4977-b6d8-f7ad817220ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e95ace7-9f29-473f-91a1-a0fbb96f35b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "977a085f-a3ad-479b-9402-ece8e7220f22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9412bf6d-869e-4437-ba54-79da117ce737",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5184ff1-dbad-427e-b6d4-22ec24c94be8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05b917ac-e778-46c9-9fd3-212fd0a4d3e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29edb765-b987-4c52-ae13-a6bd27b8586b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1ce5901-ae2a-4e08-99c0-16c538539395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f1a351-aa4f-4d6f-baa3-701823030a43",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a335c307-86c7-400b-9612-c427247b1148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f07ab82f-0691-4f39-94a6-78911ecd3644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2748db77-08a4-45e8-815d-147b3ab3f641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7eb5089-9673-4d94-8b02-275dfe6763f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88697c33-19d7-4924-a7af-473c39618b05",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0be35b3-eb21-4e0c-a1b6-a7b3eddfa4da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fd84db4-869d-41f9-bd17-711622658f64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "263371ac-72c6-44bf-bae0-1fa466ce0988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "e21c6e9c-65e5-442b-a4c9-7ff329e9437f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3392962d-51f2-4149-bc1f-513b7c4affaa",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "affc8a02-d76c-4a07-9473-46f00f5177e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0acd974c-c00d-49be-ab43-d72780f425a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9374fc8-1a77-4cf6-88fd-22219c05c82a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f519cde5-d177-4355-9b56-0615008c235f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f5a4d7-82e2-4ed4-ae58-d97a9514cd5b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5468bb8a-7d09-48d2-a997-25989f31ff07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bc7d6c9-47a9-4483-b102-3c0a2604b742"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63797162-1f11-42bf-bb0f-83f1d250023f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a0eaa55-b5e8-4f8d-ba09-e2a6d91de8ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74cb0733-fa1e-4cd1-8f76-58d8e7480c80",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d97333e-e48d-4441-856a-b97eaff2c3e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e7fa40c-03ac-490b-86a8-16fe6a122d44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f49263c-8218-4777-a8ce-a7948c8d6fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "275e07f1-39cd-463c-bf6f-08dd6d805a7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcfb9ac2-c819-4cc0-9e87-2c1eb3d56598",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "742afb7e-71c6-4f18-ae93-50d099dd8d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e041d658-dc52-4603-84f5-357c2e316dbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16e147bd-a7d7-4de5-a174-bec858a09c50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "06c76f0d-bf43-49ee-83ca-133750aa9938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee2322d5-04c0-4b16-b036-371c593d7d29",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1c67c6a-4855-48b4-91f7-5093db8cdfad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64319669-0801-467a-a42e-ef717512c5cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9faaca59-1eea-4332-b93a-c7c08b886b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac36c743-0546-442a-a90c-6f8faba32cd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f80dacc7-cec4-4c33-9850-fa9036253f96",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44390040-9da3-4c66-8da5-9ca4bda55bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51ab3c62-809e-4163-99d3-cd2e9e1fb155"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06038b4c-33e1-4d23-87c7-91cc76a343c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "50075839-dc4c-462f-9fa5-85d4d6e2331a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "516d8576-fe81-45de-ac1b-e5f437fc86b2",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "450b1b4c-26b6-455a-80dd-09e02105b0f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36466b02-9eb5-4ad1-b25a-3788ae38efc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b362b28-533a-4995-9f03-4dbe3ef56224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "ea2145fc-8452-4f10-89e3-a4cd29876fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47723852-3577-48b8-9b7c-54d6132f36f2",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6369a13b-afc7-4cdb-a006-b7be9c2bca7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0bd5e4f-8968-4faf-92ea-584d361a74ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d91a4e7c-0a1b-473f-92fe-41cdadde63f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "25063ef7-1eb7-4df4-8795-3384226a2699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79c3aa5c-3ef7-42de-8279-62ba55dfe986",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0dcf756-e108-4aa8-9ccc-5f0e04f71854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "798dd8e2-88a4-470d-9d47-a51d9de7a5fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1621d960-dd12-465c-9f32-09a37d2e66ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "dcb992b1-f3c7-482b-bc54-a5b97afb1ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "497bc97d-3e56-45b1-b55d-f57cee6eb8c6",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00aae31b-7abb-4b42-ad9a-e12485db27e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50ce207c-6e45-4743-85cf-c393d5fd1a99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34475dd1-da45-4c4e-a4a6-c325ad1bca39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "94875588-0b67-422c-8217-1c358f5923cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de3278be-3162-4ca6-88f1-6b21271e4d22",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81d93397-4c14-4a8c-9a85-2489e4f40453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0541c0b-2f07-425e-93d8-92c48830ae1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a80877d3-a458-4292-8fc8-9fc99146ad8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d34cea59-cbcf-478f-837e-cd62f2e2d9f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c002d97e-f855-452a-bbad-77c4724e473e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5076daf7-11a0-44d1-9723-fff776fffe0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4b2d85d-0745-4409-b0ce-d146fd24f4c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a57056c-4cc3-4485-9e2f-6f428019e428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca6d5fb0-fb46-4260-94fc-bb8fbfed58cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce835407-6036-49a8-8943-8a8725bd8a29",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "343af413-eb97-43b9-9933-0a89ad5424b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b3053e2-07b6-455c-86db-4a5e9f19468d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc2b2df1-5a28-4b5e-9fa0-ecff96b029d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "302b004d-15f9-42d2-ad10-8f7da697bac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "408aa6bb-a751-4e54-b62f-99cb9a0bbd44",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f4e1a12-e84a-436c-a29f-c738f431afff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a00bf39-837d-478e-b17f-eb55b9cea1be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "801e028a-64f7-46ac-973c-e4caf3999fa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d01c15ec-8428-48de-80e7-fffc0dd8809d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c358adfe-5e07-40e8-beb5-d9970355609d",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "244bdcc6-6006-42b5-96aa-809da6ff0379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "793cd438-69b9-4f8f-ba9f-d9c594fb2726"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73b73cda-1d13-46be-a3ec-395086dcb2cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1b54850e-cdb8-41bc-ad6b-7325884a0556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "797c3c6d-4f37-4fd1-9034-a3812263ad80",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e686cf42-6dc1-42e8-9a76-8984a6b2d00a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dcfb882-1370-4f94-bdcb-d82805b87bc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06b5f64e-ec82-4405-b0d8-b1f92200e9f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "23c17976-4190-4500-815a-67f8f3558dde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c8c264c-ae18-481e-9ea4-d304a4dbaa99",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "978d5756-8872-4917-8f03-1fcad4e4371e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25607ceb-47c7-4d8f-9d26-198601e5b0ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90839a1c-a6f4-4bab-8579-436e7ae3ec32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "139ea450-cba9-4dd1-aea1-1322afafbbb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f9de7bc-22db-4e94-9474-eb96ab6e85d8",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd999e8e-46aa-4874-b0e1-1e0a27c713d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ef23477-b0c8-4c22-b645-941e542f8dd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08021d52-4bed-400e-9f4b-3262eee56e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1f092fa-2d78-495b-8432-096837899050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd594abb-4f8b-46b1-830a-d33bfcd1b7a8",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "303d6855-b656-45e9-bbe4-f62d4e86daca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edd74672-11bf-419e-a7be-941aad92588a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90e9d3c9-e46d-4485-9f4c-d3943de49562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "18f09b2e-6f0c-49d0-9088-2c0faf050ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89689cf1-c2ef-45cd-ac76-52cf9f5bd2f6",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f54c982-59e9-4e5f-813b-fc151472ae78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2f06199-2af3-434c-8622-fa8433c98819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb9a3a9d-eaf1-4fac-bffd-e4667fd71bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab72bec7-2ba9-49b3-bc9d-268b0d976770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca90b7fb-b592-4800-bb7b-19a5df0cd636",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1dd5e83-51d6-4297-95a4-30172da2012a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9400af95-dd56-47c5-b672-046a45476212"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6aff353-da81-46a1-b0bd-c761bb6143be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "ea243662-f2a4-4e38-9c5d-3c55c4cadff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54a427bb-cee2-434f-b86b-20b3c5b116b6",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b103cc5-e60e-49cf-9df5-77b5100651fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8695faaa-dcc3-4c47-91a1-759eabbfc60b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1c4108b-949e-4b53-9892-6348f2b95dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec6505a5-5e1b-468c-9a7f-1d1c1220a000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5c470c1-33b4-4864-8143-139ff973b442",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08eb0e8f-de31-4379-9d85-70553fafb9bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c4b9999-7faf-4e8a-9f0a-79860fd35923"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc4900e7-f93f-456e-a895-7b073b9aae64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5687667b-e15b-404b-b109-8edae05ee49d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30188c71-2059-4cf9-8dc4-83d5ec077f60",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a53ceb57-90de-4934-b47a-ed6e1aa7578d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8efe7dd7-530e-4f98-87c3-103f7ac88ae1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33cf2fc3-b286-4e29-8b28-89ea0025ba87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d75a43e3-9733-4592-8e7f-009eb96aee67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3ac2111-bde6-476a-aa4a-d350dc26a29c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f44145fd-60ab-4472-95dd-f408d6c58831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "805018a4-56d5-489a-8373-113485d3e795"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89640e53-81d4-49cc-b4ae-62ee732c5402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e91cb192-af75-4029-9074-a3a5e8055491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44d77fda-fedd-468a-9e24-bd9c87d8d2fa",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7b22c8b-79ab-4119-a8cc-d30ed5e0b32f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bfcc534-419d-4235-9413-bc126b738ffd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a7a1fdf-5660-44a7-b3c7-fe07bea8e23c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b5e4fb1f-5c3b-45c9-b2d7-61c3b396e64c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0e3d7d4-99fd-45c0-98d2-ecb053d7639f",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c43a78-30bc-4355-92cf-cf3171f8cfec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bab7b17c-cc6c-4ad1-bc04-deddf7b2bfc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "774da828-a0fb-411b-ae83-3ee12636d38c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8a0f4d9-fdf7-44e5-bc00-291f47d40b98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b084ee6c-b5fa-40ec-9a17-ceb3705c7b5a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6df004d-e116-450b-a497-732aba3d1fa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebb0ebc4-b5a3-4f61-82db-fe5aff10b47f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "298fcf47-c600-46ec-b056-01f18863b47d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5de133d1-4c5a-4792-bf80-ed64b2d59a59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c07d6eb6-c41f-4a93-94d2-c78753729833",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c624cf01-3063-4afe-a4e4-3da83071da9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdeeae7e-4562-4b60-9d91-6d488d8dd5a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e7a4f7a-94b9-49e6-93cb-de06693fa740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "15c2c25a-1f86-4a4a-bbce-30d10c59d37b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "113c7809-993c-42e6-9fb3-6e2ddb0bf01d",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02777ae1-8bad-4dd3-9d26-ba54d556a564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87bfb112-3e36-4288-b8d9-abca69226372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e224a4-02c9-42fe-81a1-6e398d8b5b77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b27d58ab-653c-45c3-9847-5e0b0b7b39a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "684c1517-b213-4c63-8857-ffdc2fb7ab2d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8160e406-f5e8-4c02-bbc1-2b0c9aea7608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60eae7d8-c107-444c-aa97-195568210b4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda6eea4-15e6-471f-bc16-5d453bac3ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2757a8df-5ead-4622-a345-e97accc68c81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e1287a6-ba81-4842-825a-5a3fccf2de91",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bbcca75-2334-4316-8ae9-318cbb75026d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ee0fe01-ff15-476d-9e42-57725ebe4c01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c653a18-18f2-4b92-bd93-3adb7afeadf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "39338b81-9e41-43b0-9ace-e22494274f1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38200bd0-0f02-4027-81e7-da69d442111e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5286d2b-4d8d-4fea-8ab6-4ed59b30779c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebd649e8-2fec-4de9-86ff-4f55442ea083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7dc7ac5-1420-4a01-be12-61c162c1000e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "09c62ce8-b166-4126-a316-b255178ee3a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84c1c7e9-5ffa-449b-b48e-d3f2a08d5923",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f13864a-384d-4fb1-8439-19f5cd40b7c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1985fdb9-bfc0-48c0-87fe-0866050618c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eaf2939-e7cd-4efb-a34e-b4fb84520211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "83730a78-c7a4-404c-8b98-cb40921759fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa7b0625-cdf4-40be-b79d-34da5d278c01",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc1fc0b-8691-4457-9e4c-5bededa7f7c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d740ed1-9ca0-4def-8efa-83011a5e2d6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97cf1e10-07db-4c73-9929-6de23c28362b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "44b22657-4082-457c-b4bf-0fbb1b84eec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71a4a1a6-531e-4203-b1a3-209efa8c3f1d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa6f277-76c6-42aa-9d25-dafa0c5966c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b3c330d-f830-4010-b072-edb00c6f55da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69b6c0aa-f905-4fe0-83cf-9a3797879f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7024fa7a-2690-48b4-8d09-12004c1184fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bec030a0-167f-4572-b861-24cbdde9f3d9",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc3467e9-d5c7-4e0e-8e58-13d8a19a687a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0252e226-67ff-4c57-8489-9d22e104e04b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a03ec833-a898-465d-b1c1-cfcbddd69d07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "804f1063-cfc1-48cb-855d-ce6e8983a69a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf95e5c8-9d58-412b-987f-f3b22b690637",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c064b45a-a4f5-4284-ab52-543d1d1c55da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4a6df87-9a93-4457-ac4f-ed4b23a2f3fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5686bfc1-19a2-4337-9532-88ebe06f2e82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eff4a598-3cba-42cb-89df-3c078eb0d6f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db17865-edf8-4fbf-a2cc-83f11ae3ad8f",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cf336ed-b9d9-4e90-82b1-f83d2a6c2720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66ed3414-8fe3-4616-88c1-8359e016652e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d31cddd-8016-46cb-aec7-bf3cbe86095e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "68c5ce48-0263-4ec3-930b-7fe8d42aec03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75a0151d-dd11-41f8-ae40-ed06756951d6",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4282c96-0742-40f0-b8d8-8833cd0da475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58fe7536-6e3e-4848-8d7f-34c62db3da7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05f7a293-613b-4bc7-bcab-eb2c55b8b17b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9db50f3-d63a-4f80-b2bd-b13eea60ccd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e268a89d-1995-49ae-a0d2-72e161eb3c21",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df13af5e-7fa7-4922-9bcf-d3b2c5ae0bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd4ff370-fc73-421d-af3f-67c32253a431"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e8ce141-89ab-4897-a0d5-027b0a4bbccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "874b0ad7-0107-4563-b1cf-a407c4aabcc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "430e79bf-26ed-4964-9e49-ac14e3dd9d9a",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c615e54f-935f-458d-8438-a27aa2432c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e0e8bf2-ea77-4cdf-a9bb-4b2067740aa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "583dbdcc-35ed-47aa-b82f-e11e27e014f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b07c30cf-0835-461c-8acb-219b76c90a04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f17ac415-4d6b-4a3f-967d-e5dfe0dec3b4",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8751744-6131-49df-b87d-d0c532ea5fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe14e029-0017-40be-b266-ce9b99ea8e5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "155241f1-6230-4dfb-bbd8-e198734df749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "72efd19a-012c-457a-b4f9-b5040cc55c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75295b29-ccc5-4296-be67-57d79b4ba3ab",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7425f3fb-38d5-43f3-a489-9a21ddb920e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73a4d646-1908-4752-912f-7a7127f1bf72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "402121b2-b016-4794-b21d-23b7e0d54ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f52ae676-d0c4-4936-9bf4-503150d74049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d01bf70b-3c63-4deb-bb7b-b12253d95780",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf1826a6-07ab-437f-9478-5b8d2f70201c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cc9d828-d2da-4fc5-bb51-e0bc69568360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50873a8f-444a-4610-ba96-ad754a9a7912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d52663b3-dcca-4d34-9122-79284dddfb32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb45354-6a82-418b-ab17-7e32f8512250",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d269776b-60f9-48d0-97ea-2adfdd178e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3490462e-8b22-424d-80f2-d616820dd632"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7fb3a0d-b6fd-4cf6-89f2-2a90d2a385e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ddcef23-8b8c-4b26-89e5-8d5ba352b1ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49365f6a-b4cb-4504-98aa-67b25d8e56cc",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dff9ed88-a2ad-4037-b0be-35f9af7cae5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e349b38-5cff-4a48-87c0-0d4b83eaedd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "573278a2-5115-46b3-8e0f-eb3a5abf329d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6261539a-1cd4-46c4-9ba1-df1765902218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c801ab9-6caa-47c4-9ac9-0ba4a6c8af82",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46eb0516-7f96-426a-91df-d50bb3eac9cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43295576-3394-4263-bee8-c8a45f530872"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65717e0a-80d0-42ab-9081-160ca3941ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "92fdddbd-4eff-474f-9e6e-8e0f4d101ef8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02f5e636-92bc-42f1-833f-be5a090a9930",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e8af0b6-c9b6-4565-96b6-1154ceb716c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1e3e5d9-d504-4f21-b0de-5253e5c3079b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "441e91af-6615-4e46-8e6c-acdf4064f3b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fcd21d70-3ab4-4c56-abe4-b3a822df2c42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9009d73f-71b3-494e-b39f-fd2ac095bcad",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb7a361-0874-44d8-8276-bd41a0d1aff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c7e5995-921c-4c82-9814-a96cd388c172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d29efc89-4076-4baa-af66-27ed2a18dcca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4a79d097-1488-46e1-bbd2-dd77566cd1e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffa3d071-6d70-433e-b046-275ae5137f9b",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fe484f4-36fb-46f9-8ea2-83a6ce0eceee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7da29b3e-f404-4655-98f0-4337ef93fd5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38c0ee8b-b853-4bb6-bcc9-fd1de3ac719e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2205524e-fafb-4ba6-bfc6-4fcddd1dccbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f5d5390-aa32-468f-a8b8-3721c2472a06",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce3c508-991c-426c-9650-d790e5616b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5df0e972-0488-46b0-a474-f21a14eb586c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52efce8c-f9ef-4c1b-8c9d-c10db2289a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5287f2ee-dfbc-4992-82a9-11495450522e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c223009-ac41-4595-bb1a-96839cfdc63a",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "839328bf-6be3-4fd8-80d7-e328e8a7c914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02989ccf-e47e-4648-b547-540cdd4377df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c41c03df-96d8-4d47-b95b-838c4067604e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3c7f560-d9fc-4950-8c9b-e48276c7e6b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fab6b51b-2e7d-4e99-a998-4a6e244f1045",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68027cd9-a3d2-4be9-939d-7aca1ad03850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08e25576-906b-4270-a25a-e00a5a545ad6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "895a4437-c13a-4870-843e-9b50538ea770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f219e30-274c-480e-a445-c66b492b5ceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58557a9d-ef34-4930-9958-80bd2bac0412",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c41931-9fce-4c82-a76f-52becaec80b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c11f384-dcf2-47b5-bbad-708adfaf0162"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c79ec501-1663-423d-87a5-e0823b4d3dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1aea27a1-c6cb-431b-8b9a-f455c4836f82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaa9a0f6-7a49-4169-a1ef-36e5393d37ad",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c142603-0628-40d9-8e80-8656eeeb12c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3caee313-18c7-4f30-9f85-3dd12add1270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81f510ce-ea9f-49b4-85fc-134f7784e219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4fc58593-7c81-4696-9d0f-cfa05cca5660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a54b9c34-af63-4d34-b4b4-2ff4cfa79dfd",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4a6c131-0572-4967-8122-2ee5788539d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "25123bf0-d44d-49eb-8fdb-0e7a345cae7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84bda051-8dce-43a6-9fa6-3cf8bf5fa27d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0d79bdb-ae99-4304-aaa9-e4060deccfc4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "816ff619-3a2d-4c22-8227-abd4e0230b34",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d196e988-2d3d-4e28-9b76-19c8ff8efd3e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2dad90f-d2ce-40b9-a78c-c409afd44369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "35ec10b4-ef07-4d83-8b5c-5ee54d73f801"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b72ac71-34f9-41f2-9f74-afe46156554a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "962ae49b-d56f-4fce-980a-5c1e705967af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe518681-e5b0-4158-815a-357ceb6eeb5b",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40c40978-ef97-4698-a320-8cac3084e7f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5eefaf18-9ec9-4601-8ae9-82a411328458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d64ecb-6fd5-4aea-8a06-26ade2c7b874",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c57163e3-ad15-4e97-9326-7a85d691c9cc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "89e7bc6d-27c0-4e3b-a58d-08686d596db2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "603abfc9-84f5-4c1a-9b13-df7c85c78f32"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b463f43c-557a-4b36-a061-48f25905dd6b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "280c5d24-a495-447e-b370-46c898f931e9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a86f7b00-1916-47f2-b733-b67f8fc5fe56",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6fb0bea3-508f-4565-b6a7-cdc002cc6a85"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "dd7d6f7f-9609-4cdc-a2fb-a51736941ecc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fbeeca67-7e22-47e9-b656-4c72a945d355"
                }
              }
            ]
          },
          {
            "id": "a4dcefab-ab67-419a-b793-3841350213a1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b64645c8-cac9-4db4-9f37-38eea53ef063",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c46955d0-5b74-4d53-98eb-562ddbada405",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "01d6e7ee-2e04-4b04-acf7-9c7f6e24744c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b16b060-36ab-404c-9d78-a199402c7ce2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8a0d7361-2172-444f-9a9b-9c87587cc290"
                    }
                  }
                ]
              },
              {
                "id": "e09ce8b2-c98b-46da-b9d1-1ec6533ca2a9",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb210c5f-9e6d-47d2-a2f2-163b992eb89f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "20ca7d8f-a464-4e53-aeda-02df54bfe1ec"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4011e17e-973a-4940-a51b-61d49fe6f380",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "50f11e69-fec1-41bb-9089-585ff3e5ea92"
                    }
                  }
                ]
              },
              {
                "id": "48e5cd7b-9e67-43c6-8bba-f0b0ed7ff704",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f679b354-268a-438a-837c-5e244fdad1eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "badecdf1-8ae8-432a-9564-a1ca3289853b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fcc66bd9-4eab-4c8f-bc35-be1166442eb4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e69abfdd-d379-48cd-ab12-19fbbf82eb3e"
                    }
                  }
                ]
              },
              {
                "id": "9f5524ba-2b0d-445b-bae4-86610dfef390",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "452ec120-ecaa-42cf-a49a-0bde4016b0df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4db95845-f973-49e1-ba05-c945211a0ed6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1840264e-0021-4426-831f-7e7781f101a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "8168333c-a8b1-4267-b754-8ed2ee11b681"
                    }
                  }
                ]
              },
              {
                "id": "be737a12-2f06-40e2-85b1-1b6169c4f77d",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "123deabd-f6cc-4f17-84ec-eea117dd58b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4c4cc0a9-2b2b-4211-a6cb-a98e86f52b0f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "230437ef-0997-4874-b398-8c7a982df0da",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "470e33c1-f808-4bd7-9fa9-50ac97592b87"
                    }
                  }
                ]
              },
              {
                "id": "d6bc0461-023a-4e78-9462-d0d35dbe56a0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c5a127d8-1e5c-4b88-b824-28dce98adcae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9dda4c8e-002e-470a-85a3-720d98cc0d40"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f2cf96f4-a876-4aa2-8d19-972f3583e81c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2598c766-76fb-41fa-8948-ff46aa5ce249"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6aa0374f-045a-403a-9dcc-9d92b1f71efb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0d66c86b-09db-445c-9be1-101dc0d336bb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e0675ceb-3bac-4def-8d51-01745f9bc3e5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6173ab6a-53ef-4931-8c98-ac0ea418d083"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "46630d84-e918-476a-945e-c4420cf65175",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "864d5506-5c87-4f0c-8713-2cff2af942b2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "96fb9cbd-0ce1-4702-bd7c-a1a301b33e77",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c7482da0-034f-467d-b41b-e2ed9ed99320"
            }
          }
        ]
      },
      {
        "id": "521aef5e-d178-4f2d-87c4-42f3c01a271a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "1c153a86-4278-4a0c-8e65-7106e25d2f0f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "22b11347-8a03-40a4-a26d-15bc31a08594",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2b990449-052f-4e96-b67f-0fc141d291c6",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8a66a68-5a60-41eb-bb2f-af4f9fa6fcb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0de40fb7-a519-499b-bb02-f838bea3b619"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8fb815e-8d7b-41db-9414-ad727c4e9445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a333017-0fc7-4beb-9c4f-f3095672c098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "586f29ce-b998-4c85-850c-2c9d70a2957b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82d0aa9c-d943-474d-a4d7-4f07936743ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "010f373f-3abd-431c-92b6-e7823a43f3c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d7ba2d1-fb5b-4b31-91c5-f5d99777a734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff611337-d6fe-4997-ab55-c58770d61710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04b74167-8b05-432e-a9bd-f910d93103f5",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f916d3c-375f-4d68-aa13-1c4b98120e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75e18187-bace-49e7-b3bd-0941d558bc43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d70c0f75-efc3-46ef-91d0-247b22b7f4a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "04d1c91c-4a37-44f4-a762-3b78c73183dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8695405e-706b-4a31-9fe9-ead3c4280b82",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0328345b-5925-4564-9183-23531923b58b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e321e583-d9fb-411e-b90e-31f7ccfb69fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f42f018-cf91-4685-a33b-e5e832114318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1bec6a1-82e4-4094-8264-956a6246b6a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "919d6223-64cd-4ee2-ac06-0ba4981581ac",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd4c6f24-978d-4118-8f04-38777fc2c59f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1468c9e6-4989-4d87-ab50-02e16ae46d04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "550b01e5-ca3a-46ed-8937-4e9c530ac064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6ab3bd6-2cfa-4071-b8c6-43abaf44270c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7698a18-ae21-4973-b039-aca8a7494372",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "979dfafd-6879-45ef-9465-e61b405cdd56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50350a36-e82c-4218-afc1-60d6712e302f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c74a0ea-e2dc-4acf-966b-7dc94d980285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "113c1898-ab5c-47f9-917d-3c76faf6ba9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1363c7-cd30-410e-ab7d-e4ac1c9c10d4",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d77e3569-0bf4-4cec-a873-65ccb9239fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52349f7e-c5f4-479a-8353-c9750db7da63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d77a6088-2a34-48b0-86bd-239a721d251d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "615f44aa-923d-4208-ba57-5f485cc1a7df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4217e602-78b9-4acc-82a6-39a605fc92b6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa109f4f-a209-48e1-bd5f-e0d00616271c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae9389bf-27d1-4e42-b74e-57519435faa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf9c86f-4acb-451b-b91e-293b921fd4f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0e94d3f-627e-46ab-8ab4-66540e5b790c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab74e1ff-2f8d-4aee-a5f7-127d989e9329",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46a07f7f-5abd-4bf0-b2f5-8d0d93750f31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "391ae091-b3f6-48a2-95da-0a6e51dbba3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e7c8193-5f44-40a8-b0c3-58b0021a9dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "406ee37e-3b9c-4b42-8ecd-ef837dba125b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0592f1d7-b511-4d57-92a5-931d6a3cdf9d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d78383-8e7e-41b5-abda-82455cdaae07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3040d5e8-23b2-4ebb-8616-9dc6415a1071"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58426e77-c3b2-49d1-821e-59f91075acda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f36d810d-5bad-4bf2-9d5c-4569ac65ba45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "568d0b01-52c5-40b8-bb23-847d01bc64bf",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47d09ec6-7482-4917-9791-4541f569d176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d54e85ba-a5f7-4d59-a87d-0c6e7319c69b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "690c5b8c-8ea6-4cb6-ae2f-27b449f03219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f385159c-f7cd-428d-acba-b8ae27d1fa59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3599d024-55a3-4a6b-b3b1-0ccc0ea36771",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e83c0b1-3cc3-478c-ab9d-4a99376ecbc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fa65677-3445-4b2f-be69-a318764af286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6400104b-ea14-4511-a573-1f583c78a35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8410e92c-3498-4a40-8be0-cd51d8e1c122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "991b7ae0-1940-4675-ab48-63994d8c9c5e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d148f52d-f686-426b-a893-85d74ecc910a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cbc6e5f-8074-443b-888f-f2d1cef690d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "172b30c1-7dae-4869-a94d-2fc961db6f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe3b388d-5608-41b2-9331-ee1fd087d178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aab6fa6-cffe-455f-bec2-ca363e8cd9c9",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9fc63d6-a181-4147-ad36-72dbadc12808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f157fa5e-d308-4b4f-8a45-b7887e9d1e8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3ec856b-f058-48a2-8422-6bf8137abd78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "066c73ea-65a4-4649-99ee-f3bedb5b6f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e195c0a-1cc7-404f-bef4-f2e6365bc808",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cf6d1f7-74f0-4ef9-ba69-5bc916b045f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1428feaa-420b-4449-b495-9533b8b6c0b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a2e170b-24e7-4fa0-9835-c07c8812ba96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "64d3e7dd-f6a4-4e7b-bc23-af9615e62823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b2ad82c-3f5d-476f-9fb4-074abea055b7",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5591007b-b3ba-4f6a-8fa4-fce99179413f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "440bc166-e454-410b-abe1-8fb1275e2a67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b82b9f4d-0b57-4298-9bd6-1be3141618f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "279f223b-c94a-430f-8ddf-897767d51213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ad645c5-719a-40a9-82c8-4aef9341760a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb0a7ef-b04f-43e8-aaa2-be3da3d4ec9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09de70d3-b235-4364-b2dc-44dba5d46991"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44678881-7955-4fb2-ac70-2e4230957372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f57613b4-6c28-4474-9f79-bb16aed796fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58064049-5a52-4f46-83fe-9baa3617666a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d45021-6115-4ea8-801f-49d7ef58a718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99be60f4-0534-4b06-9f8f-550ba99f846d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "433005ca-4156-4b83-bbe0-c3aea9a3f9a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "632c15b7-feac-44e8-9290-6c037b8adb84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f4d343c-4446-4116-9f96-913c17b9a1ba",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfdbdc97-8636-404e-a170-a6ebae17c69a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ddea0bd-d10e-4383-819b-87889b7bf71f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7248c763-d340-4fea-884a-a7e5168404fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e315dcf-5726-4bea-8ca3-45112f7c3007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42dd3ff6-b69a-43c8-ba04-3d78b7b6a89a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6f3ef5b-af01-4504-b33d-c3b20e3b7d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d61b1b29-332c-4695-bd67-fe7b49c21025"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dcfc388-64e8-4e51-ae8a-ef235821c73d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f1f3254-eb0e-4119-8fc2-174032632b8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9df82e0-9991-4328-a92b-82c6dd94fd52",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1f0cc55-e119-4f01-8706-5cf3a4bb7b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "771ce8e2-44e4-4c0c-8162-3f8c4f876e83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5948961f-045b-4e9a-99ea-65c5cbbe0f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eed3b1da-2bfa-43d9-87ec-894cf5d17371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d167c33-f333-4dde-9ee7-cbcb20cf9d24",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb77eafe-6391-47f7-a18b-931bcfc34283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f274d7eb-5b8c-4abc-821a-68ed1de11365"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6c074ba-d3c8-44df-85c3-8430a6274e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d578a2c0-5a34-44c2-bc08-de96ae1b4c47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de32a1bb-10a4-4e4c-a0b7-e7ac9a40d102",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb2fa1bc-6f5c-4855-9dd4-aecbcb71747e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f08c5eae-1b2c-456d-9a59-3de7b35eb673"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a9cbafa-b50a-49d2-9fa0-0c15ac41cf71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe341658-99e1-4160-bf2e-d018f80d8c5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f7d76f-5e79-461e-bd3e-f4f1d166508f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04dc27e3-07bd-4013-b0f7-241389258517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf63ddf9-289a-4221-8ec6-c457cb5a84cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "289233ad-4a7c-4c2a-9d08-2560e607c072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7eae839-2fbf-45db-8a59-34e2070cff7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a0c0e22-99b1-4721-842e-50258b66d1d2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aedf7e1-1620-4517-88fb-ddae7a8ffc8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0299abf-1c05-4185-9fab-0e2e999d89d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d1135a-a887-449b-9e53-7938bca967be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e06a6dd0-d677-42b7-b9ee-7694e41c247c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8c973ce-cb92-49ca-b440-c3084553c642",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a85cfe5e-9504-4b77-a725-75500658f2dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88de8045-8dc6-4430-ab25-df1c83f0fe36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1500e5e5-d33b-4e28-acfd-c64112c28a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45f88d24-1aab-4002-b721-4e65eec71dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d24b34c-b92b-4792-8d26-3486d58d566e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65d0b98c-f3a0-43a3-b7ca-3e5241ffd982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baf1b757-b13f-46a8-aa90-b81b9b167014"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c357952c-eb09-46db-8626-b570b15fee45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c6c5f8d-5d55-4fc0-a14e-3c7c5912de55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b52553af-d2f0-4c7d-96fe-23a546734891",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd7063d4-7482-4e1f-b804-51891318ad30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13863499-d057-450d-bc4d-7abfcdc29d92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a7b5eb7-b189-458b-a8cb-2adc744cf954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "861f500e-c02c-42bf-b7e5-5f9cec6b4293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7deda9d8-8c59-4cc0-a197-6f6dfd744875",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f1be2b7-07d3-430d-8487-ba5cdad6cf0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed5c97c5-01f2-4b80-af0e-e00f90db0cad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81bb25d1-f2d9-4266-bd4d-f29522682684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52103ff3-03ac-44b0-9716-1ce5b2361b6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85120a7e-d6ba-4ca9-936a-cdce81d0c01f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d55e2615-db48-43a1-ac08-37c381024191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a542243-111d-4c71-b970-953bef89ca59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6bf9612-a62f-4fe1-b5c6-21c356d50526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74aabf2d-9888-4306-aebb-3d1a51003f26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4505b9f8-3f11-46e8-8202-9b3e7cc83b5d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f93dfc1d-708a-4420-bbda-79cbb6142067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e580a68c-7362-413e-9ba2-b38f2e8f7a59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "975bd79b-fd68-42b6-9712-9d04ed4dcb2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2c1f481-00f7-4c0c-b455-5cba6a63c7fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee39473d-2be5-4cdd-b560-11873adcd9ef",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12b19fe1-a29e-4725-aecc-a91ed373b971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5e07aab-5893-447f-85a1-44455370e77f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75d6c6e1-01a7-4e11-9421-0322df1d13f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5bc9189-8f3e-4669-94bd-4e2deb9b276a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "737d0fce-0868-46e1-ba6e-c41bd35b3682",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "75638c98-54fa-4dee-92c1-6ea1cc80a059",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8495e5f3-5359-4ef2-b15f-052391a620f5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6558b075-4d1b-4fa6-819f-e177124f4566"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa989dd-06a3-4344-bd13-c841d61d472d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "976dc58c-6c83-418f-bd9e-b9864627b11b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e971dc61-ef43-4ec5-8e32-8a19468ec450",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60cebf5f-c1c4-4950-9db4-74f87e865a40",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b30617db-1206-423d-a368-febf5a3ea419"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0233aa55-03da-4e2f-a4af-aa20b207342c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2ee29ac2-1d37-4045-b82a-7b71410a7fed"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc85a83e-203d-4032-a924-0a3ae5da23d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f1b3d33-795d-4a7f-bac7-f1f9ef3384d7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "82b22107-982c-4905-92de-1f0272308ed9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e0f684d-ad52-4c8f-9580-a584a390e7e6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "28bdb010-e30f-4df9-bfae-d045273dc35c",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b2c9f5cd-352a-4fb4-aefd-67fc6e7ef9aa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d557021a-def9-4db6-aa97-fafcbec7781f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "94afbdd3-a9f6-45e3-9c41-b5688bb8d09b"
            }
          }
        ]
      },
      {
        "id": "f27f63a2-4130-4da7-bf2c-fda0c2edfffe",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "bc3678db-4367-493b-a3e1-593c52667dc5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "932c84d3-8919-4506-b5c2-9e1c8d1fd341",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9a66d9c4-ed07-4ff4-9388-407d5d2da403",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1ffcb94-121a-4ad8-9908-6335f8848a8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddf49d79-723b-4f71-8425-e845ebbef5b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7533147c-c3c5-40de-b429-ee30c679e733",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e9c35c-ca0d-4bf7-896e-fb14e81dbe78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc8751d1-ec04-4e9c-9808-379648400ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "947603bf-a462-4342-a362-37e2fb914c13",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe00b6b3-5efa-414a-8d2d-c2cef4244ab6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "426d4fd6-0643-448f-9e05-9ab73ee88283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b742f87d-d86f-422f-8e69-7aea588cce03",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31907acb-863d-4692-a757-c7decaa077aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7de13840-9597-40fb-ba5b-85e30b4e391e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5dd8bdf-3279-4c99-bd36-4620368052c7",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b42c8cd1-e520-40c6-937e-ca1131451a61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8620397-53e8-4b8d-9936-2e439bc63b6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd81235d-14b9-4a0a-a181-517c30897758",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7f50e47-c7a8-427a-b960-2f1f72fbee0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "489dc3b5-75f7-4d71-bc3d-e12ef631bfb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8076368-a4e8-44b8-aa57-069c17dc3fc4",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa12a3c-4840-4146-9af2-74f7b55ab7b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a115ac4-b963-4ba2-97b8-56f840fe4d9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43db963a-e24e-476a-9802-0a59f9fb1466",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74e97d8a-3aee-4cc0-a527-688344ebe235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33badbb7-c196-4621-8b96-977fd0f2b4e8",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a07aa3c0-06d3-4da0-a2e5-921f99a38821",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "849a6115-5de5-4d21-8a30-d70a7911ea19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61324ec9-0c92-445b-9293-ac8c3bf7f025",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97663649-f82d-4aa1-9376-4962612c4a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e25dfe3-e611-4f38-9e9f-22444b3e79cc",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbd3de96-818a-4148-be09-08d366548eaf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acdc108c-0699-43f0-8123-ebc8ce7753a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7de27b1-b64a-4325-807c-9dc417ed2292",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9682f8e-25dc-47ea-965d-28cadfe2b1ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea0c3131-8794-4de5-a492-55c140a00341",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50cdf81e-606c-425a-86ee-a987a28fb75b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97512135-2ac9-46a9-91f9-34ee9d2e1db5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6beb1d36-db5e-4b87-a81a-a379b87a10fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b360a92-ac20-411a-a392-03ee924faae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f597e9be-9cff-4c18-9dff-9563c2203e6e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "100554d9-60ff-44b7-afc6-c41e45813880",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bffd169c-bc72-487f-8381-e005c0b748fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dcca64f-5ca2-4104-bb58-a9beba92ba04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3a68fd3-3dbd-410f-8da0-3c255c51b019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64625ac8-989e-451a-85ab-259572c366c1",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "882e38c8-5ec7-41e7-8f1b-5b491844a2d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a937d15-e0c5-4005-8875-15123b93f03b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aac62a0-1bd7-479c-8cf4-1dacae78dd68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2ac38be-c530-49ba-86bb-de6cc2af1a2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "725a25e1-334c-4bb1-a015-ac2a6453e4e5",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1028c035-ebb8-43a0-a12c-1b947f9a34a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "909fc92f-77ca-4211-a0f3-738fecac52ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "091d5e98-0c4a-4e10-941a-f3ea19fe156e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d16a974-7af7-4485-a0ed-cd9910c7ca66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42aad79c-a9fb-4a02-ab7e-932231451079",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "420dd723-51e1-4e78-8afd-4cce8bc7f5a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ee81a3d-79aa-41b1-82f4-b5b60906a8ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbddb1ae-d9ad-43c6-ae79-8443ee11df40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cbf1bd5-cb04-4cea-89ae-ef46d94a5166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60355bf6-2e99-40b7-90ad-a7ac4c811078",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dde24ff-b46d-4e44-86e7-1e98c7c04e14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a90886b9-4bce-4f96-9dd7-aa60e800c7d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92fc50a9-33c8-4fe9-9c42-a64096bdae78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d652d2f-9849-4799-b6dc-336130ebfb3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee59a03-698e-4718-b593-30a5f1586ec6",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf177379-1bae-4ca1-beed-42e767530d5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58fade79-c64b-4466-9f92-63179f588d87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a119294-cd44-40c4-a7e9-ea920fa99e85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06b310eb-eb96-4e35-82e4-ebdb8a25101e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bf74aa3-c859-4762-bddd-9cf38d95f1cd",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73d7c8ae-14ff-48fa-a138-7b1deae4585b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7435e0ff-f7e5-4f0d-b4d8-0f17e137806a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c30cb617-f420-441d-b051-4b539e35ac70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4d40d4e-5d3d-4a58-893a-4c22928e80b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff048a56-59e8-488e-b796-d988e46514f5",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28a64a7c-0580-499a-b588-20e67e0382ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd3e2cb9-fd12-4691-8c33-13b3bb91160f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec8bf28-db7e-4889-b721-19664d2f19e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be7192c0-deaa-4afd-8cd7-c97797ff6d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e29b5cf7-b4e4-4155-b127-20616625c324",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6889551a-0bf6-495c-8989-3da63e474246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de06c203-de72-44c5-9ac1-bf0e8453f3ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e871b53-8b96-4fff-a078-b46d47b0b127",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0906c3ba-92d5-4427-a242-4db8bf9d8fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1d8030a-1dd7-4ebd-b78c-d77dab2c1431",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c21ff376-1eb5-4f9f-a4f8-2c15472e52d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f74b559-e780-4eab-9c70-555d98c2e2ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f7dcbb0-025c-4492-9006-e678aa20e334",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ac9031e-086d-4e75-9143-caeaf6685abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd77e998-9d81-42f4-b549-0d1cfc43d517",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b8fa31d-45f3-4da6-a231-83af68367ce8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "446bfe7e-f09b-4755-a457-b6d04cc74d6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "485b95e2-3c78-43ea-bd41-c8bb1abad348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a65c9ee6-dd56-4ea5-a97c-3231faac526c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b980cb89-6453-4af9-915c-5da12b347685",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a65cefb6-37cb-44a6-84c4-32919021b14d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9879cf09-e760-4830-b335-07f5a18d2925"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "997521b2-6ebc-422f-863f-985e88de6a81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce16f4ae-ec86-4c0d-852c-f73db8fe05ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc2837d3-8ae3-4e7c-ad72-ba350318db24",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2cb3b9e-051e-403a-84fa-015fcfa9dd86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fb0737b-d544-49ee-941d-cb082fc6ed32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84750a8d-89c4-4df7-b9c7-fbc9c684d726",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc4ee703-97d9-49b7-aa71-b07f95bf62c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "557787c0-f687-473e-bd98-22eb03f5ac4e",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9807713-a6ab-4ccf-8dac-5ac8c79252bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b0c1a5e-1127-43f2-8ed6-0bbe2490d649"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0e98794-5419-4535-9e38-0a53c681394e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aa28763-2f5e-445f-ac2f-5b9a2cdb5b94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f52c03-1767-401c-a12c-a008d9440e24",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fe56cf8-9167-4875-8e90-cb44aad1efba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db6ca5d8-8ebc-4235-9c8a-41bddf01a414"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bad0445-2cb1-4260-9b45-5150a92b8ca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "765e0f82-5ece-4be3-ae6e-9b5c0d6955b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f98a365-2973-4b7b-ad91-eb3d5a6d50e0",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "704f0519-6550-4565-83d7-4892970fc175",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "056bc854-4f4e-4d5d-b2f9-0e1599787858"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd1e0cab-1497-4eed-ae02-d48cc8db4e39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "645443bd-7aee-40fd-9b6b-5e6f3cc2723b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ecb7bba-1ba6-4e64-b059-7a3168ab90c9",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50fdc5b2-5307-4290-8dd7-810497f6bd50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b51c88d-6a24-4a06-8cc7-d66634d3279e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e78fe000-771d-4cdb-bffa-9571a6deb407",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "173b9f02-7683-412b-9f8a-691c408e3e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea305a4b-799f-4806-9abc-65d468155cd5",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b6988b-2007-4ec8-9da8-a8aa7260fb57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ed06438-1032-481c-a527-2bea9c17ece1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45685d72-c3e6-4055-ae3e-987100f673f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04b06bea-c742-4161-ae37-86550505ce49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "668a543b-7c0d-400b-aad4-3847aff1e6c1",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "895211ba-a3c7-4fa1-ba0d-3f71f42435e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68e831c1-d70d-414d-88f2-555a722bc0c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1efd29a6-5f81-4681-8a72-b51dd706b5be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b524d8a0-6194-4187-922c-5264c735cb77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca0da06-5dbc-4287-9868-0a0274491f74",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce2265c-eedd-4c49-b6c3-2f2582ea10e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24a122e0-6ff3-468b-bcaf-28ae388066b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80e3672f-00e1-4eef-9654-83b75af4096a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b708728d-9330-42b7-a156-8769e53f760a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "806bdd26-42f1-4962-8d10-7fc9d19f691c",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "745535fe-814a-4200-a140-4694385b2081",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ba09b82-8f8d-43af-b278-d390fa5867f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ea37c9-1854-4cbc-b49c-718764bbc23a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48205394-ebf1-4f33-8a87-7816e6c63522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e425bf1-05e2-4d02-8d1c-bb73cb796284",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36b93130-7fb8-4611-8ec3-572c806f0f7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c49c328-565e-4c9d-b531-e7e22e959ca6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a14b9f1-bdda-4cb1-a6e8-40e3a03392b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c8da19f-bd7f-4ea5-a160-883038a90d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a4b6b49-1d2c-424f-98c5-3bd9f9e6a1b7",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36dc61e9-43f7-420e-bd39-4f91c0015202",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a35ae33-3e12-4772-a754-1f9d89189405"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2fdadf4-5b52-49f0-aaad-a2fb88273886",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c809c2da-b5f4-4271-9747-e8a013537ada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa234b0-2bf5-44b6-a0a0-f5a571eeab57",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51afcc9f-1ec2-424c-943d-f2e2bde01565",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c84481ff-4321-4f18-9293-e69ff2d3d354"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b6870a0-3c45-4d96-886d-1912e0d3b370",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4988372d-3d56-4012-afe5-39dcb942a8ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ae7693-93a4-479b-b370-a305ae2cff68",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7333f9be-4821-407a-be7d-73b1ff4194dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79bdd7d8-318a-4d8e-9a6b-c3dd542f19cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27c37d5e-dbd3-4a26-b2e4-68ac4644bdd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d613270e-b5d4-4a53-98be-ef79322c7e8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e47b219-9c74-4014-81d4-3a2dabf27c72",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dfc56b9-ae56-401d-9061-be729edbed99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "712f685c-3777-40c5-9fa7-a732d6b3849f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45c93bde-dc5a-4076-9c0e-41ccd479e27b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de9a3fb6-86ef-439d-83ab-e986cb54eaf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0343cc5c-d343-4f81-8d98-928ae07d7418",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16e8875c-59c7-47ac-a972-e424d42905f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24f2d949-31dd-4a45-95e2-8447371a8e35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04431d28-18ee-4f40-a803-6c72cd32b757",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe826f06-c2aa-4821-b092-39a9d875902e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af99ef6e-3ea7-4f05-a2ff-de694492fed0",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07aa175f-3cff-4ef8-b0e2-6979e343941a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de95b344-e4a5-47fd-8ccf-7ccd72272cac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca8b38f-963c-4077-92d0-8fb998042bfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc44dae6-f58a-4a91-80c4-33f4b529e864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd30969b-6019-4740-b1f8-b4f78fab8d75",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a265296-5351-49c9-8569-ff6bd04c1d95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8bba063-027c-499e-93fc-467a6dba5fad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc73db8-dd0b-4e1d-b354-f02ae2301960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "170b4263-314e-4f05-be0a-ff3036d681ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1be5d2ac-4ad9-4cc1-9e2b-292859aa6245",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6337ade5-1266-4ea4-aec0-7293d5bc20f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6255f2f9-956e-4ff9-876c-d6d8c920475f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f05d6af9-bdfc-4392-baae-4642a8796e72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f45c9d9-fc18-4a04-a9a1-60a768cf277f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c31090ef-b16e-4609-8ce5-cae19da0f3f0",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "050f8390-6728-40f1-8b6f-c20ce8d4f393",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7899784-a589-44a5-a4fc-f92b316af5b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60908176-cbca-4330-b138-9891c51d4d23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07d60b6d-a103-4868-9115-67509a4b954b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1085b3c-a1cb-44ee-9eb0-543d8889ff0b",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b763320-016a-41a7-8342-963a61d0dcb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00f95dd7-7140-4904-9887-9895ac9e1766"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8a7fc97-ab10-4c35-b74f-954978b09029",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18aa21d5-2d07-466b-98b9-8b14da0ea3b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46a5d84f-f77e-43f2-ab15-128c409cf37b",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0af6a1d-a566-4414-b20a-a6f69f4fca7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ceef52a-5adf-4b50-81cf-565be7740e89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c147f8da-f7d8-46d6-b233-98ca34d9aa8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "169d32bd-1dbe-4789-9746-ee86384e7cc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c430d8f9-64ce-4805-b209-20265f2b0c77",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffd7f394-62b7-43ef-ab8a-d8de7515e876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e613d7a-d225-40bf-a5fc-28cb5cb50077"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac35547d-6867-402a-b650-dae6887560cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d740e41-d66c-4151-932b-12268a105b3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a65b24a1-1dbe-456b-a598-670771eae1a3",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d1c9c04-b2f4-42f7-92f2-99aa372516b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3429045-9594-45a5-953c-83d7ce8f0cdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0792f3d9-f33b-4f0b-afca-3ff436b1162b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd9c1816-0afc-43aa-9fda-73a51b1190ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc4de794-18c4-4c8c-b6d8-af05446a7ab8",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e9c3514-824f-4dac-9f4d-74876ea172d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7b70305-0cb6-49d8-b344-1d48090daa2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e0d068b-a373-403a-a25c-3eb9a9fd8bcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a77a43c6-abba-492d-91a4-bfdcd6b04197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "447769d0-003b-4109-b024-9c0daec42182",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "111da1d6-016b-4334-a886-b239de7adaa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bd2720b-f7fa-4679-9c7d-ea02f074de3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f4b1790-b87a-492d-acc8-9725946e91d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe0a549e-44f9-4698-b323-c624debbffb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "345a0e62-feea-45b0-8f53-065b93371d4c",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36cdf4a3-183f-49cd-a8d5-160bffe0ae21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "014bb6d8-dc29-4c10-bb16-c04e802a48fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50db2faa-4fac-4052-95c8-55d436e2d6d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "266cf1d9-3478-4a72-ac04-b8215e5a35eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "274f5f9b-5827-4bb0-8974-30db1dd82751",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4e4a355-3705-4d94-88ae-705191a49a3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52979109-d302-43a9-bf57-3d50e3eee105"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "312d131c-6305-4622-92a6-b88b4a938e98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7be5b89-ec03-4824-8f64-dcdba6130bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d101e01-0a06-4101-aca8-c77132926f66",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "773cda93-76a5-418d-a9e3-7811861d0a5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45baa38a-69b7-49d3-b457-4f804e3ce6a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c541d26-2be1-4a92-8cb2-28c44624aeef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2c5bf58-a403-4610-a3b9-ba640129587f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "119ed162-f44f-4b14-b089-8cffecdc5f44",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2b1ed6b-9de5-4d35-8d28-29d3cf857d17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05edc5e5-0df9-4651-96e1-598fafe5bd88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d703614b-f68d-4e88-bfe5-38d27c3c7347",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc37d285-5397-4fda-8f78-d30c990b18b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6871d338-44df-4880-a10b-60fd0eb5a647",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98e1133d-4cbb-47d5-95ee-919993e4d4ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5f73eab-7581-4d5b-b2e9-e48346b469fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9821b129-8d31-40e2-a90f-0c070a0b47ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b58faac-e6d6-4166-ad7e-ec403f695691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c0aabb-f39e-4e0e-a9b0-da1870240912",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "910ce368-eab5-4585-af74-73aa174dc0a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac1d4f0c-aabf-4e2c-9012-4f0378d59cc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "529b14f7-77c6-4a49-b352-cc7031968098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "596fa2a6-16bb-47d7-9da1-564e0e63a7fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ee0a22-1970-4ee0-85ff-d05c03ee8d15",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4f73b4d-b559-493e-8e52-ccd8e07f1f50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2dbb22f-7d52-45dc-8fb3-400599a08baa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc625960-2531-4fb8-a82e-7fb5573c5dc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c43feb3d-4176-458c-9924-08a61f640c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fabdbdf-ea76-4b34-b2a1-c456d6a280db",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a127379-58c7-457a-a75c-788234e11971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6f46e96-3458-42e5-8cb9-4a2573d439b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52e66fd4-ab85-440d-b923-73288ec0e170",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ef73add-e0cf-4ee6-bdce-ec8d91330f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6821a0d0-fd56-4e90-be02-bc541966f6eb",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7834ebf2-dc08-460c-980e-91bc2aee9df5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3c75563-8f2d-4d4c-adbf-098a9d03e450"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1312d4a2-ff2f-42fa-962b-19dd1284ba7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a328ee8-02f8-461b-8b1b-482b119923fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f7a1e5b-7393-4f01-9a44-4c558d15fe1b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6f6bf5f-a39f-4fec-a4cf-debd4dcedbf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f37964f-6820-4082-89cd-3fefda14f1ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94917a2d-96ed-4358-9d27-7f1ac046416f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ede295d9-f5f0-4ddd-bc6a-fdaf71c85124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6001723-30ec-436c-8692-4e0b48c5b280",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d67119e-fbd2-431d-b67b-464af907f528",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1d31e50-fba4-4bc5-b098-e5a002153924"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26910307-ff3a-4743-87ae-9913af922f56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c980b68-6553-4b99-9027-b9145be17586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb17c729-3f04-4cc8-b1fb-b7cbcc880fca",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42c4d317-8100-423c-9394-ff9279b7fc2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff8791fe-4ce9-47cd-b8ff-03c47a619d8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c788196b-27a5-4ef2-80d2-bb25ad2fc117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e144109e-b052-4b32-a9ae-a54351e83e59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40d44693-13b7-47ef-ae43-a2d41c94de11",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12ab9e0e-39b8-435f-93dc-9bdab0c3bb38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17f465fa-ad57-4195-8e5c-8d0a912fbba6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f04e03d1-2ba0-4460-9498-d700814df7de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c61282c-4e7c-48e5-8c4d-3c36dbe7136a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c202a28-a0d0-4e46-a232-96f002ca09e3",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42fcba45-745d-4cc7-92c2-ab3ef4d9709a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a2e1303-aa47-46bf-a247-7d9ba8e9aaac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1ebce22-39da-46d3-925f-4f5aea074888",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2260d787-391e-4513-8bb7-493e9fe3bd93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f520904d-9e38-4385-9849-61ea7b27167b",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de08e7a-b358-4ae3-b350-fcc29fce8ebb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7d9d419-f87e-4988-8e03-20a3905bd07c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e399433-cb3a-4a00-a83f-520ac06fb832",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98556e79-e1f8-4695-854d-a373c92e79ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb6cfc2-ee92-4b00-82ca-dee680719d5b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8b9efaa-75e7-4205-a92e-473ab110f8b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "649e4325-c092-4269-9850-4319e4a9bdaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec01462a-86c3-4179-a3a4-5235e8e2adcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a81749f-5c13-4530-a66d-76c10c3e0632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc8c5a75-1210-46bd-b350-4fe94d10a3ec",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f771e78-4077-4587-bc12-b6125bfbb77b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de1a4246-00b5-4556-8ecd-2b8738ccabf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f303f4-aa37-4bea-aea4-70e98af6b7bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c01e647-6b7d-4566-93aa-137c07a6a0ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73a05acf-b781-42ab-b7f7-3752fb4d98a2",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf8cd6e8-29b4-4ee6-9304-ef07c0b6c34d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df7b11a4-f5a0-4e45-9ee5-3dd76a670a78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b291182-a5de-4542-9532-80a4c13ac929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c0462a4-7eee-4b83-95ed-4462040c861b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "516b1ee6-0eb5-41c1-a6a0-6b1ada25db03",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a86cee-5f7b-4f27-97b2-f7728202c9b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4133bc84-a3d3-4a1e-bc19-adcc944ef2e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15294864-f3ad-4a6c-b253-639fa7636004",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e01b987d-d4f9-4761-97da-14a7746fd3a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c0e07c-a42b-40dd-ac9c-7ed8496018a9",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "035d650d-f4c5-4ca3-b212-5a02ba088c8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ae45c2b-3592-4d6c-a69f-e6138474f80d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6020873-33b3-4da8-8da7-b08e4349d6d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54c5a719-278d-417b-8868-71940acd3b18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af49ddf7-6b6c-4f99-a7ee-2fdbee871f6c",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b51e4163-c765-4176-8d04-876353b793b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82098e5a-12e4-48ce-bc8c-147511fe40a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a54b7286-5b36-4316-afd1-fd4cef88d412",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d66f05f-896b-48f4-87ed-b01bf29567e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "195dfc8a-0766-407a-a6d7-ab76fdf368d6",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "295f66a6-6d8d-465b-920c-1797b78f96d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cee319a8-4268-46fd-a7a5-08a3d3ac88b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b52ca5a7-20dd-4afc-bc97-16629d78c686",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8baaba07-8076-4b98-b592-86fb09539966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0da3e525-c141-4aed-924a-260d37bb0133",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a69bba-2319-4fb6-b53c-477bc35595f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d610fd6f-ade9-4d6e-86c2-db1019715582"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a082cf-dc01-475d-8c16-d4564e793b3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dbb0788-61a5-48b0-afdb-f16e543da2ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35cbd71e-4566-4716-a9f9-e3fe4ce59490",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8111981a-64a2-46f8-a300-39bc34f93607",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02c4612c-e4e5-4ef9-b653-b2d4dc56d0bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f23a0110-af3b-4bc0-bf98-e761fc1a1499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99d3ec80-9b26-4d16-889a-661fbe818104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf647dbf-1b57-42b6-9210-3f19fb084be4",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9593b3b-7222-420e-aa63-7e35b9904b13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ae8a58b-c85a-4ba3-9b19-5014aadd6030"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddda5f95-352f-4bd0-b906-d70e16649798",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba5522e2-69ae-420f-b3bb-2d012a7faf4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0df26689-9d6e-46fe-8764-bd1f2721f8e3",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d80d214-1352-44e1-bc95-11aec4bc1615",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c61e1294-ba90-4c75-85c4-bc9080552e75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "123f6438-e300-4616-a9bc-f003773221bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "013bda22-5769-4487-96fc-fbf773c89bd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44690ef4-5eab-4c96-ae65-064e85cfdab8",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c680c4-a7a2-42b6-86d1-2a3fad97bef2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59f1524d-1bc3-442c-9e3f-16403ff87516"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a509dc1-4830-4dfb-a9ae-6391cb5fddb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b941ca4-f58e-4a15-afdf-fd77008df9ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44929f82-f93d-41d7-acf2-20bcdfea173f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d922fe31-bac8-40dc-b3d6-ce578ca9a448",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ec50049-7829-4a5f-b072-62dccd1d5a44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "073fb7b2-6b43-48ca-a17b-a0085d4f28b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf40e1e6-f16e-4976-bb14-2c35e3be03d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bc9c615-16a7-4501-8003-d32b7c721e82",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1455a8c-011f-481f-a24f-c18000fcb8c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5940bbe-7bf5-488d-81b3-a6fa53ce1067"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f926148-d2d6-43ac-af60-74ea5960a321",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35e347dd-dee5-4d29-ba9e-0187ed64f7a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb68ff11-b90f-4fb1-bba1-137e048fac03",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3f67d94-986c-4c2e-bedb-05aeb0b137a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7585b34-7678-4d86-9e7d-69f7dc05e24b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "311ed7e8-3f9d-4488-9c9a-08d05f87c287",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "417ab6c1-b65d-4f86-93ad-bbf9d27c3efb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89e43865-b2a5-4a96-90c4-71c16931a02a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e74509-b345-4284-9988-42fb75de96da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c417efce-3a92-4ab2-8cc4-1945d37c358e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac6c8fc7-4cb0-45d2-b786-47f06f6aef51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93dbd233-9260-4d4f-8151-a097a4c0b298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa8d885d-b2b3-43ec-8467-4be744ea9cb0",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad85567b-9f7c-4e39-99f3-3833d741bc90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e74fbe4-822f-4c04-afa5-3a3a50581fad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8029bcb-3df8-451d-9503-17a9f31c3ad0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6c61607-373f-4843-98c2-7d2786bcfd63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "393e7669-780a-412d-b117-a5b4d7f00548",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60c618be-22b0-4187-ab73-bd8f5d959f94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26c24cf6-14e9-414b-8f00-817cf0b70205"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da5baf95-cf44-42c8-8ecf-bd0730ace01d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c539f88-0b41-48df-956f-a2a26ae82c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d861fa7-6528-4e8a-a605-f2773d805a4d",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68bd9321-c7a3-47f0-b1dd-c0b38ba5d6d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05ea67ff-9c52-4e87-8c97-5d2b38e0a025"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "389959a1-b541-4f06-b764-382aafd658da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71aa8b6e-fc53-418a-bba1-49d9389fa159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a224dbf3-76e9-4197-81bc-2b2ea7ac83a4",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a547ca6-6b05-4862-815f-9c7a29c3e84e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c983f5a-c569-4406-a935-30f80e2aca17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1222e5b-0185-47d9-8878-20b056bc5505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "320f9ff1-9d64-4287-be6d-1bc7c371a090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8520a0dd-8669-42a3-b698-a7130157d174",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52d9cd32-c1e3-49ab-9ae6-fc06c5d49fdb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "630755a5-8af6-4f40-8bf9-057f6c6b499e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd9f2adf-9696-4815-8592-5c1feae2ab2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fa191de-a3e3-46d6-990f-955abe08cd3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77368bee-13bc-4387-88d7-f04f2a42ebf5",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f18feff-63bc-48e5-a770-4391c3243f67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5694337a-c8db-4158-aff8-4c3ad5f33f4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "373dd4ab-1e0a-4beb-9719-770bf78caed1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b243283-2729-45e6-afe7-894395aa12eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e868498-003a-4899-aa9a-305b7b859f28",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "357b7ec4-2413-400d-98d9-39174c782495",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7594b120-ae72-4468-8f61-ed6438710a49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bafaa1b1-f62f-46ea-9d67-672564e7256c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d529f56-4812-4e51-82d0-29aff3b41973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55e65a3c-481b-4e56-a72f-5e69f6540b1c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4056509-d708-49de-959b-34d948da422d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40c2b57c-36fd-411f-a4e9-52e78ee4e1a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c46238e1-854d-43bb-9c80-6e19a8bd4756",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d23c3f9-b2a6-4a84-aa51-24cdc32a53ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee8b76c8-89a5-4b3d-a8e2-b5021cfb4928",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "041e2327-814a-463c-8188-fd1b4cde6dbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "643a417f-044f-4b19-a625-4976bdb5b6d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0158cc5b-9b64-41b0-b8f0-5524e3798e7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4d58b19-abb2-44fb-9ec5-7fe45c3ceae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1679dd27-1553-41cb-a1ba-2f20cc27076b",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6342d02d-c525-4098-8cc1-1e51a911c829",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25faa626-8948-455c-b4d4-1dfb6d174ae9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aad50bbf-180e-4c95-9716-9232159e0566",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a868ba78-917d-47aa-bbce-b72c5225e2ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c86c9e9e-50f9-49cd-b6e2-d67f2503d26b",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e32d5f3-29b4-4979-9847-ffa54a1912af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ff9cc16-6aae-4991-a95e-5421915fcd54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe774e47-fcee-4e69-a752-01e3ac32d83a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f3a9719-c6e7-4872-969c-c45c4cb5bbdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53549ecf-48a4-4712-bff7-e35cfc273a78",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02785039-7b0e-4e48-9562-95f4f971782f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f2abe8a-dfb1-421d-aaf0-e55a45d59b6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1b39302-be93-4d87-bfda-800d38c7eba0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c41ec7a-d8de-49ab-bb3c-6f32e530f70b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "136f8663-7baa-428d-b65e-6eea9f02c3c9",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3993937c-1f6e-42e3-af97-0ec39323c9b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96644884-75da-46de-a4b0-2e21dafb35f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cba05ef-3b57-4311-9bf9-db3d83fdaee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b325e333-1566-41d3-814a-0f7c1405a03c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b29d336-2669-45f5-9f96-b3b0f73dda8c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec9293e1-e710-458f-a98c-10fe3d4dc7e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e31e3a25-1407-4caa-b755-ed65e6671fc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d01c3ac4-710d-4523-9c3c-31aa23eca297",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50e349b8-7879-498d-91f8-e03332569430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b57003da-9a34-4f89-b1a8-aad6bd87e08f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e34ede8-958f-4408-aa1a-57fce424de5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "339dcfd8-0d04-4ae4-8a0c-aa75d94de2b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19aec011-9879-4f3b-abce-dda94a684e2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e8949d2-5150-4141-ac7d-a7e30fcb4372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "310375cc-d340-48cc-9af1-7e43b3328f1e",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "606289a0-b93b-4726-aa06-1b4d8e9eafa7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd741bac-5cbc-43d2-8acd-2568ecc1cede"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c732c1e7-535b-4390-9559-25448225ad65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eac00fcf-8185-43f2-a270-7ef1d40aac24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7774fee-2dda-48d3-9ffb-c7f306defb29",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f7f4bb3-490c-48ad-8f6e-b48a9d827d68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a817231c-e626-4188-990d-6ca56dbf0082"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9c6f619-019b-4faf-a9ee-0bf6121a1dd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1f3f8b3-075e-47c5-9bc2-20e11f425305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fa17be9-31c7-4ac0-8ac1-76db01235430",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf9f3d2b-eaa8-4502-be1b-87c298dda454",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1566868b-0dd2-4bb8-ab70-ea3ad461252a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd0bcf3-7e73-4702-90a6-460142bbf301",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3d69a1f-8e58-48e1-b4fd-fbb587dafdd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ccef238-a3a8-4ae5-b8aa-0cacab92de0b",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50145c5d-0a2b-43cc-9b71-9f66bb39094d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6989194b-d52b-460a-b11e-b4e38905c649"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4919b19-0766-432d-bef9-9d2a939b379e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3e73bda-6a4a-4268-9aa5-67bce8524fc8"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e423c505-1f31-4a6d-8910-e951d93b31c2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cdb47354-3f7b-465b-ade6-3529cbe80d4a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef0a2c8a-7649-4ab1-8bd6-a10da88b9cba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "974335bf-f607-4cff-86f0-7324400bf694"
                    }
                  }
                ]
              },
              {
                "id": "08aa8075-8a0c-42c7-beab-7ce7dffbc0c5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "19c1fc94-0d52-427f-b047-684ab61327cc",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ff58c1-e540-4bc4-ba92-4a1e3ba653c0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "1b469540-71b1-49e4-9be2-3da0e8944676"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "234eebf9-cea9-418b-825d-58d801c109b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69e43f01-d7c3-426f-abed-0c5ee78e7db1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d231d27-73c1-498b-8643-3af5cae03798",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a61063b-4a0b-47a4-b06e-0d5cbc69be04",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5aa2201f-79dc-4129-b3d4-2fd855ed8711"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a3331d1-566e-415d-b27b-7d056856a386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6b42f5cf-58ee-4bb2-9f7b-d7296f740742"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "147992d9-ca78-4d57-ace7-b4aea8edf88b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "43bb04cd-9332-41e0-8aa3-0f53b70453cd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "47e4bc7b-030b-4e9b-b35f-a9644b0c4706",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "52ca0aba-49a8-4ca3-a528-b743ff34d6f4"
                    }
                  }
                ]
              },
              {
                "id": "94c6063c-d086-4c37-80a9-5bb64ab7c08a",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "56e2701b-b33f-4a3f-ae6b-3424479ee435",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5585ccb0-2c83-4ae3-b3f4-72ff9a81dbb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "96c21084-8b50-462d-a346-e2252a945137"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aa4ae9e-f31a-4426-8957-85512b13faad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba070729-398d-4793-8125-41780e91c8a9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "771598f2-b068-4bb7-8b30-67c2adb4eed6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0d332163-d1db-46c9-8357-68ff7375ec0c",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b27b69c4-ac87-446e-84bf-8fc96a8286da",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7b8c8cc1-9ac0-4179-9c62-51d14b1c8567"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "117e2fc9-7298-4266-a113-744739dc0a3d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1d0f6759-5ae6-42d2-9b5b-9bf1f3cb46d9"
                    }
                  }
                ]
              },
              {
                "id": "3e5db924-671f-44a5-b13d-d700896b59b7",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a145e046-17d6-498f-98e2-a4f2df62b2c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b404ca0b-4b28-4353-8714-d2814eb7a1a4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d2c1bafe-a382-4f44-881f-fff06dec38b5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1f3536d-bfea-4ad5-82a4-e5de50038609"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1151defc-b646-4ea0-8a2a-ee72a3b269bd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "3a03ef79-bbc3-4fb4-b171-3791c1513bed"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0babd434-76e0-41cb-81ca-82551b884819",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d36d2c14-748e-4d4c-8839-e6015fdf8aac"
            }
          }
        ]
      },
      {
        "id": "10f4f741-4f9c-42da-a508-933b4e99abba",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "d8fb9aea-b542-462c-9991-60442b17e3e1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cf3ae41e-c016-461b-ab91-a429112cfe32",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "98b05688-447c-4cf1-81fe-955df4dba2d6",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa41a410-c552-4e3f-9cbd-4da86995736c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "31d23b3e-5e83-4830-9968-94fba93e386c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da73f50-f145-4f0f-a1cc-23fe1abd4473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e4704a2d-2d8e-4897-849f-a6073275384b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5120ee8-6513-475b-813c-2d3b138d1729",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b00a22b4-170e-45a7-b5cb-8cf9c87864c6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "570d113e-3576-4ea8-9b9a-312dcda32d4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed620673-7a4b-46d0-961c-257b5b8711f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "82513486-bd4a-4824-a649-4ae4ac5536c9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8e818bf1-a767-425d-95ff-637ebb02b424",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4f460f17-9345-4602-aeb6-5780a14776bf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5acc5283-7933-48f6-8f98-e6ef3a24ac19",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc9c5c99-b5f2-4042-9cd3-f4ad00756f84"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e565af4d-6606-4104-97ee-83d8da564f2a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "67059d79-11f9-4adc-b489-99bcdf789f8d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9354b34b-7f9a-472f-8c10-0fd871ea8789",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0a8c96ea-30c8-43c9-b33a-7cee292d1949"
            }
          }
        ]
      },
      {
        "id": "c1ad9468-de32-4c1d-9ca4-a9475cbe2129",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "b00701c9-329c-4b20-9fa4-c87471fd8569",
            "name": "Negative Testing",
            "item": [
              {
                "id": "092dcd7a-d24a-446d-914d-57eb6548cd47",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "266b9d7b-5cd7-4783-bd6f-70b5a9f1e531",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "654ce7fa-febb-4c3b-8cac-b7781645bcc8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78b53a1c-36ef-4ddd-8793-03f933663690"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde11c4e-530e-4fbc-94db-958c5a6586f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e1bc7f07-1e6f-4658-af05-c147f9b00afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a870882-8805-4b12-9fc7-41b6537cf188",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "352d1395-5ef4-457c-8d68-42b658adf3f1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ab3c1c30-8972-409d-967a-d35e859ccb19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de70a99-1467-499e-bd84-690310652300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9fef581a-b86d-422e-a9ee-40f3045b2edd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c826e46-d02e-429c-80d5-cfc3a3cddd3d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8320733f-66fb-4ebe-b441-34fef791080b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c6df66c-2a1e-405a-9257-388120798982",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76195114-0244-4431-9f07-a1f40667bedf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "41e450c0-ae3c-47d5-ab26-fbcc14317aac",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "dc9ae1ce-67fc-46a3-aae1-dd6d6f69ffd9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2b34a757-1bc3-42c8-8439-a3590b271743",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8161e25a-c23c-45d1-9e5a-e2c2b40939f2"
            }
          }
        ]
      },
      {
        "id": "c637767f-54a9-4d33-9b86-fc9b3bb4048c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "0804afd0-2b05-4e08-a1c8-1fa92e9cabba",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3a712011-8023-407a-b671-b5836f928606",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "77bf25b7-6996-4978-9879-b7020cb4179d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f11d523-3330-4a57-9f72-e7cfb8f3912b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b380b33-61b2-4aa7-8f64-3aeb77b4b3ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "407afabc-7c1f-4695-be2c-38513cf6fd1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "86dfeef9-11fb-47bb-9b1d-e342d282a3b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0e08f57-5e19-498e-9a6c-80896999d9dc",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff0b15a-9dbf-4885-9c02-90d5d7fa7f1d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "85c610a0-1367-46c3-babb-2023c48920cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9acdbcec-51c8-4300-b587-fe04e3e49799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "007c6fa0-55fa-4352-8928-501da7f7aaa0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef5ce098-c355-41c7-a32a-35588bce6fbb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "435579c2-4a98-483e-abb4-8047e35299ee"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0099c8a5-e9ab-4298-9f5c-1956e62822df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "be3a4ee6-e9b8-4244-b530-95a4a13e8cdf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "95e10ebf-d9cb-4989-8cf4-15276ce15d81",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4ac9beaf-6286-4e90-ab00-aa1cff2f05fe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f47ec53c-8f42-48fd-8e1c-d510c1820263",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "89801c10-987e-4573-baa4-db0891aa23a0"
            }
          }
        ]
      },
      {
        "id": "bd1b53ac-56b5-4b95-8416-6f554182da73",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1dade023-2d6f-43d2-abd8-715fa2044739",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a9b97a80-b0b7-4838-b4a1-0eb838c661df",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "a800bc33-0b0f-4b25-8d7b-b522e3c9c03a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9fc12690-edaf-44ad-8421-92292d53ac01",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "83a79541-eb53-43f9-96a4-325e3ae71f6e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 256.2115384615384,
      "responseMin": 10,
      "responseMax": 7736,
      "responseSd": 768.9493915661423,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1678927312080,
      "completed": 1678927389556
    },
    "executions": [
      {
        "id": "4f87cfae-a96e-47ea-ab85-970ccbfe818d",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "71ed84a6-1e9f-487d-8120-db78450d5d1c",
          "httpRequestId": "5e5beba3-a3f7-43aa-9ff5-30e460126697"
        },
        "item": {
          "id": "4f87cfae-a96e-47ea-ab85-970ccbfe818d",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "c18fe4e6-af5a-4200-8e5b-2ffde6326f72",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 0
        }
      },
      {
        "id": "5cfa1b1e-f78c-47e6-93a2-79a405d7b6ee",
        "cursor": {
          "ref": "a64d6fdb-dea2-4bb1-9bad-8f24cf1a9ec8",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b94f2d9c-09dd-4475-a53d-5c96266e2084"
        },
        "item": {
          "id": "5cfa1b1e-f78c-47e6-93a2-79a405d7b6ee",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "90ffe7ea-d4a0-4972-8dd6-9be65a05ebc6",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "7e3684f2-5002-4b3a-bc26-1a2fcb85d83b",
        "cursor": {
          "ref": "94775d7a-0af3-4e66-9954-1fa1a14e36f4",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "700f0cc9-d5d1-4c3e-b4f6-5b8367972133"
        },
        "item": {
          "id": "7e3684f2-5002-4b3a-bc26-1a2fcb85d83b",
          "name": "did_json"
        },
        "response": {
          "id": "2daa042a-572c-4d3d-bdec-49ca7a92fb1f",
          "status": "OK",
          "code": 200,
          "responseTime": 316,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ada5ebd-ebf5-42d2-8377-ba9b0f185a4d",
        "cursor": {
          "ref": "9c977aca-d079-4c4e-93e7-60583f6a922d",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "94159926-f534-4cd5-bf5a-0353f63f84d9"
        },
        "item": {
          "id": "2ada5ebd-ebf5-42d2-8377-ba9b0f185a4d",
          "name": "did:invalid"
        },
        "response": {
          "id": "a81f0533-88ce-4d55-9cfb-a7984fb57837",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1576,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "2ada5ebd-ebf5-42d2-8377-ba9b0f185a4d",
        "cursor": {
          "ref": "9c977aca-d079-4c4e-93e7-60583f6a922d",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "94159926-f534-4cd5-bf5a-0353f63f84d9"
        },
        "item": {
          "id": "2ada5ebd-ebf5-42d2-8377-ba9b0f185a4d",
          "name": "did:invalid"
        },
        "response": {
          "id": "a81f0533-88ce-4d55-9cfb-a7984fb57837",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1576,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "90119ee5-fae7-4688-993b-f814de2807dd",
        "cursor": {
          "ref": "e6e49b33-f031-4fda-b694-6618c28ed23e",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a251d895-0a1e-4193-a43a-ae0e57eae2ae"
        },
        "item": {
          "id": "90119ee5-fae7-4688-993b-f814de2807dd",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "c730cc38-fde9-470e-9fe2-ccef48842c88",
          "status": "Not Found",
          "code": 404,
          "responseTime": 39,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36804a3d-4087-4366-b7b0-7163cdbc8f40",
        "cursor": {
          "ref": "ef0e1bf1-a33e-4e1e-9f4b-3b0d805db527",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6e2bcfd2-8a28-4805-a4e5-a3254b37caf6"
        },
        "item": {
          "id": "36804a3d-4087-4366-b7b0-7163cdbc8f40",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "98c1430e-b000-4a5d-a89b-8bade5a4a726",
          "status": "Not Found",
          "code": 404,
          "responseTime": 42,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4c61a4b-18c9-4d53-816a-1477fd6bef15",
        "cursor": {
          "ref": "6c6f0ab9-b7b4-444a-8eb3-7f0040e1e302",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ba22f8eb-8f1e-49e3-b228-21cea5d81684"
        },
        "item": {
          "id": "d4c61a4b-18c9-4d53-816a-1477fd6bef15",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e95dd643-f0d7-410e-8c25-b7a73c2cb922",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "d8d45742-65e2-4995-b250-e573b86b085e",
        "cursor": {
          "ref": "6783a3bb-4030-46af-a652-149d17f4d999",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e1cf3cd3-7ea9-4001-8ff6-815b2e8ec858"
        },
        "item": {
          "id": "d8d45742-65e2-4995-b250-e573b86b085e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b8a2bdc6-0ac4-4b62-9792-545f7eff51b8",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "d8d45742-65e2-4995-b250-e573b86b085e",
        "cursor": {
          "ref": "6783a3bb-4030-46af-a652-149d17f4d999",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e1cf3cd3-7ea9-4001-8ff6-815b2e8ec858"
        },
        "item": {
          "id": "d8d45742-65e2-4995-b250-e573b86b085e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b8a2bdc6-0ac4-4b62-9792-545f7eff51b8",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "01834720-1f13-47ef-9f4d-2256df944c14",
        "cursor": {
          "ref": "0e362d56-5cbe-413a-a3df-0ac5d7f102ca",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f36e04c5-ac7a-4dd6-a03d-fc089dadff78"
        },
        "item": {
          "id": "01834720-1f13-47ef-9f4d-2256df944c14",
          "name": "identifiers"
        },
        "response": {
          "id": "65eed714-a9ed-408b-bcf5-00ecfdfc14e2",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ac3faf8-e342-4382-8d8c-f12b7a05a5af",
        "cursor": {
          "ref": "0022a860-f13d-477e-bd7f-b7f06d388f4d",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "be0bf5d4-361d-439d-81f5-bd55fa631954"
        },
        "item": {
          "id": "0ac3faf8-e342-4382-8d8c-f12b7a05a5af",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7bcb7c4d-6748-4a11-8081-e8ef91fba05e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ac3faf8-e342-4382-8d8c-f12b7a05a5af",
        "cursor": {
          "ref": "0022a860-f13d-477e-bd7f-b7f06d388f4d",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "be0bf5d4-361d-439d-81f5-bd55fa631954"
        },
        "item": {
          "id": "0ac3faf8-e342-4382-8d8c-f12b7a05a5af",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7bcb7c4d-6748-4a11-8081-e8ef91fba05e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b6c752-f6b4-4aca-a458-f1eae5668792",
        "cursor": {
          "ref": "23947390-6a6d-4013-84bd-2c6dcf6ecb38",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "387cc420-5a59-475b-b457-8d939fa8b8a0"
        },
        "item": {
          "id": "e8b6c752-f6b4-4aca-a458-f1eae5668792",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a08413d5-6918-423d-bdae-028ff9077b1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aa2f35f-b6aa-4b52-834e-e8e361730803",
        "cursor": {
          "ref": "93a3cf71-4320-4fba-8456-0d196bb59eb4",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "030d2f0c-a9e6-4756-a2f9-a80518de12d1"
        },
        "item": {
          "id": "0aa2f35f-b6aa-4b52-834e-e8e361730803",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "1c605584-42bc-48ac-a4f7-930b7af273af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "514440a7-b70b-4319-8907-c53eaf86f0c9",
        "cursor": {
          "ref": "e3d34872-11c7-4ee0-87fc-276b7d971852",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "574c50be-0eda-47ff-b56a-333167346d89"
        },
        "item": {
          "id": "514440a7-b70b-4319-8907-c53eaf86f0c9",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "641c5a90-d4e2-4885-95c3-0875b882b42a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1f6e6d1-ee7b-499c-98ae-17ceb53a281b",
        "cursor": {
          "ref": "c7f2ab73-c1df-4d1f-8ead-be0cfa7b0f75",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "af060782-ed3a-4b4b-b33f-f28497547e17"
        },
        "item": {
          "id": "b1f6e6d1-ee7b-499c-98ae-17ceb53a281b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d95e2662-68b3-4319-8853-e1395b1c4403",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af5f275d-4784-4d92-96ed-b451f3dbfb65",
        "cursor": {
          "ref": "c60544c5-fe19-4db0-950c-66907d2462a0",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "58aa692b-0ba5-42c4-b52a-77b128e3cf37"
        },
        "item": {
          "id": "af5f275d-4784-4d92-96ed-b451f3dbfb65",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "33f672eb-1920-4168-9ff9-3e305f4c439e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7979e148-482f-4527-bccd-415810a08436",
        "cursor": {
          "ref": "2934fa43-5be1-4421-91a5-f012d771dc9f",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "624eee3e-2b0b-4b2f-99cf-7f702154fcb6"
        },
        "item": {
          "id": "7979e148-482f-4527-bccd-415810a08436",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c8bc65cb-dd92-4fad-8824-42b5098b2ad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a283829d-885c-424f-b5e1-d59d5aa8b4f8",
        "cursor": {
          "ref": "d02f7c99-0d00-44eb-af28-439b42113073",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "b5043e52-fb98-446d-a247-71b423769b41"
        },
        "item": {
          "id": "a283829d-885c-424f-b5e1-d59d5aa8b4f8",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "951f3f4c-1e48-4876-93d4-85310e9f6ffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "240e51f1-ef2d-4814-aca6-d751a4adfaed",
        "cursor": {
          "ref": "68dc3885-2515-4a38-910a-66bdbb1ef924",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "7b4e2ccf-6db4-4a31-83e6-9854cf37fbe8"
        },
        "item": {
          "id": "240e51f1-ef2d-4814-aca6-d751a4adfaed",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e201fb2b-85d2-47e1-8422-f3c52979a34f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19cc8c63-e7a0-4fd9-ad41-0647da505c84",
        "cursor": {
          "ref": "f067d553-a1ad-4af9-a240-0d9bbc637cf8",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "02517d1c-4b9c-4e23-8b71-e3f587d0c474"
        },
        "item": {
          "id": "19cc8c63-e7a0-4fd9-ad41-0647da505c84",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e8ef3d76-a4d1-4d56-acec-d3c380848992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a796d123-77fe-43c5-8fbc-d31a42d7b165",
        "cursor": {
          "ref": "619f9a02-c2e0-499f-9baa-5f7a3e94b690",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "abff272e-c715-4b27-90e0-4debfc603dd2"
        },
        "item": {
          "id": "a796d123-77fe-43c5-8fbc-d31a42d7b165",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "3e00960c-74eb-46d5-bdf4-8aea95c859cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b1327a-da86-4100-bb98-954c0168762c",
        "cursor": {
          "ref": "7d36b654-0682-4e4b-8be5-08405201a277",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "af0c4bb7-f392-44a4-8f79-bdbee1d55ad9"
        },
        "item": {
          "id": "d9b1327a-da86-4100-bb98-954c0168762c",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f2623b47-a958-4b18-bad9-60b426b64d90",
          "status": "Created",
          "code": 201,
          "responseTime": 1794,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "bdb609bf-bc81-4184-b42a-d6471900177c",
        "cursor": {
          "ref": "b447ecf3-d6fb-4a7b-ae0e-c42ab9ffaab4",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d658af96-46da-4e6e-ae44-e318fa08549b"
        },
        "item": {
          "id": "bdb609bf-bc81-4184-b42a-d6471900177c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "9f696b57-b63c-44e4-899c-8459253ba3f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c39fca-eaf1-4e79-8bb0-19c763706151",
        "cursor": {
          "ref": "e25c2150-71b9-4315-a45e-78cc9b9912c8",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "40600981-bcf7-4554-a47b-a1ed97f31240"
        },
        "item": {
          "id": "e8c39fca-eaf1-4e79-8bb0-19c763706151",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "db5951ab-a41a-4e26-b51d-529eee5eb4b0",
          "status": "Created",
          "code": 201,
          "responseTime": 3752,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "f9e9669a-c627-4687-9d7c-e17d7b2f4479",
        "cursor": {
          "ref": "d9fe4964-88e2-4856-8063-776865a09c68",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4c0c88bd-616d-4ce0-a84a-18e473198713"
        },
        "item": {
          "id": "f9e9669a-c627-4687-9d7c-e17d7b2f4479",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4278fce1-9bff-43c9-b6f6-9f0b16cbe8a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5844902e-41c1-4e02-8a1d-012dcf365afe",
        "cursor": {
          "ref": "c1af8b8b-a793-4a47-90c5-f6ce170d7168",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "79d734c7-33d6-4ddd-9c15-2e8cce3ccb87"
        },
        "item": {
          "id": "5844902e-41c1-4e02-8a1d-012dcf365afe",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "713b9c93-216e-4198-8b62-6b4d50e3d6ba",
          "status": "Created",
          "code": 201,
          "responseTime": 3073,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "6ce4a70b-585d-4a2f-8058-e8ff946d9181",
        "cursor": {
          "ref": "3924377b-aa09-4706-89bb-ef55ca1fa26a",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "198a4253-ec52-463f-8a73-f54c696ee27d"
        },
        "item": {
          "id": "6ce4a70b-585d-4a2f-8058-e8ff946d9181",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "d1d8383f-367b-4d97-9b63-c8d46f484d86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "022ae9e6-d96c-4493-94f9-ee7f481e87d3",
        "cursor": {
          "ref": "0bbce33f-6795-4f48-9aca-8899e01dc8bf",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b51c1714-b455-4d50-a431-0ffe9409d255"
        },
        "item": {
          "id": "022ae9e6-d96c-4493-94f9-ee7f481e87d3",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "7aa81446-3acb-4861-8b21-9bf400d34d6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "671a1faa-cf00-41e1-91f6-8b2dfa040ca5",
        "cursor": {
          "ref": "9393cfc1-e8b2-422d-9fe4-535721abaed3",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "dee3c70b-39ec-4e4f-8c0d-83d562e0e9c7"
        },
        "item": {
          "id": "671a1faa-cf00-41e1-91f6-8b2dfa040ca5",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "108a2e87-b240-437b-a93c-b7565dbd4b4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48dca48a-5953-4d33-bf18-7a20fa260597",
        "cursor": {
          "ref": "ba8e7f4f-83f9-49e2-9ae7-d9c5ac9dac7b",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "15b89c4f-1a24-45ac-ab5c-793e8fb74aa5"
        },
        "item": {
          "id": "48dca48a-5953-4d33-bf18-7a20fa260597",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "d11df79d-dd13-49b0-9cd4-2f01b05380d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9f7d858-6d76-473f-9cab-6f523467a276",
        "cursor": {
          "ref": "5f3fc15f-f265-4815-9a1d-63f8b0060736",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d1fa6d48-6e0f-415a-be1d-9655152f5796"
        },
        "item": {
          "id": "f9f7d858-6d76-473f-9cab-6f523467a276",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "b87ff4d4-b8c6-41d4-af2e-1bb6b3d5671e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7142152-84d0-4b1c-b3b4-026254ddc190",
        "cursor": {
          "ref": "24f55243-247d-4ef7-962c-2c10091523ce",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "bdfc9dd9-964a-454c-8199-54a840e55806"
        },
        "item": {
          "id": "b7142152-84d0-4b1c-b3b4-026254ddc190",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "3febc4eb-626c-43a2-ad2e-2444e0545d0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f55cb8bc-5114-44af-8b85-61704fbd2764",
        "cursor": {
          "ref": "b905e43e-14d3-471a-b57a-624e434a4091",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f707021e-46d7-4230-a86b-9d4820787e65"
        },
        "item": {
          "id": "f55cb8bc-5114-44af-8b85-61704fbd2764",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "2c9968ef-af7f-44f6-90c0-7de2e6129841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d31e2fc-02e1-495e-aa97-95848f064d4f",
        "cursor": {
          "ref": "6c58d84c-36ef-4ad5-87c8-68a2b9feea43",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "06260718-8ca1-4426-b479-1e52f9c4988a"
        },
        "item": {
          "id": "7d31e2fc-02e1-495e-aa97-95848f064d4f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "daa52fd3-07a7-473b-8792-731140352327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01db71e5-45b7-498a-9f28-fa894f7afdeb",
        "cursor": {
          "ref": "4bb33221-8ada-46e9-9948-f1c65f13afad",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "7ad2c7c0-978c-4569-b345-db159862bb53"
        },
        "item": {
          "id": "01db71e5-45b7-498a-9f28-fa894f7afdeb",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "cb10dfc5-70ab-4ab7-8327-e33f47f1d242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 169,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d937fc41-b465-41bd-b761-6fa7ad520744",
        "cursor": {
          "ref": "de64d650-de13-4125-b1ef-e6910a7c9374",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "7da34318-6e07-4585-877a-8f228fd8bdd5"
        },
        "item": {
          "id": "d937fc41-b465-41bd-b761-6fa7ad520744",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "1dd963d4-f9e5-40ab-bd48-675f140d5ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 378,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87bfff14-4c2e-49d5-a251-b2f93c8a039c",
        "cursor": {
          "ref": "12e49dfb-c25c-4e1e-b319-b4f059c6d35a",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "41a51c25-bab2-46e5-9a1b-53e3e8bca454"
        },
        "item": {
          "id": "87bfff14-4c2e-49d5-a251-b2f93c8a039c",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "fb768c48-657d-4f1e-b29c-57e7f92fc476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9142574-2863-4b84-91cf-825fc911d1d9",
        "cursor": {
          "ref": "d1ade531-fd2f-4f18-b14d-a5bea97fb1a4",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "6b804343-e37d-4f49-8b5f-7ad3c0e5ce5f"
        },
        "item": {
          "id": "d9142574-2863-4b84-91cf-825fc911d1d9",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "3f22b427-c663-40b3-bc0f-2b82479b21fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cf532ef-22dd-4c02-8274-5abb16590e91",
        "cursor": {
          "ref": "c34717bc-7d47-453e-8644-8346d9d9b4da",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6537b8b7-07da-4f02-ac94-673292bc60d5"
        },
        "item": {
          "id": "4cf532ef-22dd-4c02-8274-5abb16590e91",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "14f81200-8789-43c5-aa7a-3303101ac978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64661239-ea74-4e4f-aeea-bf63b64e9afd",
        "cursor": {
          "ref": "22d97374-49db-4c43-940b-e6f68c4bdeb4",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "bdc83e89-4b57-43f2-bb44-af2efa493b8b"
        },
        "item": {
          "id": "64661239-ea74-4e4f-aeea-bf63b64e9afd",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "6bdd54a9-92b6-4203-8af3-406f5d64c902",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26fe1d75-e94a-4355-8495-85d133b7019c",
        "cursor": {
          "ref": "a01695ab-349a-4b25-8da4-f2879238d3bc",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6ff8f124-4c31-47ab-945e-27d4e4ae36ce"
        },
        "item": {
          "id": "26fe1d75-e94a-4355-8495-85d133b7019c",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "60d8b7dd-0b20-48dd-b34d-9d318c54d3ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f63ac46-158f-4494-af03-16345ade0649",
        "cursor": {
          "ref": "d8252bd7-f319-4c17-8c6d-f2224ac9e23d",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "e31ca28d-4411-4a3f-982c-fc6c29642322"
        },
        "item": {
          "id": "7f63ac46-158f-4494-af03-16345ade0649",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "113c9dc4-37c4-416c-928f-937a2fc7314e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9412bf6d-869e-4437-ba54-79da117ce737",
        "cursor": {
          "ref": "e9198c02-7f23-4e19-bd7f-1c26b44ced3a",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "d3f05bff-df6b-4a5b-a8f8-a72063affa37"
        },
        "item": {
          "id": "9412bf6d-869e-4437-ba54-79da117ce737",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "2919a186-23a4-4283-9f79-3b73fbd96876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4f1a351-aa4f-4d6f-baa3-701823030a43",
        "cursor": {
          "ref": "15e0b27e-03bb-4a12-800a-09273c26c697",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "554aaafb-4fbc-4066-8edb-5d335373f4be"
        },
        "item": {
          "id": "a4f1a351-aa4f-4d6f-baa3-701823030a43",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "fa39dcb5-7c1d-4b00-b748-846e51b4c8a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88697c33-19d7-4924-a7af-473c39618b05",
        "cursor": {
          "ref": "a83b4ca6-a59d-4bbf-8408-eeb650df833c",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "6c150f70-de91-4c4c-9aa0-aa1a95714568"
        },
        "item": {
          "id": "88697c33-19d7-4924-a7af-473c39618b05",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "3707e33e-278d-4cd5-ab38-04d6ff81745e",
          "status": "Created",
          "code": 201,
          "responseTime": 1967,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "3392962d-51f2-4149-bc1f-513b7c4affaa",
        "cursor": {
          "ref": "7a8a97b6-139d-4180-b007-61e63c912a61",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1eab0f71-93c4-4d66-8962-79f9c84bfebf"
        },
        "item": {
          "id": "3392962d-51f2-4149-bc1f-513b7c4affaa",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "54766ae5-71ab-4035-8cdf-a0338d0a4c15",
          "status": "Created",
          "code": 201,
          "responseTime": 2315,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "a7f5a4d7-82e2-4ed4-ae58-d97a9514cd5b",
        "cursor": {
          "ref": "71f27c7d-49bc-4fbc-9d69-97c276be1f35",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "187f775b-a40c-4158-81b4-b44f18d7f065"
        },
        "item": {
          "id": "a7f5a4d7-82e2-4ed4-ae58-d97a9514cd5b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "4a047028-56e1-440d-bd79-e3a85f53a57e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 201,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74cb0733-fa1e-4cd1-8f76-58d8e7480c80",
        "cursor": {
          "ref": "973c29c2-2008-41d2-8683-6023be189dce",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "fa1fd1fa-691a-43c6-84e5-ae154af94fde"
        },
        "item": {
          "id": "74cb0733-fa1e-4cd1-8f76-58d8e7480c80",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "0164d5db-427c-4839-a2be-c75ea4db723d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcfb9ac2-c819-4cc0-9e87-2c1eb3d56598",
        "cursor": {
          "ref": "3c63842c-1b70-4894-8587-47d4e79eff8b",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ac18f943-636e-4135-87bc-77aef126d009"
        },
        "item": {
          "id": "bcfb9ac2-c819-4cc0-9e87-2c1eb3d56598",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "95190a52-6c6c-4e1e-b49d-dc6613e3a37d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee2322d5-04c0-4b16-b036-371c593d7d29",
        "cursor": {
          "ref": "834cf37e-a5f8-4d39-9803-64a45921b78a",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "5363f49f-1fff-4eed-ac4d-092897dea55c"
        },
        "item": {
          "id": "ee2322d5-04c0-4b16-b036-371c593d7d29",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "3afd4cdc-eda4-4c10-a464-87d713ab26ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f80dacc7-cec4-4c33-9850-fa9036253f96",
        "cursor": {
          "ref": "f331fba5-8328-4db6-8aef-831a0de1b565",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f8a2be96-5f7b-4b20-a729-56ee97a34643"
        },
        "item": {
          "id": "f80dacc7-cec4-4c33-9850-fa9036253f96",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "f0b7fe7f-4ed9-4b21-bc52-03f6caec3851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "516d8576-fe81-45de-ac1b-e5f437fc86b2",
        "cursor": {
          "ref": "27a16a78-85b3-42d7-9573-174592ac0a7b",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d03f0144-3d70-4cfd-98c7-9ce13802e41a"
        },
        "item": {
          "id": "516d8576-fe81-45de-ac1b-e5f437fc86b2",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "b0491f3c-8ac2-45ad-8d17-446c107ab6a9",
          "status": "Created",
          "code": 201,
          "responseTime": 1869,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "47723852-3577-48b8-9b7c-54d6132f36f2",
        "cursor": {
          "ref": "489276a6-780d-4ef6-b857-7eab7334d329",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "94cc9329-1672-498b-a53e-fc18df71cdc2"
        },
        "item": {
          "id": "47723852-3577-48b8-9b7c-54d6132f36f2",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "dff6e090-cc56-4efe-8c00-eff5b06916d7",
          "status": "Created",
          "code": 201,
          "responseTime": 2283,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "79c3aa5c-3ef7-42de-8279-62ba55dfe986",
        "cursor": {
          "ref": "9fca33d8-0fb6-4be2-a21f-8f14e9dcc111",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "10c9f9ce-8922-465a-a2b7-ea17c4b8ace4"
        },
        "item": {
          "id": "79c3aa5c-3ef7-42de-8279-62ba55dfe986",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "71b2092d-91e5-4359-8348-d2ce80ba2c5b",
          "status": "Created",
          "code": 201,
          "responseTime": 2227,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "497bc97d-3e56-45b1-b55d-f57cee6eb8c6",
        "cursor": {
          "ref": "04b6e90f-f8ec-4d77-b6b8-350451c4c338",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "35d98202-1bdf-4568-9c3d-cf308b898de6"
        },
        "item": {
          "id": "497bc97d-3e56-45b1-b55d-f57cee6eb8c6",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b30a5023-0250-4d19-aa5f-8278658ed98d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de3278be-3162-4ca6-88f1-6b21271e4d22",
        "cursor": {
          "ref": "aff303d4-9821-4acb-93c6-ae879105d037",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "1f4aff1a-69a5-478b-a337-835f268e9019"
        },
        "item": {
          "id": "de3278be-3162-4ca6-88f1-6b21271e4d22",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "9fc1c5c3-6cc3-4072-a501-ce188e62a088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c002d97e-f855-452a-bbad-77c4724e473e",
        "cursor": {
          "ref": "861c5f8a-4000-44cd-ae42-bd88806e7050",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "08890e49-5750-4b1c-bc76-c3ba889cf4f3"
        },
        "item": {
          "id": "c002d97e-f855-452a-bbad-77c4724e473e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "40fa560b-9b85-4875-9b50-a3cc04edec2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce835407-6036-49a8-8943-8a8725bd8a29",
        "cursor": {
          "ref": "d3d54c9c-fe64-4632-9631-de34d4fe79f7",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "acc26bcc-3381-4411-8ea5-27138245555b"
        },
        "item": {
          "id": "ce835407-6036-49a8-8943-8a8725bd8a29",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "b4d3147a-e293-4201-9dc5-5a205031d44b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "408aa6bb-a751-4e54-b62f-99cb9a0bbd44",
        "cursor": {
          "ref": "d0773571-8338-4242-944c-c7c4dd287786",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "62f4077c-e335-4789-8715-05523dff6542"
        },
        "item": {
          "id": "408aa6bb-a751-4e54-b62f-99cb9a0bbd44",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b7ee0ad4-7873-44f0-93bc-2a0bdf0fb1f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c358adfe-5e07-40e8-beb5-d9970355609d",
        "cursor": {
          "ref": "c1d5411c-b9ca-46ef-a900-07cb179517d7",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "45029346-771f-469f-9561-8240ba645c33"
        },
        "item": {
          "id": "c358adfe-5e07-40e8-beb5-d9970355609d",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "caf246c9-b5be-4d3f-b19e-10aa7c82cc7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "797c3c6d-4f37-4fd1-9034-a3812263ad80",
        "cursor": {
          "ref": "18057b6a-b2e9-4c7a-8e74-30a577c4373f",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "5100456b-e2b3-4f05-bce5-725c8027db7c"
        },
        "item": {
          "id": "797c3c6d-4f37-4fd1-9034-a3812263ad80",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "5eccd42f-8efb-43f8-aa5d-a41873d93915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c8c264c-ae18-481e-9ea4-d304a4dbaa99",
        "cursor": {
          "ref": "edfd781b-44ac-4b68-9f79-4518b138b0aa",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "2ccc0582-0a56-4907-92a4-3df68acbef43"
        },
        "item": {
          "id": "9c8c264c-ae18-481e-9ea4-d304a4dbaa99",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "7038a2aa-b672-4621-9ef8-6313f878b952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f9de7bc-22db-4e94-9474-eb96ab6e85d8",
        "cursor": {
          "ref": "cfb7b81f-ee49-43a8-a7ba-aa8ce54ffd41",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "77894796-1847-44a6-b2ff-705f105ca063"
        },
        "item": {
          "id": "7f9de7bc-22db-4e94-9474-eb96ab6e85d8",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "c5ecb7c2-5e6d-4e7f-8d6a-cd1fbe2cb869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd594abb-4f8b-46b1-830a-d33bfcd1b7a8",
        "cursor": {
          "ref": "54c312fa-2e65-4fc5-9891-360408a952ec",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8f42f55e-cd88-46d7-8fc7-7ed1725ca64d"
        },
        "item": {
          "id": "fd594abb-4f8b-46b1-830a-d33bfcd1b7a8",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "8df2ad57-3c39-48e6-a289-53b17068d49a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89689cf1-c2ef-45cd-ac76-52cf9f5bd2f6",
        "cursor": {
          "ref": "8f7c3840-965b-4708-b9d1-560bae03458f",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "266a004f-12b5-4d57-9da5-ba898ea73c96"
        },
        "item": {
          "id": "89689cf1-c2ef-45cd-ac76-52cf9f5bd2f6",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "cd47e7f0-e934-4a69-b075-27e7378c6b9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca90b7fb-b592-4800-bb7b-19a5df0cd636",
        "cursor": {
          "ref": "69043ae4-e258-4de2-8263-aac2719d7ce2",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "2504af6f-61ec-419e-866a-bd36600fd9e1"
        },
        "item": {
          "id": "ca90b7fb-b592-4800-bb7b-19a5df0cd636",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "4cad7634-c10b-4e7a-a004-7038ec0425fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54a427bb-cee2-434f-b86b-20b3c5b116b6",
        "cursor": {
          "ref": "c2945120-9610-4edb-9178-468bc67b0391",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f32d0941-8c63-46d5-a660-95ae9d2d8bbb"
        },
        "item": {
          "id": "54a427bb-cee2-434f-b86b-20b3c5b116b6",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "6df6ed21-8bc0-4ef9-a10f-4d87292ce644",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5c470c1-33b4-4864-8143-139ff973b442",
        "cursor": {
          "ref": "5f79f540-4501-4f2f-8740-ab77f5a7eea3",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6d49548d-db79-4553-86cf-f71a4399415c"
        },
        "item": {
          "id": "a5c470c1-33b4-4864-8143-139ff973b442",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "676b52cf-7705-4774-afdf-31152cae151c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30188c71-2059-4cf9-8dc4-83d5ec077f60",
        "cursor": {
          "ref": "d0ecd9af-6c0e-4e01-8dde-6810373da208",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "64518ea4-2429-44ae-b8f0-2656b3fb2d07"
        },
        "item": {
          "id": "30188c71-2059-4cf9-8dc4-83d5ec077f60",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "85355a5e-5c1c-4318-bd65-66ef6a586ac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3ac2111-bde6-476a-aa4a-d350dc26a29c",
        "cursor": {
          "ref": "f8d3fc47-e2bd-4749-8ec4-0c15481edcab",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d7d81931-24b8-4ced-a276-23bd1d25d640"
        },
        "item": {
          "id": "a3ac2111-bde6-476a-aa4a-d350dc26a29c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "1f3e8187-d812-45d7-a373-4eac629ef1ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44d77fda-fedd-468a-9e24-bd9c87d8d2fa",
        "cursor": {
          "ref": "c4d7b3b8-2413-47dd-ae3f-d0287e449e44",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a4528eab-77d0-438c-a1f7-62e04f6d7977"
        },
        "item": {
          "id": "44d77fda-fedd-468a-9e24-bd9c87d8d2fa",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "2d35b00c-cc83-43e7-bfeb-b769f58ee2c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0e3d7d4-99fd-45c0-98d2-ecb053d7639f",
        "cursor": {
          "ref": "afb79b60-605b-406e-9f3d-b52e86dae659",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "3e051388-d736-431f-a354-6ac477a291fd"
        },
        "item": {
          "id": "d0e3d7d4-99fd-45c0-98d2-ecb053d7639f",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "887869a3-dcd7-4317-bb1e-b9b40661ca90",
          "status": "Created",
          "code": 201,
          "responseTime": 7736,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "b084ee6c-b5fa-40ec-9a17-ceb3705c7b5a",
        "cursor": {
          "ref": "1ab66903-6b66-4534-becf-d10e5cdd98c6",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "f0f0ecab-992c-4b98-8ab4-59d58ae6ff92"
        },
        "item": {
          "id": "b084ee6c-b5fa-40ec-9a17-ceb3705c7b5a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ae5c2ef0-79ee-48c6-9544-b7219ebb00b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 441,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c07d6eb6-c41f-4a93-94d2-c78753729833",
        "cursor": {
          "ref": "ab2b2563-5dec-4e1a-96b4-8486ccd74ae3",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "57829867-1b3f-472f-b1c5-b649defdeb13"
        },
        "item": {
          "id": "c07d6eb6-c41f-4a93-94d2-c78753729833",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "d16ab70b-883e-4f03-b115-6895ee492997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "113c7809-993c-42e6-9fb3-6e2ddb0bf01d",
        "cursor": {
          "ref": "d46f3f73-59a0-4eff-8b94-08f8e0d94472",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "29bf674c-f84e-4748-949c-ab0d9c683327"
        },
        "item": {
          "id": "113c7809-993c-42e6-9fb3-6e2ddb0bf01d",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "2618223c-29b9-4c24-b8f2-11d12a2f8ed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "684c1517-b213-4c63-8857-ffdc2fb7ab2d",
        "cursor": {
          "ref": "012ab2c8-d4f2-4db9-93ad-156200b326bd",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "a04cf13c-f40d-438c-b196-7f6f8d4101f7"
        },
        "item": {
          "id": "684c1517-b213-4c63-8857-ffdc2fb7ab2d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "16bcd095-aaf1-4610-b533-dcd0f4c70079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e1287a6-ba81-4842-825a-5a3fccf2de91",
        "cursor": {
          "ref": "30d02e3c-308a-4a30-a6d5-32781c9b1187",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "869360e3-1b30-415c-af4d-fbda51f7e4e8"
        },
        "item": {
          "id": "5e1287a6-ba81-4842-825a-5a3fccf2de91",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "0c36535e-aea7-46ff-b59b-6002cf017a6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38200bd0-0f02-4027-81e7-da69d442111e",
        "cursor": {
          "ref": "c70168a6-6246-46e6-a123-65fa4a2bd09e",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c9e0f65c-823c-410c-9638-952567784e69"
        },
        "item": {
          "id": "38200bd0-0f02-4027-81e7-da69d442111e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "aea0a08b-9ebc-42bd-896d-0964e10ad21c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84c1c7e9-5ffa-449b-b48e-d3f2a08d5923",
        "cursor": {
          "ref": "d8808a4b-8e06-48f7-beb3-debf4258eb9b",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "c97d4317-6430-4d01-9cc7-8d8d56a6255e"
        },
        "item": {
          "id": "84c1c7e9-5ffa-449b-b48e-d3f2a08d5923",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "2830b8bf-cf76-45ab-a0cd-4fda47dfe7d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa7b0625-cdf4-40be-b79d-34da5d278c01",
        "cursor": {
          "ref": "dd4bd719-8874-4d57-a201-1dde96addcc4",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "8a12400a-3cf5-4822-bc0b-a065624a52ce"
        },
        "item": {
          "id": "aa7b0625-cdf4-40be-b79d-34da5d278c01",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "68155581-f9e5-4cb3-b28c-0017e3de1fa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71a4a1a6-531e-4203-b1a3-209efa8c3f1d",
        "cursor": {
          "ref": "a6c6da6f-34f4-4a1a-84c3-78552fdab267",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "71841bf8-c11f-4e51-a73c-afa0ff50000a"
        },
        "item": {
          "id": "71a4a1a6-531e-4203-b1a3-209efa8c3f1d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "b95513ef-8eed-44a5-baaa-99be787e2eaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bec030a0-167f-4572-b861-24cbdde9f3d9",
        "cursor": {
          "ref": "f1be9f1d-6561-4201-8969-413b28af1e4a",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6becca4e-c8b7-4628-b626-0a2315a33f9c"
        },
        "item": {
          "id": "bec030a0-167f-4572-b861-24cbdde9f3d9",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "bb89615a-0131-4d21-9e7e-af8006599b68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf95e5c8-9d58-412b-987f-f3b22b690637",
        "cursor": {
          "ref": "31d9a83d-29ad-4ea8-bd79-86d4f5657a10",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "037cad78-0b1e-414b-93b6-e67abccee0e9"
        },
        "item": {
          "id": "cf95e5c8-9d58-412b-987f-f3b22b690637",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "51554131-b83e-42fe-bd4d-8f6e1aa13a8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9db17865-edf8-4fbf-a2cc-83f11ae3ad8f",
        "cursor": {
          "ref": "f49b3ed7-93ad-4d78-8090-90382d1aa5c6",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b398cf52-586a-4b59-9710-5e5b52b674b7"
        },
        "item": {
          "id": "9db17865-edf8-4fbf-a2cc-83f11ae3ad8f",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "1895abe8-daf5-496e-bbab-ffdd8eaedefd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a0151d-dd11-41f8-ae40-ed06756951d6",
        "cursor": {
          "ref": "4e6adaed-cbad-4b0d-a5f3-df8a0195d515",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d46c2f53-78cc-4c0a-b6f2-3146e23ae28f"
        },
        "item": {
          "id": "75a0151d-dd11-41f8-ae40-ed06756951d6",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "41a2239b-5981-4a99-a8c6-290f324f079a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e268a89d-1995-49ae-a0d2-72e161eb3c21",
        "cursor": {
          "ref": "f97d9ac0-2cfa-478a-b15d-0c419aaa1f08",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "5da9c0da-7539-477b-ba5c-8b5b6665f0fa"
        },
        "item": {
          "id": "e268a89d-1995-49ae-a0d2-72e161eb3c21",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "1754a3f6-13a0-481c-b3a4-94052274e4a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "430e79bf-26ed-4964-9e49-ac14e3dd9d9a",
        "cursor": {
          "ref": "e17e2238-a270-4b5a-8302-458b781c5fc0",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "c2258ebf-f79b-48a5-97c1-248b886d186b"
        },
        "item": {
          "id": "430e79bf-26ed-4964-9e49-ac14e3dd9d9a",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "c4527438-b8e6-4a37-b7bc-97df51865bb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f17ac415-4d6b-4a3f-967d-e5dfe0dec3b4",
        "cursor": {
          "ref": "977126f6-f639-4365-885d-cc6ca30bcb58",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "3568b24d-7e05-474f-a8d9-85c1c8b8a638"
        },
        "item": {
          "id": "f17ac415-4d6b-4a3f-967d-e5dfe0dec3b4",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a90d4607-6f9c-4028-a086-b31a4fd6bc65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75295b29-ccc5-4296-be67-57d79b4ba3ab",
        "cursor": {
          "ref": "69d58165-c185-4eb1-bbf1-67880420dfed",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "4dbd6bde-9829-4853-8dda-51d477688c78"
        },
        "item": {
          "id": "75295b29-ccc5-4296-be67-57d79b4ba3ab",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "4c9368f4-d616-475f-9d29-fa08028de771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d01bf70b-3c63-4deb-bb7b-b12253d95780",
        "cursor": {
          "ref": "4e379cbd-efed-41b9-8bb4-01e3a3e68bc6",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "74f8ebd8-cb9d-4a60-a19a-80d3a6320ad0"
        },
        "item": {
          "id": "d01bf70b-3c63-4deb-bb7b-b12253d95780",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "a5ceb21e-5d55-4e9d-ba2c-cecde90f862b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb45354-6a82-418b-ab17-7e32f8512250",
        "cursor": {
          "ref": "c93a0584-e753-4716-bc14-23cfbce085a2",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "94ccdd03-fb7c-4b4e-b4c1-a41ba93309bc"
        },
        "item": {
          "id": "deb45354-6a82-418b-ab17-7e32f8512250",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "fe8e852d-3dbe-4d63-8da8-c02822df86cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49365f6a-b4cb-4504-98aa-67b25d8e56cc",
        "cursor": {
          "ref": "a248c11a-0c8f-404c-bb78-95564c69e83a",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "d5c09b5f-3ead-4367-9472-c3aa7c30b115"
        },
        "item": {
          "id": "49365f6a-b4cb-4504-98aa-67b25d8e56cc",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "73278665-f33a-41f4-b0d0-98d752cbdd51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c801ab9-6caa-47c4-9ac9-0ba4a6c8af82",
        "cursor": {
          "ref": "1cece43b-0640-40ca-82a8-d2c63530b47d",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "3c327f5d-450b-4a23-a5d6-29f80d70d4b1"
        },
        "item": {
          "id": "4c801ab9-6caa-47c4-9ac9-0ba4a6c8af82",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "35813358-24ca-43d7-831d-870375127907",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02f5e636-92bc-42f1-833f-be5a090a9930",
        "cursor": {
          "ref": "dd55496d-9d6a-4f35-835d-bb7e8dfb31b4",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1fdd71df-d77a-4620-8871-39c898c7c2e8"
        },
        "item": {
          "id": "02f5e636-92bc-42f1-833f-be5a090a9930",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "93ade9e7-c0db-4758-8a43-82be4aac13fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9009d73f-71b3-494e-b39f-fd2ac095bcad",
        "cursor": {
          "ref": "5bf93b34-67e8-466a-8be8-ad66eaaf63ef",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c4f1dc6f-fb26-4405-80e7-6f4dbe70cf82"
        },
        "item": {
          "id": "9009d73f-71b3-494e-b39f-fd2ac095bcad",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "e2f5919f-6f2d-47f9-8323-155f90454290",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffa3d071-6d70-433e-b046-275ae5137f9b",
        "cursor": {
          "ref": "432a7b50-8c09-4784-bf63-e4744c6c9df1",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "8316482a-2714-4e83-ab9b-3ba8d5ece818"
        },
        "item": {
          "id": "ffa3d071-6d70-433e-b046-275ae5137f9b",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "2e83e8ac-02fd-40ee-bad6-be30dd4b67e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f5d5390-aa32-468f-a8b8-3721c2472a06",
        "cursor": {
          "ref": "6c5d8ac6-83b2-4a64-8a69-c57d4e6d4774",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6331c85e-bc5e-46a0-8652-35fdcdc56c90"
        },
        "item": {
          "id": "8f5d5390-aa32-468f-a8b8-3721c2472a06",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "d7cf3f84-c2c3-4f87-8855-c2d13c0b6680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c223009-ac41-4595-bb1a-96839cfdc63a",
        "cursor": {
          "ref": "ecbd3462-f0a4-4e4a-a98c-dcc9c290742d",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "28caa595-3724-4447-a82e-07ba2860c7a1"
        },
        "item": {
          "id": "6c223009-ac41-4595-bb1a-96839cfdc63a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "6a7ab971-1aa8-4947-987b-004733795b76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fab6b51b-2e7d-4e99-a998-4a6e244f1045",
        "cursor": {
          "ref": "16f93a53-b522-4cea-9749-bfc2f1e332d9",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d055f4b7-fc57-4a2b-a3cc-4d415f368b3f"
        },
        "item": {
          "id": "fab6b51b-2e7d-4e99-a998-4a6e244f1045",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a77c9eb7-09d1-4573-b922-08ef03e3aa2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58557a9d-ef34-4930-9958-80bd2bac0412",
        "cursor": {
          "ref": "e60409a1-9442-44f5-9783-858ca5b13791",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "84cdd4bd-83ed-4d65-91f0-14bb07f0121d"
        },
        "item": {
          "id": "58557a9d-ef34-4930-9958-80bd2bac0412",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "1954edf5-b8d0-4267-86c9-277bf14ac3be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaa9a0f6-7a49-4169-a1ef-36e5393d37ad",
        "cursor": {
          "ref": "27d42b3f-b16d-4312-b46c-a773bfe6d074",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d31a1e94-fb04-4dd5-bde6-a5f245ac5ac5"
        },
        "item": {
          "id": "aaa9a0f6-7a49-4169-a1ef-36e5393d37ad",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "30fc8293-e2fa-473d-b278-9476f110c5bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a54b9c34-af63-4d34-b4b4-2ff4cfa79dfd",
        "cursor": {
          "ref": "39077d0b-831a-458c-96d5-3cffd4d95309",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "e28052e4-4dd4-4fa8-b1ca-114d4d58c99a"
        },
        "item": {
          "id": "a54b9c34-af63-4d34-b4b4-2ff4cfa79dfd",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "08718bb0-a6f9-41eb-a643-8909946184fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d196e988-2d3d-4e28-9b76-19c8ff8efd3e",
        "cursor": {
          "ref": "eabda151-fc67-47a1-8ea7-0090bd3e8559",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "fafca8de-320f-4c69-be77-3e0c2f149915"
        },
        "item": {
          "id": "d196e988-2d3d-4e28-9b76-19c8ff8efd3e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d067aba1-2e1a-4adc-b00e-752d1af154fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "fe518681-e5b0-4158-815a-357ceb6eeb5b",
        "cursor": {
          "ref": "2f1d2520-a4b0-4c50-9ac3-ead3234dbf99",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "e238c653-b151-4ec1-9db1-9d965bfa8b19"
        },
        "item": {
          "id": "fe518681-e5b0-4158-815a-357ceb6eeb5b",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "4b9d0a61-c0c5-45fb-b039-8d9cf5f59c11",
          "status": "Created",
          "code": 201,
          "responseTime": 2209,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "b64645c8-cac9-4db4-9f37-38eea53ef063",
        "cursor": {
          "ref": "41355944-908c-41f6-bec7-2708df08bea5",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "65d22520-a012-4a04-a5fc-bd5e4269d069"
        },
        "item": {
          "id": "b64645c8-cac9-4db4-9f37-38eea53ef063",
          "name": "credentials_issue"
        },
        "response": {
          "id": "265ae62a-2cb6-46af-a811-59e9174cf72c",
          "status": "Created",
          "code": 201,
          "responseTime": 2324,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "e09ce8b2-c98b-46da-b9d1-1ec6533ca2a9",
        "cursor": {
          "ref": "2c90e08f-9d77-4a56-a3c9-64b0d0f3afb8",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "67506d7a-8da4-4f7e-88e0-5460d30809dc"
        },
        "item": {
          "id": "e09ce8b2-c98b-46da-b9d1-1ec6533ca2a9",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "0286fcf9-6a04-48fb-a7f2-bc93a0e89688",
          "status": "Created",
          "code": 201,
          "responseTime": 2271,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "48e5cd7b-9e67-43c6-8bba-f0b0ed7ff704",
        "cursor": {
          "ref": "0d238a43-3f82-468c-b30f-c67fccee2808",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "bb07ddf1-4bf1-4994-8830-4347e361421d"
        },
        "item": {
          "id": "48e5cd7b-9e67-43c6-8bba-f0b0ed7ff704",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d99d4e7e-314d-4e47-b91c-53bc086b28b4",
          "status": "Created",
          "code": 201,
          "responseTime": 2121,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f5524ba-2b0d-445b-bae4-86610dfef390",
        "cursor": {
          "ref": "0e4e0c08-6f24-4052-974e-9fba8741c4f9",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "dff44f65-1efc-4e99-b50f-63576b4f9229"
        },
        "item": {
          "id": "9f5524ba-2b0d-445b-bae4-86610dfef390",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "992abe91-1084-4a3e-b6c4-a78fae1404d2",
          "status": "Created",
          "code": 201,
          "responseTime": 2449,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "be737a12-2f06-40e2-85b1-1b6169c4f77d",
        "cursor": {
          "ref": "0a211805-8e5d-44ba-b854-2b61c1a72019",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "9bdc8fc0-2bac-41db-b143-548216a6b3f4"
        },
        "item": {
          "id": "be737a12-2f06-40e2-85b1-1b6169c4f77d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "954ebc71-fadb-49d4-a9cc-41519603cf48",
          "status": "Created",
          "code": 201,
          "responseTime": 2071,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-03-16T00:42:47Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-03-16T00:42:47Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "d6bc0461-023a-4e78-9462-d0d35dbe56a0",
        "cursor": {
          "ref": "80eea4df-2b04-407d-9d0b-168482d79e19",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "64f24964-ba7e-47b5-b0c4-bc85185d6123"
        },
        "item": {
          "id": "d6bc0461-023a-4e78-9462-d0d35dbe56a0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ee155f1a-27a5-465b-ba50-3164a279e770",
          "status": "Created",
          "code": 201,
          "responseTime": 2425,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b990449-052f-4e96-b67f-0fc141d291c6",
        "cursor": {
          "ref": "395a2125-a79b-4f64-920f-3e70df79fcf8",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c4fba2d5-298b-4b52-a7a6-9487651524b7"
        },
        "item": {
          "id": "2b990449-052f-4e96-b67f-0fc141d291c6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ed83a80f-2fed-40a1-aff1-93121c558737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b990449-052f-4e96-b67f-0fc141d291c6",
        "cursor": {
          "ref": "395a2125-a79b-4f64-920f-3e70df79fcf8",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c4fba2d5-298b-4b52-a7a6-9487651524b7"
        },
        "item": {
          "id": "2b990449-052f-4e96-b67f-0fc141d291c6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ed83a80f-2fed-40a1-aff1-93121c558737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "586f29ce-b998-4c85-850c-2c9d70a2957b",
        "cursor": {
          "ref": "36ccba3d-3f7e-4a3d-8643-4f15cc438eed",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "bf2c7377-cecc-41d3-a362-b2d6f21881ba"
        },
        "item": {
          "id": "586f29ce-b998-4c85-850c-2c9d70a2957b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "fe3d3b40-00ba-4ee9-9184-3f1c275926ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04b74167-8b05-432e-a9bd-f910d93103f5",
        "cursor": {
          "ref": "12dc6bfe-4c77-4454-88b8-6858ae88f023",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "13aed9fa-d8f0-4c0b-8850-6f47c9bfdcd9"
        },
        "item": {
          "id": "04b74167-8b05-432e-a9bd-f910d93103f5",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6205e2cb-e6ce-48a0-b97a-51262c1740aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8695405e-706b-4a31-9fe9-ead3c4280b82",
        "cursor": {
          "ref": "abfcc10e-785d-4ec5-9cae-0ed906a96424",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "21904c8a-ced7-42c7-afa0-d5602acde07b"
        },
        "item": {
          "id": "8695405e-706b-4a31-9fe9-ead3c4280b82",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8ccd5ac2-1d53-4d13-bf41-6a87bbb226b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "919d6223-64cd-4ee2-ac06-0ba4981581ac",
        "cursor": {
          "ref": "c4e3a9bd-ba23-4ece-80fd-8e0272dfed51",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "fb718e9b-68c7-4e94-8e69-c54fb353e4f0"
        },
        "item": {
          "id": "919d6223-64cd-4ee2-ac06-0ba4981581ac",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "690f90d8-9795-4cd3-9d61-ddc5421c9a30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7698a18-ae21-4973-b039-aca8a7494372",
        "cursor": {
          "ref": "e2bfdf7d-c566-4f69-aff9-e5eeda65def9",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "be993fa5-5876-4e99-bcd3-3d70e11e0f0f"
        },
        "item": {
          "id": "a7698a18-ae21-4973-b039-aca8a7494372",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "10382e74-d60a-4747-9b1b-43bca60e3ba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f1363c7-cd30-410e-ab7d-e4ac1c9c10d4",
        "cursor": {
          "ref": "b1363583-38d7-4151-ae30-a36804383a18",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "801102b6-847a-456e-911e-4ae30c45006a"
        },
        "item": {
          "id": "2f1363c7-cd30-410e-ab7d-e4ac1c9c10d4",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5a6e2327-a1e8-4a70-9a64-656f72983788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4217e602-78b9-4acc-82a6-39a605fc92b6",
        "cursor": {
          "ref": "91bdf00f-27bc-4ef7-89d4-85f3f9133378",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "379ecb8c-7e50-4726-8b97-10f62976f412"
        },
        "item": {
          "id": "4217e602-78b9-4acc-82a6-39a605fc92b6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "35bcca15-a52f-4836-bc88-1093ddad84a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab74e1ff-2f8d-4aee-a5f7-127d989e9329",
        "cursor": {
          "ref": "f13b6454-e118-433e-8441-fb4cbd688e56",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "cfbb80a3-2da3-4bc7-8fbf-4fbc70dced0d"
        },
        "item": {
          "id": "ab74e1ff-2f8d-4aee-a5f7-127d989e9329",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b0e1765c-b446-48a6-bb12-1259766b0bd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0592f1d7-b511-4d57-92a5-931d6a3cdf9d",
        "cursor": {
          "ref": "9bf952a7-a215-4545-8dda-e0b04273d595",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "c8273b18-8440-4624-8a47-0c1f76be7051"
        },
        "item": {
          "id": "0592f1d7-b511-4d57-92a5-931d6a3cdf9d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f51093cf-894f-463c-9081-b8107b2f3eee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "568d0b01-52c5-40b8-bb23-847d01bc64bf",
        "cursor": {
          "ref": "60a95ea4-4b95-4338-ac90-112f478e3ec1",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ae2af8c5-7b18-4f49-bdbf-7203d296f10f"
        },
        "item": {
          "id": "568d0b01-52c5-40b8-bb23-847d01bc64bf",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "58850073-cab3-45aa-9f8f-b3b549dd79be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3599d024-55a3-4a6b-b3b1-0ccc0ea36771",
        "cursor": {
          "ref": "c7a57476-f523-4ba6-be77-afe20aef5fb6",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a64d42b6-4dc2-44f5-9219-e888bf2e5b8b"
        },
        "item": {
          "id": "3599d024-55a3-4a6b-b3b1-0ccc0ea36771",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "5138a8d1-78ac-449f-9b16-224977a62b3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "991b7ae0-1940-4675-ab48-63994d8c9c5e",
        "cursor": {
          "ref": "35967eb6-ad3e-4aa7-876c-ff67ae4508c2",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "00c53cfe-bb5a-4928-8eb9-19c1265451ba"
        },
        "item": {
          "id": "991b7ae0-1940-4675-ab48-63994d8c9c5e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7b182f60-d582-4c95-ad05-389cec4ad6ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aab6fa6-cffe-455f-bec2-ca363e8cd9c9",
        "cursor": {
          "ref": "c08d4de1-6ea2-4155-90fd-be192f895c88",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "fa153b39-829c-484b-84fb-1da677062648"
        },
        "item": {
          "id": "0aab6fa6-cffe-455f-bec2-ca363e8cd9c9",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3a6c35e9-1da9-4a13-9ed0-3a23d6b3735e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e195c0a-1cc7-404f-bef4-f2e6365bc808",
        "cursor": {
          "ref": "39447149-8ac3-473b-99fc-4fe4eefbbaf2",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "36247b20-114f-4df7-b5dd-11f57360a07d"
        },
        "item": {
          "id": "6e195c0a-1cc7-404f-bef4-f2e6365bc808",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "56217692-ad2e-49f4-8c31-64387e70ca7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b2ad82c-3f5d-476f-9fb4-074abea055b7",
        "cursor": {
          "ref": "0a43a2d5-2e02-4e42-95f1-0753fc620210",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "40924f73-d338-4310-a536-df9a60402600"
        },
        "item": {
          "id": "1b2ad82c-3f5d-476f-9fb4-074abea055b7",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "8b57060b-e577-49b2-8461-83d0aaf376e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ad645c5-719a-40a9-82c8-4aef9341760a",
        "cursor": {
          "ref": "135a7d5d-1014-4467-9f49-878f15168b8a",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "cfabab8a-79ff-4815-807d-4456e5ee119f"
        },
        "item": {
          "id": "4ad645c5-719a-40a9-82c8-4aef9341760a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "9e6cbd3a-be57-4ad6-83ce-3a4f0da0d715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58064049-5a52-4f46-83fe-9baa3617666a",
        "cursor": {
          "ref": "729e9a5e-4b9d-46e8-af21-6d07dfa32989",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "509b86fc-b702-480a-b9f0-d702e836a3d7"
        },
        "item": {
          "id": "58064049-5a52-4f46-83fe-9baa3617666a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "81931acc-88ab-4a5c-816c-1eb4f043e0f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f4d343c-4446-4116-9f96-913c17b9a1ba",
        "cursor": {
          "ref": "83a5d084-a60b-4ff9-b0c3-a0b8bf63cc2d",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "b51de56d-55ba-4580-aad9-8d074fe07623"
        },
        "item": {
          "id": "9f4d343c-4446-4116-9f96-913c17b9a1ba",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7f1ce3df-4272-4158-8b31-3fb690cf7c5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42dd3ff6-b69a-43c8-ba04-3d78b7b6a89a",
        "cursor": {
          "ref": "7ae6ba30-5967-4b47-a545-c7c6d032b914",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "e812f9b3-7043-44cf-8a8a-b40039355e22"
        },
        "item": {
          "id": "42dd3ff6-b69a-43c8-ba04-3d78b7b6a89a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b30a59f0-d004-468f-8141-d11fd4b5a291",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9df82e0-9991-4328-a92b-82c6dd94fd52",
        "cursor": {
          "ref": "c8d3b956-31f3-4aac-9bf3-a38ea34451e2",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "d8477592-480e-476f-bccd-cfeb0ba52f1a"
        },
        "item": {
          "id": "d9df82e0-9991-4328-a92b-82c6dd94fd52",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e75016be-b7dd-4859-9a04-ea4523db66f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d167c33-f333-4dde-9ee7-cbcb20cf9d24",
        "cursor": {
          "ref": "1ac2e0ca-f6b1-491f-9058-798453052813",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "1d217315-ac84-439d-b629-210e1d7eb3e2"
        },
        "item": {
          "id": "2d167c33-f333-4dde-9ee7-cbcb20cf9d24",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e9179759-73f6-4064-9240-422e9d7b660d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de32a1bb-10a4-4e4c-a0b7-e7ac9a40d102",
        "cursor": {
          "ref": "baa07583-2a82-4690-896b-59ecb58013f9",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7468e183-7ba6-464c-8ef3-2d8c3b3357d1"
        },
        "item": {
          "id": "de32a1bb-10a4-4e4c-a0b7-e7ac9a40d102",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "56b61cdc-b9c0-4d53-8e3d-c3c311590723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05f7d76f-5e79-461e-bd3e-f4f1d166508f",
        "cursor": {
          "ref": "f77d4d7a-2e82-4ef7-bd8e-edf62322ac4e",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "f4ec3435-1ee7-4f0e-a906-9010eac1c8c9"
        },
        "item": {
          "id": "05f7d76f-5e79-461e-bd3e-f4f1d166508f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b347a380-1a37-4e16-912c-1f7f4bd5dc3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a0c0e22-99b1-4721-842e-50258b66d1d2",
        "cursor": {
          "ref": "c4a43a1a-51df-4935-bb2e-7d4787064c44",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "78767f82-1cd7-4640-8225-2fb64cdc1ba1"
        },
        "item": {
          "id": "1a0c0e22-99b1-4721-842e-50258b66d1d2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "14e51ccf-75aa-4ba8-8003-6235967d7355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8c973ce-cb92-49ca-b440-c3084553c642",
        "cursor": {
          "ref": "f516b958-a7c2-4cea-b343-c167202bc90c",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "01f24226-2843-4f31-be86-ca0aca1e692d"
        },
        "item": {
          "id": "f8c973ce-cb92-49ca-b440-c3084553c642",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "861c3f19-ba80-4e97-bd9c-c5f0a46e27f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d24b34c-b92b-4792-8d26-3486d58d566e",
        "cursor": {
          "ref": "c48fe845-4c4a-467e-b767-ea3d8b724ea9",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "9eb7418a-f31a-43e6-a8d1-807737792187"
        },
        "item": {
          "id": "0d24b34c-b92b-4792-8d26-3486d58d566e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "fe98a442-95bd-456d-a7e7-58c3612a1bc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b52553af-d2f0-4c7d-96fe-23a546734891",
        "cursor": {
          "ref": "c3803367-5a16-4ee1-aade-3b138bbe6029",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "389a15e7-2356-47db-afce-a697426f1716"
        },
        "item": {
          "id": "b52553af-d2f0-4c7d-96fe-23a546734891",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "946d6c42-8ff7-41f7-8684-620d4dec259f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7deda9d8-8c59-4cc0-a197-6f6dfd744875",
        "cursor": {
          "ref": "436de69a-065a-4d11-af56-cd73c4401eb4",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ccae7ffa-b189-4c02-bcd8-c15414fef47b"
        },
        "item": {
          "id": "7deda9d8-8c59-4cc0-a197-6f6dfd744875",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ccc88685-1a35-4db8-b5e1-ba67d2e30df8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85120a7e-d6ba-4ca9-936a-cdce81d0c01f",
        "cursor": {
          "ref": "09954736-4d07-4665-8ae8-dd67ef7364f0",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "f272e36b-903c-4dcf-97e5-088769a15374"
        },
        "item": {
          "id": "85120a7e-d6ba-4ca9-936a-cdce81d0c01f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "72fdd8f1-63ef-4170-a72f-7b3f48bd28b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4505b9f8-3f11-46e8-8202-9b3e7cc83b5d",
        "cursor": {
          "ref": "8d0dde3e-cdf2-4486-9b6b-7eba6e697ec6",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "496423d6-6b49-460f-b85a-8e6e70fa2919"
        },
        "item": {
          "id": "4505b9f8-3f11-46e8-8202-9b3e7cc83b5d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "403cb04b-12bd-401e-a9f0-cb2ba62b4475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee39473d-2be5-4cdd-b560-11873adcd9ef",
        "cursor": {
          "ref": "12e8104d-9ff4-4721-a5d9-fb2ec7a3db97",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "cc2c121f-fd0f-4654-9a6f-601e2a407aa4"
        },
        "item": {
          "id": "ee39473d-2be5-4cdd-b560-11873adcd9ef",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "0a4e1516-d09d-4033-a07f-eb6788929c39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75638c98-54fa-4dee-92c1-6ea1cc80a059",
        "cursor": {
          "ref": "6f545e07-bca7-46ef-8775-0837bceb2df8",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "4451b16c-4684-40e0-b0bf-2340c9dde0d0"
        },
        "item": {
          "id": "75638c98-54fa-4dee-92c1-6ea1cc80a059",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1ae35664-5ba4-4d76-9ca5-07d470125745",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "e971dc61-ef43-4ec5-8e32-8a19468ec450",
        "cursor": {
          "ref": "7d5d2650-7a05-4568-80e7-4c6da698328e",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "22b4ddb9-803e-4f51-b85c-b4d874b0314e"
        },
        "item": {
          "id": "e971dc61-ef43-4ec5-8e32-8a19468ec450",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "841e93b0-9ab9-40d4-a3a0-cc66c0cf37cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "9a66d9c4-ed07-4ff4-9388-407d5d2da403",
        "cursor": {
          "ref": "f36b9e5d-c216-4822-a9bf-0a3ed59c8da3",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9b1d2a7c-67c9-44b3-a7fc-9211b2615ef0"
        },
        "item": {
          "id": "9a66d9c4-ed07-4ff4-9388-407d5d2da403",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "795f7f1f-e315-438f-9696-177e8e2fd65d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a66d9c4-ed07-4ff4-9388-407d5d2da403",
        "cursor": {
          "ref": "f36b9e5d-c216-4822-a9bf-0a3ed59c8da3",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9b1d2a7c-67c9-44b3-a7fc-9211b2615ef0"
        },
        "item": {
          "id": "9a66d9c4-ed07-4ff4-9388-407d5d2da403",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "795f7f1f-e315-438f-9696-177e8e2fd65d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7533147c-c3c5-40de-b429-ee30c679e733",
        "cursor": {
          "ref": "d2331687-ebbe-4b9f-aad5-20d9bebebf3d",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a6fccaf5-5a03-40cf-af8a-b3cdbf9bdfd7"
        },
        "item": {
          "id": "7533147c-c3c5-40de-b429-ee30c679e733",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "433a5259-54be-48b5-adcf-a845e9faffbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "947603bf-a462-4342-a362-37e2fb914c13",
        "cursor": {
          "ref": "85676665-f7e8-4ab9-8d99-d25254b6f278",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "135a5755-d2c3-488f-9583-c2324e105137"
        },
        "item": {
          "id": "947603bf-a462-4342-a362-37e2fb914c13",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "868a1bfb-de3a-46ff-af9b-4628b4f3850f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b742f87d-d86f-422f-8e69-7aea588cce03",
        "cursor": {
          "ref": "27a6f6f9-4eb7-43ee-a91b-4ea68141521c",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "3fdfc69c-f49c-438c-a676-1266e4adf629"
        },
        "item": {
          "id": "b742f87d-d86f-422f-8e69-7aea588cce03",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "a2d807c9-943c-481a-a97c-d545e75bb62e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5dd8bdf-3279-4c99-bd36-4620368052c7",
        "cursor": {
          "ref": "c59886db-b6b9-42a7-b946-9b2af482de59",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "51e3fdfc-a604-4b84-b95e-3a13a2931663"
        },
        "item": {
          "id": "d5dd8bdf-3279-4c99-bd36-4620368052c7",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "f200747a-334e-455b-a4d3-93e33235cb8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd81235d-14b9-4a0a-a181-517c30897758",
        "cursor": {
          "ref": "0d2a49c0-5c4f-43b4-bdd7-99fe7e13568d",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "3775dbec-9a66-4274-9d1d-ee8a146bd940"
        },
        "item": {
          "id": "fd81235d-14b9-4a0a-a181-517c30897758",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "86a67411-3f7b-419f-8848-cfb2cc46f01c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8076368-a4e8-44b8-aa57-069c17dc3fc4",
        "cursor": {
          "ref": "245e1ea6-6cbe-40ce-8f5d-6ceb3a2a698a",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "0ef34f44-aa0f-4303-af90-d289fa10bb57"
        },
        "item": {
          "id": "e8076368-a4e8-44b8-aa57-069c17dc3fc4",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "9b0c636d-d5a2-4fd8-a22f-390ea75e1c11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33badbb7-c196-4621-8b96-977fd0f2b4e8",
        "cursor": {
          "ref": "be032a19-0aa2-4dbe-8d55-b10a2c80ba66",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "cff25774-b1f1-4774-8885-368b4a6f39fc"
        },
        "item": {
          "id": "33badbb7-c196-4621-8b96-977fd0f2b4e8",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8263a665-8d17-45ae-a3b1-b5e55dbcd6ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e25dfe3-e611-4f38-9e9f-22444b3e79cc",
        "cursor": {
          "ref": "e6d57097-10ed-481a-aea2-8afca95127fe",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "5db4caa8-a1e2-4d90-9c01-d118ceb3b296"
        },
        "item": {
          "id": "7e25dfe3-e611-4f38-9e9f-22444b3e79cc",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "86405486-931e-4446-8888-1986f277fecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea0c3131-8794-4de5-a492-55c140a00341",
        "cursor": {
          "ref": "30981c6d-b5d4-4caa-bb25-1dad62054304",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "63611843-d9c7-4863-9e9a-d310bff7bdf3"
        },
        "item": {
          "id": "ea0c3131-8794-4de5-a492-55c140a00341",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "381c3053-4dd0-4186-9293-8f42c1ac116a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f597e9be-9cff-4c18-9dff-9563c2203e6e",
        "cursor": {
          "ref": "9a737466-00bf-4df4-bb81-3904678edb8c",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "fc7e7763-884b-4b18-b0d1-62a4cc029ef3"
        },
        "item": {
          "id": "f597e9be-9cff-4c18-9dff-9563c2203e6e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "b4dbdd08-a50e-48dd-b0a6-b5fb83f0f621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64625ac8-989e-451a-85ab-259572c366c1",
        "cursor": {
          "ref": "7ebf66c4-a603-4b1c-bdea-9a8d675cb476",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "418c9efb-6eaf-4c60-9f02-b2e2d2f813c3"
        },
        "item": {
          "id": "64625ac8-989e-451a-85ab-259572c366c1",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "b4389a1d-ed75-42a5-b519-db2746c27d1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "725a25e1-334c-4bb1-a015-ac2a6453e4e5",
        "cursor": {
          "ref": "1b96b1e2-c4a2-4dac-bd3c-572e39dc91c4",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "e382d1ef-dada-413b-bfeb-52df1e6b2119"
        },
        "item": {
          "id": "725a25e1-334c-4bb1-a015-ac2a6453e4e5",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a56661e2-3feb-4c66-99e6-2d13f7c37056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42aad79c-a9fb-4a02-ab7e-932231451079",
        "cursor": {
          "ref": "8071e173-c04e-440f-a4d0-f3373a89c5cc",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "c69ad0c9-fca5-47ae-81e0-df68e1fb6c03"
        },
        "item": {
          "id": "42aad79c-a9fb-4a02-ab7e-932231451079",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "39d9a1e9-08c4-437b-930f-7d6871131caf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60355bf6-2e99-40b7-90ad-a7ac4c811078",
        "cursor": {
          "ref": "720c92c8-5300-4ed7-a6c4-93a76396eb43",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "2f083506-e87a-41e4-a134-ee9cabc71341"
        },
        "item": {
          "id": "60355bf6-2e99-40b7-90ad-a7ac4c811078",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "4f00cc13-31a7-4db3-8615-ef4cf0c5177a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee59a03-698e-4718-b593-30a5f1586ec6",
        "cursor": {
          "ref": "cf28f700-5c03-463b-ad27-5975a4809748",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "953b2c86-88ac-4dfd-b748-78fe98f4f0bc"
        },
        "item": {
          "id": "bee59a03-698e-4718-b593-30a5f1586ec6",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "accd934e-69f1-4d44-8e3f-0c04b59d58a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bf74aa3-c859-4762-bddd-9cf38d95f1cd",
        "cursor": {
          "ref": "f4b64c83-f26c-400f-9fa3-b0c408ebbc76",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "0a3fc7cb-22fd-4f0a-9954-62c5b624bd26"
        },
        "item": {
          "id": "4bf74aa3-c859-4762-bddd-9cf38d95f1cd",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "02bdfdaa-e711-411e-8b54-b5d0bf97a4c9",
          "status": "OK",
          "code": 200,
          "responseTime": 162,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "ff048a56-59e8-488e-b796-d988e46514f5",
        "cursor": {
          "ref": "946e5ee9-2ce1-4505-b1b1-741cf966d43e",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "4d304323-b727-4ce2-bb71-d06598c50479"
        },
        "item": {
          "id": "ff048a56-59e8-488e-b796-d988e46514f5",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c5a3f708-ad40-464b-8893-1f0272abc1d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e29b5cf7-b4e4-4155-b127-20616625c324",
        "cursor": {
          "ref": "98fc5808-6c12-4ea2-aeb1-89bb774c7669",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "edfde577-3ee9-4471-b41d-f480d4523399"
        },
        "item": {
          "id": "e29b5cf7-b4e4-4155-b127-20616625c324",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f3a909ed-d9f4-45ab-8d87-0f0513d4905c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1d8030a-1dd7-4ebd-b78c-d77dab2c1431",
        "cursor": {
          "ref": "0d2af274-0acf-48ac-9f39-47e4cd58c79e",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "3d7c1495-e0dd-42d9-8685-ea3703274009"
        },
        "item": {
          "id": "b1d8030a-1dd7-4ebd-b78c-d77dab2c1431",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "952c9d87-fcfc-420a-8545-c18bc76c4c6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd77e998-9d81-42f4-b549-0d1cfc43d517",
        "cursor": {
          "ref": "09fdb948-bf18-4221-964b-db6b1244096c",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "9356ff23-2de9-4901-b792-c6356b4fdf56"
        },
        "item": {
          "id": "cd77e998-9d81-42f4-b549-0d1cfc43d517",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "13a33531-bb49-4016-8609-cf455eddf904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b980cb89-6453-4af9-915c-5da12b347685",
        "cursor": {
          "ref": "a5b1b1b6-a2d9-4141-9ee9-fb7c741836a9",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "adcb32d7-5f2c-42c9-89ce-fca0d675aa08"
        },
        "item": {
          "id": "b980cb89-6453-4af9-915c-5da12b347685",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "581fc3c3-98fb-4887-8fe8-8dfc2b123454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc2837d3-8ae3-4e7c-ad72-ba350318db24",
        "cursor": {
          "ref": "e9f07d8f-85de-4637-a144-bd17c6eefe75",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "59478f68-27cf-48ec-9534-26219c24f015"
        },
        "item": {
          "id": "cc2837d3-8ae3-4e7c-ad72-ba350318db24",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d134b948-aebe-4948-8c8f-f6736774f91a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "557787c0-f687-473e-bd98-22eb03f5ac4e",
        "cursor": {
          "ref": "dd1b9faf-febd-4541-9a88-1fd9a0020e98",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "2632bf4e-9c65-484a-a56e-f8f26a8e823d"
        },
        "item": {
          "id": "557787c0-f687-473e-bd98-22eb03f5ac4e",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "c3fbd04b-4606-4da7-a46c-57afd83db4d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2f52c03-1767-401c-a12c-a008d9440e24",
        "cursor": {
          "ref": "1e8f8ff5-62b1-4016-b8be-f8116b8b8a5d",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "5ef4811a-2db1-4b76-b4c2-ff752983d2c0"
        },
        "item": {
          "id": "d2f52c03-1767-401c-a12c-a008d9440e24",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "06c36020-c065-40a3-9fcd-524103676bee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f98a365-2973-4b7b-ad91-eb3d5a6d50e0",
        "cursor": {
          "ref": "aca3c3ef-1ebb-489b-a516-903b2934dde9",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "08274aa5-9855-4e12-8712-78b30cf12e0e"
        },
        "item": {
          "id": "5f98a365-2973-4b7b-ad91-eb3d5a6d50e0",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "7be38d54-d695-4f3c-8f47-b34fbdf8b59e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ecb7bba-1ba6-4e64-b059-7a3168ab90c9",
        "cursor": {
          "ref": "898a1352-9447-4ec4-86b6-42e9cd4ef77a",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "025ad3d9-788c-4f1a-96f5-3d6b00354015"
        },
        "item": {
          "id": "0ecb7bba-1ba6-4e64-b059-7a3168ab90c9",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e5d9453b-8029-48a1-b915-1d4ab6d10933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea305a4b-799f-4806-9abc-65d468155cd5",
        "cursor": {
          "ref": "280ddfe8-7cb7-4ca4-b83a-5e0b98c37227",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "81d3dc43-e52e-41dc-bf62-88309803dc8a"
        },
        "item": {
          "id": "ea305a4b-799f-4806-9abc-65d468155cd5",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9aee13c1-e82a-4b1e-a2f0-fc78a19e3f63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "668a543b-7c0d-400b-aad4-3847aff1e6c1",
        "cursor": {
          "ref": "cfd7778e-cf0f-4173-8100-a0ff7ad004d3",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "1b873255-b682-4754-a313-e23cb98efaaf"
        },
        "item": {
          "id": "668a543b-7c0d-400b-aad4-3847aff1e6c1",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "166b1153-205a-4d5c-b275-590effe992c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ca0da06-5dbc-4287-9868-0a0274491f74",
        "cursor": {
          "ref": "ee6ac579-3214-4071-9250-014941960bf7",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "ac4613db-b0da-4398-810b-1d6e11b060b2"
        },
        "item": {
          "id": "7ca0da06-5dbc-4287-9868-0a0274491f74",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "74b19dbf-9169-46a8-a1f6-fd9800790aad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "806bdd26-42f1-4962-8d10-7fc9d19f691c",
        "cursor": {
          "ref": "2a2938c8-0cde-4c6a-9ae4-4a60c8671b41",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "f72d3eb3-b6dd-4a61-b201-e77c77b70e60"
        },
        "item": {
          "id": "806bdd26-42f1-4962-8d10-7fc9d19f691c",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "9be15333-8f8b-4c4f-9fa4-fa4f854a972c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e425bf1-05e2-4d02-8d1c-bb73cb796284",
        "cursor": {
          "ref": "8e7b1e61-a972-4f92-819b-07ae5421512a",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "6e1f3da6-7bce-423f-a98c-2e824136b16b"
        },
        "item": {
          "id": "7e425bf1-05e2-4d02-8d1c-bb73cb796284",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "89d117a0-c99f-4c96-9955-7d07f89abbb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a4b6b49-1d2c-424f-98c5-3bd9f9e6a1b7",
        "cursor": {
          "ref": "1e01e05c-7c83-4f66-af2d-2d6eb9f98fd1",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "9f933124-a6d3-4490-81c9-bea48cbdc80a"
        },
        "item": {
          "id": "5a4b6b49-1d2c-424f-98c5-3bd9f9e6a1b7",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "9928c47b-574a-4a0f-a07c-7eac41c33960",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa234b0-2bf5-44b6-a0a0-f5a571eeab57",
        "cursor": {
          "ref": "21fdb271-6042-43be-a82c-f6cf9b227d3b",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "6b72f3a6-d062-4e38-af26-5a5a9dce5b4b"
        },
        "item": {
          "id": "3fa234b0-2bf5-44b6-a0a0-f5a571eeab57",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "1f8d6e25-f8ab-4214-95cb-2a194fbad2f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 137,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44ae7693-93a4-479b-b370-a305ae2cff68",
        "cursor": {
          "ref": "b2f54dd4-d1e5-4629-97ea-5e580ae0f851",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "187b19ff-0865-4ad4-af75-998197c36a9c"
        },
        "item": {
          "id": "44ae7693-93a4-479b-b370-a305ae2cff68",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "64aeea2c-234a-403b-a4b4-b001ff03a3f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e47b219-9c74-4014-81d4-3a2dabf27c72",
        "cursor": {
          "ref": "f87cd6ac-ceb3-4318-8ccb-b762ed4342c4",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "c15136f8-ef9b-4622-9d0f-131b81df54f3"
        },
        "item": {
          "id": "6e47b219-9c74-4014-81d4-3a2dabf27c72",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "fe066121-ba37-4f90-99a3-309dae75594d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0343cc5c-d343-4f81-8d98-928ae07d7418",
        "cursor": {
          "ref": "a4b8c1ba-f19d-47d3-9861-e968fbf9aa31",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "c65acb72-4a22-48df-a80d-899833de9374"
        },
        "item": {
          "id": "0343cc5c-d343-4f81-8d98-928ae07d7418",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "145fef51-74fe-4839-8109-fc309d280869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af99ef6e-3ea7-4f05-a2ff-de694492fed0",
        "cursor": {
          "ref": "bf8775e8-5bfe-4a4b-88e3-8ff5f45a1516",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a706f480-d8c2-4624-8402-cc69e7cc07de"
        },
        "item": {
          "id": "af99ef6e-3ea7-4f05-a2ff-de694492fed0",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "bb6ac1f7-5949-4ae4-84a6-4dda34ff5888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd30969b-6019-4740-b1f8-b4f78fab8d75",
        "cursor": {
          "ref": "ed282ee0-2523-4403-aa38-be5cfadf5fd4",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "0d10a736-46d9-4dd6-9799-9ce149601492"
        },
        "item": {
          "id": "fd30969b-6019-4740-b1f8-b4f78fab8d75",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "5364a47a-ca16-47ab-b28d-7513d34a0e9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1be5d2ac-4ad9-4cc1-9e2b-292859aa6245",
        "cursor": {
          "ref": "30efbc20-9655-43f6-845b-0c29c92839d2",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b90746ba-e8ed-483d-8f23-b98cbd10dfc2"
        },
        "item": {
          "id": "1be5d2ac-4ad9-4cc1-9e2b-292859aa6245",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "cf8b93d8-07c7-45ca-a3b3-9097e07946e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c31090ef-b16e-4609-8ce5-cae19da0f3f0",
        "cursor": {
          "ref": "7e6821c2-c22f-4aea-88dd-9596e0238b3a",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "49cf1af2-9f36-49ae-a0b4-9aa257f76bed"
        },
        "item": {
          "id": "c31090ef-b16e-4609-8ce5-cae19da0f3f0",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "3e030c12-eaab-47cc-904e-a17ffad42d5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1085b3c-a1cb-44ee-9eb0-543d8889ff0b",
        "cursor": {
          "ref": "7321d5c9-806b-488b-ba6d-98129069ccd4",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "8a7e17dc-3d97-4a59-b0e9-430a1082395c"
        },
        "item": {
          "id": "a1085b3c-a1cb-44ee-9eb0-543d8889ff0b",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "cf27c787-e173-4504-b1df-06e44308594c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46a5d84f-f77e-43f2-ab15-128c409cf37b",
        "cursor": {
          "ref": "0cc77d6c-009c-4c49-886e-4d2ac5323d15",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "46ec8a52-8f82-43a1-9c22-6e09f67ec8aa"
        },
        "item": {
          "id": "46a5d84f-f77e-43f2-ab15-128c409cf37b",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e5feee1b-d6df-45f7-b3df-686efbb3a2b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c430d8f9-64ce-4805-b209-20265f2b0c77",
        "cursor": {
          "ref": "52e1fbcf-0ea7-485c-ad4a-e5b18c9c9e68",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b7de3311-292f-4af1-bf72-342325c5d80b"
        },
        "item": {
          "id": "c430d8f9-64ce-4805-b209-20265f2b0c77",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "d4f364dd-ffe2-46a1-a9dd-99bd1372b6b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a65b24a1-1dbe-456b-a598-670771eae1a3",
        "cursor": {
          "ref": "544508d6-e651-406a-aa9c-975b1a2dc554",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "94b3a0d0-13fd-43b9-bb0e-1b800830d146"
        },
        "item": {
          "id": "a65b24a1-1dbe-456b-a598-670771eae1a3",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "85b8e11a-5acb-4529-9d8d-f8e83c0b76f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc4de794-18c4-4c8c-b6d8-af05446a7ab8",
        "cursor": {
          "ref": "15689837-db20-482e-9ad2-c229e9858214",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "7d17f1fa-99b9-40f8-b97a-51a571895463"
        },
        "item": {
          "id": "cc4de794-18c4-4c8c-b6d8-af05446a7ab8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ad52e6b7-9329-43d2-85af-105137f8b849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "447769d0-003b-4109-b024-9c0daec42182",
        "cursor": {
          "ref": "ea4413b6-b424-495c-a74b-c9ab2ccb1833",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "5a0d4ccd-1508-48bd-a446-9dcd8cb15173"
        },
        "item": {
          "id": "447769d0-003b-4109-b024-9c0daec42182",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c381c678-c216-4dd3-b831-df02b901def8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "345a0e62-feea-45b0-8f53-065b93371d4c",
        "cursor": {
          "ref": "6b021590-36df-465f-a96d-2689f85dc1c9",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "63f40594-5bf0-4d2a-9dfe-18c432eea251"
        },
        "item": {
          "id": "345a0e62-feea-45b0-8f53-065b93371d4c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "2e79e494-ea6b-4273-8c0d-4b83c3f82db1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "274f5f9b-5827-4bb0-8974-30db1dd82751",
        "cursor": {
          "ref": "f292182b-e88d-44b6-b2a9-25d6dc7515e5",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "a39c4bda-280b-4ee0-95b5-30670a30b677"
        },
        "item": {
          "id": "274f5f9b-5827-4bb0-8974-30db1dd82751",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "927a87e8-6962-4ee7-b855-a828264420d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d101e01-0a06-4101-aca8-c77132926f66",
        "cursor": {
          "ref": "ab29230d-dd54-4ebc-bd2d-f233cd40520b",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b114dc8c-84e5-42e9-b240-53cb56fdde31"
        },
        "item": {
          "id": "2d101e01-0a06-4101-aca8-c77132926f66",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "29c378c6-63f6-41a0-8988-eb07e3666964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "119ed162-f44f-4b14-b089-8cffecdc5f44",
        "cursor": {
          "ref": "c39368c2-b72f-4d33-8cb5-effdc839aef3",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "fac6308b-5878-41e4-a3a2-acd321dbe855"
        },
        "item": {
          "id": "119ed162-f44f-4b14-b089-8cffecdc5f44",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c0972c4b-9cde-48ef-aeb3-66ec83b37342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6871d338-44df-4880-a10b-60fd0eb5a647",
        "cursor": {
          "ref": "bcd3fe1d-7389-47a8-a2ef-6a1850197786",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b503c23c-dfab-4fcd-b26b-aece7eff2336"
        },
        "item": {
          "id": "6871d338-44df-4880-a10b-60fd0eb5a647",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6412a33c-94ba-4d03-95af-e9034f2a1cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c0aabb-f39e-4e0e-a9b0-da1870240912",
        "cursor": {
          "ref": "ce08d9b0-fb50-4a05-bf45-13f26de58586",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "4305061f-afdf-4a04-bb20-1224a993f9c1"
        },
        "item": {
          "id": "82c0aabb-f39e-4e0e-a9b0-da1870240912",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "12f01883-eb34-4a87-bb46-bb8a9fba1340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6ee0a22-1970-4ee0-85ff-d05c03ee8d15",
        "cursor": {
          "ref": "9fd4ed62-7c32-47cb-be6d-d264e5e38e14",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "e6619da7-a03e-4a4d-a57b-438322eedcbf"
        },
        "item": {
          "id": "d6ee0a22-1970-4ee0-85ff-d05c03ee8d15",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c6826dda-acb3-453b-9657-9e6b74c22cd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fabdbdf-ea76-4b34-b2a1-c456d6a280db",
        "cursor": {
          "ref": "42ebb01d-b17d-4896-8837-924bc5b4a268",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "59cd91a4-aae3-4196-88da-c21d44f65786"
        },
        "item": {
          "id": "0fabdbdf-ea76-4b34-b2a1-c456d6a280db",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ea73b93e-d956-482f-a2f5-02aea62e0fcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6821a0d0-fd56-4e90-be02-bc541966f6eb",
        "cursor": {
          "ref": "bda88759-633d-4893-8cbe-8805541fb04a",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "6eb0e4ac-84fe-45a7-8814-7de34f3255fc"
        },
        "item": {
          "id": "6821a0d0-fd56-4e90-be02-bc541966f6eb",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a7b1d3cf-ebdb-47cc-82f2-fb9214031193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f7a1e5b-7393-4f01-9a44-4c558d15fe1b",
        "cursor": {
          "ref": "abd35886-4c40-482a-b917-38e9b16f2ceb",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4b2ef573-429e-4f79-a194-52e1776ae24b"
        },
        "item": {
          "id": "5f7a1e5b-7393-4f01-9a44-4c558d15fe1b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "1fc0cd9e-feb7-4bf6-afee-caffbe161407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6001723-30ec-436c-8692-4e0b48c5b280",
        "cursor": {
          "ref": "a71632b1-8f51-48aa-9fb5-b0403d3cdbbe",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "4bf3c6b9-e078-4181-898e-9d130600c510"
        },
        "item": {
          "id": "a6001723-30ec-436c-8692-4e0b48c5b280",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "bfddf875-37b9-4f44-ac98-21c8b2b8f19f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb17c729-3f04-4cc8-b1fb-b7cbcc880fca",
        "cursor": {
          "ref": "733832fa-5059-4e45-b022-96b2f6256307",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "406694b2-1f1b-4780-b9a2-0f475eb8cf10"
        },
        "item": {
          "id": "cb17c729-3f04-4cc8-b1fb-b7cbcc880fca",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a911df9e-a911-4fef-ab24-494d87c0619e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40d44693-13b7-47ef-ae43-a2d41c94de11",
        "cursor": {
          "ref": "8c8fd932-0e35-4999-8899-7242fd3a6646",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "382ad877-889f-4025-a7bb-1430706d2cb8"
        },
        "item": {
          "id": "40d44693-13b7-47ef-ae43-a2d41c94de11",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "2fa9df01-9f1e-45c5-bfc7-cf8c295bfe81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c202a28-a0d0-4e46-a232-96f002ca09e3",
        "cursor": {
          "ref": "b80de1b0-3cde-4937-bd78-1e3a1f303ab5",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "10c62edc-7073-46a6-9711-763a4d8a67bc"
        },
        "item": {
          "id": "7c202a28-a0d0-4e46-a232-96f002ca09e3",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "2675ac3d-765d-47e9-a4ee-dfd974813162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f520904d-9e38-4385-9849-61ea7b27167b",
        "cursor": {
          "ref": "3aaebab6-b4d3-49ba-b69c-9ec5ca066f2b",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c3c0527c-24fe-4b7b-a60a-806050bb7516"
        },
        "item": {
          "id": "f520904d-9e38-4385-9849-61ea7b27167b",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "30a094e2-872a-4ba9-bbd4-cf5caf5c9693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb6cfc2-ee92-4b00-82ca-dee680719d5b",
        "cursor": {
          "ref": "ef43cc20-c966-47b6-9b07-c394ec59d134",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d75e1e02-1afc-41a8-95fb-2c61f1c40b56"
        },
        "item": {
          "id": "beb6cfc2-ee92-4b00-82ca-dee680719d5b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "76544c4e-1348-4316-9fed-7505e7a7b4f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc8c5a75-1210-46bd-b350-4fe94d10a3ec",
        "cursor": {
          "ref": "1a85f62c-b4d2-434f-b453-f041445847b9",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "623d38c6-3a1a-4a29-af5f-9c708dd7c9ff"
        },
        "item": {
          "id": "bc8c5a75-1210-46bd-b350-4fe94d10a3ec",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "fa6ad2e8-d486-4404-9c8d-b1459891aae0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73a05acf-b781-42ab-b7f7-3752fb4d98a2",
        "cursor": {
          "ref": "124dde92-7064-42f6-9cfa-d6c15bb1aa5f",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e0817ad0-9b37-432d-85cb-8d5cc008bff7"
        },
        "item": {
          "id": "73a05acf-b781-42ab-b7f7-3752fb4d98a2",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0ee480ef-df2e-423b-909e-9215dc40b295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "516b1ee6-0eb5-41c1-a6a0-6b1ada25db03",
        "cursor": {
          "ref": "85fe0bba-d62b-4c13-a44e-197468d9ac26",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "6ff28c08-9dc1-4ba4-ac6a-b52c384c3f8e"
        },
        "item": {
          "id": "516b1ee6-0eb5-41c1-a6a0-6b1ada25db03",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "8a44165a-3a03-4db1-acd4-132895350504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1c0e07c-a42b-40dd-ac9c-7ed8496018a9",
        "cursor": {
          "ref": "e47276ac-2b93-47fd-a5f5-e019c7f83f40",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "b02f1e6e-33dd-4ea9-8955-50776393fcb1"
        },
        "item": {
          "id": "e1c0e07c-a42b-40dd-ac9c-7ed8496018a9",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "37faf2c2-2a9f-4272-9ccc-6be9dcd302f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af49ddf7-6b6c-4f99-a7ee-2fdbee871f6c",
        "cursor": {
          "ref": "64eefc79-1d1f-4cf9-aed2-efdb339adbb2",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "ee09ed66-eff7-452a-9d45-c747555ca9a3"
        },
        "item": {
          "id": "af49ddf7-6b6c-4f99-a7ee-2fdbee871f6c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b5b19888-3500-46be-a745-b8abe8b19467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "195dfc8a-0766-407a-a6d7-ab76fdf368d6",
        "cursor": {
          "ref": "0af2c3b9-972d-4577-b4ea-b37dc148a4ef",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "7bdb3c6b-7dfe-464c-a30a-85c274249358"
        },
        "item": {
          "id": "195dfc8a-0766-407a-a6d7-ab76fdf368d6",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "53dc29a5-9a7d-4e94-816b-0a7cba73fb6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0da3e525-c141-4aed-924a-260d37bb0133",
        "cursor": {
          "ref": "652ee74e-823a-4700-a3e0-f9097de91c14",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "af0a811c-5c7e-43e1-a2e7-252e51931b01"
        },
        "item": {
          "id": "0da3e525-c141-4aed-924a-260d37bb0133",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "5dcd2353-1218-4e34-a233-74aabae7754f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35cbd71e-4566-4716-a9f9-e3fe4ce59490",
        "cursor": {
          "ref": "8e50b54d-9227-43a4-99d1-cfb254255e87",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "56ff1c60-64c5-4456-85ab-b16a06b65535"
        },
        "item": {
          "id": "35cbd71e-4566-4716-a9f9-e3fe4ce59490",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c5b954df-a4b0-40f9-8da6-7ccea5bd3c29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf647dbf-1b57-42b6-9210-3f19fb084be4",
        "cursor": {
          "ref": "0f2ed2a2-7690-47e6-9ae9-6f918f679b97",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "0470f85e-6e08-4119-b22e-7515fe9e4ddb"
        },
        "item": {
          "id": "cf647dbf-1b57-42b6-9210-3f19fb084be4",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "6ae4f618-67c3-4107-80a3-728f226431c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0df26689-9d6e-46fe-8764-bd1f2721f8e3",
        "cursor": {
          "ref": "f22fd5f7-fcf2-481c-9c20-cbf1d4492d94",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "6d73ab11-3ff7-4af5-a7ff-3a5e83435741"
        },
        "item": {
          "id": "0df26689-9d6e-46fe-8764-bd1f2721f8e3",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "0c53aed4-e151-4aa4-a68a-990ed175f39b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44690ef4-5eab-4c96-ae65-064e85cfdab8",
        "cursor": {
          "ref": "27ac7754-4f00-4123-be1b-f6c49573a0ab",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "077f9e19-e0d3-4da9-87d6-2698af0e5303"
        },
        "item": {
          "id": "44690ef4-5eab-4c96-ae65-064e85cfdab8",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "5918409a-6c64-4669-89a3-381072963e84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44929f82-f93d-41d7-acf2-20bcdfea173f",
        "cursor": {
          "ref": "c62d98c3-7027-4794-8520-cca4dc9e3708",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "193f7062-4c4e-4a34-9222-7e8980b19cca"
        },
        "item": {
          "id": "44929f82-f93d-41d7-acf2-20bcdfea173f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "79de1d59-f906-45f5-8a64-da7436cbdd0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bc9c615-16a7-4501-8003-d32b7c721e82",
        "cursor": {
          "ref": "047cb906-5f2b-4fa6-8220-666992c13b28",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "3906b81d-34e9-4a7c-a81a-e84c31bb51ba"
        },
        "item": {
          "id": "8bc9c615-16a7-4501-8003-d32b7c721e82",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "5f7c7503-06ce-466e-8923-bcde6c11acb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb68ff11-b90f-4fb1-bba1-137e048fac03",
        "cursor": {
          "ref": "a25a09a2-575d-490b-9727-0d134ebf158d",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ac99a335-f634-48e4-97e6-4b71bc16cc55"
        },
        "item": {
          "id": "cb68ff11-b90f-4fb1-bba1-137e048fac03",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c3662c30-4132-44a1-ba50-48d9021f589a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89e43865-b2a5-4a96-90c4-71c16931a02a",
        "cursor": {
          "ref": "9a504db7-99fa-4290-9765-cc9ce3c14c9b",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d53e6a8c-a78d-4248-adcf-b951b251e8f6"
        },
        "item": {
          "id": "89e43865-b2a5-4a96-90c4-71c16931a02a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "301a2ad5-12b3-4fd8-9993-43013c7d48c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa8d885d-b2b3-43ec-8467-4be744ea9cb0",
        "cursor": {
          "ref": "0cf250ef-d067-4c3d-afa5-6432b507e5c0",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "4c82c50e-4d94-49a0-a194-6deb00d29235"
        },
        "item": {
          "id": "aa8d885d-b2b3-43ec-8467-4be744ea9cb0",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "ebbc8a70-d082-49bb-a31d-ee953d914e87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "393e7669-780a-412d-b117-a5b4d7f00548",
        "cursor": {
          "ref": "b1d11051-1b6f-4420-89a0-3e552e64301b",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "7adf58c7-e13c-4045-ac09-a8f477943de5"
        },
        "item": {
          "id": "393e7669-780a-412d-b117-a5b4d7f00548",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b063ace5-38cb-4c95-97cb-4188edf31b0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d861fa7-6528-4e8a-a605-f2773d805a4d",
        "cursor": {
          "ref": "9e7243a7-6daf-485b-b086-662ca4ba9db4",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "271479d6-f2fc-4c94-86c0-3469eca8095d"
        },
        "item": {
          "id": "3d861fa7-6528-4e8a-a605-f2773d805a4d",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "eff4407f-98c1-402e-9a41-6576ef4126b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a224dbf3-76e9-4197-81bc-2b2ea7ac83a4",
        "cursor": {
          "ref": "0f395f08-5b3c-4bc5-9624-3c4b2ee75ec9",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "9de3920e-0aeb-43f0-b3ce-1fee0be2db63"
        },
        "item": {
          "id": "a224dbf3-76e9-4197-81bc-2b2ea7ac83a4",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "f235ad55-8ad8-410a-a3e5-5699f8844d49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8520a0dd-8669-42a3-b698-a7130157d174",
        "cursor": {
          "ref": "847176fc-1973-42ce-b2e4-8278f3e4bd86",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "1eeb4819-44c4-4571-8111-8ad7d12dffea"
        },
        "item": {
          "id": "8520a0dd-8669-42a3-b698-a7130157d174",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "1eef85e6-ae33-43a7-b91f-f1d9101a9d1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77368bee-13bc-4387-88d7-f04f2a42ebf5",
        "cursor": {
          "ref": "de89fa62-1693-41a9-8e18-52ef9cb32007",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3727c164-08f2-4497-8f7c-ff09b32117e4"
        },
        "item": {
          "id": "77368bee-13bc-4387-88d7-f04f2a42ebf5",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "d659befe-16ee-40a4-a1a0-64ac07422aac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e868498-003a-4899-aa9a-305b7b859f28",
        "cursor": {
          "ref": "13f05d02-e136-4fce-bcb3-ae8f2801200c",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "47beb474-c4e5-4554-a1bb-019948a917f8"
        },
        "item": {
          "id": "1e868498-003a-4899-aa9a-305b7b859f28",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "4f527410-299f-475a-894d-1ba8351fdbc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55e65a3c-481b-4e56-a72f-5e69f6540b1c",
        "cursor": {
          "ref": "3eaee33b-5b0e-4502-b01e-4c22e68a70f6",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "8b0218db-38fb-43be-b532-aa064b223ed8"
        },
        "item": {
          "id": "55e65a3c-481b-4e56-a72f-5e69f6540b1c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "8a3012fc-1139-4a30-a9d2-a3b9ced960bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee8b76c8-89a5-4b3d-a8e2-b5021cfb4928",
        "cursor": {
          "ref": "09910cfb-0c7e-4b05-854e-a405db57ad4c",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "9ee64bcc-24d2-4929-b9b4-34387eb932b5"
        },
        "item": {
          "id": "ee8b76c8-89a5-4b3d-a8e2-b5021cfb4928",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "d01ce493-bb4d-4c7c-8d56-57110b66ac61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1679dd27-1553-41cb-a1ba-2f20cc27076b",
        "cursor": {
          "ref": "0faf299e-b2c7-4865-8233-e8c15f4c294d",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "68313a78-4609-4d3e-a928-5066fa1752ba"
        },
        "item": {
          "id": "1679dd27-1553-41cb-a1ba-2f20cc27076b",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "ef34eb4f-2ad0-4dc3-bc45-554cdbb092d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c86c9e9e-50f9-49cd-b6e2-d67f2503d26b",
        "cursor": {
          "ref": "6b7b0280-6780-45fa-922e-7fda09afcb9d",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f4c2c612-f0e2-4bed-93b5-9a9dce6308b0"
        },
        "item": {
          "id": "c86c9e9e-50f9-49cd-b6e2-d67f2503d26b",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "63bc29e5-1d5f-4bc8-9654-491c5158606d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53549ecf-48a4-4712-bff7-e35cfc273a78",
        "cursor": {
          "ref": "20cc40b1-3fb6-4421-ad5f-20a72e83f4cf",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "e4397509-a626-4c22-8d5d-1f6efe795723"
        },
        "item": {
          "id": "53549ecf-48a4-4712-bff7-e35cfc273a78",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "3baa3af5-af04-4a68-9c04-66bf9755599b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "136f8663-7baa-428d-b65e-6eea9f02c3c9",
        "cursor": {
          "ref": "b9e29717-b1b4-44e1-8589-9161d5b99d6c",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "dedf4ac7-ab10-4507-b2d8-59ebdf2f423c"
        },
        "item": {
          "id": "136f8663-7baa-428d-b65e-6eea9f02c3c9",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "3d4e4a4c-16ce-4128-b252-3cb06757c362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b29d336-2669-45f5-9f96-b3b0f73dda8c",
        "cursor": {
          "ref": "d1d7b9ae-e508-49cb-9d93-e3a662323bab",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a2941074-4f65-4235-a714-2cfbd6366135"
        },
        "item": {
          "id": "6b29d336-2669-45f5-9f96-b3b0f73dda8c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "0ea000f6-eb30-4a43-9cd2-d7916655827e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b57003da-9a34-4f89-b1a8-aad6bd87e08f",
        "cursor": {
          "ref": "d6678e2e-c4c0-481d-a554-948b167f288c",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d3d317d1-93dc-499a-adc9-57ccfbc1e7ae"
        },
        "item": {
          "id": "b57003da-9a34-4f89-b1a8-aad6bd87e08f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "5db537c5-29a5-4eea-b487-abab1d520eb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "310375cc-d340-48cc-9af1-7e43b3328f1e",
        "cursor": {
          "ref": "5835a63a-eff9-47ab-8009-d4053adc1478",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "4ab546fa-ff5a-4dd1-9673-1d42cbc41d51"
        },
        "item": {
          "id": "310375cc-d340-48cc-9af1-7e43b3328f1e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "4e3abb7e-685a-4999-8bdd-c06b36b96df5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7774fee-2dda-48d3-9ffb-c7f306defb29",
        "cursor": {
          "ref": "acfbcaee-2faf-4c6f-b17a-f3d6ad7588d5",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "5bffb3eb-26b2-4c74-ab69-a2d95c289ca7"
        },
        "item": {
          "id": "c7774fee-2dda-48d3-9ffb-c7f306defb29",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d17689a2-f76d-4cff-970c-b4a5dbd5821b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fa17be9-31c7-4ac0-8ac1-76db01235430",
        "cursor": {
          "ref": "49fe2b68-e4ac-4e5c-908d-b5d9a5e749e5",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "c69e133d-20ea-46b6-b4d5-c6c73a75e4b8"
        },
        "item": {
          "id": "5fa17be9-31c7-4ac0-8ac1-76db01235430",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9a448812-3126-41f6-be4e-d7dd4aefe045",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ccef238-a3a8-4ae5-b8aa-0cacab92de0b",
        "cursor": {
          "ref": "b192aa27-f620-4115-b0b0-d2483af1fabc",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "ace80762-be4d-4367-9d79-fcd74bd0e01d"
        },
        "item": {
          "id": "1ccef238-a3a8-4ae5-b8aa-0cacab92de0b",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "af428f35-1174-4976-9711-ababbdfe97ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19c1fc94-0d52-427f-b047-684ab61327cc",
        "cursor": {
          "ref": "7b4a23e2-15ce-44f8-9007-5aab482ed137",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "352948f6-7c06-4c5c-baf5-176e82778d79"
        },
        "item": {
          "id": "19c1fc94-0d52-427f-b047-684ab61327cc",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "5dd9f6e1-e178-4bdb-aabb-0763a352e644",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "1d231d27-73c1-498b-8643-3af5cae03798",
        "cursor": {
          "ref": "eee5c94c-bdef-4abd-9ab7-ee267cb40923",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8d1a0b2a-ca4c-4006-a10d-d27d5f29e717"
        },
        "item": {
          "id": "1d231d27-73c1-498b-8643-3af5cae03798",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "7981464a-693c-4f02-be5f-f1733a54bfd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "56e2701b-b33f-4a3f-ae6b-3424479ee435",
        "cursor": {
          "ref": "439be0e1-c7af-4a63-8d49-30c2bea2fa05",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ca820eda-7db1-4f6d-a01f-ed2b5ed34b2f"
        },
        "item": {
          "id": "56e2701b-b33f-4a3f-ae6b-3424479ee435",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a5b18437-3848-4d4d-a41a-59155d264c21",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d332163-d1db-46c9-8357-68ff7375ec0c",
        "cursor": {
          "ref": "346d3ce3-2bf0-45ca-9029-0d8128a14dfb",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "d6788be1-00c4-4599-baa1-0c2b3093f8fe"
        },
        "item": {
          "id": "0d332163-d1db-46c9-8357-68ff7375ec0c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "c930249a-5a32-44bf-a90f-980914577615",
          "status": "OK",
          "code": 200,
          "responseTime": 2161,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e5db924-671f-44a5-b13d-d700896b59b7",
        "cursor": {
          "ref": "9343d45a-5ff7-495f-94fc-2dc71e381db1",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "db56ca2a-f30c-4da0-a424-be4a45381421"
        },
        "item": {
          "id": "3e5db924-671f-44a5-b13d-d700896b59b7",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0eca5246-35b4-4d0b-84e6-03e543776f23",
          "status": "OK",
          "code": 200,
          "responseTime": 2594,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b05688-447c-4cf1-81fe-955df4dba2d6",
        "cursor": {
          "ref": "70337b5b-6a92-4178-aada-2af4ddfc2495",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e7bb95e7-7743-4760-96f4-be0b05867ece"
        },
        "item": {
          "id": "98b05688-447c-4cf1-81fe-955df4dba2d6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "aa4cf61a-44c2-472e-a2c8-8c6b00c18a7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "98b05688-447c-4cf1-81fe-955df4dba2d6",
        "cursor": {
          "ref": "70337b5b-6a92-4178-aada-2af4ddfc2495",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e7bb95e7-7743-4760-96f4-be0b05867ece"
        },
        "item": {
          "id": "98b05688-447c-4cf1-81fe-955df4dba2d6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "aa4cf61a-44c2-472e-a2c8-8c6b00c18a7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "98b05688-447c-4cf1-81fe-955df4dba2d6",
        "cursor": {
          "ref": "70337b5b-6a92-4178-aada-2af4ddfc2495",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e7bb95e7-7743-4760-96f4-be0b05867ece"
        },
        "item": {
          "id": "98b05688-447c-4cf1-81fe-955df4dba2d6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "aa4cf61a-44c2-472e-a2c8-8c6b00c18a7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "f5120ee8-6513-475b-813c-2d3b138d1729",
        "cursor": {
          "ref": "0f1df314-57f2-4f03-b600-235092d5615f",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7f360fd5-4d07-4ecd-af8d-0f96d543600d"
        },
        "item": {
          "id": "f5120ee8-6513-475b-813c-2d3b138d1729",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "8f64385e-746e-401a-82ae-874539dca946",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "266b9d7b-5cd7-4783-bd6f-70b5a9f1e531",
        "cursor": {
          "ref": "bcf77b1d-fde2-45bf-82e8-da2e1b7acbe0",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "66e26437-b4d7-461c-a3f5-beadb1f36c09"
        },
        "item": {
          "id": "266b9d7b-5cd7-4783-bd6f-70b5a9f1e531",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "8752a42d-94fc-4f12-b79d-01886cddfe0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "266b9d7b-5cd7-4783-bd6f-70b5a9f1e531",
        "cursor": {
          "ref": "bcf77b1d-fde2-45bf-82e8-da2e1b7acbe0",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "66e26437-b4d7-461c-a3f5-beadb1f36c09"
        },
        "item": {
          "id": "266b9d7b-5cd7-4783-bd6f-70b5a9f1e531",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "8752a42d-94fc-4f12-b79d-01886cddfe0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "5a870882-8805-4b12-9fc7-41b6537cf188",
        "cursor": {
          "ref": "73d865e7-7c8a-4f8e-a8ca-2e83bf32a2b8",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "684ad057-e890-40ec-87f3-d2b731235ca1"
        },
        "item": {
          "id": "5a870882-8805-4b12-9fc7-41b6537cf188",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "335ac33d-615e-4222-a754-87dd94d7cc09",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "77bf25b7-6996-4978-9879-b7020cb4179d",
        "cursor": {
          "ref": "cb24c306-6148-463b-9d80-1addd5f701b2",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "f87bbd6a-ff5a-4486-a17f-9d80006dd182"
        },
        "item": {
          "id": "77bf25b7-6996-4978-9879-b7020cb4179d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "69baca4e-acaa-4b95-8482-8e45d74c8490",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "77bf25b7-6996-4978-9879-b7020cb4179d",
        "cursor": {
          "ref": "cb24c306-6148-463b-9d80-1addd5f701b2",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "f87bbd6a-ff5a-4486-a17f-9d80006dd182"
        },
        "item": {
          "id": "77bf25b7-6996-4978-9879-b7020cb4179d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "69baca4e-acaa-4b95-8482-8e45d74c8490",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "b0e08f57-5e19-498e-9a6c-80896999d9dc",
        "cursor": {
          "ref": "2f4edabd-a7e4-46c0-af2e-909544069d5e",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a73d8737-e518-4e21-a473-c2840664b037"
        },
        "item": {
          "id": "b0e08f57-5e19-498e-9a6c-80896999d9dc",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "f19321fa-c740-46f3-ad96-c4c02eaf81f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}