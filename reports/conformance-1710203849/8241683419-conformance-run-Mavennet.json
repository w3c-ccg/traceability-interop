{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "cc7ac6ea-ba4c-4164-a2d6-a87b259ac3e5",
        "name": "Clear Cache",
        "item": [
          {
            "id": "146b815f-aad9-4fe5-851a-ec12a3f7523c",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b42d4cf0-e756-4e30-9997-847e3856f4b0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a9c71531-411e-43d2-8c21-d1eab9e72fae"
                }
              }
            ]
          },
          {
            "id": "4e0cbbca-d4fe-46e4-a24f-2d74dc920a16",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e6638738-34c6-4017-9fe5-1f91ce4612a8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1e338c08-b80c-4fed-bb47-864f91218736"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "764fc58c-1347-4033-931f-62a5116f222d",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e85516e7-2e94-45ff-9b6e-0abaab7ad142",
            "name": "Positive Testing",
            "item": [
              {
                "id": "227c867a-153a-464f-a30c-01dbce3fe488",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "db086691-f82d-4f24-b18e-b55c91675f3c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "88e98601-6228-40c8-8b91-dbef688fb57a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d8cac3f5-1995-4106-8710-0812836f6e4f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e88767db-236d-45c4-ae79-031b14ce3c70"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3f5a86c6-8738-4f01-939b-bdee8c223a40",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1e4a1b8f-9dde-4dd5-b2da-5c755e9b8077"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2cfb9a88-655e-454d-9a88-2e4077b2d6c0",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "311a6dcc-8360-4bfe-b7ec-0089f7dd4516"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "279e49fc-e930-42f0-89f9-21c778ae0824",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b1a646e0-a0f3-4c30-83e0-1c073b145450"
            }
          }
        ]
      },
      {
        "id": "606320dc-e7e3-43fa-83a4-2d4264f92962",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "23311fa8-9a0a-4300-af36-dfb7751429db",
            "name": "Negative Testing",
            "item": [
              {
                "id": "da5393de-2e70-42ef-9a28-98503752d2b2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e419326a-8d8c-4110-a2f4-011934bacb37",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "178c47d9-5414-47b8-80ce-ebde865450e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "231e17f8-c470-4acf-8584-488ccb4d963f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc7da592-9527-4d83-b227-b4762674a5e3",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "044224ec-d42d-4306-a568-3ece4a194d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6ab4777b-adf1-4b57-a8f4-ec8e02641877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e734ae63-b47c-4773-8364-73b98859a12c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a18fa016-d920-4830-9464-6c8ff59563ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "57f1251b-ba5c-4310-b035-b4c5c61aed1d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2e7a58e5-1ab0-404b-b252-34ad13d63309",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9cc4d991-2e9b-43d6-a35d-6dd584aca5de",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c92810-dcc7-4f3a-b4a4-414a0a8d634b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8e579f7a-967c-4226-b770-029879a11ead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82dde05-4412-4c26-b879-50cdb706624a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fd54c45-7db2-4c9b-9caa-6dad49f491e0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "95355f0d-8f79-4b91-9c0a-bdea2908a843",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d1afd8b9-337b-4e4e-ae28-59a320b6cfb6",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "77446938-2ee5-4f58-922b-7569b6e2a6fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "4231bed2-a7ba-42fd-b8bd-9a5c7b8dba68"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e3eb92bd-3b3b-4ec0-aec0-be0c646d0f6b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "b0353e8e-4e9b-4922-abe1-277532a106a1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e8f321ca-4c7a-4d36-b90d-8091edbb41b4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "65ee27b2-d3e8-4edd-8f33-eab14eccaebd"
            }
          }
        ]
      },
      {
        "id": "7bc8f9f1-f8a0-4feb-995a-635ea828ffba",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "4e644964-109f-42a7-9dc2-1c352016696e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1fe70ffa-9af9-492e-a5d6-c7c589a83b98",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "6fb94c61-7598-4f93-a85f-5c3a2c80bd49",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47e0c18e-0eac-4ef5-b4a6-e5fb2648fd18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "210ee2a2-f89c-46ff-ab35-1705a36f4467"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2075e53a-fd63-476c-8f94-2a45f7e82139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5a59a1a5-6def-4feb-a7eb-93160880dabd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10bbbfcb-e53e-4ba0-a786-462d18cbd670",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49f41f37-0806-4a8a-9132-45661486db7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53071a61-4a18-4e4e-ae89-21b626bfa899"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65894a1e-7970-4498-b140-cfa9850805fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f54391ff-3b61-48c0-8d34-e8fa97bcad0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e23aef6-8d89-421c-a3d5-71aaeb93a2f3",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c88eb074-4d6c-437a-b0c2-31eb46aabc53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "090d5cec-02fe-4dc7-9637-a788bc152d5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc526fc7-6d88-4b3c-9bd9-11bc728ae6b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ea7219a-177d-4f1a-8d56-bb54c88d0007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2dced19-dc92-4779-bea9-95b351ea337e",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2654ad8-eabf-4ab6-af34-9bc77a74482e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bba898c9-3731-449d-9c66-d29fa0592980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "667e03f5-082e-41f6-9b86-1c41295441c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "14cfb3fa-275d-4860-8603-83c63e156887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee75ea64-2f3a-4e3c-8280-a458048844ca",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03778525-9164-477c-bb87-c001ca4c48eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35709134-f791-4d8f-b333-3929bf3aebf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d14f25ed-64e5-467b-8515-2cd0949a2da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b89a863a-d454-4b71-b8f5-0182462d3ec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b21aef53-979b-4aa6-bfff-abde461e6f79",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a30e72-e72d-4901-bbda-85b6169c3302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e0dd3dc-39a6-46e4-b10c-95c8744f4535"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8333bc7-fa15-4f5d-8a6d-082de624a9a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e146a7c6-42fd-410f-852d-63fc12c327d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f251586a-8625-461f-ac50-b4d10b08ad1e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00dd5c99-d33d-468e-818b-f743310c6847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca52d9ba-1f93-4270-a940-c62c13c29aa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fbb01e9-028c-497d-adb1-6a0317364e21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cff0e9b1-ffef-495a-8134-cd9f9c923202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66401d2b-a4a6-4166-8b10-5c9fbd317691",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faac3456-d231-4a29-9115-8cb38baa1f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05d63f10-c0fe-4992-b68e-9ded437bafa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e017dde-1f1c-45e0-894d-f089888c01c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c439ac70-12bb-43e3-8a81-60f006bdbef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c910319c-e44a-4338-8497-6b38825875d4",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7449e0-4bf0-4379-979b-5a753ed1c851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "341125b6-383b-4764-a7e2-ab3fed055c5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aebb6ca-fbb5-4731-bb15-3b0a9606281d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98a54cb9-1674-4e86-b88e-b6bbdeaa779c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60927243-b502-460f-a203-22b2d60e4b72",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e07ff107-75d1-4349-b566-5689fdb26bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33cd8800-2362-40e7-8d6c-61f7a3ccef0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2908d97f-3052-4da3-96d7-ee072635bd70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95e0b06f-ab6d-462e-af72-7e14b6a62261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b15926d5-e048-442c-9333-609614aee1c8",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98682614-9afa-4355-ad05-1a23816724e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c52383a-5a7b-4614-b9c3-f9589d808cbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "720b07db-bdc4-4390-b17a-4fa6fb7e0914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e87c66bb-d9c9-4986-bc1e-5f177bae708f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bd9c35b-cef3-42a1-9483-307732b277ca",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f2646e8-11bf-4fa5-9ab2-3e2a8c645029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "239f7ef8-80da-4cdc-8d0c-feb9ee1c6888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66788b08-53a4-4570-a511-d98e795bc273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab6cb8d7-dd2c-4953-9bcb-60bedfc10258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df294268-8053-4561-83ee-e97a21da110b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9723f064-cdbc-4775-952e-7cd1da89154d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0415d88d-fd3c-476a-80b1-1eb22c217761"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28ebd979-0a44-40f8-affb-0b80c7f44318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ee72ecc-aab9-4104-bea3-c5627901ee5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "584a69b1-ef0b-4b6f-9eee-88036dcac4c7",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a0780e1-9767-4a8d-98d2-e3958b498386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6564420-e9a7-4dcf-9ab3-50c7321c3331"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f5b67c6-4ea0-4d6f-b25b-4ad94f812ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98794a15-f1f6-4498-bde7-701986cfece6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26c300bd-1edc-48d7-9bfc-78741c553e28",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a0a714c-7efa-449c-9e6c-91d25b9be746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2785205f-4339-400c-bcee-7843c5ee4cc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2770331-fab2-4958-8258-1888ee745534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ddb06ae6-c8f7-4f72-99c2-22a0ae4c78da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2410feb3-1b1a-48aa-bf7f-d6675790843a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f46aa9ea-b8c1-4409-90be-d565fe2465c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daf6f98f-e2e6-41f5-9892-f8313ead69c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec8eb80b-bc9a-4aec-86be-596b6af08ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cdd9a3e2-125f-430a-8c9e-c9b71a676964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3402845d-58e5-4ec0-a99a-731f789af851",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4593f47a-23b2-4007-953c-e38aee53f5d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2168742b-60f4-47d0-9a9b-3af7b82218db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89dd68a6-ad71-4fcf-98d8-885ae8a2cda6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00e3a00f-a00f-4c49-86ad-8315a43f710c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1667eb3-d67c-405a-8e52-22b1ff27a9f1",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce9164c-5468-4d02-9c2e-a4875830c817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d25abbc-ab7a-439c-9e05-19375f0b60f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61ed4661-cfc1-4427-b696-4158e8ceed8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7c85727-de23-452b-94db-98cf14d7f02d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc5689c-c0df-4df5-ba9b-f5508e023451",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b1dfe69-7abb-41d1-9a92-c26a34df4191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea3e2592-c7f5-4f5d-bccd-e10a503b17bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb324684-7f9c-4c28-a87b-928d2966b65d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0237452-a599-403d-b3dc-0977a36f5389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52d8d4b4-f564-45de-aa7b-95d9346b2f6e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4cb31c5-b46c-4cd4-b956-02714ece2550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d6a0da0-99e9-4385-8b68-e217edf0d410"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f6ec7cd-63b8-4aa1-ac8f-96559727bc06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9394615-a4c5-4418-a5b9-07b0dd3b5038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e34ae3c3-8987-4285-8e0d-65a895b17ac6",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abc8eb70-6a96-44a1-bf0e-444096fd18d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f858d1da-7ea4-4306-9082-5404aff8f4a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ab9b8c6-3a3b-487b-b56f-3831ad8c00c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2187d274-a470-4660-9112-cd5dd30bd8f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a185067f-9d09-4825-8d5e-fefcad1de862",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da13fbef-60c4-434b-95a2-ea2edabd4dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77b73a1e-2821-47fc-9e92-041f715d5185"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b56cca09-c2b2-4e4e-9a53-a78b3e63cba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd33b317-1ac9-444d-bae9-1171ab33165d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06d0338c-8c58-477d-8790-2bc6046d6217",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f772d3be-7312-4f96-9c5e-04dec4c69021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "282fe966-2ca4-46aa-9c9b-24fae0b17171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c83bf09-8022-4d6e-b504-41dbfc4f2184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4b788986-6e6a-4bbf-8767-b55220cf9e02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f66ba92b-ca6e-46f1-b70f-517a466119cf",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc9fb37e-d5d2-4830-964c-b395f57a48bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f1f56c9-f3fa-4ac0-8d62-9b50cb8130ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c84bf2-aa7e-4e43-b647-5819de7c40f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f06b2f9e-b3da-4fcd-a3f7-66091a675ecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6fcaf80-68a0-467a-b4bf-438b29a9a2c8",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25506961-217f-418c-88d6-e9a13581aede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "213f7f24-6cc7-44e1-93ac-d04ccf1a52e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e9aa885-da43-4254-b95c-1e4947bc07ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0b033a9-a646-48f8-9192-ec80bd417977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b72e723-f0f3-4daa-b540-15ae39e934dd",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a9fb96-6098-4ad0-97dd-eab74e9bbc55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fea3863-f7c0-48c7-a679-f36424d3e186"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1554d91-c14a-4ab3-a32f-56651fb0a00b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d846353-902f-47e6-a94f-827dadf86914"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56317ce9-d625-4cf1-98b4-8e484ccb783b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b9c9469-557f-4276-ba04-5bd892122fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9798dd0-0b7b-4566-b230-309547070844"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd1e361d-7379-4835-a135-cfe88ce2dbf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb968a5c-2ea6-463b-bd47-a1944fdf9877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8c81b32-1ebf-4b34-8215-4e9e1b076ead",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e948d59-e251-4e69-ba33-81c1bb7fff3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9924997b-31bf-4b04-9996-6c2d5bbb7a1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "567449ba-6a1c-45d1-a278-af51995d3335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "404b6d98-e3b2-4e2b-a69c-aeac5899b1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61eaeef9-4771-4464-a1ef-3585c59e66c2",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96d66242-1d25-4b03-9145-d9302d18d99b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a788a764-9572-4126-88f8-3f0a10ecb4fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ab04f99-4187-41d7-95d4-14e22458cdf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6aa82689-a54b-4ea3-adf2-065c7e46c285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae2e708e-f585-441d-9723-1815c9b7da81",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d4a652-8202-4062-8854-4b380d104fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba467923-ef26-4fd2-a2de-fd843956a174"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ad03b9f-0ad9-4382-b370-cd658a5c3a07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b20e02e-c204-4c9f-921d-7e5748272617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8a759b4-aaa9-40e4-ac3f-45d304b6b283",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da91e72e-6e51-4639-b1ae-5ee4c32d013c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "512aabd0-f18c-4d73-b04b-e140cc788487"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "210162f8-b6fe-4da1-8b99-91fd65271d39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fda8516-9b95-4c4a-8bab-b43fe70c1e13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f0f7edb-cdb6-41fa-9a5b-0b174424d813",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d5c9518-4984-4ac2-92c4-8123cc495305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "525a799e-f54b-462b-8de8-7c4db44b34bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b087f8f-4437-41c2-8680-49be32c20562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab8065cb-3070-41a6-95d9-bbe8452f69c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f4ec2fd-59cd-45b5-976c-24c9e44e65e5",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcbeb079-2735-4221-8c92-16363bad1449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dcf9055-5b0b-490c-b115-59a019e4992e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c3c5015-f6b9-4a97-b380-0a680aaf18a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "93c96977-2270-4eba-9b92-d81e7091911e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8819a98-31db-4cc5-a91c-b14a7e10163e",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "896f1754-d086-4049-86af-1337480dd5a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "116c1905-695a-4ef1-be50-0adcef927c60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9022343-229d-4270-bc7d-e77f06c34630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5226aca-0b4c-49a2-b2e3-66565f04dfa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fdf64ea-689e-4be8-a896-6e3dcd91033c",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fee6562-580c-4082-9430-b62d8ecd2fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03243d50-aae7-4106-ab0d-17151cb0c53d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e63578b6-98ee-443a-9a6b-17158d8d48d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "6db1ddaa-9d2c-4faa-8b2b-e3023fe2f2df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "078c64d0-738f-4093-8d60-8972c877bcd8",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff2801bb-05ae-48d0-b538-6fec1194057c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e9e00d5-8e0a-4304-b217-cfe2b0abf8f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bb80c04-5da1-469b-bef5-5611fa81f761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "119100df-6eaa-4821-9e90-7fd8728ebdd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded57c64-9849-496b-b4a1-bdb8bdc9beeb",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ec7c2b-0a62-4a56-9296-1cd1898e9d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "026d3e9c-1061-4663-ab19-96ad96b382ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66b426d6-631b-47e1-bf66-ca7a11a0bc58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8eeada6d-cdfd-4de1-8d87-3dd57b3f71ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3becac39-7c71-4123-a75c-52694b54f8b2",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c6eeac5-ee74-474b-900d-36f1e8a899e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b81b0b2-2092-4709-b166-13353d02eddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb0d30e5-4a6e-4d77-854d-433a554a047b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9034a52-9e63-454f-a90f-5cc53b7be188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e62b3eb-7e7f-47eb-8552-673c0647d00c",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c17e44cd-3ee7-4ca8-af1f-0cd7474b4734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c669dde-7f11-4e2e-9640-588a709b17a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dbaad0a-f6ee-4089-b095-50ff31e0b6e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac02666f-a13e-49cf-9b1a-4c7ba53e8b7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8582f2f-d5a7-457f-9fe6-7a5960dc476d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b042b76-2e1e-4880-9526-9d7032b0186b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d79c5ff2-9710-4705-875b-4135e9b99d70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b348f2c-2d85-4c8f-8c88-623b3ef34663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "88e846e8-e9de-4948-99ad-508cdd19dc0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa44577-dc72-418f-94f9-8dd7067eaba2",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "899756cd-2c95-4c96-ad81-6220f64254a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e761104b-7bce-4209-9f7d-911723b1bc1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3712ebda-88ee-446d-97e9-32c4f76a62a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad52edae-699a-4d8e-989b-982a69cde813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47891c43-dafc-4c4a-9ce9-631d04a6d8c5",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b68ade0b-3020-403f-a733-02b1d3652ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60a645b2-67fe-409a-8f52-476c571bc984"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a72ec76-f234-42ed-84cd-95c74aa749b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b3a11780-24dc-4942-aad7-b9a95569ef71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff7c1304-1923-4dfa-94c6-2bd7c0624895",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f2a7d03-7c8f-4d21-8935-abc2c2c320ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19ff4b82-0cc1-44e3-8065-e39b3887eb9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1831f83c-f7f9-46be-8982-4d867dd7fc0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2621bc90-6925-40e4-8c63-2641d2a6e985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a96227c-d1dd-45af-aba7-8d6ffc79b8c3",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e912af7a-004b-4460-921a-c72489449710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec3905b0-e28d-4084-b602-6d9cd698574b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "069c9792-6d54-4f42-9a49-aaa11b44fc7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "41443d58-e420-467c-824f-8e35c34929e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b88d18e-6225-4c9c-8d07-6a53d8771f6d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1634bd1-d474-4aef-9c21-85df4ff2e0f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cd164c2-e2e5-4d21-bb8b-76c7f8053c47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28bfd386-9eab-4341-b593-dfb266114660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "03551c48-0f06-4b93-9748-a0fcdcafc82e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b65f62-a13a-4328-bb5f-563bfd5e5b60",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "465a574d-028c-4f11-ba5a-6a9e6de66a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b083cc27-f100-4c2e-883c-818fdb1f208b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3278c05e-7590-4bc4-acc5-9806fe3c3595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "64e2c276-6e3d-4fab-8359-c12d08f265f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d2a1d20-dc81-4774-94be-c33d9a3754ed",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55985783-a2bb-4f5c-83e0-d6d1341e195a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c0cffdd-c362-42ae-93e9-5fd246e08d6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1433263-1a94-47ef-9501-eef0c58fc1a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "078ccda9-379e-48bb-a7bd-aece535bb05b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "482cb446-3aa3-45f5-94a0-c080c0938a0d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a619cad-0c29-4aac-8d8d-ca15035c408b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fc01676-9c38-4e98-ba91-731f3c01b98a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be9d6b44-e66f-4ad2-ad74-077543a8f67e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8df25fff-b7ab-439e-8d1f-7e9330854bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d566948b-2b0d-48ac-8f22-22371900ad25",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c266b212-90c9-4787-9555-ff2b6518f9b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9850cb75-8bfa-4e01-9b14-6c84cd377033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bb36095-875d-451e-8eda-07418340c923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0f339d5-b45c-4684-8481-638fa449bcfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b28772f8-ad37-46d1-b4c4-4edfbb1fc654",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "548af1dd-5fc7-45f6-a078-dc37fa78c5f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a02a989-2bff-4d24-85db-ea2d366cb29a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d12ecdf2-cada-48aa-a7fd-e78810a6b212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6be259ea-ff90-4e38-bbea-4c600a099c00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d506f80d-a77b-4c83-a149-6ab14caf9542",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88af564c-e343-4be9-86a9-db45ad5170d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "200313d0-5a2f-4224-a31f-daee736da3e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6ccd19-c6fd-41fa-a080-e2fe26c1d831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c4e12e0-dfab-4e1e-b45b-229d6ac95082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7f18269-3856-4900-b820-c2b42f9bbbce",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17791289-827d-4160-b3c1-44529a25fc3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbcfabe7-2528-4dec-bdab-7937ae858a22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "442df9bd-d406-4655-bb0a-929d04ad35f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3306f3e4-73ca-4e2b-8ea4-e4707af6fab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e87521de-7216-44ef-8ca1-e43b4b703e77",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b922f8ed-b307-4fb9-b0b5-8ce40ea4dfd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a0fc7e4-42c9-4f3d-b788-f885c72d3afd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75150365-3506-4d3d-94ea-8b3b3127d707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1625681b-39ae-45c1-b93f-ee93045f6a0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "748361ef-81e9-400c-b91d-aee1aa096595",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0525467d-b70d-49a3-a897-a747e46749c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49b44f55-6703-4a3f-b5e7-34e01bc703f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbcc0b30-035a-4118-8987-c659cf8fcf9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8964127a-2579-40d3-855e-4aa4ed6d6f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1428627-424e-49bb-a28f-f15c29805548",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67e088ec-ffd6-4035-8fa2-824109e0a1fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e2cf4ae-ffb2-4812-aa5b-5c4d73afb099"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b16c9f09-b272-4d51-aebb-0bff0d4dc8de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e5f6060-c0c6-4230-99ee-928be3686e77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f433e0a-c78c-433b-b1ff-24a0532b1337",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf4e7a90-5105-44f6-b4aa-25bcfe1d7a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e49b8b3-7487-48dc-8e6b-f72ad238be55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fd906fb-d623-47f4-adbf-e7fa9dc12d9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "f4875ddd-df0a-4048-9faf-fe9efc84ffce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e4a777a-ee2c-4458-9149-65220d60ec02",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a2a0fed-fb9d-4914-b393-6088c8e126b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "449b3b46-5663-486f-96bd-8cab8c05ecd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fb60d65-c2f0-4c2b-a9a0-fffd646badac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1e6a838-f220-4544-9882-1f5c5c26f727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83e81af7-4962-46f8-9662-36e55757e646",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3c1fb2e-3d93-4bce-992d-4fd5cbe00cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b03d184-fe8f-438a-9fb3-e4113ba6c12b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdbeff8c-5a13-43b7-803d-e29fbf301973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "49ac210a-9010-4a26-ae47-ac8fd6d16fd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d38fcd-ede0-4381-b72c-230e68f0cfc3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c50eac8-1fdd-40dc-84d7-195d35fd31a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42db7439-b23e-4655-a40f-9a0060e9b817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a3b40fb-5217-41f4-ad89-7aaa407e30d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7fa79426-c4c7-4950-ad82-4f446c6e020d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdb4f987-1c35-48aa-bab7-8f34d80d5479",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32290270-ab95-463b-bc2a-0cc960bfb2a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9051c686-faea-42dc-8fa3-b286b36c5881"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "339346bf-ea51-4f44-b01e-9515c8413e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd602467-ff10-48d7-a9d5-8d16a502648d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca036c7a-ffa2-48f9-965a-dbee50d4936d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "384871b0-5145-48a2-b6bf-2f82585868d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10398f9f-32a1-4487-a806-bd54d52f9576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4979756-1e42-49fe-a464-af133e192fb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ad181eb-dd37-4629-b274-33287ab11ac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8a90efc-b723-40ac-8a35-77a2668f7750",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4001895d-2878-4ed8-b8e4-eafa8cd86355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "609ea59b-70b7-4d5d-b275-4659dffceebc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c502f9-e4a1-4d73-a3f5-03f41fb07aa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "91823da9-8e46-47a5-b46a-bd4ec5758a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "422cfbef-348b-4241-8e22-4845b48fc9aa",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a15efd4-b977-4969-8bcc-805a6848d864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6be108b-efe7-4f4d-8447-84b9e5b25937"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a7a8e62-1469-43f2-b49d-eeef10615ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "853ea7a8-7297-48c9-8a95-e5483db4f9da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4109fa29-854a-4925-afb4-d59528bdce69",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b24a1ff3-0911-4b92-af21-830846b597b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9456aa9d-837c-4912-ad17-046b50c54c11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ac0c162-f62c-4dad-9a39-c426a50b4b70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "61b686df-f578-451f-9b4a-f9a213570020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee25802d-6709-4433-9274-d33a710e7dd4",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcc977ba-3e2e-4426-b581-f88102a5573b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81058045-6ccd-4d9a-8265-0b40bf452296"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac2959f6-f144-4a85-9f08-91e410cd92b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c912cf48-b5f8-40b8-9e25-e93eea37763c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43351b35-2c06-4459-b69a-9b7f0cd35fe8",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce771ad5-eccd-4406-bfc6-8fe557a6f8e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e0d8fa5-7559-4d7f-b885-ad0905b4ce28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca808aed-8890-4d5c-b1fa-4a64b88d1712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e13fa152-0e9a-407b-8b9c-13df33fffe74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa6a610-1e3e-4a3b-ae7d-98dbad7d3222",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc9775d7-016c-43c4-af87-defb21e7f899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20876e1e-4fbb-4fda-a411-04c98ca2b767"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16e74df0-cf0f-42e0-96f2-5198eb3624bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "659433ff-cc57-40f3-94ef-77b42a113943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d253167-d456-4b52-a5f5-54aff7563d7d",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "617199b2-8b1c-41ad-9eaf-11872609427a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3a2f93c-2069-43b1-8ab1-0dba8391a120"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfa66fad-f063-4152-9e81-d68ac3e2d599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7dcf4e53-0109-41dd-965c-59d4acb153c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70c99e97-ff40-48f2-9a95-e94947bcd13f",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac722cd-c946-4ebd-b31a-ad677ed1d113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "677c78c5-402b-4ab2-9c9b-1e3f851a8cae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa7ac908-13b0-41c7-b425-f949e8384413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "722d74a5-2cce-4b61-8c40-91f0629a9045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b02192d-de93-4d09-a949-53ddc86eb522",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "328defbf-02d9-49cb-ba9f-3b7f87579162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c083b1a-f593-4585-880e-57c6ccab5d0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee41ab2-c600-4139-9a05-be2cc3ce5703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7981c68a-d20b-4211-a72f-79ce5886a628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c98e1012-35de-4a5a-b98c-f942500f2001",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f081d500-ea69-4544-b86c-44acfa1a7c5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90be3fd6-9c50-4f37-9fbc-79414d8ac04f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9f46b07-6875-46d8-abf4-f477ade6f22b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1967b03-2760-4b76-9a38-8208552f5a5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf9cdb6e-fff5-4358-9b44-0aac19bfe891",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b14881d-5c7f-486a-a960-8f1fe9dc6a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03d19c39-ec7e-41bc-9420-bc8d7a2b9138"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ee2ed25-3ec9-422f-a7c5-9923bf021d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea33ae8e-d4ae-4652-a9bb-cd2404b810c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaa8cd7b-0706-43f3-824c-c5f9efc402db",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "165b7695-7991-47b2-a0cc-a52b20d99b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "950bd157-77b3-452b-8a83-127e6dbd54eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88695a12-5a04-4fa8-9a27-93d97e6b07c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "56f5b369-2cac-458b-9218-7b5b68e94b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "317c6726-ec49-4045-9b42-bf44e31b8e32",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86d15ebb-3a43-42b2-b7f1-ac4a86d082df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a903c6ac-a668-42d8-b9ff-a8d427db1534"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39240afd-631e-4d48-bd31-feb638f763cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "880a32a3-745f-405a-8b2c-69944f717cc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c46fc3a-db4e-4987-891a-d022a46fd8bb",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82e60d2e-cd4c-4538-9d61-8201c648fadb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a08f42c7-9d43-4f26-8f66-0ed5aefb0ab5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7de76310-33c1-4fe5-a934-e1ce82448011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "28dc03b5-9fa6-4de5-95cd-c787d5a58dac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebdc572c-f182-48d2-8f27-992bc049217d",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf937d3-d264-4f2d-b6b3-2448ef4644ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13a54b69-b831-4655-b8d6-b2eb7494fb5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67aebba7-b4f3-40e2-b22c-0cfb1c7ab4b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd9426f6-e124-46d0-98a8-6f6212e82d53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6205002-af74-44f1-94d4-1dafeec8e2d1",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d4e024-4347-4c14-a25a-e2bf3dddfdb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52395a2c-f269-43be-bc66-03ab59bc3bb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a98fe365-1184-4e5d-b6bc-f60a960f697b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9862438c-ec48-4781-b740-e832421101be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75fe989c-d160-4a69-aa92-d492c7699fa9",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a9938e5-fb98-4e45-a19a-9725836f3f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "417787fb-712d-4741-bebd-81fc44eae5b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e00f26dc-b6bb-40eb-bb51-1c9f44a942a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8696389-ca98-43bf-9a28-a21278ce8b20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f03be49f-9f7d-4ace-b598-2452ce8a28bc",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adada99c-9ab9-4500-868d-4b58b973b760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef8ea10e-f305-4e7f-8bc8-9706f6171317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c81830-51f2-485f-b175-7ef7fd44943d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2b06b59-386d-4aa2-8b9b-27e9bfba1f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "993364c2-a67a-46d6-ac88-e3bdd6111730",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae4e2bcb-ded8-4ff0-8146-188d85ef3991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48f1fca6-d38a-462c-989f-898ba85392aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d3159fb-3cbc-4140-848c-a4f28ab4e21b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "538e889d-9731-45e1-872d-bc7eb779b0d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba7a08a8-1388-4b59-a3c5-20e1005f9929",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ec86014-73b4-40a2-8828-7b3c548d0ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b013540-0da8-4254-83ce-d8a7df58d956"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23a21f87-3708-4e0e-9efe-0650a1aac5f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "34b83177-f0b5-47d2-b154-ac7d01b99059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92fc255b-8c3f-48ab-b76d-f4a814c22aad",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a38a9394-e91f-428d-9b62-36a745bdc6e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "940b8205-e075-45e7-969b-86c960d6ae8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f8eea59-e465-4bea-9c8a-2586e49019e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0108f29-65ec-4460-b1d1-bcd16bb91498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "387a307d-6bdc-4081-b67b-991f557d56b5",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c4e9837-f280-4870-9750-a7d715c8afad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a442a375-1cfe-4a51-b774-bd4d6211d3fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f51c3c22-705f-4c03-a540-71a1c623cd8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "79350cde-3928-4599-8631-2be58014fb72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db1a03bc-1411-495b-bac0-410b924a9c00",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "859e5949-974b-4c5f-8f6f-8666aeb034c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aab0265-5132-467c-a278-ac29e034055c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f835e5-9193-4659-bc2e-b986cad0e8ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7a3d036-5acc-4b97-a922-d9de31360a3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed00175b-9eb8-4238-8c08-b01e1057f695",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ec56c8-b04e-46c1-a991-1f8c0f43047b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "266c1fc9-e07f-459b-b419-1c33a8fc0009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff2ad19e-ff1b-48fa-a26f-91c8f451e1f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f851876f-4c65-4e42-8a62-581954fa4b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0b94ad7-7e97-4b65-854d-9953ed241247",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e3537f-df54-40e4-89c2-09946f42f244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ae505d2-6ef6-49ce-8af6-4f340ea48e0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17563abe-001a-4981-8748-faceaf954b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e67aa48a-ead9-47b2-ab13-4984cf3aeddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca93aed1-c766-46db-b244-3b4e56c92e27",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a3f537-c541-453f-8cc4-226e4636ebc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f394639-24a4-4948-b2e5-14cd8bc6dcc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f8f7d48-528e-4094-a2a8-925357816517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e1fc765-5173-4069-86c8-8fe365f67ebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba9504e9-31f2-4c55-8c0a-29588d1e31db",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4130a5f3-5e46-4e27-86bd-ce78b86f441b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "862cafad-67d8-48b4-a91a-1f01c6422ba8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a721f85-c22d-42bb-b469-a9799fedc1a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6abc79d8-8057-4e90-bf6a-e6bbee99dd5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58263184-28c8-470c-994f-0744c66f17fe",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df7611e1-8e59-4a3d-9dd4-a8810f10944f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c236be6f-ca6f-466b-80d2-6e85a82807e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc140a45-3510-4b8c-bf30-9f455ee15341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "267f15ca-836a-4f39-9f6a-f7c24bf0ea03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17b689ad-2336-4a11-ac56-3a11940f676f",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ed1b234-65db-423e-9433-347ac91fbd65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2af93123-bc69-42c9-acda-fdb91c6c7f44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af2ecf67-775c-40c2-b007-687560723f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0c90bde-5575-4234-a3f5-c5a0dcd13bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ece36ede-e0a8-425a-a9db-ea1e67eb5e28",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6992e45-8123-4364-b710-6a83c147b8e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2913940-1fe9-4acd-a998-bdc81ec8bc02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79008744-417c-4d7f-bd1c-036b1b716dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "08f8132a-8fa2-404c-b8c6-ffb2c3b4afad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52095509-e6ac-4e45-8bc5-0910e9ccc726",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb3a5f3-8307-416c-8dba-cc83794a6bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d2d2278d-a11e-4c2a-8c08-2a735ae6fed5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f5534d-70e4-467e-a304-9042dfd1a97e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "358b1ded-9bbb-435b-b181-fcd1bd35a298"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9fb5ec46-5c24-4cfd-ab95-3114e000e9f1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1690ca29-44ff-4e7c-97b3-20becb16dc36",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed544228-9c19-4a0b-ac60-20de8f784061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7618395c-cf26-4ad8-89d6-938ff7989c6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac673ae1-41fb-47e9-8c77-cc5b09cd4ff2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c67f29bc-768b-4f88-aede-b6ea1796c506"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8fd3531c-38ef-4de5-bb87-f77cda26f2ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e656bca6-0e7d-4b69-bf40-b55c83b31938"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "78c0d2fe-1ef5-4ceb-97d8-fc8ae741c7f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4cc8c500-39eb-4962-891b-36f9a33789c6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dddda716-3800-4e13-bd84-004cb97ea8df",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e93f3695-bc5b-4833-a229-338d637496ee"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f1b6cb68-5429-45b1-a6e7-66516f868470",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "64246ac1-936e-42cf-a34f-bbda3c6730d4"
                }
              }
            ]
          },
          {
            "id": "275cefa2-2903-498c-a0c2-d8823846ffe9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "999c9c2f-3431-4306-a3d6-6bfbc43e1dc6",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "a834930c-d36d-418c-ac13-ee4912f0e8d9",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6c18531-8762-4263-8f34-5c9b585a421e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0957e2ca-3c70-4f1b-8d1c-0ce28f5b36e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e635dc5-9b6a-4cf1-be7d-0238995fa7d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f80ecd8d-be0b-4947-9b65-65bd26050b29"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e4bb6171-b434-47bf-b32f-2efbbd29b413",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "876042ca-3174-4357-9d6f-14cef4eba804",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "58089ccb-dacb-4a2f-b042-8e2abe714794"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1aeba56e-9faa-454e-9df6-d28f30ce9000",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bf5b786d-863e-41d5-820d-283c676bec5d"
                    }
                  }
                ]
              },
              {
                "id": "c0145f1c-05cc-4a45-aadc-c9369f244a74",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8403019-b564-4b14-9db5-146b96240f3d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c2b8adb1-6cbb-4cfb-b896-333c0fa9da34"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f48365e0-42fb-4ffa-8f5c-2d65d163353e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0633f782-565a-4776-a122-cdc20af6d140"
                    }
                  }
                ]
              },
              {
                "id": "3edc154d-9b4d-44cd-9580-ce3c77fe58dd",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "acc5b3b1-2f97-42c6-803b-f4926f6a1f97",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cee7c387-8d72-4e60-bfcd-d0a55e0076ec"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f64e51a9-90f2-4b9b-a195-be15c07d03a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "18f36dfd-b54a-4a48-9936-4c94ac017b7e"
                    }
                  }
                ]
              },
              {
                "id": "2494fd3a-2c83-45b3-b88a-d7fcd6a1eab7",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a16b783-8822-473f-bb49-f57160afa44f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cb3e0190-d848-4df4-ae76-5cdc068f6de4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb855acf-3b19-4955-820c-c9ec2c72885c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "a4191d69-90df-48de-a759-dfbac2289e0e"
                    }
                  }
                ]
              },
              {
                "id": "38fc9d58-6d65-4e20-a53f-b217d917fcbc",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "179d7a6d-fc0d-49e8-90cb-e3fab114df68",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "feca1a84-1bb5-4e2c-9364-2674b946a02c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "09190288-58db-4096-894d-633ad08df4f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "faeea4ee-de97-4302-90dd-8654153f16da"
                    }
                  }
                ]
              },
              {
                "id": "126ef05c-d4fe-4a80-8697-01e455e74c8d",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8d55940-9532-4e69-a0c9-1f639b62a666",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "35a88aae-9eaa-4f6a-8f2e-6d1c674cbfcd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "80b1ec88-3ad6-43b9-b75a-c77e5bbc0606",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3e2970b6-c722-4a0a-9ab3-fd2063a1648d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "90651c63-509c-4b1f-9b61-cdaa8886c3ba",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "75966b5d-0ecd-4eca-8960-1ef0c3b841f2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ac309654-3707-444f-868b-fa479fb418cd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f082b833-9887-423b-86a9-5aae358326a5"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d07d6dbf-afe4-483a-ac96-35b7faa27013",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "7a81faae-f417-45e8-b29f-ffeb84484727"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "08c4f106-3e7d-4203-bae0-7ffaed1423ed",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a3fdc83c-408a-4790-91aa-58dd0bd4300d"
            }
          }
        ]
      },
      {
        "id": "eded1886-5520-4e97-a673-1f4a120b30b0",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "4ea96cc3-8be9-4d80-9e09-091e85f2ce32",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f521bbc1-7442-469e-b4c0-2f7dfc848134",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8b04b7b8-5799-42f7-99a7-c7b22735003e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e2f96a3-b392-42ca-9093-52b805cff860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a7a8a69-e16a-4132-9316-358e2417b329"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2febef27-cf94-458d-a956-41770bd55b1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b625e121-78be-4d12-a77d-e506a82188a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "325f1dec-a07c-4536-8021-05d7ea57afb8",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f4fb96d-3590-4be6-9aaa-d5a233300fa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "738eb703-5ffd-4906-abfa-043a8f18c19d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c6b1bf-b6d6-49e9-a89c-ad37c8e331f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "624baf56-5191-4cc4-9845-4549886dc2da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb9ec0b1-28b5-4571-8e01-e7d63ba19656",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a01b0ec8-6851-4410-8a44-4cfd61768e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ae975e4-4bc2-4101-936b-6163a38b7652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b979f8a2-2eab-4d5f-a2da-aed276eaa203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c470ca1-35eb-4544-b989-b54e61df25ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0bfadaa-c4fd-466d-84b1-049b529f8573",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36b05e1c-a8c0-477b-95cb-9c5eba6480dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39f72386-a25a-40dd-86d8-aef9586c8e46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ce667b2-5b84-4d2f-aad6-b460d6430224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "92ce25ac-ea14-4171-99ad-644794509ec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dded4dd-61d9-49b3-896f-c776c2e53171",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "493e3ea6-117c-4515-bcbb-e6a80ffdf8c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d96ec67d-291e-4dcf-a286-d5854738be47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75443cc5-0212-4fbf-a2bb-440b8564a04c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "152af82c-6d72-49ff-9edc-996a8e4f7597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "096ddcd5-c5e2-49fb-acf9-6dac4c53aa91",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7664c1e-ec35-4fea-aca0-4b9c7675d5a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03d1222d-a94d-4ef6-aeb3-2e70f16a5d04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "174e5bcf-6e6c-4071-abd1-aef93f2aac03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "882f976a-8108-45c6-b000-2ca8c6399e11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0983b33f-ba8a-41d2-a417-4fdfeaa9b2c4",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fad91df2-8fb8-4459-ba70-69a74ffdd0e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e93f173-03b5-48bf-bff1-21160483c7b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3b320cd-327a-4fc6-b56e-ca05926954b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b27fa8b2-b786-4d94-95d6-aa70e1e10f5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2ef2577-b183-48a2-b5de-dcc34ed3299b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e5df786-0697-45b7-ae54-51af7a08c0df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33c79c5b-ae0e-4167-855b-4e05d8ea9dff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b736cdb1-c102-41a1-a532-a139491b93f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "739a26b5-7bbb-4fc1-9a22-13ae17bf254f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a653feb5-50c8-45a0-91cc-28291d0e39f5",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78524133-b381-4c0e-9e0f-a7f801688ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4176a85-f67f-4335-b1e9-7116a03b124d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c640380d-cc7c-4648-94c4-248d140a7ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cf15f39-af88-4ae1-a66c-b6a8b19e5d6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "258253e4-ae33-4b4d-98c5-bc96aeb80c3b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f51af685-c3f2-4eaf-8e2e-a21e556c2cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a488435c-0f69-404d-a8e9-d174acd80a6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e81f354a-4b77-4ca4-a8ca-e38684f60328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "32b9ca83-f310-4e59-beee-06d7604dafa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c49c5b11-8c84-44c6-8b1d-d58dc731086e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ec261b0-0587-4b74-95e1-c535812b320a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c49a721d-49ca-4761-ba2b-b64e1a91b5c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bda8ced4-0e21-44c3-9563-f22fcfb915bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f9b41ff6-439c-43ad-b272-16eed60df940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62ef376e-8b45-4d0b-a00b-5085073fa726",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "999fc247-2b98-421a-907c-039ba3fa8d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0960dd3-2462-425e-b7b9-11f1d464a2b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9467a23e-5c6c-47ac-9040-ecab32f3882d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "49192645-1813-4d41-ba7c-33923cd232e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4d2580b-4841-4cfd-8600-38061991c8f7",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db1b0970-4a5a-413e-9904-a1b0c7012a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79dd5ca7-053f-405f-8993-9006ad6c3d04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "675d5015-aa21-4e19-8a53-7bb1a8c1401b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9c57a96-9649-4a53-9767-26f3a564eeef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97fc0d75-58f8-4431-92a9-05057f746b6a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94eaab1f-e8c9-4934-9714-fc2dc579a1eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c1aa906-a9ab-4b75-94ea-4dbe0fcf9ff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f89fbf4-aff8-46e8-92f8-6827a4c299a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "b61bee28-f8b3-43ea-ac2f-7e4ac9ba436e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "255b7682-8490-420d-b946-94f8b28f7c12",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3155c84c-79bc-4d30-9b98-2cd5f488e8f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41049229-a102-453e-996f-b0f9b8f19649"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4ea1748-ebac-4eaa-b1f2-f155a5c23011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3359091-eefe-4915-bab9-65652f5d5e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "678bc22f-5143-45d6-b49d-bdc9576c4cce",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7716b6e6-2c34-4b45-9e6a-1ec438f81f5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70ab075a-9b4d-4ae3-b8d7-9b7b6d71662f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d18ba8c-ba20-474b-be72-6e440d74c45d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bea80b7-3b7a-42a5-8991-3eb8fc6e6be0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b1e7bae-6a89-40bc-871a-18de0eed2e9e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83feccdf-a74a-4c75-8c8a-aa00aaeca31a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f51541a-2c00-4ecc-beaf-b46e71ce2282"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae802fd6-7361-4786-80fd-fbe5aaf6d1ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "28248279-965a-488e-bcc9-04dc5ca5c08c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acb9c904-e660-4666-b624-f0b4585310cf",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8370c462-2a89-4714-bfb4-0c1fca904e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1f0ebb2-3a30-4539-8225-ab4d67f3db6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af6ca64f-7dc5-4b92-8201-ea6b4d2211f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "81ce7226-aa27-4e82-8d6d-9e923765d735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1b6baca-5efa-4bb9-8e5e-562e01a77df7",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "380457df-62b7-4d7d-9596-71ac422c7494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c41d0377-510c-4159-8c61-ba7689b2b9c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "422294b6-a3be-4627-91ce-ddeb093b13a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ae1f890-b692-44c7-b0bd-9b530ee4573f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dfe9e62-31fa-4d4c-a889-919372418521",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a491e50-b1df-4798-8ce4-01a23da12a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2baf1b5e-5321-4a41-8e00-ba9faf83908f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9a2c0ff-b8a1-49c9-93c0-1c75abda95cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8f306c4-b3a3-4fed-8e1e-6c103f6b188e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3955ebca-c049-4eea-80a9-69adf17c1e84",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ad56a4e-a019-4467-87e8-14bcfc3c55e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c3b3670-8cf1-4f3a-a00d-afbd24fdd20f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ffe26a1-f62f-4da7-b37a-ed42060114c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cec2bde0-aa65-4349-a04c-ba70146cad7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f62a979-59b7-4150-8de3-cba55ad3ccd4",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bba4867-ce73-46b8-b523-12efbfdcf526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09add917-7d3f-4087-a93e-a71b3ed2f240"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e23608c1-188d-48f9-917a-3a64ca5a498d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26bb99d6-e40e-4347-81b1-056181bb32a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abb4fd79-d870-4e34-a64c-05b776e04722",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91e4b304-5c51-4f81-9cbd-f1bcc36d9e9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f7f664f-f482-4c79-b375-eca46cf04ad0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd5b608c-482b-438b-bce3-d667fbc7e263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c56c3f15-ca2a-411a-94e3-f98182d924f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7276de38-cb3e-4a5a-bce5-87adc4ec1fb0",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2448e477-43ea-4f8f-8402-7af0d43541c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dfbc48a-3418-4c1a-a6d7-875f122d9a23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd65b776-01cf-4750-8bbc-d57f3233dab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2c0bde2-139e-495d-8b82-49323c7d8db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d172b7e-0095-42fb-8a07-b0db705f8f53",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "222be242-e7a1-460a-94e2-31603a9cda6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b37755f-9b5b-4795-b605-7cd19fc6594c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4aa6371-387d-4ab3-8ea9-458c0a60efa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9210714-4954-4653-8937-b633a17e03ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a548bc5-d2c6-428c-980e-6d5d29864403",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b75d1a-0462-4eb5-85e0-f939eeced7a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7225334-9e3c-41b2-a0db-90c7c12608da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e7e43a-5830-4ca4-8df8-9bc920beef73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b28a35e6-e5e8-4ebe-8612-300185a59a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b1f7dd7-1fed-456c-bdb1-2653e8670120",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d866216e-7368-4d85-aebe-39eed468aa81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8552ec9-3ac2-4ffb-b35f-56cd35be272e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e8732a1-6b77-4f40-9c54-bc7150a99afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97e0353d-249f-4b17-89d7-2f650b451d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc188c12-d22f-4377-8729-7f0dba81311a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a22284c-031e-4bd4-b2a6-c89d0a325790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b11d1c3-aa46-40ba-a069-d0df59eb42f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d14795a4-310d-4258-824c-5a708c85e5d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7c4c7d0-af66-4922-ae9f-60aaf0d8aa14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4e25aa1-e272-447e-8fcb-38aefd6c4dc2",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6cc96ce-bdd0-4048-a3ae-3a6a60ffe09f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12e2b260-66c2-4dfa-971f-5a63fee62a76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ac8abce-3f14-42af-af05-e581affe9b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6db6aa4b-bdc4-49c6-8aa2-accd309841a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56c5c0b5-32db-43bb-89fd-ef5c6455ae60",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e3bfc24-771f-45f4-a6f2-beeff69e0ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2129ccd9-0593-4a33-8eed-902a40102d83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be679a16-d215-48ef-8382-15f4a0c25938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8190c438-f9a1-488b-8ce0-4bb7d1338ae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "629f2954-78ae-4cb4-b5e9-40470cdb16de",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "218ab905-0190-4dc8-af93-db370af44868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b0668e5-8fdb-462a-a20c-8e9bd8a40772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05dc2ae4-c9e3-4f67-9276-9296a92ea1c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea4eeea6-af7c-4737-9930-0d3654ccea3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d77d87a-dc1a-4d0f-8bbf-b6613eb0e3b4",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa9462df-7082-4f04-8fc1-522265dac706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9658de6-dbd3-40aa-9ec0-68da20ae16f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd8fe2d4-1e92-468d-86f7-2f2da1075968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4a3c619-aeaf-4afe-ac66-06ce7b3cc071"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "350421b4-510f-404f-8e4d-7d12f7e6853b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "084aed3c-7e85-4c42-a773-7d45c1445f1c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a2064b5-7cc3-4a31-a411-c73220bde2f6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "1b5ef8aa-2ff7-4430-b0c8-81ad07ddbab3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "581dee21-c69c-4507-9f92-3de4ba921a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2be7b6a0-6b84-42e2-ba10-8e8df9c11e13"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "27345c7b-b91d-4e66-912d-029119866f0a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d543490e-dae6-4ad8-a9b2-6411362ce9ff"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ad5d0bb-147d-4944-b7f1-7ae087f113ae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e3c09a63-e27f-4e22-9584-a522f78e1ede"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "23ffb8bc-6b35-407d-bb30-c642ba7d293d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "45bc1bd5-db3f-4b7a-ac77-c66b560c7f32"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "97d4419d-5e0c-4c5d-8a20-7b045371ce94",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e1b7e685-53fe-479b-9858-ca6a19fa20a4"
            }
          }
        ]
      },
      {
        "id": "1fa81657-bba6-4fae-8efe-cfa39c623e14",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "3f9f212d-d031-473a-8222-62ed02083ef3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "23cae972-bdd3-4541-a680-1bc4d4421dc6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f300f3d6-0bf4-46c3-8b45-a216cca22a03",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa8b8e22-a792-4d5a-a7e7-3fb5060c7655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7be68474-daa3-42e5-8584-6e8b391512de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b98039f9-c160-4a7c-bc14-c08b593866e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "96de91e2-2db6-4780-a81e-b9f62dbfc178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3994fb30-159b-4b14-a671-dee983ed1040",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faa3eee1-dfb6-4c24-bd34-24183811105a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83b200a7-5c10-49ce-b7d4-6127c5adbec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c65a0ee7-a774-4aca-b63b-27d4ff4b159b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b696bc6-7a53-4c47-bb99-0fac6e8f373a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82cb9598-adde-48fc-9820-30ac8558c47b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf948d15-7ad5-49f8-8613-cc80c4066e1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0c16607-e621-4a7a-99a9-386d2f37a824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a629d2b4-4423-4aa8-8d76-5641e8faf1ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "210ac1b0-e73e-4a8f-beea-c803989ef18b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4924c6d-84c8-47d1-9833-93834ad56fe9",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bc3c47d-721d-49a4-ab59-8dc54c2aba0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d212d3b-36ca-40e3-848d-8d509fd5b04f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e8cc156-18e4-467f-bd4b-e1fe1d4653ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2715f237-03e1-4459-8f0a-382b7205a6d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f109cbc-0a2f-4915-8bcf-e3d4558d6b9f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12cc9d1e-2325-4360-92d4-dcf080a0acd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8cb7f76-9097-4912-9eae-f4f990d14b7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3220840b-2a94-4de3-8ed6-e3a9c91fe718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "20f9facc-32fb-4327-bec1-edf3591e1233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e087660-c11d-48fd-adc2-d644b2b24482",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a799c038-bcff-423c-82dd-d88dc5140038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bd97097-bb8e-471d-9e81-856b934c7693"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7edc8032-7aae-4c1a-8bf5-642884ef0182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8e75327-a429-477e-a0de-56451106b29a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65816dee-8aa4-4b5d-a3dc-821ab31cab6f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98a80e3c-ed39-4aa0-a3ca-c747c4c7a14b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca2c5642-777c-4103-a488-d446e31ba093"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e21e3e-1d36-47c3-923a-39b2e029d41f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "291e693b-4a76-4a41-a8b7-b9662cc1ab88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1a0bd4-1100-4515-86ad-02a9beed8de5",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f5342c2-9a12-4f89-b91a-472cc9decede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b890a65-7235-4814-919f-ef291d47fd73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff007666-56ad-4961-9d38-776ff9dff8e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a52fead3-ca21-4f82-a33e-8121dda7ebe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd236516-c1bc-486a-8aa2-2ad80635ac59",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb74a9db-7b49-4d91-81cb-cfc160797250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25302b43-a211-415b-9cf1-ae265e396891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a74badb-c1ce-4d93-b33d-862422f136d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a02666f-2cbb-407f-b950-60278e525f71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20af6394-e5a9-41ce-ae72-196084bfa1ec",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa0de10b-e9ac-4c8f-a347-00ad6b5ad462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c169498d-03c3-4bae-bcc6-bb1222977ee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f8f0a2d-63c8-4af8-93f4-6b71f53c52a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "189b0007-a4b5-4361-8d99-660c201f8b5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbbed1be-3a73-44c3-a857-799b58dc9002",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b646220-4deb-4f61-b7c2-988c26a10583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e688d27-7d6d-434a-9858-0911e13348e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1690ee5d-3a99-4167-adf0-f291e94c2323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "14c85ec7-8fbc-45e6-bbf8-7c7d8c626af8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1f910af-c3d3-4c3d-ad07-3e8c206219d9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f273409-6028-4301-b35b-d97a82e38dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f482f05-5890-409a-995c-f1e37f23cf34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b1f7836-351e-4332-844e-7100989e9520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5e96b52b-f7f3-4289-98ad-71729d43834c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74a8d4df-3159-41ea-ab7a-7a0c559a6b90",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "171d7b2a-f814-4822-8bcb-3438ba3e4c37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bae21a3-f5bf-445c-bf44-e1a10ae85f92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1376aab5-e47d-42bd-9804-7dd73e63f33e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "952266d2-b190-4159-bbc0-f4805b3278e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21131449-18cf-46bc-b2a2-a85ad2e4f4a3",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aaaf1a5-6a59-4745-aa70-9ef072ba47a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7040be4-ddae-4ec2-b219-04b423fe9b0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d28ae3ab-4746-479c-8bad-cd67c160f5fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2baf6aa6-bdd1-4992-b540-4b9e35ec548e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d026ec6-13c7-4611-aa99-557c0c516547",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25fea9de-4e5c-4860-be5c-49fa795225d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd82f7db-4dbc-4f23-a879-9b40b4daac5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75d9f991-0ced-45fc-a39f-b7aeb65754e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "94cf4f96-04d5-4251-a6a8-b648817f3464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ba1340-6ab4-4e9e-aeae-21c14a9d18f7",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb529110-c346-409b-b29a-5a13f6e0d298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22d9b08f-5a93-4b61-addc-02e6a0684ceb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e148fc1b-dbe2-4c86-8c92-d6f901090dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f39bf66e-4203-4ee8-813b-51f4a36ab237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a9a589e-98a8-411f-a2c9-e6a583e9e697",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a63bc52c-ddd7-409f-967c-eb4c2765d65e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1061218f-e858-440d-a700-e097cff9d4aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d404e8d-6679-4f65-a293-d98b4808c9a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c3946e2-7895-42b6-be35-173c96ef606e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "239dd5cc-7dd2-4d3e-be47-6eef8acd6793",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acfd2092-41c3-4914-a257-1a50b3afd2a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "688694f8-81ae-4cd7-b166-d1379b719807"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b9b41f-06d8-4a96-b4a5-bfe6078a4bf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1da7fb6f-036a-45e5-8edf-c29c373ad14c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d07c1604-d5a1-4ca2-b91d-2ea666a1008a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b7dd90-559b-49bf-9b3b-43306f78c4a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cba09a2-daeb-463b-b2e0-f28316941a99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "352f77cc-ddd8-4d2c-9086-ad0215f68949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c906e0a-10b2-4caa-8325-bacc97bef4f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd8f6354-ed3c-4fa0-9b94-6fefaa897ac0",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1609bb-5a10-4e02-be95-f24ca0b1726c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c58bc25a-22c4-4731-934d-1da0f86937d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edcb7892-adde-42de-b9d2-16e944b8c7b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40bb1344-d250-4907-9161-627902590ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86a3018c-f9e7-448e-92eb-af0eb5ed1ee6",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b0cc9c0-3ed7-44a8-bdcf-0b9da043a7ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ab6e43d-cdd9-4c1f-aaf3-68519bc9f65e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6791e1d-0f5f-432d-9f38-554b6262d800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5f05170-f13a-496f-a35e-250f85416e17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39ee2c52-6942-4109-9b3c-0fb14cb5b60b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c4c7839-846a-4415-909e-068ad6bfec42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54f3f5f8-f74e-40fe-ad92-e2ed77d26bd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fedab79-f687-4db9-b1b0-c5b21c7a6da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbd3edbc-8049-493c-8ae4-497ead3baa7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8070e3b-a15a-4d35-94e6-3a9b6dda624b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c2243e6-7c77-492a-8ca8-14e81f74da7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bb6d02e-02c3-4cd7-a793-8b4068b292f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13496490-eea7-4126-b5f2-bbb080042337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57a204ca-02ad-4660-b33f-26dfc54466a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "770920a9-c2fa-4207-9bed-bd3d1a684a5b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1095df-4e66-4e54-bf34-0b49996ea415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da0c4b7c-e3aa-483d-8f35-b8a4dc159816"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c6e2b71-bc3a-4570-9c61-6db38a512908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1ff7885-06be-4882-93b0-0e424c4a3345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a31b0a-7b42-4c64-bb42-1bc803e50eda",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea0e7caa-ea44-4055-b34e-8faa154c0486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9d7c694-835c-4942-8d47-97b60c94fa2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e58284-7a69-4304-81fe-27bb1c135478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "992e35df-4763-4a01-a8ca-9f52ac78d8c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c137b6d-7eab-4be5-81f6-caa5a5fa18c3",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc4eb7b-4324-4674-9561-a1cb4e213e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90568fd0-7b29-478d-a71b-8b8b49116488"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe67c991-9303-493f-83ed-2d85355f6462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "92be2f6b-3516-4b5b-8c64-2618570ed1aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbb2fc46-d7c8-4540-ab5a-4b4649153fa2",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62f1e082-0e47-4447-86e7-a2fd43844b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9347a4a4-bcb7-4fca-a1ac-2bec795acd8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0ec404b-5706-4ab1-a996-d1c18ef1b562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fee6968-6b5e-4acd-b2eb-8a02d8d20c44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6958bf6f-bdb3-412f-b262-58f6b795c077",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "774bd2ad-387e-4628-9732-d4bd9a7584f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8377c303-c16c-434c-a6cd-c9f29bfd0277"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0994115-35c4-4a1e-a7de-ddab2b8df51b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83d2f52e-7430-4eae-80ce-81fbd2ecd12c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b8763f9-170a-43b3-bf5d-e2ef4ae84aab",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "247fa67f-133b-45f5-8dae-92d9c057c5cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02588850-569d-4e63-b554-d1cd183691da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "504bf4e8-9fc8-4c06-93b2-00b8381786b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "605ba157-f025-40e4-9b96-2b3d049e97de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcfcfe9f-8bb1-41f9-8591-acb6b7b62fa8",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "056722c8-a8d5-4c68-afb2-2213e293a15a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1dd463e-8d4b-4fc7-9028-cf32af2595b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af73fef-72b3-4b4d-98db-2a371fbc6135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "19334695-bd8b-4b28-9a5d-2568fa393924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2514d93-6289-457e-8589-c4fb8a658a94",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d56a9c7-f0ec-4664-9a82-be619941da5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7069607a-b6cc-4ff3-a321-3c0f76f57616"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c8891b0-6efc-4ff7-96db-c43f0deb473e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9066680-d44a-428f-ac5e-744d3483806c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53a8eb80-ef85-4e52-bfe0-27459e4f7aa4",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9472f83b-a807-4202-a8f1-986932abd4ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fc89b71-d3fa-4fd0-8407-19ebea0d4468"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff8d97d-a3d0-4a63-ac7f-fc4aa2d8ba01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8e838a7-8d21-4f60-ab51-5aaf9ca4d0d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e706290-cc64-451d-9b47-e3b887afd617",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a26c4bd-3774-465e-90da-1f2295521e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "181d139e-bc29-449e-aaff-15b82b294008"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c7eadf1-dad4-400f-8181-ed8a3f070d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ea8544c-2fac-4b3d-b09c-0340ef8123b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c8fc18c-83a2-4a7f-88ec-06143148ee5f",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c8891c-234e-4cd0-a985-5bd288221e9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e7eb2fb-794e-4ac6-a106-b97c491f56af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de71b42-2f66-49e6-b23c-01ec921c403f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18d3b6ac-fa9a-46a9-ac26-8767f22f9a9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac07bf0-ac90-4f0e-bf27-350a5bb58411",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fea97e38-62f3-4cdc-a40a-85ca399c7976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fd8c75b-7aa1-44e8-b8de-72866ec12fd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63fa1cea-e9d0-43af-b25a-9ed8cf6c3ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31d672ff-e3e6-4d65-bf61-ec24e97a5360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49ae66fe-02fe-46da-a22a-01c8dc3a8b0e",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "476ba63a-3d2e-455a-91ce-def707302745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c718e83-0f3e-4581-827a-12040e156365"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0746146-aba7-4c36-8652-dbe657dd1e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af23800c-7039-47ba-8d44-e2d15a1fb34d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af558439-d28b-4622-97c9-a51aaac43ff5",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ffd76b8-be9b-4b8b-b810-f40413ad592c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9673a535-b283-4c78-b9d7-c400fa88a4da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9788ad1e-3de7-4b74-b805-5f62540f05af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "598caa83-b9d6-4098-b967-92b8dc97e33a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b08f918f-69d8-4d51-a9dd-52f165f8801e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c82624d7-b47b-41d1-9360-67476390b1a5",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "566f4b49-d450-4432-8ff2-0c779a5bb2ef",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e00266ae-8652-4928-a8db-a8121670c541"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d25a8070-196a-4234-87b0-ee5f4ad9ca41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1318a0cd-7354-409a-8cc7-7d06e51e32ce"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "44ad7ff8-3319-4c41-b99d-46aec514882b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "18f5440b-89d5-4cc0-8c67-30c9027fdd0a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "29046444-52c2-429f-a88f-3d4f2f610ff6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb75b3cd-46a3-42fa-bc83-680b149b0abc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "19798c14-4dbc-4b9e-bd11-6c55778052e5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4a928902-2e2c-4c23-a3ec-baa51b454ba0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d55baaeb-3f8f-4dd3-8507-c6c22cc4896b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "193755c1-0e21-4607-be75-fc0d5086e38c"
            }
          }
        ]
      },
      {
        "id": "1c2786ac-bbfc-4d99-a41a-f1263e04cd6d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "d7d14dfa-e83c-4479-9916-a62eca56e1a9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b91248b2-cfa0-4b64-8b29-d6b954bf69ba",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3d0aca88-6dbf-4b7e-b9ff-61efc953e1a6",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26a22b24-0948-43ff-b1b7-5c4013c54f07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a8588c7-d244-47d9-8d24-ade61a68f171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7939816-3220-4269-9ea1-36b7e7d46864",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02a08b15-13ee-431f-a3a0-28e5f845740c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a252eb7-fc64-4552-a7ab-a9879fca9f23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cf956df-5f7d-4073-afe2-c0efcc888dbf",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae562bc-8138-49b6-99fa-6ada55c83e0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87c82750-86e1-4bfc-bf7d-bfe01c3943af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc65f9cc-baf7-45ea-bf93-6da84fa2e19c",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "294ea248-6edc-4789-985b-8a3f1457d38c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1369477e-927f-4a56-ac83-432cec99f0c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb917883-73f4-421e-9d3c-8515e905b572",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35284cfb-cccc-4de5-b403-d2aec31f8af0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f43cfdd-e8f5-4bc8-8f52-86a4a5d77c86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f76d626-7b5d-4060-b90f-ae02400e6008",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f54d4e-1745-4d41-9fd5-fd14144d945d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e17d42a5-9294-4963-ac55-407684da8f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8587cda-be55-4488-bbed-7ee7bf02ba2a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c469d3-7db1-40e1-9d62-967bb2a9349f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74756430-58a1-400a-8c7c-39701ebe7cd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6528b241-1090-48dc-9fc3-291dd69a5663",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f573a523-6a6e-4f57-abca-ffd6a00a98d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b76c912c-8ea9-45d1-8229-a3ff421c6d84",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c1c4ec5-ebd6-4c6f-8155-2ae41f5b1ed4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9dbdc60b-1eac-4655-9e90-42d68c1d3dc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9dab718-5a08-4b38-969d-7ad79852c342",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c34c7e5-406a-43d8-a370-6b24d6c018d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f6e2d59-274c-46bb-9164-17b6a04f6682",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60df40ce-099a-4edc-b10e-f8d9c4818369",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fe6d329-7a4d-42ca-a88d-5d3a4c740b81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff3ae8e3-5ae6-4381-b6a3-2fd6b08f8c43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "641d7977-4fb2-4ada-b394-e5a1b621898c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8212d94b-87b4-4480-b438-6f43b69c5da3",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08045f3a-ef79-4b7b-8244-4ef70d7d1bd7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4de3437-1f0d-49a4-89a6-9148ee6d7a6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a74c6072-b663-4d1c-8bd4-ad33e91be176",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8530e2aa-4d34-4b5a-9bcc-be72490b3f4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "334cae3f-bac1-4ab8-a46b-97dcf86fd0a9",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd487746-d68e-4181-9fc5-83ac977aa021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "183f11ae-3699-441a-a9bf-50bcd7fa93e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b49a963-0b15-4969-b5a8-9d6ba04aa585",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ec373f9-3a1c-450d-aa03-c16d8eacb52d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de2c3597-7ddb-41df-a605-647a0b0e0cb9",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69918763-3a52-480c-b774-4ac2faf7ee69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ff094c9-dd33-447e-aae0-2050114cc80d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45598040-3077-4fac-af16-54b6a3efb0b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fc196c5-35d1-416a-bcf3-f5730d517c6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35c724de-1c96-423b-b7bf-e95801d64d8a",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2d37071-39fc-4cfe-ac34-1aecdd610939",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6e93208-1e92-4710-853f-cf115593fdfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aa185cc-d52b-4e04-980a-40f254fc9112",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ba9fdb1-567f-4740-83d1-2f18109fd305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf4b8afc-ca6a-45fc-a177-1373d302d29f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcbe7be0-e76d-4ae6-bcd5-fc70a75840c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83b78e04-a07a-4f90-952f-f81f070d942e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83427e24-5a51-472b-b47d-7fb1c80cc5e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df7ce4e1-cee0-4322-b42f-38e36b0c7210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0620a5d2-8049-4c6f-9a97-80ed5a4d3dee",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d36f7e9-9817-4ac0-8c77-9253b15f2529",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d63d12f-63f7-4e9d-b7d1-4b9c0d2377bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "172a7d63-db1a-4c35-8a89-aac5c187821e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3934b170-128e-444e-923e-eb183cb7efaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "723c3833-ce46-4992-afdb-9c975ea11342",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ba3f451-77ec-4b56-aef4-e19b2755f15a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c82e3a61-3d65-40cb-8ef5-4156aa5f0b46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ad74ab-0821-470d-b576-f393e5efeb86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "308a9aab-0d81-4dc4-a06f-cd97a055c77d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "663ed614-9b10-4563-b460-7120eebbc75c",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cfd3e4c-483c-4487-a40c-d161120a749e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b7ea36d-0475-4dba-8dfe-344957226fda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98cfca67-16e8-4a9d-8264-a8227001297a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89e7d5b5-6ca9-4927-99b5-8da0b0a77578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beec0c07-0d58-4545-882c-faec0c769f4c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e73404c7-9ed4-41de-aa65-47eda3b17eb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0f408ac-670c-4239-805e-85972a9944cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f871d555-db60-4017-86fe-c446da5a1984",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fb8cd6b-3137-4f65-b208-dd589bc7a58e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20713184-c3b9-4478-927a-2664fdd2a4da",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f964e08-8451-47b7-a215-4791f22c1112",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "630379b8-c577-4082-b4dd-4dc6d1e7b500"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cdc49ac-3777-4372-9987-1d377560d979",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "710f7995-560b-49e9-b8a9-6e7dcb7954ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22fa19e5-8565-4a04-86dd-234cb24760ff",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3054edb7-0914-498f-a2a9-dbd3bcea6afe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7acdb818-ecd4-4cbd-8d5a-0958212bc74e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce132ee2-8266-46ed-95b6-8d7401a648de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d072d44a-e8dc-4b0a-b8c4-6741ab5ef05f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06e19390-e70f-4fdf-a026-f098f017b823",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e915a71e-2b1b-426f-ab72-7a9c5ee74a9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34abee67-2350-46e6-9d63-386bcf545d03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a2b320-6935-4623-9d38-d3e8cb74d6b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31ef87d9-4b1b-41ba-8dae-48e3c72a00ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db593357-308a-4484-8897-aa0a465d0325",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "669d69e3-a5de-435a-8ba4-5c2680523e0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b899f59e-722d-481f-bd3c-3cde60f06981"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eb372a6-7257-484e-8de1-d9d1d20edf01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "131de7a7-8cee-4e0d-946e-c0aee070ead9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29c38855-b3e7-4cf8-a331-aa264f27b7a6",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f0869f6-4092-4572-9de2-1a1f6549b84c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "694afee7-7724-4de6-8e05-a57157e1e5fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79035060-b216-4766-a84a-0ef240519400",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40fa07b3-3a52-4b4c-be9f-d0512761ce7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d5bcd89-6b45-4009-8e70-414e6ee54cd7",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e883c1a4-723a-41a6-a416-77d88fd117ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b24beb8-1ccb-4ae1-a069-21419e7c6377"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "581e6010-1261-4c38-883d-3a640bd86e52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "382a4101-df2a-407c-b116-844c6a30c56f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da4b6ef1-1d86-4ffb-aa88-56ace6664324",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec94aa26-7ea3-4b65-b68d-3050dcaea06d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78d9e86e-43fa-404f-9e71-1fd8103b4af7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30bc80a0-e4f3-4110-8bcd-fa2c89144191",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b17bb7e1-6974-4326-86aa-f284e24db878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7722f47-b1ba-4eab-8632-e8a4e4ff856e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3397ac1f-ce0a-4fe2-8a50-a1b1e04030fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5895ee4-9972-4593-a02e-33087cd2bd18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "455232de-54ad-492d-9cbb-e734c5f8cc02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4efdf443-7107-42fd-af5f-3970dc6ba889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "244ec428-bce6-417f-ab61-e66a97783172",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2acf30e9-c967-4b51-a361-cca868d194ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b131241-d8aa-4a6f-ab80-3f9e5654a626"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c50ca775-cb03-46d2-9f2f-28950eea8e05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e88c53e-04f1-41d8-bae9-582426d3d12f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbfa5bab-9f09-449d-a7de-add47def92cd",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6319d95a-ec0c-4544-933d-c433ff80d2cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adbf1cc5-0b23-4355-b198-cc990e2ddc71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26e39858-2f03-4a10-9c9a-171171bb45d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62f99e37-823a-4889-ab0c-2aebe2489ab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d03c02a1-68f1-46e4-b338-37b319c578fa",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51595460-1ec7-445a-8bf5-5523f413225a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d63c8616-7c7e-4d20-a5c1-71e7f28af1b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b013335-6185-4cc8-bb0a-ba51361ea4e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bb15bbb-ba8c-40a6-b8da-3ad2d6489352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29ac76dc-72f1-460e-b22f-f1310120efcc",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76707f81-c070-403c-acb0-fb128bf457bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b744c67a-09af-4551-a39c-a7c84d6d2788"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51d02118-5f00-4e84-9c4f-8b529bbe90b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2448b0b0-8d45-4a79-9757-3f9b8d6e7f09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00ac0bd1-091f-4526-a8a1-0466ecb02b88",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c847e5-d228-4df5-a849-a35a3660c055",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0b34284-51d0-4ede-9246-5490d0487574"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b62ebebc-53a6-41b0-a462-c472a9ccc674",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e084411-d1ce-4b68-bfef-2d65b736971c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80247df5-7a85-4fa2-a9d5-316f61bedbe9",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4106d642-ce8d-43e4-ad01-6d3b2398b431",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0afe2ef7-a81c-4203-addb-7084b46b0f55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4c06cd5-a37d-47b4-bb54-2b2999da7ae2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4a4f3c4-1b49-4db8-ab2a-1f9c15950d9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff412a5e-f017-4bf1-aad0-708761f42289",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5c76ca6-a1e3-4ba6-96ee-f434c94f597d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebf5bb12-5da6-4110-9234-fe00427ef091"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa0e4c8d-a589-4d73-8a67-c2cf0f2b31ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d7c2bb5-8347-4822-80c2-e1e9ce180ca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c7eceb3-93e8-48f3-be6e-e99a0d73c14c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9553d070-29d2-426a-9eca-023a774d26f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e743388-d30e-4b74-8a37-af7311f58d14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68fff977-521f-4d00-8120-5c843c86ab9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea1b60b5-b870-4a8f-91a2-00276c349097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f501740b-5cd6-4246-a878-0e71e1b78455",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b97df4-0f46-46dd-a626-3551d0e695e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7263fa8-c376-406b-9aa6-05dde91818a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e2865cb-4981-4db2-8314-1f7f890411e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fe04fab-3b59-44c2-9b7f-2a26085bef3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efb17e5d-2ad7-4814-b49f-0685de9dbb64",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf4e833-4f28-496d-b1f5-fa1c40353e79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f8d6b79-0c6e-4ee4-866b-25b6bacfedb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c2ffa1c-25b5-4a5b-87fb-410cb164d967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c97db3fe-9e8a-4784-8089-7c18043cd96e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42367feb-6c2c-4715-93be-b1a1325db6d6",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b167784-b187-429e-af1b-93f9ae8ace31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f169d5b9-d318-4ed3-96ea-826e01e6e53e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87be2084-dc8f-4f60-a348-83028db34590",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "008f15b6-74dd-4074-931a-7b8479f1119f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a98990f1-c4c6-4100-843c-ad2fa8ceac7d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2001a6f7-8c6c-4dfb-8fd1-7ac6fc84c3a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9bf406b-bafe-49d0-b428-392322a41e80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4afd90ba-2471-44e6-8a34-bd7121208bd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25a3317f-4be0-46ee-8e10-529331fd5213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b66e0b8-6554-4c43-9537-8d07806adf70",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1169c09-120f-42ee-bdd4-648345dd581a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2ab6022-4f87-4d31-a8d9-444ca0ec9d90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c895813e-e9c3-47bf-8acf-b4888671fb4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35d36db9-0f4a-4aeb-b673-61727e340710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679a1110-facb-4016-a2e2-e3a98645b3a6",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "406bb6f6-11bd-455e-b905-7bf1eb098ef8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a16032d6-3de8-402e-b284-4a18e54f358e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8707e87-a8bc-442b-8c4c-30902fc09b12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50013f81-b31f-4456-8b51-fa8816dfd630"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fae05ba-8ad1-429c-9e3c-8f83f758776d",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60574d5a-3166-4564-8f3d-9fc6a3801fe5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b70e78f5-58e7-4567-ab9b-11265115ac1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e68aa809-8e35-4f37-b6eb-66a233f1d527",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a04750e-215a-428d-80ff-633e6e29a2c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b436ba7e-d059-44e2-8646-2160d42cd7a4",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a79b290-28f9-4970-87cb-d30ae7621518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eafe7f4-e5c2-4403-8ed5-60598f73f729"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9200f8d3-256c-4e1c-b819-55e56a657ace",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ce2a235-c988-45cb-a815-4853c14f71d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "828bab10-dc02-4ef4-8a27-902fc259d0df",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e10037b5-7b00-428f-b5e3-734f0e06a2e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7c86e48-ee3a-4cb3-abf1-f7876c185731"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd11ac5e-f112-4c88-a020-a8244e07a395",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a300b862-50c7-40b4-bac8-f84f4d06529a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6bc8a81-7fbb-45ba-86f0-e50c46bbfcd6",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e82364f-2e68-4524-bdfc-56acb8b1624d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51ec6d95-fe89-457f-b073-931dbb05e50a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6ff9e97-76ac-4b2c-9957-9db2bd8af041",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75f5811d-a7b9-47fa-a24c-a4b66e7c9d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae57209-9c3e-4ab3-9d59-3811071dd71a",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82946c6b-3ad8-4f18-a13c-7ff0a98efbab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd41d731-4ad0-46c0-b801-2b709d6340b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c3a665d-38dc-49b1-b45e-a25aae38f8e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "823b17b2-e95e-4ef9-9679-913e5a0373b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37a57cf8-60c5-4a6c-a7b8-22afc5e6e8a8",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06a6fd7c-b738-40ea-94e3-8cac93bde39f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30ec666d-6057-4141-b693-69d5198b0375"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83de9ba8-0ea9-4df8-b5d4-c0e067781f45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ad95de3-6bde-40a0-8571-7740a3d02f03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaaa74b5-acd1-406a-8652-30b4a35f70c0",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2306808-c2b0-4936-9d4e-d9e7c99be6e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "189b18f6-b46d-445c-ab13-c41d42c1e70a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "427c508e-5673-4e33-8c76-4c7fd2e5dc26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc920e2f-01b4-4536-a2ad-1b01b191149c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9bc3409-48d7-42b1-a655-b3e339f54b14",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9db6124-249b-4d2e-af93-9564508cde4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad0d9ffd-cbd5-4536-8d9f-41b4079d7f93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a8b07e0-0482-4b63-a90a-83723cf418ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8596e2cf-a17c-43de-90d7-24d5481a1734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c046a30-a372-498e-9666-69ba2684cb72",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bda0846a-17b1-403c-94bf-5bf590d10d54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deb56532-39c9-4e7d-8e5c-218544eeb04c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6226dfed-f381-43f5-9cdb-f33a170e5cbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63edce84-8ed0-4c7a-9f39-b48f9db777c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca0a66b-e7e3-4dfd-9eb0-562b26c4fd06",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "070cca91-b791-4051-846c-3daf948a0ddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ee4f621-5fce-4caf-b103-a221ce348861"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9befe472-343a-4f7b-a8a5-c4794184299a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "434286da-bf93-4a80-88c7-b9157fa3345f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3d1fe3-3a55-4996-8f59-52f995529137",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42e70a70-f865-46d6-875f-8d7bb8825fb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbc91e70-3d34-4d5b-9ff6-811bef9ce472"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a5cce1f-636c-4be2-a1b4-91d279a380fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91f66cf6-a6b1-41f5-a510-ceeb4f44bc6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9c45a1b-987d-4c89-9935-2b9d42b9c0ae",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f38a34f6-e101-4702-9b21-d1f39c4b9a9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61d20fe4-c056-4432-9045-33379df76570"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83154db8-263b-4969-92f1-eed60dd310a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b92c3c1-043e-4b4c-9ad4-d3f8cd9ff4f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "685f2676-ee92-4e4d-a9a3-ef772ae74bd4",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bb7e7d2-f6ce-4d5d-87d9-33bc4b47e4fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c024ee88-5373-4ac5-aa31-ff1a9bdd70c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a41638-2546-47a5-89cb-efcc0057fbb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c173ee4b-c68a-43df-9b11-5badc49fc1ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6942eab3-21a3-48a9-9b0c-7794a96e651f",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508347fd-60ae-42d9-a3e0-796795ecaf56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "add27889-6293-479b-b5eb-8bae10474898"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f073e5b-3cf4-498d-b700-eac5b3285db7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d9d5380-1d2c-443e-9f82-eb4ce7c773ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9cf860f-9ee4-48b9-abd9-937d5e8f2f3b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63ea02e3-39d7-4ec6-84df-b15c1513aef3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38c6d863-e8db-45ae-887e-652da3137bac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce20eac-c038-4357-a752-7b6a3214b373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae245f9f-4974-492c-b695-df2e446872a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df84130a-3611-40c7-9fb5-e5d5fbe22754",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d759622a-846d-4baf-940d-bbe07026b08c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cacf456-fd04-47d4-8f5e-3ff4083b03de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5eff0fd-2d46-4b22-9e55-ca487e16fb43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f93f632f-fbe4-4d33-a07d-daddd8790b62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c28e9d2a-24c5-4e20-b4e0-62eded3a1b69",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05fe86c1-64a6-4661-9fc5-5ba207f69fe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3705eb3-21f3-41fe-a525-87a8c3480d62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e9370bd-bc0c-4def-bb8d-13312a17f537",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85f91e12-d13a-4642-af08-3aa5e303bd7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f2f4a1-73c8-4650-abe1-75d6d5b27ea4",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bf9a05b-7354-43b9-a063-ec6f286b20c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6c994c3-2175-4e38-81f5-e3f5ba2b2f67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af7606c-475e-477c-ae33-66b0b4e42560",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cee5ba73-c0b0-4774-9c63-fa6d1ba5e31a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ef80942-4f82-47a0-b3f0-eae1dadc6919",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a810f18-879d-4e3e-b58d-121707af73cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98673f10-f1ea-4732-b60e-43205859845b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3adda052-bb1a-4834-99d2-384acf6f4f97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17734708-47b3-46d5-85d5-54c341261668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f2927cd-dee5-4fd8-b7a1-c44c84311be1",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e29785f6-a941-400f-b979-89afe9a79429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43c51614-a15d-4c91-b662-9a1cde9a6c1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "781acdd0-e0ef-4de2-b875-f65c3b00db58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ffee306-862f-4259-84ad-39b279475412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3858861e-71d3-4101-9463-053de30b2c07",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d56fae89-9bd0-4c1a-ae30-c50c479e65f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30787f9a-cb89-4709-b0c0-6f0313b80a4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2512f049-eb84-4b92-8eb7-fabfca3e98ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f78c5188-b14b-4d4d-9896-0f880c399f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ac675c-55e3-4fbb-a346-9df0cfc18b27",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d00546e9-969a-4d13-9a41-f1ad7eca391b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "069fcfc2-9c26-4f08-91a6-8afaef5707ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d7c158d-492f-4421-a41e-3e3c7f284afc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a25b3ea-8a37-440a-95f2-fc85e1c802f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac29bf8-313a-457b-994e-308ecabb72ec",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7bc7466-2466-411d-8707-3ed40b3c0061",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8835b7a-3e30-4750-9bf5-e85d9a105ad8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31adcb10-7563-4558-83b2-b604000e01e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e70b67b-7d92-449e-a512-a31e67939264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afb9fdcc-f7ad-4ad3-aa2f-8518cc471de3",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdc1e839-71c7-4b6b-9e68-3bad54b21487",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e450398a-c14a-47a3-a234-a745cb3cd7d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "531ba596-6139-486a-a74b-f59ce244e0e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfe71c8a-a44a-4dcc-ab58-824e4eefcc0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5508d21e-ff33-4efb-9a12-790d28ef727d",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf3105b1-bf58-43f4-8170-ae3f75025e52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05a674f9-bace-41e9-af97-a5c59aca490e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b34b526-35dd-42d0-aa1f-5e97c087c1fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5427ea60-df70-4d11-861c-a8b4b2057131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2397b47-e752-4a82-9d1d-a840a538f4dd",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7294730-26df-488b-974a-5662f7ca13d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1110555d-656b-43f9-aefa-fda1b32c08ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7442e3cb-b78f-4f99-a5cb-e4486db7a0e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8b6642f-648a-4f84-890b-d0b5e725e36c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "631da17e-e68d-4dba-90ba-dde544fe0c35",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f582050-e58a-44cc-9e09-08503674ab48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63b76f1d-1c0d-47de-b825-01f2490932d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a4ef507-d33d-425a-bdd7-5fa4f91de79a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f6d355e-daae-4feb-afb0-4606121ecc42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf1d6c6b-3c5e-4c50-aec1-e14b226fe7be",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cb2b4bb-f59d-409c-9b1d-f5b4245daebe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ec823da-4afa-4ee5-b9f3-57bea8de0f39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ddcb8da-11c9-44f0-8b61-2f302c7eb37b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "031f6598-098c-4d43-b145-8f1f9741c016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f191858d-0153-4685-9fe7-a22b5455f4da",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0564a56c-8571-493f-8dde-cd883e0cad2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35141f9c-58e8-4292-8303-65b816381db1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a22a4c9b-8a4d-4eab-b6a1-3212e483e53c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48087285-f223-49ea-b341-b186d3e7d964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dd42247-60e7-449e-b1a2-b7e4517c3ffe",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51860a80-f07e-4cc5-b6d6-6ec0630e1e68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c53dfb7-8b3d-482e-8aef-d5751641667c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4544a3d-708a-4d5e-85c1-5c1e57cfca5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e59238bb-3617-4c25-9813-76bca2b3987b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e15264a0-b328-4cc2-b3c3-84410632f990",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74b524e9-0188-4582-9d9c-95c20981283f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c1523d8-4d55-4c17-a2d8-fe8419364452"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b48da6-fcc7-4348-93b1-740ee49936ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6738cb38-1298-4b83-b1f6-d42f54024fb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8975784-5824-49a4-a8e5-f3bff7166e0f",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de5cd58-4206-4237-be9f-77a6201cba4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "929ca468-0cee-48d4-9af2-c8c90b1bda3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "484c6e3c-7c6e-417e-b731-0fd58dbf48d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f1442b0-7f3f-4c36-b726-ca108d19419f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c8fc4a8-7328-4f1b-ba7d-a2d361ef634c",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d49c4964-1c98-4ba4-9bc8-bd04d116184e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21cdbf9d-a7f8-4d28-86a0-7244e1fbc318"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b30ebdd9-9317-4872-bf49-0253555c208f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ad67ba5-ca58-4091-81da-4b0cca19b173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8d88389-10cb-46a1-9013-608116bfc2e7",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "154a9f03-446d-4ef8-94ee-c3654eeee9e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2703ef90-5c9c-4585-96d1-de73d05422b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c104a3c2-c083-415f-b986-61136cd3c03a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fc208ce-5a0b-46e8-9caf-b09904609253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28d15b8c-e4fa-4e10-8c8c-c267a80dea26",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14aeb48b-2aee-49e6-8887-330343f1c2c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81ee2eeb-d6bc-4e4e-af1b-5ce6af786e90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eb4f63b-68d4-4a9b-a430-15a24cc6c0c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "372dded6-4be2-41da-8f6a-4ecb8b4a4211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d39e53-ec85-40bf-9158-5475c329df8a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb18dc26-142d-48eb-b795-a760b05d77f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "758048c2-e13d-4b7e-9c30-20b4ad2e0255"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa759ab6-b756-4312-8755-ec992922bc9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e5be613-8a66-43e8-8629-c2aaf56c018e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd6d0b39-ef1e-46a2-842c-ec291d7fecde",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfc48f55-46eb-4636-913c-516502c6d14b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b684fba0-b8c8-4904-b4a1-830034e48cc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "761ca373-18f0-4eb9-8a0f-6d49198a9e13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e10f3c3-4005-4cb0-8600-70198051406b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5c67430-7530-4fb7-ad4e-52c606dadd9c",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4689dbea-1dd5-4665-941b-46f24cdddad3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d297e7e4-2c4a-4fbe-9d6f-5235eda60520"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2df8a7a-fc83-401d-bf08-3190ef3b0d29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c0bf038-28de-43a3-8fe6-7bbf58e34f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e15cc86-6333-4d12-b71d-a06dfc4773ee",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a22f9675-df79-43be-b477-bc85cbf79e41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b53c04c-79a0-4a89-91ac-b357585138b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f79eb132-bd50-4473-84c3-aa607978898a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed4063ac-d10a-4ec6-8e53-ed9ad7c6f451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f59a97a9-7f65-4175-a436-c94946edf1d7",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "715c08b1-6385-4db5-a73e-b4c26ebfaa17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c19a6bd9-0d81-40d2-8ebb-bf5b98bd4cca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04028c81-77b3-4133-aae3-3b92114f8287",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dc4a355-d1a5-4320-8842-d37040a2a01f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44b7c5ee-447c-45c1-94c2-a6d7aa8e330c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f23ac07-c6a3-476e-8a9e-4da69d21a6d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22ef180b-6d4c-43bd-aa6f-fadbca99f557"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c7235dc-3afe-4462-a7d7-56c80e5d7330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "805846bd-6f47-432a-9bdc-808ab2063244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be66ef7d-c81a-4153-a67a-45749d431d77",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cde86863-f5d4-41f8-b99c-17f41538ddb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39fbe8a3-dadc-42d4-90cd-725da83d8948"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b56bff9-ff42-433d-9699-1b4e297f36ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e955f00-a1f6-48ba-bb34-8f043c1ced71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bebd1ea-8407-4d41-b08e-6e7fb2264fe4",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "677fc7da-d96d-4cf6-bdd5-02112c1bd6a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5be1b70d-3a7d-43a4-b627-d75c706ee1b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ec89af-c7d9-4188-b8b5-69d4e3cdb091",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab55e213-4244-48b1-8473-0e8e5567add9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "323689e8-61ae-46b9-8268-33dee9228abb",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc612bf-8314-4c6f-adac-d663fc2f0305",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb2ea877-ca1e-4faf-93e6-175652740035"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e96c8d4-6b15-4516-bd2f-12e0eac87607",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "737299b7-d1c0-4805-8662-2c7fd76819d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "947555d7-5548-4031-926b-cf7262bc0a15",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "374026cb-7ec8-490f-a8ff-b09e5c9aea82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08996be8-5237-4692-942a-e985f8e5d5db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e815f146-07fa-460c-bdc8-92a80ebc6d3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e860047b-b7da-4a2a-bd12-56d24911f10a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c3a479e-37ed-4bf9-af7f-4abbebcaa5f0",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59700590-4108-4bab-a28c-59c86de2516f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24c67fdf-4f4e-4067-86ad-636af69f0538"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b52f0c6-8aeb-4d1d-9ba0-8113de4fc51d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7444c0f9-47c1-41d4-acdc-29470fe5d9d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "153adbb8-03a8-4c7c-8a26-7d0788811716",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "168bfe05-ba2f-4105-bcb6-dfd978bc935b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4db5e814-3eb1-4573-ae7c-aeec873b10d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fe88f25-d811-49d6-b8cb-3816f9dec20c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40c0228c-e513-4c0b-ab3e-b8a9c5f8b656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a30e797d-066e-4440-9bc3-3488cd5ba8a5",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7222ac7-8bd1-41aa-a504-0bf29eacaec1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "918a13bf-0d92-48af-a78e-dbd288431e91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4007672e-680c-431c-86c5-3ae29370f67b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6dff94e-e5ca-4f71-a151-3d0194e3db66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f810799-e29f-4f02-a584-552471eb424b",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c6eb17b-0e63-4aa9-a50c-544abd60ec42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30d36e31-aae6-49f4-968e-8aff0b23f299"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d4a2ed4-e996-40d3-8dcb-1d4ff8c94bb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92945d91-f1c8-48cd-98ed-30512bbf29ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18dbd158-5333-49c8-bd29-d257815bb052",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "242b501e-7e1f-4b41-b3a1-ce2e547dcf42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "934483e1-6f2c-48ef-8832-ab3f9123dc81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f85d6f41-be38-44a6-b34d-7ba235eb932d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a45db64-d304-4a27-8b78-cb2282d34b2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "279f12bd-2372-4a59-ba47-e6cb0a41700b",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4703464b-d16b-406a-a7ab-c39515eef9e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd07e89d-556e-46de-b331-0822e4a00414"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecd7f031-64bb-4a3d-938f-6370f54c206d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a61beed-ee6d-47b8-bd4d-c4f15690b71f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe938643-ffda-4773-8961-8b64238d7997",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84b660f6-2110-4a3e-b90a-aeada7c4ed7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1df49827-f8e6-42bb-88ec-c47cc35d669d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f278a38-1112-4159-9925-8413325213c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "290dbe42-aabc-4fa9-a6a5-815435fd82e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4869e75-493d-4815-ab7d-e2c289f3a1f8",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a367efa1-66b5-422f-bb0b-32d9bcbc28b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15220d73-3415-4c3b-8125-03e0690789ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d89ad2c9-5e4d-4899-ab72-6ee98a8d9a74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "858202ba-3513-4e02-98cb-e3ba63be3ce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd4b22d9-c972-45c3-b508-210add634383",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51ce2343-155f-4c9d-bd2f-03f2b458a584",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1423dbd1-a51e-40d9-872c-1f16e2c8413e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "868ba76c-1c6d-438f-b6cf-001fccf190e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7d8b013-0646-4600-b211-a4f7f98f16dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "307117fb-b274-4265-9f23-56372024bdac",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa05dc4-1213-4785-a40e-9ee69da9df9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d35fa35e-f080-47d7-ad86-db21ea927474"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c863fc-ef25-411e-bbc4-bdbd90256284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce1b9f5b-7ae6-49d7-a1ab-c5d4230add62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cf7e158-0ac5-49cd-9e71-59c86a300015",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d5793e-f914-49e0-b083-aa7b9b848124",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c7ff823-833a-49df-a48f-4492693ac3a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da116eae-2a4e-41e0-a9c7-a6d0459fc777",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "188eb579-3c27-4e3b-a6d2-854f57f4084f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d8fd381-e9b7-455e-a1c6-2448dac6eb80",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14605272-1930-4dd0-9707-e46ae3cc0c21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0c61383-2a6e-4bef-840f-619aab5d083d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dd7fbf3-5f82-4838-b291-55d2e716c331",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44398262-494a-4e2f-8a9d-8015e402b779"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7902880f-778a-45ec-baf6-4b7b3f795c33",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "496109cc-5724-4409-9bdb-1fbff8502f28"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c90b5c9d-ee46-4c11-97de-81719cd17848",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "be8a71d6-5a00-4bc9-a86d-84d601067ffe"
                    }
                  }
                ]
              },
              {
                "id": "eeff5aef-a096-43ff-b04d-11bb4e47d255",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "102dc6b2-9eb0-49dd-9af5-7aa7673ecedb",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa17aede-4fa3-44d3-b260-76f0cbf6e1d3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "da9f9dc0-031b-4fab-88ef-8c4ab84285d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "282294ca-e8b7-4bf0-8401-ec41f7ed1163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d1f2650c-9480-4ff0-8940-0fd4a784b2df"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "87d565d3-6c88-44b8-b631-b1c0b00b6c61",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a07ac80a-0d05-493c-bb7d-7defd860749e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "90b4348a-95a3-4f2b-8a69-aba0e529be09",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a31ab1f4-f5de-43e7-a249-a1eb8b4327f8"
                    }
                  }
                ]
              },
              {
                "id": "322040c4-f5e2-4dce-bd7a-97f02c13c76a",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "48ebc7ae-4de5-4318-99ef-55126c5dbf62",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edc2dafe-a7cf-4d40-a8c7-97f27a8a052e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "5d68cf3f-8d8a-49c0-aa8b-07ad023ca86a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d6192ee-4896-4708-b70a-c3949805459b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f6198dd-947d-4e2b-a6aa-c31c95ff7866"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a7dea56c-7823-4984-be53-8950b5ef5548",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1f06bedd-8240-4ac9-9a6b-4882ac93a9d4",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8957b1b5-321a-44d1-8196-9d68d0185d02",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "36f30a4a-df99-4dfa-a7e4-f5b7f42d287f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "220fbb85-a772-497d-a7e4-f420ea2a540f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f0601ac0-e5ec-4c8f-8461-ec4e03c93274"
                    }
                  }
                ]
              },
              {
                "id": "3972dc26-aa41-405c-b66e-b61a467a7395",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "27f15865-a539-49c0-8dcf-0d065071b826",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "098308fa-7344-4f38-9bff-e1373f81c52a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "934b10f2-1a21-4a24-9aeb-fd4426d08766",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "17747dae-f8be-448d-9dce-dacc5edb1314"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "859f1a43-873a-4c79-b8f8-da0fe730cd9b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "5240e7c4-3232-41e3-b877-e2449272559c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6e0ce3de-da86-4798-8ae7-2218e2e3e8a3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3613a824-fa8b-42f8-ad4b-2195c745adc8"
            }
          }
        ]
      },
      {
        "id": "50deecc1-ac6c-4a71-85c1-21afdb14334d",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "9a665589-89df-4614-9d97-f6aa00bf6c90",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b0216979-bbca-4fbe-b1dc-0a9ba30cc9ed",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "97d5880f-6332-4b8b-9c34-72e46fd58023",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7594b58b-7fca-484a-85b0-455c5b6d7c5f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "21dbff5d-00cc-4254-ae22-c68f087d84ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "173254ee-06be-490c-a02c-5f3a2e95413b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7a64668-3587-479a-b317-d10664bb8b0a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac325b32-0654-4d90-af0d-936049a9f911",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "99d727cb-4d48-42ae-8b6a-141d55d510c5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "89a87617-dabf-4528-8c07-bf871fa4454f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9d1d4062-b82a-439c-b8fc-fae97cb46845"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0b4f16ab-90d2-4a38-a9b5-cdf1e4cefeea",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "36155c67-e294-42aa-895f-5d2d7971707d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2719df34-7fd1-458b-9668-43a47fb91336",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "84a06e9e-e626-4927-b72c-a5f88a715a4e"
            }
          }
        ]
      },
      {
        "id": "b93e07f0-b083-49e6-8bdb-fa1afbf40216",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1d42df31-c8da-4d6c-84bc-31e5fbdb8121",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c99ba222-22a8-4bc9-9146-803fcbbfff22",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "09a893c9-1269-4551-9dbc-bd90a2506b41",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c46a40-cf21-44c6-bfc9-a72b95b73687",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a800cd0e-75f4-46f4-a850-4fa270ba5f5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d09cdee5-a537-4848-b018-0626050ce50b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "73f0a3c0-ac06-42c0-8db4-90a619062042"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "81f9e71d-51ac-46bc-a8dc-32571a84d82c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68d976a6-cb91-4609-a390-a0648fc36796"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb5adeaf-7f15-4594-bcfd-f67297b8a3f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "74f183eb-2faf-49f6-b40f-af65d403110f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "983ff261-c9e7-4f08-9b47-2b8b79002600",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "467ec158-bcb6-408d-baed-038a27ed1558"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "72e0e042-f828-4022-a62c-891e6514f5f5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0dbcdff3-128e-4984-a310-415f0425ef53"
            }
          }
        ]
      },
      {
        "id": "b3bd87f2-3903-4e4d-b58f-befb988895b5",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "adc54c73-3f7f-41dd-91d3-b3d99040ddaf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "02b4a045-2eb0-4d13-bdf0-dfc9975db966",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "be9fdf71-abc9-42b5-8fcd-f5783b254f21",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9625e8e5-bbde-449e-ad6e-dcf6c6ffb359",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "582cee7e-464a-4081-9ad1-7e11be04c0ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4beaa059-cb3f-4ae5-a18e-325606223da2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "29765221-fbfc-443d-baf2-09777fd2be1c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c1d9465-da5e-4288-a21d-fa6c1217ac1f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "527cde90-1510-4895-9089-702041609d84"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "abb4c1fe-8ba6-42cf-a39c-8ebb661e7161",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "205d2579-8180-400f-a567-222ad6cbf438"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "83879bbc-898b-4d08-85fe-71e02154361c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b326dac2-c8cc-42b3-a32a-3e99134f3cff"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2fa971d6-2573-4743-9a7b-ffa798a40328",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6bbd6705-8fbe-467f-9e71-5854965f469a"
            }
          }
        ]
      },
      {
        "id": "e047b306-8a8f-4f19-b157-c80425ae615c",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2e445b14-180f-4993-a197-58550ccea89c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b918554a-2f50-4cb2-9f00-bc8fb1782742",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ad2b6533-ac5d-4882-acd4-ce397918e1c4",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3554c1da-1055-4296-9fda-6e58a4a07e5e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "194e408e-883a-4a7b-88af-f0af1a55b846",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 69.11929824561403,
      "responseMin": 15,
      "responseMax": 595,
      "responseSd": 93.13212542121249,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1710203617998,
      "completed": 1710203647313
    },
    "executions": [
      {
        "id": "146b815f-aad9-4fe5-851a-ec12a3f7523c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2dba472f-3b61-48ca-890e-194a1ac2944f",
          "httpRequestId": "55e5ff1a-dcfd-423b-b5eb-f33f841deb86"
        },
        "item": {
          "id": "146b815f-aad9-4fe5-851a-ec12a3f7523c",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "9d8547a6-1d0c-40b3-823e-9350b69a25de",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 0
        }
      },
      {
        "id": "4e0cbbca-d4fe-46e4-a24f-2d74dc920a16",
        "cursor": {
          "ref": "3cfd5ae6-7b25-40b7-b0d7-f8ebc22d4c3d",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "97519483-d1e3-450c-bc1d-9cacb32be857"
        },
        "item": {
          "id": "4e0cbbca-d4fe-46e4-a24f-2d74dc920a16",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "3c08c77e-f91a-41c7-8a6b-58a23c95de8e",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 0
        }
      },
      {
        "id": "227c867a-153a-464f-a30c-01dbce3fe488",
        "cursor": {
          "ref": "9f0a377c-1d42-4a1f-baa3-75dbd28c6a5c",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "83b1cd56-c667-45c8-8b41-99151d24454d"
        },
        "item": {
          "id": "227c867a-153a-464f-a30c-01dbce3fe488",
          "name": "did_json"
        },
        "response": {
          "id": "9e85b42c-8035-4787-88f5-65fc3f2b4aa3",
          "status": "OK",
          "code": 200,
          "responseTime": 220,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e419326a-8d8c-4110-a2f4-011934bacb37",
        "cursor": {
          "ref": "643f2351-61b4-4d07-a6d2-86db27987f49",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4dbf1d67-c69c-4e25-9a89-505d319e2e56"
        },
        "item": {
          "id": "e419326a-8d8c-4110-a2f4-011934bacb37",
          "name": "did:invalid"
        },
        "response": {
          "id": "6d5ef1b6-0c31-4494-93c7-f7ea8c1d20cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e419326a-8d8c-4110-a2f4-011934bacb37",
        "cursor": {
          "ref": "643f2351-61b4-4d07-a6d2-86db27987f49",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4dbf1d67-c69c-4e25-9a89-505d319e2e56"
        },
        "item": {
          "id": "e419326a-8d8c-4110-a2f4-011934bacb37",
          "name": "did:invalid"
        },
        "response": {
          "id": "6d5ef1b6-0c31-4494-93c7-f7ea8c1d20cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc7da592-9527-4d83-b227-b4762674a5e3",
        "cursor": {
          "ref": "59098ebc-7adf-45d8-8b8d-d5e6311e2940",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "0369180b-ee8f-4423-bf5b-7bdfb313a3d8"
        },
        "item": {
          "id": "bc7da592-9527-4d83-b227-b4762674a5e3",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "379447d2-58c4-47f2-996d-965068a0f7c5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 94,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e734ae63-b47c-4773-8364-73b98859a12c",
        "cursor": {
          "ref": "f49dd047-50fb-48ca-bec6-b544e6f5dc43",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7f7306a2-3938-4f85-a4d0-953249804723"
        },
        "item": {
          "id": "e734ae63-b47c-4773-8364-73b98859a12c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e774f1d4-b08e-4250-b0b9-682a387ccfb4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc4d991-2e9b-43d6-a35d-6dd584aca5de",
        "cursor": {
          "ref": "156f3641-b886-4b3a-8950-0fcc994f0703",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "5f8a0e67-484c-4fc6-bcbe-b10cce5865a7"
        },
        "item": {
          "id": "9cc4d991-2e9b-43d6-a35d-6dd584aca5de",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "abcb626d-8721-435e-8cb2-be038abd9c53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1afd8b9-337b-4e4e-ae28-59a320b6cfb6",
        "cursor": {
          "ref": "128ab884-47b9-4f54-bbfc-68f0ebba8068",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8e14bba8-0baf-40ed-8401-039134802713"
        },
        "item": {
          "id": "d1afd8b9-337b-4e4e-ae28-59a320b6cfb6",
          "name": "identifiers"
        },
        "response": {
          "id": "d2e77223-fc0b-4266-b219-15d26ccf9683",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fb94c61-7598-4f93-a85f-5c3a2c80bd49",
        "cursor": {
          "ref": "301ca6b6-b9a7-4c59-b776-d162be87aa76",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "1e7f6b33-0711-419e-bfb5-367d3f6d180b"
        },
        "item": {
          "id": "6fb94c61-7598-4f93-a85f-5c3a2c80bd49",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d982c456-e584-4497-8964-3afcbfccf239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10bbbfcb-e53e-4ba0-a786-462d18cbd670",
        "cursor": {
          "ref": "22386270-745e-43ac-9157-78fc4ec41b5d",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7f9ebbb9-fa57-4757-92eb-6d5e195db144"
        },
        "item": {
          "id": "10bbbfcb-e53e-4ba0-a786-462d18cbd670",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b8284eb2-cfd1-4931-b8b8-ae0bd068c5c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e23aef6-8d89-421c-a3d5-71aaeb93a2f3",
        "cursor": {
          "ref": "69137735-7071-4d51-8810-ffa6d827aecf",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "81091038-101d-4b6a-9366-4bc2972e40f4"
        },
        "item": {
          "id": "6e23aef6-8d89-421c-a3d5-71aaeb93a2f3",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f1ac4163-f825-49a8-9d25-cfbebffba382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2dced19-dc92-4779-bea9-95b351ea337e",
        "cursor": {
          "ref": "d1a5b4a4-f81b-43c1-9ec4-50a7395aa2bc",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8d5dd4a7-495c-4adc-b662-3aadd8cc407f"
        },
        "item": {
          "id": "e2dced19-dc92-4779-bea9-95b351ea337e",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "616f5831-dedf-4692-9a71-1735f1fa93d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee75ea64-2f3a-4e3c-8280-a458048844ca",
        "cursor": {
          "ref": "5c5c1849-8ff9-41ff-bcdc-bc83c6577ca0",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "15423a72-6c65-4d36-b64f-640a29d3203b"
        },
        "item": {
          "id": "ee75ea64-2f3a-4e3c-8280-a458048844ca",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "7c152899-7fcc-4291-bad1-e9b82ae27f3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b21aef53-979b-4aa6-bfff-abde461e6f79",
        "cursor": {
          "ref": "c6771176-939c-4616-b2ae-e76db298b715",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "14b16467-7109-453e-8e02-4e86a52e64b7"
        },
        "item": {
          "id": "b21aef53-979b-4aa6-bfff-abde461e6f79",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f7e590f9-a51f-44b2-8ab6-2ff476307e81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f251586a-8625-461f-ac50-b4d10b08ad1e",
        "cursor": {
          "ref": "3b29ef09-8685-401c-a8d9-a03bf819234f",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "fa4eb438-ef0d-4db0-8d5d-1ec4604f44f6"
        },
        "item": {
          "id": "f251586a-8625-461f-ac50-b4d10b08ad1e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "7cabdfc1-9452-46d2-8f83-c09c138164e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66401d2b-a4a6-4166-8b10-5c9fbd317691",
        "cursor": {
          "ref": "a9ff8503-3eb6-411b-a3d2-e1e1ab7f2e36",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "aae0150a-d205-4801-af91-e728da8c93be"
        },
        "item": {
          "id": "66401d2b-a4a6-4166-8b10-5c9fbd317691",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "d71e6578-f97c-41b7-be94-03c62ee94da3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c910319c-e44a-4338-8497-6b38825875d4",
        "cursor": {
          "ref": "ec44856d-7f72-4fe5-b43a-58bb9fe6a7ed",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0d7047f5-4de5-4021-881d-e80df21800e5"
        },
        "item": {
          "id": "c910319c-e44a-4338-8497-6b38825875d4",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e5c62a7d-1272-4509-8aec-6aa809f6111c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60927243-b502-460f-a203-22b2d60e4b72",
        "cursor": {
          "ref": "af94d0a5-547b-484d-bb48-0a6c8828290a",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "249b09c4-6eb7-4006-be4a-ee2d5fc38390"
        },
        "item": {
          "id": "60927243-b502-460f-a203-22b2d60e4b72",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b615b2b5-939d-46a6-9f5e-2a2396e0afef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b15926d5-e048-442c-9333-609614aee1c8",
        "cursor": {
          "ref": "60050e49-921c-4260-bae8-0449cfbc9655",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4d9d4cfd-ef37-490d-a9c8-cc25f1857797"
        },
        "item": {
          "id": "b15926d5-e048-442c-9333-609614aee1c8",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "1f8ef70e-a002-4e06-a4a7-f9f655f2e82e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bd9c35b-cef3-42a1-9483-307732b277ca",
        "cursor": {
          "ref": "b4294287-7081-4e03-ba45-cee7245b8756",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "5a47b4fd-d6dd-46f6-8bc2-db01de05a15d"
        },
        "item": {
          "id": "7bd9c35b-cef3-42a1-9483-307732b277ca",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "dbd40c4d-3b42-4039-95b9-5ced1dd12c06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df294268-8053-4561-83ee-e97a21da110b",
        "cursor": {
          "ref": "74c5caf1-b551-438c-8ce9-c37d43b74582",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "0cd609b1-cc1b-4402-8d83-c8a00c463b0c"
        },
        "item": {
          "id": "df294268-8053-4561-83ee-e97a21da110b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e6710a9a-e4f9-41ae-9406-6f234a4809fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "584a69b1-ef0b-4b6f-9eee-88036dcac4c7",
        "cursor": {
          "ref": "954291fc-5918-4a7d-97f5-6d726779052d",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8ac9fd82-7787-4494-830a-ea73e6834e39"
        },
        "item": {
          "id": "584a69b1-ef0b-4b6f-9eee-88036dcac4c7",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "9a775959-24d9-42fb-ac5e-d09c46c3c370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26c300bd-1edc-48d7-9bfc-78741c553e28",
        "cursor": {
          "ref": "286dbd92-fbae-48cc-af52-2a3c115fcbce",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "460b892e-6dbb-4867-81c8-84b14004c4e3"
        },
        "item": {
          "id": "26c300bd-1edc-48d7-9bfc-78741c553e28",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "038dcb7a-1bc5-48e2-9487-2a540e544688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2410feb3-1b1a-48aa-bf7f-d6675790843a",
        "cursor": {
          "ref": "16992160-c320-4253-bca3-6dfcd80add25",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ab47daae-be48-438a-a8f2-989bf30dcdc6"
        },
        "item": {
          "id": "2410feb3-1b1a-48aa-bf7f-d6675790843a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "9de32b21-ef09-4008-b8a0-e135fb2b8c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3402845d-58e5-4ec0-a99a-731f789af851",
        "cursor": {
          "ref": "50a149c4-f829-4d89-a058-f89ba3c8390e",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a2d501b5-5adb-4d1d-be5a-bbc14344cdb8"
        },
        "item": {
          "id": "3402845d-58e5-4ec0-a99a-731f789af851",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "240a55e6-5bf2-4924-8a77-193c55a09ba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1667eb3-d67c-405a-8e52-22b1ff27a9f1",
        "cursor": {
          "ref": "0a7179e6-12c5-4b0e-b5ee-cdc38f4ea167",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f8fd8448-f761-49d5-a66f-b9035eee80ed"
        },
        "item": {
          "id": "a1667eb3-d67c-405a-8e52-22b1ff27a9f1",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "04b79314-9fdd-4f21-b5d1-51abe5c535ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc5689c-c0df-4df5-ba9b-f5508e023451",
        "cursor": {
          "ref": "1f0ea428-3624-4b98-88dc-918a0aaa63c7",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e0b48adc-e6a8-4d3e-8a3f-1240e8ed3214"
        },
        "item": {
          "id": "7fc5689c-c0df-4df5-ba9b-f5508e023451",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "3f5bbea7-d515-42ff-92cc-a8e4bf60875d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52d8d4b4-f564-45de-aa7b-95d9346b2f6e",
        "cursor": {
          "ref": "9556e773-0442-4a3c-afb0-22d7b72eaa27",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "ccf095fe-5cd2-4eef-a90f-a39fb3a2f19f"
        },
        "item": {
          "id": "52d8d4b4-f564-45de-aa7b-95d9346b2f6e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "20cfd078-d53c-4423-ae7c-5afaa92298df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e34ae3c3-8987-4285-8e0d-65a895b17ac6",
        "cursor": {
          "ref": "eea6da3b-3bd0-4b7c-8c6c-ebb4788633dd",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "172b453e-7139-410f-8107-45833256a76b"
        },
        "item": {
          "id": "e34ae3c3-8987-4285-8e0d-65a895b17ac6",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "7c903aed-90b2-41e0-a621-45e1516401ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a185067f-9d09-4825-8d5e-fefcad1de862",
        "cursor": {
          "ref": "5acf34ef-ed13-42da-84b0-48592aca4d85",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "0fde203e-477b-4475-bab4-0114ed7c8a7c"
        },
        "item": {
          "id": "a185067f-9d09-4825-8d5e-fefcad1de862",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b2627fb8-bdab-4d48-b86b-4a1a786e94b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06d0338c-8c58-477d-8790-2bc6046d6217",
        "cursor": {
          "ref": "13745a57-2f4c-4cc9-ba91-828f62473e91",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7edc92e8-d1fb-45c7-a032-95e42ac632b7"
        },
        "item": {
          "id": "06d0338c-8c58-477d-8790-2bc6046d6217",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "8f169136-abc1-468f-b028-9d4f8129cd31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f66ba92b-ca6e-46f1-b70f-517a466119cf",
        "cursor": {
          "ref": "813fb83d-c118-4c0d-b65b-18b469f5c3f9",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "fe540a01-3298-4204-90a4-ba883b22a1db"
        },
        "item": {
          "id": "f66ba92b-ca6e-46f1-b70f-517a466119cf",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2fb0639f-3b01-49b8-991f-c73f2f018e3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6fcaf80-68a0-467a-b4bf-438b29a9a2c8",
        "cursor": {
          "ref": "cb92f721-4915-4a1d-919d-900f4e15af38",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "5167119c-de51-4cc6-9d27-b6a2b6f15483"
        },
        "item": {
          "id": "b6fcaf80-68a0-467a-b4bf-438b29a9a2c8",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "dc0426a2-fc96-4284-997a-631323a34141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b72e723-f0f3-4daa-b540-15ae39e934dd",
        "cursor": {
          "ref": "f43bee55-2b98-4579-8cc6-4b71bbe9458b",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "4a02f217-6df1-45c7-9445-7456bd06b343"
        },
        "item": {
          "id": "2b72e723-f0f3-4daa-b540-15ae39e934dd",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "df5e10fb-f4f5-418d-9901-47de9661a5b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56317ce9-d625-4cf1-98b4-8e484ccb783b",
        "cursor": {
          "ref": "8515ac91-e54e-4283-b150-7ce2a038cfcf",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "0e3cbea9-53f9-44bd-86bf-c27b79c636a9"
        },
        "item": {
          "id": "56317ce9-d625-4cf1-98b4-8e484ccb783b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "01cea16d-8118-4e13-884d-7d970ee6783b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8c81b32-1ebf-4b34-8215-4e9e1b076ead",
        "cursor": {
          "ref": "a1c4d304-4af0-4020-99e0-d3291ab4f65d",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8c2990c5-33ca-431e-b47c-a35951b39e1a"
        },
        "item": {
          "id": "a8c81b32-1ebf-4b34-8215-4e9e1b076ead",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b70d9cd1-0ce4-45c6-aa03-910cc2cc5cb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61eaeef9-4771-4464-a1ef-3585c59e66c2",
        "cursor": {
          "ref": "22de1d0d-c934-450c-84e9-df13ed2ab13c",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "13696547-7510-4301-ad1f-65bebf683885"
        },
        "item": {
          "id": "61eaeef9-4771-4464-a1ef-3585c59e66c2",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "03f6e0a3-f281-4a41-b1e9-5cd05afd176f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae2e708e-f585-441d-9723-1815c9b7da81",
        "cursor": {
          "ref": "f25e36e5-2a93-412c-bd82-553fc134f3e4",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b13fbde9-e242-4656-b1a3-75afcf1952a3"
        },
        "item": {
          "id": "ae2e708e-f585-441d-9723-1815c9b7da81",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "319f19d8-57ae-49fe-b625-c921c3851c22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8a759b4-aaa9-40e4-ac3f-45d304b6b283",
        "cursor": {
          "ref": "84e48002-a0ce-41f4-8e3f-64f73e644776",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "0fc2783b-51c7-4776-b915-7a2c1a7ee743"
        },
        "item": {
          "id": "b8a759b4-aaa9-40e4-ac3f-45d304b6b283",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "48de5b55-5919-4f4c-9f0b-b5c3482bf84f",
          "status": "Created",
          "code": 201,
          "responseTime": 595,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "5f0f7edb-cdb6-41fa-9a5b-0b174424d813",
        "cursor": {
          "ref": "3c3ba94a-658d-4416-942d-9526f845a251",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "9a5e5ca2-785a-451f-899b-6cee27067c55"
        },
        "item": {
          "id": "5f0f7edb-cdb6-41fa-9a5b-0b174424d813",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "f57b95ea-9720-46e5-b6c1-0ed61e5c412d",
          "status": "Created",
          "code": 201,
          "responseTime": 367,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "9f4ec2fd-59cd-45b5-976c-24c9e44e65e5",
        "cursor": {
          "ref": "23892c83-6695-4063-903f-8c4e345e9b2c",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "07d74c9e-c890-4a6b-adad-27ec8750d680"
        },
        "item": {
          "id": "9f4ec2fd-59cd-45b5-976c-24c9e44e65e5",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "0471c2f9-c81a-40ca-89a0-5349350e3956",
          "status": "Created",
          "code": 201,
          "responseTime": 336,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "a8819a98-31db-4cc5-a91c-b14a7e10163e",
        "cursor": {
          "ref": "efb278b7-1c78-487b-9805-430064575217",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2cf6fd06-f74f-4f3a-a7bf-25c9393a69e2"
        },
        "item": {
          "id": "a8819a98-31db-4cc5-a91c-b14a7e10163e",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "0f38beae-94e2-4865-a910-0a2a76f3f109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fdf64ea-689e-4be8-a896-6e3dcd91033c",
        "cursor": {
          "ref": "70596816-135d-4a26-ba54-4f33c2af443e",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "4c7d0715-634b-4631-8577-84c53a86cb26"
        },
        "item": {
          "id": "8fdf64ea-689e-4be8-a896-6e3dcd91033c",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "822b5296-30da-4b29-a556-c6377d634052",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "078c64d0-738f-4093-8d60-8972c877bcd8",
        "cursor": {
          "ref": "ce4a399f-0472-4af5-b4eb-e5b5591220a6",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "4684dd1c-69d3-4a73-8565-51c56c169ee2"
        },
        "item": {
          "id": "078c64d0-738f-4093-8d60-8972c877bcd8",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "6230204b-e498-4c0d-acba-6eae60710a2d",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "ded57c64-9849-496b-b4a1-bdb8bdc9beeb",
        "cursor": {
          "ref": "9fe18da7-9a6d-4016-b734-ec1bb25384ed",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "39dfdf9d-052d-40cd-ae93-8061f2305163"
        },
        "item": {
          "id": "ded57c64-9849-496b-b4a1-bdb8bdc9beeb",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "0bc23034-f5fa-4e58-8d4f-155d84effb75",
          "status": "Created",
          "code": 201,
          "responseTime": 347,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "3becac39-7c71-4123-a75c-52694b54f8b2",
        "cursor": {
          "ref": "5ab86dd3-1226-4003-a577-f0476c95bdc4",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6505caac-9746-4650-9355-a6236ae4f5c8"
        },
        "item": {
          "id": "3becac39-7c71-4123-a75c-52694b54f8b2",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "71ce7fd5-239b-4e5a-bfcc-31c713d24917",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "5e62b3eb-7e7f-47eb-8552-673c0647d00c",
        "cursor": {
          "ref": "bac1305b-a76b-44c5-a7ae-c1ac492354c0",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "e4433670-317a-4fbc-9b94-58cc0fbee4cf"
        },
        "item": {
          "id": "5e62b3eb-7e7f-47eb-8552-673c0647d00c",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "29e27a5c-eeb7-4ce0-b8c6-c57d42af21c6",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "c8582f2f-d5a7-457f-9fe6-7a5960dc476d",
        "cursor": {
          "ref": "0ddb8d8b-76cf-467b-9494-dacd1a6efd98",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "7e1ec3d8-2860-48b5-9bd2-b0a2d3240be7"
        },
        "item": {
          "id": "c8582f2f-d5a7-457f-9fe6-7a5960dc476d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "2ecfb053-9fbb-4d28-a7aa-d6ac39a75bb9",
          "status": "Created",
          "code": 201,
          "responseTime": 371,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "caa44577-dc72-418f-94f9-8dd7067eaba2",
        "cursor": {
          "ref": "478a0e41-2ce0-41cd-bad9-4d3eee0705b7",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "8a75bdc8-602f-49d2-ad62-023d5e1c14c2"
        },
        "item": {
          "id": "caa44577-dc72-418f-94f9-8dd7067eaba2",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b90709d4-f9ac-4d68-8d39-d19a3b3a8585",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "47891c43-dafc-4c4a-9ce9-631d04a6d8c5",
        "cursor": {
          "ref": "8ce9ba62-172b-463d-b683-109aa220d6bf",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "67acac4b-a358-4cb2-8131-46a065d1bc62"
        },
        "item": {
          "id": "47891c43-dafc-4c4a-9ce9-631d04a6d8c5",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "39e03ca5-3d68-4c45-ac87-7360486e6fda",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "ff7c1304-1923-4dfa-94c6-2bd7c0624895",
        "cursor": {
          "ref": "b1d9e379-dd4e-4d3a-b8db-8736619bb3c5",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8decaa6e-ad82-4b6a-b3e9-c1552665e549"
        },
        "item": {
          "id": "ff7c1304-1923-4dfa-94c6-2bd7c0624895",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "d6f48d3b-b10b-41fd-bac8-551e30ccddfe",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "8a96227c-d1dd-45af-aba7-8d6ffc79b8c3",
        "cursor": {
          "ref": "0d6af91b-3ef1-4a07-82aa-e56eb775df16",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "dbc6e1d4-6520-4e12-b938-f0a2405c3e1e"
        },
        "item": {
          "id": "8a96227c-d1dd-45af-aba7-8d6ffc79b8c3",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f2c4673e-e833-4ef3-ad3c-1d9915e81a7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b88d18e-6225-4c9c-8d07-6a53d8771f6d",
        "cursor": {
          "ref": "3f8c7d30-10d8-4faa-9af2-bce0933715d2",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "1bb1b7c7-48df-47da-9287-86d641ae966b"
        },
        "item": {
          "id": "4b88d18e-6225-4c9c-8d07-6a53d8771f6d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "2d63b40d-9d76-4217-a5d2-fd4f76825e83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b65f62-a13a-4328-bb5f-563bfd5e5b60",
        "cursor": {
          "ref": "13b190d8-ccbf-415b-955e-f2cd0a064cc6",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d15a64a2-9be4-470e-91a1-646ad15dfa40"
        },
        "item": {
          "id": "78b65f62-a13a-4328-bb5f-563bfd5e5b60",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "e582aaed-3ce9-47f0-a411-89d05cde2260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d2a1d20-dc81-4774-94be-c33d9a3754ed",
        "cursor": {
          "ref": "6e000607-197c-4070-9b7d-532b40ac9f63",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "c22b0528-dc89-42b1-9a03-ef16f8c3585a"
        },
        "item": {
          "id": "9d2a1d20-dc81-4774-94be-c33d9a3754ed",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "84b58937-9a6d-49b7-964d-8c8161979622",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "482cb446-3aa3-45f5-94a0-c080c0938a0d",
        "cursor": {
          "ref": "5ea6b0e6-7566-449d-a040-a782647740da",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "9f6a52cd-8943-4240-b3f6-e71edcdc4220"
        },
        "item": {
          "id": "482cb446-3aa3-45f5-94a0-c080c0938a0d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "4be928b0-7c2d-4118-9657-aca17131636b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d566948b-2b0d-48ac-8f22-22371900ad25",
        "cursor": {
          "ref": "ca70c889-9527-4980-84d0-6d9edc7555e1",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "e451aa46-841a-4645-9928-8f41a386560f"
        },
        "item": {
          "id": "d566948b-2b0d-48ac-8f22-22371900ad25",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "26f0d901-d0a2-497e-a4ac-d15157c22f15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b28772f8-ad37-46d1-b4c4-4edfbb1fc654",
        "cursor": {
          "ref": "308f6ec1-2daf-47c6-b5fd-4193b5d9bd43",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "7bdfe477-e112-401a-a034-e7c651a85a85"
        },
        "item": {
          "id": "b28772f8-ad37-46d1-b4c4-4edfbb1fc654",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f00f2c4a-26da-4b9a-a5f6-246f58b7b509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d506f80d-a77b-4c83-a149-6ab14caf9542",
        "cursor": {
          "ref": "96010fb9-6737-43a2-9046-bf790e3d1580",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "31beb711-6687-4024-b308-5ca01bcdb6c9"
        },
        "item": {
          "id": "d506f80d-a77b-4c83-a149-6ab14caf9542",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "639ede85-ca05-4d70-80a8-cb64c5c4902c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7f18269-3856-4900-b820-c2b42f9bbbce",
        "cursor": {
          "ref": "0468b39f-9dd4-4d60-b05d-c74f68dedaae",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "695ffeb9-c68d-43ff-8d69-91532fde3e29"
        },
        "item": {
          "id": "b7f18269-3856-4900-b820-c2b42f9bbbce",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "715eeb43-16c7-4137-afb6-b1e8920064db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e87521de-7216-44ef-8ca1-e43b4b703e77",
        "cursor": {
          "ref": "7cc3edce-153e-4533-a04a-813f9409010e",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "980ba3d4-92c7-4a6b-8e10-5943d9c9c795"
        },
        "item": {
          "id": "e87521de-7216-44ef-8ca1-e43b4b703e77",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "5cf18ff3-bb26-4609-8512-bcbc78a879e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "748361ef-81e9-400c-b91d-aee1aa096595",
        "cursor": {
          "ref": "8eb2f65b-7714-46f6-b4a6-4bd3e7ea4b42",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "93cc6e6a-5925-49e0-9e94-5a70e5586b99"
        },
        "item": {
          "id": "748361ef-81e9-400c-b91d-aee1aa096595",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1f35aa41-4ba8-4f3d-98ae-6212435d4c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1428627-424e-49bb-a28f-f15c29805548",
        "cursor": {
          "ref": "b1a15a06-34c8-4523-8256-93ca58f3b150",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "4a38c781-c292-4ecb-a091-a30e08e4e06a"
        },
        "item": {
          "id": "e1428627-424e-49bb-a28f-f15c29805548",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "493d5de1-4712-466c-adbe-fe1e5047908c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f433e0a-c78c-433b-b1ff-24a0532b1337",
        "cursor": {
          "ref": "2409509e-f6aa-41ee-b9e9-3ff3ff94b7fc",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "fc88cbac-d3b8-4c02-a58a-945406e16483"
        },
        "item": {
          "id": "5f433e0a-c78c-433b-b1ff-24a0532b1337",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "339d32ec-e96e-43b5-9402-3e314c0000dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e4a777a-ee2c-4458-9149-65220d60ec02",
        "cursor": {
          "ref": "3f2433b6-6f72-4072-abd6-14341cd6b058",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b9daff82-9e45-4e9e-a355-3c9714230fef"
        },
        "item": {
          "id": "3e4a777a-ee2c-4458-9149-65220d60ec02",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c6e0734b-c217-49ce-9cb9-e069e567555a",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "83e81af7-4962-46f8-9662-36e55757e646",
        "cursor": {
          "ref": "5014eab1-9f84-412e-ae57-f9c662c9a4f7",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "37debd7c-e555-48bc-9a82-647fe221704d"
        },
        "item": {
          "id": "83e81af7-4962-46f8-9662-36e55757e646",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "9dedec57-13ab-46c7-91db-e2152c39f7da",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "32d38fcd-ede0-4381-b72c-230e68f0cfc3",
        "cursor": {
          "ref": "8fb7adb2-1bf9-48a5-a4aa-f0a95ca41ee8",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "db616bdd-22d9-4dbc-81bf-9a4a79338b0d"
        },
        "item": {
          "id": "32d38fcd-ede0-4381-b72c-230e68f0cfc3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "0b644ce8-4d79-46d7-9684-dd6671693d19",
          "status": "Created",
          "code": 201,
          "responseTime": 388,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "bdb4f987-1c35-48aa-bab7-8f34d80d5479",
        "cursor": {
          "ref": "fdc0b7c9-aead-4282-9150-e90d0033ed23",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "8a5eb9bc-e928-45ae-ba69-88eff2727c91"
        },
        "item": {
          "id": "bdb4f987-1c35-48aa-bab7-8f34d80d5479",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e164d160-e515-46e5-aaa9-d9b9d30fd463",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "ca036c7a-ffa2-48f9-965a-dbee50d4936d",
        "cursor": {
          "ref": "48bf14b9-e656-4f81-a150-d86a5bef733f",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "2f06545d-3b10-4492-85df-24464438f832"
        },
        "item": {
          "id": "ca036c7a-ffa2-48f9-965a-dbee50d4936d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "4627dc6a-505f-4e67-a24d-86788f072cda",
          "status": "Created",
          "code": 201,
          "responseTime": 393,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "b8a90efc-b723-40ac-8a35-77a2668f7750",
        "cursor": {
          "ref": "6d02f28a-acbc-4d92-a531-944e3fe4888b",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "4b930e87-0938-4353-b932-2f32d451ad3d"
        },
        "item": {
          "id": "b8a90efc-b723-40ac-8a35-77a2668f7750",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "a991464d-d971-4d1e-b737-21a42b83e3a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "422cfbef-348b-4241-8e22-4845b48fc9aa",
        "cursor": {
          "ref": "24867a72-1da0-40f4-8184-fd415bc0fc7a",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "282677ab-70a9-4ccb-b76b-75843a827ba2"
        },
        "item": {
          "id": "422cfbef-348b-4241-8e22-4845b48fc9aa",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "92ef9b03-7a40-49dd-9cc1-012c74e046ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4109fa29-854a-4925-afb4-d59528bdce69",
        "cursor": {
          "ref": "ad5db49d-a8ae-41aa-be0e-6a72441dbfe7",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "589d5f64-fff3-492b-8f47-74aed843d131"
        },
        "item": {
          "id": "4109fa29-854a-4925-afb4-d59528bdce69",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "7d5f51a7-2796-475e-871b-bc6e6c863b29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee25802d-6709-4433-9274-d33a710e7dd4",
        "cursor": {
          "ref": "b7d29f2e-26d3-4d49-ab85-e936c70f3265",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "7d1b931d-a90b-4156-82b3-17af638fbfac"
        },
        "item": {
          "id": "ee25802d-6709-4433-9274-d33a710e7dd4",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e60b2182-f55e-4d55-a7a2-ba442cc94da5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43351b35-2c06-4459-b69a-9b7f0cd35fe8",
        "cursor": {
          "ref": "79bc6190-7bb4-4e56-aebc-88ccbe7e4495",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "fb1f3db2-1877-43db-9e18-ec4036c903b1"
        },
        "item": {
          "id": "43351b35-2c06-4459-b69a-9b7f0cd35fe8",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "15ce6b58-aa14-4f4a-97c0-478e547d4de1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aa6a610-1e3e-4a3b-ae7d-98dbad7d3222",
        "cursor": {
          "ref": "cb73e614-c73e-4888-865b-338be6110aef",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "da663f3e-4abb-4028-8cc4-185c46f06a2d"
        },
        "item": {
          "id": "5aa6a610-1e3e-4a3b-ae7d-98dbad7d3222",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "0bb2848c-57c0-45dd-9f86-b5b11b11392e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d253167-d456-4b52-a5f5-54aff7563d7d",
        "cursor": {
          "ref": "3d8b5689-ec55-46da-b24d-af7adc334f30",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "e8e5df96-28fb-4de0-8641-fd4547327495"
        },
        "item": {
          "id": "4d253167-d456-4b52-a5f5-54aff7563d7d",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "3632e4ff-5d20-4835-b3b8-672fc40de09a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70c99e97-ff40-48f2-9a95-e94947bcd13f",
        "cursor": {
          "ref": "b12dfd23-31aa-4115-ae30-43b6cdbc27a2",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "d0bd2318-24fe-4bce-8005-7db91b62a657"
        },
        "item": {
          "id": "70c99e97-ff40-48f2-9a95-e94947bcd13f",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c72e80b2-f746-40b5-ba5a-35e7d8737d27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b02192d-de93-4d09-a949-53ddc86eb522",
        "cursor": {
          "ref": "b72d3686-48e0-4f8a-8c8f-721656c4a1be",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "b7c5fe94-09ad-48de-ae92-845c10854b6a"
        },
        "item": {
          "id": "5b02192d-de93-4d09-a949-53ddc86eb522",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c63828ce-c0c7-44c8-8412-a244cf7679dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c98e1012-35de-4a5a-b98c-f942500f2001",
        "cursor": {
          "ref": "b65f9d65-4323-47c4-8be7-a1693088b735",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "c6d60152-60e6-4743-a749-300e828208d1"
        },
        "item": {
          "id": "c98e1012-35de-4a5a-b98c-f942500f2001",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "68166c3f-8da0-48a3-99e3-c202f32f3b49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf9cdb6e-fff5-4358-9b44-0aac19bfe891",
        "cursor": {
          "ref": "e6159fb2-0fbd-431d-96c5-af7fe2d9cd61",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "eacf0133-41d2-48ae-b067-b375a9694fbe"
        },
        "item": {
          "id": "bf9cdb6e-fff5-4358-9b44-0aac19bfe891",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "66ce850e-7fce-4773-88f4-40d681e46dff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaa8cd7b-0706-43f3-824c-c5f9efc402db",
        "cursor": {
          "ref": "8a7d251e-6943-4c7b-9855-9d368d1d8b70",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "926b0dcd-4b9a-4b2e-b9ca-80fcbc9fb125"
        },
        "item": {
          "id": "aaa8cd7b-0706-43f3-824c-c5f9efc402db",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a164b7e8-c042-43cd-9d2f-ee5900f5a53a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "317c6726-ec49-4045-9b42-bf44e31b8e32",
        "cursor": {
          "ref": "b39908dc-faf9-4daa-969d-752c90df8f53",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b583f03a-0064-46d3-b3ae-65d514296e2e"
        },
        "item": {
          "id": "317c6726-ec49-4045-9b42-bf44e31b8e32",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c5024cf1-d914-4610-b87d-d4548e08b222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c46fc3a-db4e-4987-891a-d022a46fd8bb",
        "cursor": {
          "ref": "4383810e-7233-4856-9fbb-2688a53dce14",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "25bfb961-579e-41ba-b279-26440b8a1f7b"
        },
        "item": {
          "id": "6c46fc3a-db4e-4987-891a-d022a46fd8bb",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "cbf91423-b558-4a36-afa3-e4127081b182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebdc572c-f182-48d2-8f27-992bc049217d",
        "cursor": {
          "ref": "fde676ea-44fe-4c45-8c92-f4f5e15dc475",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ff865564-2c1e-4afc-9a4f-0bc489a8ee01"
        },
        "item": {
          "id": "ebdc572c-f182-48d2-8f27-992bc049217d",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "8bfd8e58-cb7d-4496-b625-de4db83e9ed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6205002-af74-44f1-94d4-1dafeec8e2d1",
        "cursor": {
          "ref": "24ea7f1c-b80f-452a-99ef-e3282141a28b",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "7a2208bf-0b61-4f7a-8553-11cbf23ba980"
        },
        "item": {
          "id": "c6205002-af74-44f1-94d4-1dafeec8e2d1",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "2745e6db-3d56-485e-8227-85bbfc070bae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75fe989c-d160-4a69-aa92-d492c7699fa9",
        "cursor": {
          "ref": "e8199663-4ed2-4702-91d3-7747094e01b6",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b5273083-7ee8-48bd-9d68-256a161d8d19"
        },
        "item": {
          "id": "75fe989c-d160-4a69-aa92-d492c7699fa9",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "04304da1-548a-49b8-b536-63074d09a623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f03be49f-9f7d-4ace-b598-2452ce8a28bc",
        "cursor": {
          "ref": "8fa53438-5428-4bb9-a244-8f7a1c3251e1",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "143e4106-8e4d-4f99-a438-c0b714525135"
        },
        "item": {
          "id": "f03be49f-9f7d-4ace-b598-2452ce8a28bc",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "58adca5e-49b8-4fd6-9b43-9e4083bb8596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "993364c2-a67a-46d6-ac88-e3bdd6111730",
        "cursor": {
          "ref": "7b69407c-1340-4665-a7cb-fb3e770f2d3d",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ba8b70de-9f7a-4ca5-8e91-83862cc0df06"
        },
        "item": {
          "id": "993364c2-a67a-46d6-ac88-e3bdd6111730",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "09c24857-f1b9-49a7-a222-6efbf7b79060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba7a08a8-1388-4b59-a3c5-20e1005f9929",
        "cursor": {
          "ref": "c21e9b60-78f6-44f2-bdb5-dd140224a701",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "293985d1-4c3d-4640-8708-804572d307d0"
        },
        "item": {
          "id": "ba7a08a8-1388-4b59-a3c5-20e1005f9929",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "2416e1fa-b50e-47ce-a17d-8b0b0661890e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92fc255b-8c3f-48ab-b76d-f4a814c22aad",
        "cursor": {
          "ref": "284fdb63-5ade-486c-a4c9-2f526f91317b",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ed4ab1bf-a9c4-4b2c-b220-dc75c237ee30"
        },
        "item": {
          "id": "92fc255b-8c3f-48ab-b76d-f4a814c22aad",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "01b84099-2201-4c52-8e64-a94f783f449a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "387a307d-6bdc-4081-b67b-991f557d56b5",
        "cursor": {
          "ref": "ef8230ae-e0a0-4929-b6b6-2dcc268e2b6a",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "c2ae00f3-8c39-4c1d-a8b6-fbd1365989b1"
        },
        "item": {
          "id": "387a307d-6bdc-4081-b67b-991f557d56b5",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "01094896-3cef-42fe-8e8a-bfed78492e83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db1a03bc-1411-495b-bac0-410b924a9c00",
        "cursor": {
          "ref": "111b7615-158a-4c89-a1ce-b65947451e74",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "e26ed0e9-548e-4dfe-a4b0-e3ae61d36ac6"
        },
        "item": {
          "id": "db1a03bc-1411-495b-bac0-410b924a9c00",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f589a8a7-c5b5-455f-a159-7858f6c71b70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed00175b-9eb8-4238-8c08-b01e1057f695",
        "cursor": {
          "ref": "78bd6c29-3344-4de2-994c-36e72fa4dff0",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "fd64a0f6-5f17-4965-8aa0-b9a59ab72596"
        },
        "item": {
          "id": "ed00175b-9eb8-4238-8c08-b01e1057f695",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "aa44111c-0bf2-444e-b7a4-95901a188f87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0b94ad7-7e97-4b65-854d-9953ed241247",
        "cursor": {
          "ref": "e2c4bc0b-f73f-4363-8e8d-0f5672da8a0c",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "97304067-ebb3-4e1e-9f79-948fa1660b8a"
        },
        "item": {
          "id": "b0b94ad7-7e97-4b65-854d-9953ed241247",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "82a07a4d-2287-4f98-ab53-d5b9717973b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca93aed1-c766-46db-b244-3b4e56c92e27",
        "cursor": {
          "ref": "7ecd260b-0616-4db5-9f3b-1f213d7735c7",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "c7cf5fc3-dddc-4243-8110-cc00e0f555b6"
        },
        "item": {
          "id": "ca93aed1-c766-46db-b244-3b4e56c92e27",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "88722e62-40ce-4fc4-8e12-fc12510fc122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba9504e9-31f2-4c55-8c0a-29588d1e31db",
        "cursor": {
          "ref": "44053df2-0660-4948-83f0-b989d0904025",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "911efbcb-335a-49d2-946e-4808a7fe784b"
        },
        "item": {
          "id": "ba9504e9-31f2-4c55-8c0a-29588d1e31db",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ae23d679-34b5-4165-9015-a6af7fdb1da4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58263184-28c8-470c-994f-0744c66f17fe",
        "cursor": {
          "ref": "b2ca784e-1b3d-444a-bffa-0f4f53a67dfa",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "fffbd55d-8c2c-4499-932a-83865fb2358d"
        },
        "item": {
          "id": "58263184-28c8-470c-994f-0744c66f17fe",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "7c1f9d9f-5dc0-45cd-b339-302f8c2745ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17b689ad-2336-4a11-ac56-3a11940f676f",
        "cursor": {
          "ref": "577b8f56-d372-419d-b0b9-b8f70e8ec0cb",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "7bfa8314-2298-43f3-9a21-306acd8b7640"
        },
        "item": {
          "id": "17b689ad-2336-4a11-ac56-3a11940f676f",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "586e7372-b4e5-46a8-8973-08656a6fe981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ece36ede-e0a8-425a-a9db-ea1e67eb5e28",
        "cursor": {
          "ref": "106cb2e4-6aa0-4957-96ab-75313546a5b2",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "36283a8e-6e7e-4c59-b4ec-f4937648eae2"
        },
        "item": {
          "id": "ece36ede-e0a8-425a-a9db-ea1e67eb5e28",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "69a70872-4aa5-4fa4-b859-62aecef1c613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52095509-e6ac-4e45-8bc5-0910e9ccc726",
        "cursor": {
          "ref": "1480c174-1e4f-4838-9ade-364b493f1a65",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "83e15c7f-dd9b-431f-a475-63c947de914a"
        },
        "item": {
          "id": "52095509-e6ac-4e45-8bc5-0910e9ccc726",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "970efc32-61a5-45b3-89f9-20432bc2aa8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1690ca29-44ff-4e7c-97b3-20becb16dc36",
        "cursor": {
          "ref": "ece3f96d-38ba-4cc5-8e31-c86597e26754",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "aa34ab43-9a5b-4247-8e24-1d6d51959df2"
        },
        "item": {
          "id": "1690ca29-44ff-4e7c-97b3-20becb16dc36",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "3b8adcc6-cd90-4e6f-a56e-ca75fbe125b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a834930c-d36d-418c-ac13-ee4912f0e8d9",
        "cursor": {
          "ref": "49111dc7-6d7b-4edd-bfb7-2a8cb8d1b6d7",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "45b5798e-3766-4613-82f4-d378abd5fbec"
        },
        "item": {
          "id": "a834930c-d36d-418c-ac13-ee4912f0e8d9",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "20b322c2-c329-447d-84d6-7fc17915654c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "e4bb6171-b434-47bf-b32f-2efbbd29b413",
        "cursor": {
          "ref": "1c500314-6d34-49dd-ae59-18e9ed4b7a83",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "52b709c6-3d10-4aed-a8da-9bc017f31f7c"
        },
        "item": {
          "id": "e4bb6171-b434-47bf-b32f-2efbbd29b413",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4e7c08b0-bb54-4fb5-9fe6-33ca3e8aba22",
          "status": "Created",
          "code": 201,
          "responseTime": 390,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0145f1c-05cc-4a45-aadc-c9369f244a74",
        "cursor": {
          "ref": "6f5a4ab0-d36e-4cc3-a385-febab7afd329",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "022f3ba4-1aba-4246-a4f6-769c4893e7e4"
        },
        "item": {
          "id": "c0145f1c-05cc-4a45-aadc-c9369f244a74",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "db22fa05-bd90-435d-aeef-f4d4ab242a13",
          "status": "Created",
          "code": 201,
          "responseTime": 389,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3edc154d-9b4d-44cd-9580-ce3c77fe58dd",
        "cursor": {
          "ref": "14a9782b-6dad-41cb-ae3d-fd58bf033d73",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "90e228a9-a141-438e-bf89-66c25cfa4d3b"
        },
        "item": {
          "id": "3edc154d-9b4d-44cd-9580-ce3c77fe58dd",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "2a2f00a7-f488-411d-a0f2-730fa7c1779e",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2494fd3a-2c83-45b3-b88a-d7fcd6a1eab7",
        "cursor": {
          "ref": "5efb909b-8e5a-44aa-a588-17b9742003d0",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "c453f169-a212-43c0-a125-342b5b374c2d"
        },
        "item": {
          "id": "2494fd3a-2c83-45b3-b88a-d7fcd6a1eab7",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "0ad31921-d53b-47c7-a2c4-a7990c977206",
          "status": "Created",
          "code": 201,
          "responseTime": 382,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "38fc9d58-6d65-4e20-a53f-b217d917fcbc",
        "cursor": {
          "ref": "e9457e75-51ff-4512-884f-c2252bf2c2f2",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "d0477ab0-a3e7-49c0-8601-5bdcbad9bfba"
        },
        "item": {
          "id": "38fc9d58-6d65-4e20-a53f-b217d917fcbc",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "5ed93406-640f-4633-89c8-051a77ef0ea6",
          "status": "Created",
          "code": 201,
          "responseTime": 376,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-03-12T00:33:52.883Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-03-12T00:33:52.883Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "126ef05c-d4fe-4a80-8697-01e455e74c8d",
        "cursor": {
          "ref": "02fbcba7-04c7-4569-9e5b-42b0578d0e16",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "e1219bdb-585b-4623-ae03-353d1a41871d"
        },
        "item": {
          "id": "126ef05c-d4fe-4a80-8697-01e455e74c8d",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "21c26ea6-9406-4f9e-af7f-3b84f5f6d0eb",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b04b7b8-5799-42f7-99a7-c7b22735003e",
        "cursor": {
          "ref": "38d4f3fd-cea2-4cd0-bad2-77d050069bb8",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "15cdcaa4-be61-4887-abfe-f888479ce333"
        },
        "item": {
          "id": "8b04b7b8-5799-42f7-99a7-c7b22735003e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d57fcb74-8c2a-401c-a35d-06f297f8bc45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "325f1dec-a07c-4536-8021-05d7ea57afb8",
        "cursor": {
          "ref": "3c9343d4-3b8e-4aee-8392-21fd40ae781a",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f6b3a668-725a-4a28-a208-5a301071d303"
        },
        "item": {
          "id": "325f1dec-a07c-4536-8021-05d7ea57afb8",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "184eac7a-396d-49fe-876f-eab24d896445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb9ec0b1-28b5-4571-8e01-e7d63ba19656",
        "cursor": {
          "ref": "fe222a05-8930-40f4-8301-6f190d353765",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e332ebff-f5d3-4d56-83f5-8608c4fa1aa3"
        },
        "item": {
          "id": "fb9ec0b1-28b5-4571-8e01-e7d63ba19656",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "05984d7c-a12b-41b3-ab3f-1463e1673f2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0bfadaa-c4fd-466d-84b1-049b529f8573",
        "cursor": {
          "ref": "3c83287e-06fa-458a-826f-151374b4b9f2",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "5b24bc91-3be3-4921-8d96-e2db2f6a87d9"
        },
        "item": {
          "id": "a0bfadaa-c4fd-466d-84b1-049b529f8573",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2c7bf3fa-f8ff-4396-aefb-fc40d27a7840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dded4dd-61d9-49b3-896f-c776c2e53171",
        "cursor": {
          "ref": "9332fd32-21e2-493d-b904-a9a055364857",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "4c222418-5205-45bd-9f00-3cdf5e591cb2"
        },
        "item": {
          "id": "7dded4dd-61d9-49b3-896f-c776c2e53171",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a9ca2afd-e35f-4a7a-a51f-b18d88bc70e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "096ddcd5-c5e2-49fb-acf9-6dac4c53aa91",
        "cursor": {
          "ref": "59ef3cd9-b275-4bde-8c4e-ab3b892035bd",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "67f0a579-8ffa-4d66-aa47-9edb90a565b7"
        },
        "item": {
          "id": "096ddcd5-c5e2-49fb-acf9-6dac4c53aa91",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "2d8ed0c8-054d-4c57-b211-87f7cd1ed363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0983b33f-ba8a-41d2-a417-4fdfeaa9b2c4",
        "cursor": {
          "ref": "81d8a11e-9455-4039-a3af-6fecd53c720e",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "77949980-a93d-4ce6-9970-e80a4a146f4e"
        },
        "item": {
          "id": "0983b33f-ba8a-41d2-a417-4fdfeaa9b2c4",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "bdd3e0f1-9472-4968-b22a-e553bcbc7034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2ef2577-b183-48a2-b5de-dcc34ed3299b",
        "cursor": {
          "ref": "6b6b6256-84b5-4fe0-a750-4a103e5914f2",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "67852d20-1a59-4286-b5ca-451e47ec4daa"
        },
        "item": {
          "id": "d2ef2577-b183-48a2-b5de-dcc34ed3299b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "3ec51c2d-3cfa-4d39-8a60-e2415114c9c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a653feb5-50c8-45a0-91cc-28291d0e39f5",
        "cursor": {
          "ref": "a115a99e-2768-4617-9029-12fd7260c6cd",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "0bbfde78-69ba-497a-8070-c856cadf07d6"
        },
        "item": {
          "id": "a653feb5-50c8-45a0-91cc-28291d0e39f5",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "1608ccd0-2cdf-488f-8f26-2be4f8a73f06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "258253e4-ae33-4b4d-98c5-bc96aeb80c3b",
        "cursor": {
          "ref": "1883f227-7f16-4536-bc13-f32032681e97",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "07aab285-4855-44c2-9ff3-2c3744da57c8"
        },
        "item": {
          "id": "258253e4-ae33-4b4d-98c5-bc96aeb80c3b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "571b348f-f087-4832-8085-415cb3d06a15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c49c5b11-8c84-44c6-8b1d-d58dc731086e",
        "cursor": {
          "ref": "f519dae3-0fe5-4332-ac8c-472b2589d4f2",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "2898d852-a859-474a-b219-1bd413e6c6e6"
        },
        "item": {
          "id": "c49c5b11-8c84-44c6-8b1d-d58dc731086e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b0dec1c4-aefc-4c9d-87ef-b3bfdab9b7fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62ef376e-8b45-4d0b-a00b-5085073fa726",
        "cursor": {
          "ref": "64b7de70-a0fc-4f7b-9d32-b89ea0962ae9",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "71b34c3d-51f0-41dd-846b-7a9de315a501"
        },
        "item": {
          "id": "62ef376e-8b45-4d0b-a00b-5085073fa726",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "4ee929b2-cddd-493d-be36-f87bedaa3636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4d2580b-4841-4cfd-8600-38061991c8f7",
        "cursor": {
          "ref": "4c0b8b0c-9d26-43e9-855f-11c2532d6db0",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "9ee55f62-795f-4cb0-a4cd-be97db79d6c6"
        },
        "item": {
          "id": "c4d2580b-4841-4cfd-8600-38061991c8f7",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "35c475fa-0163-43c6-b683-ce616d1553f3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 86,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "97fc0d75-58f8-4431-92a9-05057f746b6a",
        "cursor": {
          "ref": "5fd9ae31-f067-4cb8-831d-8a64d5d3aa22",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0eae873f-18b1-4a3d-8fcf-6dda98254eef"
        },
        "item": {
          "id": "97fc0d75-58f8-4431-92a9-05057f746b6a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f523b68e-c0fc-41d4-948f-dd694c5b9a5d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "255b7682-8490-420d-b946-94f8b28f7c12",
        "cursor": {
          "ref": "c8306acc-f17b-41ed-addd-38350871e9e5",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "3fcae1cb-094c-4d42-bd7b-9408bff8aad8"
        },
        "item": {
          "id": "255b7682-8490-420d-b946-94f8b28f7c12",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3699c01f-4076-49e7-80c5-153c8447ae95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "678bc22f-5143-45d6-b49d-bdc9576c4cce",
        "cursor": {
          "ref": "cf17ab62-4837-4c5c-8d6f-841896ae8f57",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "345f8802-a61a-4ebd-8b16-b8940349e4b7"
        },
        "item": {
          "id": "678bc22f-5143-45d6-b49d-bdc9576c4cce",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "52719f86-bfd0-492a-b057-ee7335fa2323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b1e7bae-6a89-40bc-871a-18de0eed2e9e",
        "cursor": {
          "ref": "9d1e6a76-51c7-4f1a-b99c-7e534dd46f08",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "dc11706d-0085-4c74-bad0-305bd8906cbb"
        },
        "item": {
          "id": "1b1e7bae-6a89-40bc-871a-18de0eed2e9e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "fbddb5f9-4be4-4342-9afd-6b1f8c79ccfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acb9c904-e660-4666-b624-f0b4585310cf",
        "cursor": {
          "ref": "cced3d70-fab7-4b62-ba3e-f0bf876ee164",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "bf9463fb-4fe4-43f1-ae43-d7ef2a348567"
        },
        "item": {
          "id": "acb9c904-e660-4666-b624-f0b4585310cf",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7e8a4327-b874-4201-907e-8000249cbd0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1b6baca-5efa-4bb9-8e5e-562e01a77df7",
        "cursor": {
          "ref": "82c12fe0-bb4d-4cd3-8f11-1221545c5cc1",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "851e719c-7058-4706-a234-c05edf784b83"
        },
        "item": {
          "id": "a1b6baca-5efa-4bb9-8e5e-562e01a77df7",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "715ee3f3-79c6-41f8-904c-75b02db2547a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dfe9e62-31fa-4d4c-a889-919372418521",
        "cursor": {
          "ref": "a093dd47-f199-4c50-a2d7-9e14b455cf09",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "088d1f2d-1476-4046-838e-4a5186c38870"
        },
        "item": {
          "id": "7dfe9e62-31fa-4d4c-a889-919372418521",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "18455999-829a-4d82-bbd9-373d8c2f3e0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3955ebca-c049-4eea-80a9-69adf17c1e84",
        "cursor": {
          "ref": "48409be2-6d89-486a-a27a-0ea0ab7b2f8a",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "c3ccae36-cba4-46b0-9e2d-69349bcf30fd"
        },
        "item": {
          "id": "3955ebca-c049-4eea-80a9-69adf17c1e84",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "fbfd18c8-c6f4-4929-b8ee-0ee25f1d0851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f62a979-59b7-4150-8de3-cba55ad3ccd4",
        "cursor": {
          "ref": "4b812809-0323-4987-a2bd-1ea533eea8dd",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "89e30073-c94f-4fda-b9ae-fec57bc226f5"
        },
        "item": {
          "id": "9f62a979-59b7-4150-8de3-cba55ad3ccd4",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "7a7e6701-75f9-431e-b8fd-751a760fcb80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abb4fd79-d870-4e34-a64c-05b776e04722",
        "cursor": {
          "ref": "a272ef35-08b1-4384-84a3-199b0014afb8",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "1cca2abf-acbc-485d-82eb-f7458483b804"
        },
        "item": {
          "id": "abb4fd79-d870-4e34-a64c-05b776e04722",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "231b3b8c-ccaf-4f07-a8ae-5a4d27fddc31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7276de38-cb3e-4a5a-bce5-87adc4ec1fb0",
        "cursor": {
          "ref": "f41d1860-aaba-43ab-bf9f-3874703e12e0",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "8a914479-2173-411a-9b6c-68755c3778e2"
        },
        "item": {
          "id": "7276de38-cb3e-4a5a-bce5-87adc4ec1fb0",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1022a486-9511-4fd2-83cc-6955fdf06084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d172b7e-0095-42fb-8a07-b0db705f8f53",
        "cursor": {
          "ref": "350f7b3c-772f-4d04-8458-490ee60d8036",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d51b08fa-b53f-48a8-884b-39b066b307b6"
        },
        "item": {
          "id": "6d172b7e-0095-42fb-8a07-b0db705f8f53",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a0067a60-e178-4772-96b7-555b5c34f0d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a548bc5-d2c6-428c-980e-6d5d29864403",
        "cursor": {
          "ref": "3e204bf3-858d-4a4e-9b54-aaca3d07d4f8",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f315dd2b-3e52-4074-9f51-a9261255b6c4"
        },
        "item": {
          "id": "5a548bc5-d2c6-428c-980e-6d5d29864403",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a06a8eae-c63f-4d1c-9059-16d921c2002f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b1f7dd7-1fed-456c-bdb1-2653e8670120",
        "cursor": {
          "ref": "c5dbcd23-e03b-4643-85d8-b1cb90acb5df",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "4658d241-8f36-4926-baaa-7d1d96a49fc2"
        },
        "item": {
          "id": "8b1f7dd7-1fed-456c-bdb1-2653e8670120",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "df69d0ca-b852-431b-8693-c56a5099988a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc188c12-d22f-4377-8729-7f0dba81311a",
        "cursor": {
          "ref": "d6f91c6d-17a4-4b50-96ce-41934845e194",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "20a54509-6077-449a-b46f-25429f07112e"
        },
        "item": {
          "id": "fc188c12-d22f-4377-8729-7f0dba81311a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a1ee2fa3-0f13-4618-8e27-a566e2d40d65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4e25aa1-e272-447e-8fcb-38aefd6c4dc2",
        "cursor": {
          "ref": "f578a80d-02b6-4b23-aaae-d182bbbaa606",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b5986755-7d13-42d8-ab16-54f739bf1229"
        },
        "item": {
          "id": "f4e25aa1-e272-447e-8fcb-38aefd6c4dc2",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "43740786-7c30-49a7-8e20-6441d76376ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56c5c0b5-32db-43bb-89fd-ef5c6455ae60",
        "cursor": {
          "ref": "0fb9cf78-fc0c-4aaf-8dd7-8a8c8463e430",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "48bed040-eda0-4694-8eb2-dea9949f6919"
        },
        "item": {
          "id": "56c5c0b5-32db-43bb-89fd-ef5c6455ae60",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1cba5228-66e8-4ab2-8e31-7d8f9c01f1a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "629f2954-78ae-4cb4-b5e9-40470cdb16de",
        "cursor": {
          "ref": "71de7142-69a6-4026-8a92-03647e900d92",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "1526bb2e-00be-4dcb-827c-84494e25d6a8"
        },
        "item": {
          "id": "629f2954-78ae-4cb4-b5e9-40470cdb16de",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c2f8bc28-38c4-4079-8f62-20a0688b79ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d77d87a-dc1a-4d0f-8bbf-b6613eb0e3b4",
        "cursor": {
          "ref": "add8a0b1-1a6a-4d6c-9a1f-120514227b69",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f7d8e51a-3b8a-4986-89d3-63eea82296d9"
        },
        "item": {
          "id": "6d77d87a-dc1a-4d0f-8bbf-b6613eb0e3b4",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "39589410-0eb7-4c8c-bc44-ef6a221b24bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "084aed3c-7e85-4c42-a773-7d45c1445f1c",
        "cursor": {
          "ref": "87a56fe7-3f3b-48fb-a7a9-91ca7419c1e0",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "e406f6e4-c6d0-4885-97f2-176558b8819e"
        },
        "item": {
          "id": "084aed3c-7e85-4c42-a773-7d45c1445f1c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "235db57e-26d9-400b-9cda-70bfab102dc1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f300f3d6-0bf4-46c3-8b45-a216cca22a03",
        "cursor": {
          "ref": "9b7c0575-6716-4c41-b290-8c289f082bb5",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "4800ba36-408c-46d3-9274-3754047f4b4d"
        },
        "item": {
          "id": "f300f3d6-0bf4-46c3-8b45-a216cca22a03",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d09fc907-b73d-4562-a73c-9a3a9cb40edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3994fb30-159b-4b14-a671-dee983ed1040",
        "cursor": {
          "ref": "5915f380-5c86-4843-b2fe-a4c7c1b03320",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "f59f0db2-0f75-4401-b764-a32794866cec"
        },
        "item": {
          "id": "3994fb30-159b-4b14-a671-dee983ed1040",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "fc2a1f21-1e38-4524-aeec-7c65dcdf9e33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82cb9598-adde-48fc-9820-30ac8558c47b",
        "cursor": {
          "ref": "f0cf2f3f-7fbc-4c9c-ab44-9fa35ed0df06",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "cfc15ecf-c587-420a-9381-f99014d79745"
        },
        "item": {
          "id": "82cb9598-adde-48fc-9820-30ac8558c47b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f6f0e6de-7ee1-493e-a327-1430d2dfdb16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4924c6d-84c8-47d1-9833-93834ad56fe9",
        "cursor": {
          "ref": "6c2a39cf-9b31-4560-8455-a4334169fb6f",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "473f98a9-b888-47ec-a994-f5abab7a4f94"
        },
        "item": {
          "id": "a4924c6d-84c8-47d1-9833-93834ad56fe9",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1d006b4e-96f6-4539-ae8f-b9e21ca9ec6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f109cbc-0a2f-4915-8bcf-e3d4558d6b9f",
        "cursor": {
          "ref": "15ab547e-98e5-43ea-8dbb-bf40b6dd0b36",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "64842b38-bc77-4823-b946-7a74103b1cbe"
        },
        "item": {
          "id": "5f109cbc-0a2f-4915-8bcf-e3d4558d6b9f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ec994591-0d0d-4219-90f1-52c5581a8d80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e087660-c11d-48fd-adc2-d644b2b24482",
        "cursor": {
          "ref": "04e70434-f978-4092-b72b-cc5aafd4a014",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d6a5691c-e130-4805-ae25-060958e64e6d"
        },
        "item": {
          "id": "2e087660-c11d-48fd-adc2-d644b2b24482",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6635eaf2-bfab-46b8-84ad-46eeea131aaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65816dee-8aa4-4b5d-a3dc-821ab31cab6f",
        "cursor": {
          "ref": "c44a7808-cde9-495b-9c78-531df8495b52",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "f59fb19f-9d92-4593-9857-810e774ec6bd"
        },
        "item": {
          "id": "65816dee-8aa4-4b5d-a3dc-821ab31cab6f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "014f3f89-d3f3-41e1-ae69-36f615d21b60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd1a0bd4-1100-4515-86ad-02a9beed8de5",
        "cursor": {
          "ref": "4faea6cf-4aac-4531-9e13-c8c533f35d74",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d79e0e54-7850-4ee3-b805-9a35f76a7a37"
        },
        "item": {
          "id": "bd1a0bd4-1100-4515-86ad-02a9beed8de5",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "384be739-0183-420c-ad9b-da8f3667c4de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd236516-c1bc-486a-8aa2-2ad80635ac59",
        "cursor": {
          "ref": "5ea9b4a9-9741-4f4b-a328-b0f7fdc28f3c",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "8c5e89b1-ba70-483a-9fa1-6478211a2b2c"
        },
        "item": {
          "id": "bd236516-c1bc-486a-8aa2-2ad80635ac59",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "6ea382d6-4b42-4912-8aac-027e14feeaf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20af6394-e5a9-41ce-ae72-196084bfa1ec",
        "cursor": {
          "ref": "f30afe22-97c9-4564-831e-ce8bf8a91cb2",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "9ab33a2a-c75f-457e-b065-81faaa75c546"
        },
        "item": {
          "id": "20af6394-e5a9-41ce-ae72-196084bfa1ec",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "468b87b6-8116-4133-80ea-054815d314f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbbed1be-3a73-44c3-a857-799b58dc9002",
        "cursor": {
          "ref": "10eab236-7ae0-47e3-bb88-c1a6e48aaa5c",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "0433d7e7-5b35-4d84-ba21-9588814b1f05"
        },
        "item": {
          "id": "cbbed1be-3a73-44c3-a857-799b58dc9002",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f3569c86-a0e3-45e2-9aa4-dae5b430a997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1f910af-c3d3-4c3d-ad07-3e8c206219d9",
        "cursor": {
          "ref": "78453f36-0c73-4913-aaf9-dcd4f936bd17",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "0208267d-a4c4-4288-98e3-b5ddb2c9660f"
        },
        "item": {
          "id": "d1f910af-c3d3-4c3d-ad07-3e8c206219d9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "44513cdd-86cb-4071-930c-5c74a4b678cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74a8d4df-3159-41ea-ab7a-7a0c559a6b90",
        "cursor": {
          "ref": "964f40af-a8f0-43e6-9990-b97dc44bc235",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "522d4b00-ebb4-4ca2-b157-4e29d3987082"
        },
        "item": {
          "id": "74a8d4df-3159-41ea-ab7a-7a0c559a6b90",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d7330139-b382-4133-8fd9-51299870899b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21131449-18cf-46bc-b2a2-a85ad2e4f4a3",
        "cursor": {
          "ref": "17834e55-6fca-41ed-95dd-462a6bc93502",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "49abc5cc-2d07-49b4-a05f-cb7b49bcdeb3"
        },
        "item": {
          "id": "21131449-18cf-46bc-b2a2-a85ad2e4f4a3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "cad71330-a231-4f72-be68-45a2aa98efe5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 140,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "9d026ec6-13c7-4611-aa99-557c0c516547",
        "cursor": {
          "ref": "d8dcfbd2-63a6-4a2b-bea6-c18dee404c7d",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "9e5cc9ff-acd2-40d8-9acb-797c08979c06"
        },
        "item": {
          "id": "9d026ec6-13c7-4611-aa99-557c0c516547",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b1f220a2-3a28-4fed-86c0-bfe3228bef9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ba1340-6ab4-4e9e-aeae-21c14a9d18f7",
        "cursor": {
          "ref": "82121a4f-cf4f-4e3c-8cf9-2eb18b407132",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "924fda76-9978-4a63-8fdf-16af9e14cd88"
        },
        "item": {
          "id": "47ba1340-6ab4-4e9e-aeae-21c14a9d18f7",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "66d62b48-1ba2-4eb9-93f2-24ed8821f96a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a9a589e-98a8-411f-a2c9-e6a583e9e697",
        "cursor": {
          "ref": "3707f968-81e6-4f12-ba46-ff44a4442ff6",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "16ccb19a-69d8-459c-bf53-31e319db0456"
        },
        "item": {
          "id": "3a9a589e-98a8-411f-a2c9-e6a583e9e697",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ef762533-76c3-4ea7-b6f8-7d6fccba9d77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "239dd5cc-7dd2-4d3e-be47-6eef8acd6793",
        "cursor": {
          "ref": "fd67bf5d-9d56-4cca-ab99-277d8a6218ad",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "076cdc03-217c-4264-ad25-73414d8b2859"
        },
        "item": {
          "id": "239dd5cc-7dd2-4d3e-be47-6eef8acd6793",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "95290177-8823-440c-9205-1bdd015feeee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d07c1604-d5a1-4ca2-b91d-2ea666a1008a",
        "cursor": {
          "ref": "d5b56a0c-3cab-44a2-8158-74b985661fae",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "d8485548-9762-4186-89ce-dfdc73b02baa"
        },
        "item": {
          "id": "d07c1604-d5a1-4ca2-b91d-2ea666a1008a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9fb6db58-cca4-4d3e-9c57-a56e08c72e4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd8f6354-ed3c-4fa0-9b94-6fefaa897ac0",
        "cursor": {
          "ref": "45e01c8c-57be-41fe-8804-5697afe9d79d",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "8947c662-8769-4842-8ba9-f04d960528d8"
        },
        "item": {
          "id": "dd8f6354-ed3c-4fa0-9b94-6fefaa897ac0",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "07197cc8-1257-49fb-9e0e-6f538c2c37c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86a3018c-f9e7-448e-92eb-af0eb5ed1ee6",
        "cursor": {
          "ref": "c27ad965-ec7e-4dc0-b307-d0b59ef31e3f",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "92bf7ec0-f10d-40cc-adbf-bd8ee1b666cf"
        },
        "item": {
          "id": "86a3018c-f9e7-448e-92eb-af0eb5ed1ee6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "123b335c-0e6c-4db6-af31-d06d0438a9f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39ee2c52-6942-4109-9b3c-0fb14cb5b60b",
        "cursor": {
          "ref": "b6758a16-abec-4d75-b4a8-7bb4c15adefd",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "d9554640-1dfd-4c9c-9ade-94bc39c5ccfe"
        },
        "item": {
          "id": "39ee2c52-6942-4109-9b3c-0fb14cb5b60b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "459fd91a-97f0-436d-91ca-d85e86ef06be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8070e3b-a15a-4d35-94e6-3a9b6dda624b",
        "cursor": {
          "ref": "b23b3eb3-1bbe-4fdf-8621-202cff45b1d8",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "2a943496-a2d7-43b9-8760-faed06182ae9"
        },
        "item": {
          "id": "f8070e3b-a15a-4d35-94e6-3a9b6dda624b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "85c9bdbd-9675-4b7d-bec4-103976474579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "770920a9-c2fa-4207-9bed-bd3d1a684a5b",
        "cursor": {
          "ref": "c8f7009d-4ae2-4034-98f2-031a27ac5a10",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9292ccb0-8da6-46df-800a-06c9c6321bfb"
        },
        "item": {
          "id": "770920a9-c2fa-4207-9bed-bd3d1a684a5b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6c7175e6-d623-4938-8a74-3b71f06f46ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9a31b0a-7b42-4c64-bb42-1bc803e50eda",
        "cursor": {
          "ref": "ef9ac1f1-0dff-4453-9b7b-e9fafa0ca87a",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "a9b599f6-6435-4c16-b822-2fbbdc7a938d"
        },
        "item": {
          "id": "d9a31b0a-7b42-4c64-bb42-1bc803e50eda",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a8c96e94-1794-45b0-8bd7-202e2f968015",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c137b6d-7eab-4be5-81f6-caa5a5fa18c3",
        "cursor": {
          "ref": "f7384351-de2d-4df1-8bd5-7641ec415170",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "77298525-80c5-4ce9-bc36-c78551dba0d7"
        },
        "item": {
          "id": "6c137b6d-7eab-4be5-81f6-caa5a5fa18c3",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "91f954ca-5e03-4679-bcd8-b0a085fa4803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbb2fc46-d7c8-4540-ab5a-4b4649153fa2",
        "cursor": {
          "ref": "1e21bc93-0e91-46ef-af1d-25f39fc13ed4",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "13fb5a12-7a55-43b0-8c30-c29ac87386c8"
        },
        "item": {
          "id": "fbb2fc46-d7c8-4540-ab5a-4b4649153fa2",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1f177a0f-9963-4826-944b-46d813955ec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6958bf6f-bdb3-412f-b262-58f6b795c077",
        "cursor": {
          "ref": "11728721-a080-4d89-86d0-144f0b95eec1",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "45a4d97c-de9e-49a8-a706-a6fdf81e916b"
        },
        "item": {
          "id": "6958bf6f-bdb3-412f-b262-58f6b795c077",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7eebdcde-b9f1-49c2-85e5-26f37c52e9ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b8763f9-170a-43b3-bf5d-e2ef4ae84aab",
        "cursor": {
          "ref": "602f8634-1526-4e47-8647-6ef76b6585bf",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "5b02308d-ca3a-4a88-b3d4-ce3352002a56"
        },
        "item": {
          "id": "3b8763f9-170a-43b3-bf5d-e2ef4ae84aab",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2fa6dd50-dcb7-4f67-b2ea-06fcef727fff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcfcfe9f-8bb1-41f9-8591-acb6b7b62fa8",
        "cursor": {
          "ref": "e54bea78-8952-4675-b1d4-964828ae6236",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "544571f2-0056-4bd3-a718-df409fb3f65b"
        },
        "item": {
          "id": "fcfcfe9f-8bb1-41f9-8591-acb6b7b62fa8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b9d7987c-537e-4e76-bee0-6afe93ae2b41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2514d93-6289-457e-8589-c4fb8a658a94",
        "cursor": {
          "ref": "3f20e9e4-16fe-4af0-8152-f9cd29a408f6",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "5825e355-2e16-4dcd-8a23-ce0911b94242"
        },
        "item": {
          "id": "b2514d93-6289-457e-8589-c4fb8a658a94",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "01461ef7-7fe7-4d7c-9acc-6b0808bb4184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53a8eb80-ef85-4e52-bfe0-27459e4f7aa4",
        "cursor": {
          "ref": "a1a2292c-91de-4687-8280-4bfddc5a81a6",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "5c4e2820-056a-49c4-9916-4a872514e423"
        },
        "item": {
          "id": "53a8eb80-ef85-4e52-bfe0-27459e4f7aa4",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "a5ea310f-d5f0-4cc3-9bb1-46c2fbab84a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e706290-cc64-451d-9b47-e3b887afd617",
        "cursor": {
          "ref": "ff8ad834-fc92-4238-8e62-5fa45f5d6802",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "646ae0f8-419c-40b2-a4e8-d57b33bc9a2f"
        },
        "item": {
          "id": "0e706290-cc64-451d-9b47-e3b887afd617",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "01cf4c1a-41a4-4078-aa72-b2fa5dad5ae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c8fc18c-83a2-4a7f-88ec-06143148ee5f",
        "cursor": {
          "ref": "2f2890d7-1687-46a6-a6c3-3edd99225b8b",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "35d769db-f5f0-4ad1-affc-d1fa47397dfe"
        },
        "item": {
          "id": "3c8fc18c-83a2-4a7f-88ec-06143148ee5f",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "0e86f9be-d11e-47b7-9c70-f02ff52ed113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac07bf0-ac90-4f0e-bf27-350a5bb58411",
        "cursor": {
          "ref": "1443eb17-ed2f-4c67-a956-c0d58cb02728",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "29a21952-4997-4c72-9a4d-0e6ef3045788"
        },
        "item": {
          "id": "5ac07bf0-ac90-4f0e-bf27-350a5bb58411",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "cfda86ab-3f1a-4263-a8da-68071bd74a67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49ae66fe-02fe-46da-a22a-01c8dc3a8b0e",
        "cursor": {
          "ref": "21cee081-88f7-4a6e-9c36-9fae1ef99778",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "93de0936-23cd-423c-8e09-b3608667ef85"
        },
        "item": {
          "id": "49ae66fe-02fe-46da-a22a-01c8dc3a8b0e",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "ea75881c-d3ae-48d5-bfb3-85669d349ad9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af558439-d28b-4622-97c9-a51aaac43ff5",
        "cursor": {
          "ref": "a5b082a0-09d9-4478-bdce-e7985a6d1731",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "17a671f5-36d9-4988-be62-95c9ed386002"
        },
        "item": {
          "id": "af558439-d28b-4622-97c9-a51aaac43ff5",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "b44f2a86-6a96-4d27-a125-ced4d77b3ad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c82624d7-b47b-41d1-9360-67476390b1a5",
        "cursor": {
          "ref": "ad805078-c0c8-4eda-8674-85c1133e6872",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "dac0c3a8-9d43-4e14-88da-a8d635009595"
        },
        "item": {
          "id": "c82624d7-b47b-41d1-9360-67476390b1a5",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "10e5f12b-6833-4915-9d60-afca293fa433",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d0aca88-6dbf-4b7e-b9ff-61efc953e1a6",
        "cursor": {
          "ref": "cbff2bf6-3b15-4faf-a7a2-01d17ab95cff",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "0e90ecda-fa72-487e-af82-e3dd159b1523"
        },
        "item": {
          "id": "3d0aca88-6dbf-4b7e-b9ff-61efc953e1a6",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2fc02491-ce66-4991-bfda-09e6f58a9dc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7939816-3220-4269-9ea1-36b7e7d46864",
        "cursor": {
          "ref": "cb461e80-ba4c-4a52-8279-66a8d642c2f0",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "cec5c58b-b7f7-4edf-a106-39977fd0f68b"
        },
        "item": {
          "id": "f7939816-3220-4269-9ea1-36b7e7d46864",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "848a8c0f-f0a8-41ea-b6f6-40dc70f6b3bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cf956df-5f7d-4073-afe2-c0efcc888dbf",
        "cursor": {
          "ref": "a50996b8-b086-4bd9-b49b-bc36174e148c",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "833b50b8-6dfd-4e08-88b5-1fbfd27fd469"
        },
        "item": {
          "id": "2cf956df-5f7d-4073-afe2-c0efcc888dbf",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "038c1eb4-573d-4ec9-8f41-4d6e31d2a101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc65f9cc-baf7-45ea-bf93-6da84fa2e19c",
        "cursor": {
          "ref": "bc94b85d-87ba-416f-a351-2073633a16c4",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "7c9d54cf-2c44-4d85-a0a1-81e6d19edb64"
        },
        "item": {
          "id": "cc65f9cc-baf7-45ea-bf93-6da84fa2e19c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "58fd33c6-74a1-4db3-aca1-80859d3b003b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb917883-73f4-421e-9d3c-8515e905b572",
        "cursor": {
          "ref": "390a789c-304d-4b62-9c26-a818b00a0885",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "4561518a-7cf5-47a9-998b-5a8f7a786392"
        },
        "item": {
          "id": "cb917883-73f4-421e-9d3c-8515e905b572",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e14dce71-7150-4e2f-8046-8826e907f875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f76d626-7b5d-4060-b90f-ae02400e6008",
        "cursor": {
          "ref": "c492eea0-d090-4575-9746-da3ed3ac84c7",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e2bf04f9-a4cd-4603-9a28-1d8bf22d41b4"
        },
        "item": {
          "id": "0f76d626-7b5d-4060-b90f-ae02400e6008",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "265748df-6a40-477c-ad94-9a9e9cc7545b",
          "status": "OK",
          "code": 200,
          "responseTime": 164,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "f8587cda-be55-4488-bbed-7ee7bf02ba2a",
        "cursor": {
          "ref": "2c1325e0-44e8-4941-ae7c-336b0aff71a9",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "1269867c-7446-42df-a1c2-c24c22c6b140"
        },
        "item": {
          "id": "f8587cda-be55-4488-bbed-7ee7bf02ba2a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "de2ee933-dff7-4f4b-b719-6d17cfba858b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b76c912c-8ea9-45d1-8229-a3ff421c6d84",
        "cursor": {
          "ref": "b984344a-9b94-4fb5-bf4f-3ec0ecbba9d5",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "25008476-944c-49fe-a6e1-bbc8e1dde0b8"
        },
        "item": {
          "id": "b76c912c-8ea9-45d1-8229-a3ff421c6d84",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "cf6c9bc0-5676-4d12-9097-8ace703a3882",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f6e2d59-274c-46bb-9164-17b6a04f6682",
        "cursor": {
          "ref": "50dfaa8f-50d1-4a0a-a29b-58df08dd77d2",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "ef845c4a-fa94-4546-956c-5460bc9d790d"
        },
        "item": {
          "id": "0f6e2d59-274c-46bb-9164-17b6a04f6682",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "af90f6b2-f132-419a-92e9-95df1104b8ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8212d94b-87b4-4480-b438-6f43b69c5da3",
        "cursor": {
          "ref": "b19a5db5-e119-4000-a455-7d9917db8c2e",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c0ffbae7-7377-46b7-b529-06af99ecf0b5"
        },
        "item": {
          "id": "8212d94b-87b4-4480-b438-6f43b69c5da3",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e1a81c85-2ae1-4843-903a-e2a0e13c1de2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "334cae3f-bac1-4ab8-a46b-97dcf86fd0a9",
        "cursor": {
          "ref": "96ef3020-b915-4b6c-81f4-169805bfd86a",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "f237c210-30f4-4c0b-97a1-4b76f123ab44"
        },
        "item": {
          "id": "334cae3f-bac1-4ab8-a46b-97dcf86fd0a9",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "2ef659a5-9648-4620-bb64-6624339c4443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de2c3597-7ddb-41df-a605-647a0b0e0cb9",
        "cursor": {
          "ref": "443426d8-9d2d-4c8a-b7fd-6e1917af7310",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "e15aa71b-aa88-46ba-b659-53be50641ccc"
        },
        "item": {
          "id": "de2c3597-7ddb-41df-a605-647a0b0e0cb9",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "bf14af0e-336b-437a-b01b-4b86d9e7278f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35c724de-1c96-423b-b7bf-e95801d64d8a",
        "cursor": {
          "ref": "3d415f41-2403-483c-a4ca-0da1eaeeeba8",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5456ca2d-28a3-4268-be8e-863d1df4f22f"
        },
        "item": {
          "id": "35c724de-1c96-423b-b7bf-e95801d64d8a",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "048fdf5c-64ed-4b62-815b-3d4e5aea974e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf4b8afc-ca6a-45fc-a177-1373d302d29f",
        "cursor": {
          "ref": "a34cd155-d5fc-4b66-a51d-cb0204862c18",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "6ed876b9-04f1-43c4-8b7b-9c70004079e8"
        },
        "item": {
          "id": "cf4b8afc-ca6a-45fc-a177-1373d302d29f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "60b69d65-bc1b-41ca-beeb-329a18160576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0620a5d2-8049-4c6f-9a97-80ed5a4d3dee",
        "cursor": {
          "ref": "7fa01626-2f1b-4bac-815a-9b5b9fa9aec7",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "323c9b80-9c52-4e75-8bf6-4b2b00416c41"
        },
        "item": {
          "id": "0620a5d2-8049-4c6f-9a97-80ed5a4d3dee",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "00c2474e-2fd0-482a-ac28-7621422eed07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "723c3833-ce46-4992-afdb-9c975ea11342",
        "cursor": {
          "ref": "6cd7cd83-6247-4149-85c7-67ac3c85fed1",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "6866ca63-7d24-4930-9157-2380c4efa61a"
        },
        "item": {
          "id": "723c3833-ce46-4992-afdb-9c975ea11342",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "a7b3cd01-053e-4651-b0f3-73c7ad9391ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "663ed614-9b10-4563-b460-7120eebbc75c",
        "cursor": {
          "ref": "e925ef2b-e4cd-48fc-b4d0-7f332996a77a",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "283230bc-20ee-4151-a128-0f7bf8c194d1"
        },
        "item": {
          "id": "663ed614-9b10-4563-b460-7120eebbc75c",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "85f804fb-41f0-40da-ae0e-349823f5871e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beec0c07-0d58-4545-882c-faec0c769f4c",
        "cursor": {
          "ref": "225d3af5-19e6-4e76-adb9-b16251609c1d",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "03f49057-4669-4d57-ab86-de8aeaff6b87"
        },
        "item": {
          "id": "beec0c07-0d58-4545-882c-faec0c769f4c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c20acb89-6fad-49da-aa01-480ddbb63819",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20713184-c3b9-4478-927a-2664fdd2a4da",
        "cursor": {
          "ref": "e6c24be1-cbed-4202-b642-f2a17665246c",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "04a0289f-aea3-437b-b15a-8ab4a0228e16"
        },
        "item": {
          "id": "20713184-c3b9-4478-927a-2664fdd2a4da",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "de0f20d7-0029-4f69-bbdc-f65f8796fcdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22fa19e5-8565-4a04-86dd-234cb24760ff",
        "cursor": {
          "ref": "5ba12da4-6ccc-49d9-bba4-7cf50dac7702",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "65ef3845-1db1-4e41-9558-13f7f77898d9"
        },
        "item": {
          "id": "22fa19e5-8565-4a04-86dd-234cb24760ff",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "70d98247-102e-4e3d-9f6f-65919b35d042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06e19390-e70f-4fdf-a026-f098f017b823",
        "cursor": {
          "ref": "2a4776e0-8805-4e88-bc31-d1bddae4f43e",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "3b8e40be-0816-4596-b4f6-44cc58037984"
        },
        "item": {
          "id": "06e19390-e70f-4fdf-a026-f098f017b823",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e18b0de7-bec6-4bae-b87a-360813d0a1c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db593357-308a-4484-8897-aa0a465d0325",
        "cursor": {
          "ref": "a9618bf8-bc88-4b26-a5a1-ad35bc0d55c3",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ad98518d-3ed5-40d8-a711-ecc3fd92bcf5"
        },
        "item": {
          "id": "db593357-308a-4484-8897-aa0a465d0325",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "3d6b9bba-f47d-43de-966f-0f9f2cbc751e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29c38855-b3e7-4cf8-a331-aa264f27b7a6",
        "cursor": {
          "ref": "de76dd87-bd3a-4589-958c-de7ba39263fc",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "21bd523b-0e1e-4480-8618-c3a832cd42c2"
        },
        "item": {
          "id": "29c38855-b3e7-4cf8-a331-aa264f27b7a6",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "adb1e112-826b-4566-81db-c49969ece609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d5bcd89-6b45-4009-8e70-414e6ee54cd7",
        "cursor": {
          "ref": "01195915-8d35-4431-8d37-db9ba8dc04ce",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "74619f43-4abc-40eb-bf6f-610e302dc745"
        },
        "item": {
          "id": "1d5bcd89-6b45-4009-8e70-414e6ee54cd7",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "98f3088e-0706-46b6-a5e3-05fc537aec89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da4b6ef1-1d86-4ffb-aa88-56ace6664324",
        "cursor": {
          "ref": "41684e24-91b0-4d49-821e-665b060a0447",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "280df891-3897-4ea8-b4d5-aee5bfe49457"
        },
        "item": {
          "id": "da4b6ef1-1d86-4ffb-aa88-56ace6664324",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "24607833-ad94-4228-ac4f-114eaeb65812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7722f47-b1ba-4eab-8632-e8a4e4ff856e",
        "cursor": {
          "ref": "02438f19-cd19-4f36-a29b-ec99aa62d23d",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "677c0256-c34f-42cb-9341-60c03b3ee9a3"
        },
        "item": {
          "id": "c7722f47-b1ba-4eab-8632-e8a4e4ff856e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "1954f0c5-44d1-45bb-a6bc-e82dc9f1cb4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "244ec428-bce6-417f-ab61-e66a97783172",
        "cursor": {
          "ref": "47965169-ea65-4eb5-9a8f-c10e9ed86d04",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0d55a37f-cec0-4872-9c20-f79ee7ab2de6"
        },
        "item": {
          "id": "244ec428-bce6-417f-ab61-e66a97783172",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "df8e7f8c-19fd-43db-9e65-2f10ef563d48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbfa5bab-9f09-449d-a7de-add47def92cd",
        "cursor": {
          "ref": "6825c302-1913-46fb-a8a2-5258f78c0529",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "bcb521c8-c611-4840-853b-3bc32e2b295a"
        },
        "item": {
          "id": "cbfa5bab-9f09-449d-a7de-add47def92cd",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "4eef0c90-b8dd-445a-a50b-21367fbd7d9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d03c02a1-68f1-46e4-b338-37b319c578fa",
        "cursor": {
          "ref": "f177d8e3-6038-4014-9e5f-6008a93274aa",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e4314245-cd8c-4147-9f2e-10164ab8a0f9"
        },
        "item": {
          "id": "d03c02a1-68f1-46e4-b338-37b319c578fa",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "8caa1264-9c01-45ba-ace7-d4e3cca5ec8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29ac76dc-72f1-460e-b22f-f1310120efcc",
        "cursor": {
          "ref": "fb1c712a-c6e5-45c3-805d-6d32852b5fc3",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "0b28a759-1c43-4435-a683-a8f4d49e0e1f"
        },
        "item": {
          "id": "29ac76dc-72f1-460e-b22f-f1310120efcc",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "2c7aec0f-4715-47a4-b783-12180fd099e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00ac0bd1-091f-4526-a8a1-0466ecb02b88",
        "cursor": {
          "ref": "3ee08304-473d-4145-a68b-0955125ed069",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c9b8612c-b11b-44f5-8e2d-e2e7288f182e"
        },
        "item": {
          "id": "00ac0bd1-091f-4526-a8a1-0466ecb02b88",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "733886c4-2e7c-4232-9de0-8b455bdbd65f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80247df5-7a85-4fa2-a9d5-316f61bedbe9",
        "cursor": {
          "ref": "46be421c-b3be-44c5-ae89-d93ef16dc1b4",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8ff6e4bc-64b1-4b34-b00c-312cf1733a11"
        },
        "item": {
          "id": "80247df5-7a85-4fa2-a9d5-316f61bedbe9",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "60bacbef-ff78-48f9-859d-b36c65064c0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff412a5e-f017-4bf1-aad0-708761f42289",
        "cursor": {
          "ref": "d40cebd2-636e-4a85-a7c2-703b56c8986e",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "ac693363-305b-4bd3-8aab-17f9066535bb"
        },
        "item": {
          "id": "ff412a5e-f017-4bf1-aad0-708761f42289",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "ec6933c6-92f0-430b-92df-43fd78a39f6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c7eceb3-93e8-48f3-be6e-e99a0d73c14c",
        "cursor": {
          "ref": "bb296cce-0b03-4b71-bb67-89fabb364ed6",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "91fcef44-f433-49cc-932e-872de9149b1b"
        },
        "item": {
          "id": "7c7eceb3-93e8-48f3-be6e-e99a0d73c14c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "ae83dadf-230f-409b-ab2e-d1ed00e57ce7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f501740b-5cd6-4246-a878-0e71e1b78455",
        "cursor": {
          "ref": "0192dc1b-1dc9-4457-b8dc-d48d57df13f3",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a43f0247-ba70-4a19-83a2-ec0aedb9b5ab"
        },
        "item": {
          "id": "f501740b-5cd6-4246-a878-0e71e1b78455",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "09124be5-ada5-44b4-a8c1-d0960df4beff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efb17e5d-2ad7-4814-b49f-0685de9dbb64",
        "cursor": {
          "ref": "0c56bdbd-cdcb-4412-8344-f6e2348d2ce7",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "9d2b9525-331e-4550-b532-13398a7b8606"
        },
        "item": {
          "id": "efb17e5d-2ad7-4814-b49f-0685de9dbb64",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "434e4456-5277-4e02-8131-0a9f4261dcd2",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "42367feb-6c2c-4715-93be-b1a1325db6d6",
        "cursor": {
          "ref": "8fbd6668-13b5-45a9-8a33-30bd43d44af0",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "e377a229-1a63-4047-b5c3-1ffea0ec7aeb"
        },
        "item": {
          "id": "42367feb-6c2c-4715-93be-b1a1325db6d6",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "aa6981a5-d57a-45a6-8837-b4d79ded5210",
          "status": "OK",
          "code": 200,
          "responseTime": 203,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "a98990f1-c4c6-4100-843c-ad2fa8ceac7d",
        "cursor": {
          "ref": "483583a0-21b9-441b-9cf5-cec51c29604d",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "38d80582-d7fc-48e1-ae41-0060567d1f09"
        },
        "item": {
          "id": "a98990f1-c4c6-4100-843c-ad2fa8ceac7d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "06c53f7a-ca79-45b8-94f3-674e5aedb553",
          "status": "OK",
          "code": 200,
          "responseTime": 192,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "8b66e0b8-6554-4c43-9537-8d07806adf70",
        "cursor": {
          "ref": "3fa81087-76bf-4741-a2d9-3fb5ee34b9a4",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "7edb1280-ab6a-4fba-9994-1d7d507301f2"
        },
        "item": {
          "id": "8b66e0b8-6554-4c43-9537-8d07806adf70",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "84d28b68-60c3-47cd-a94a-5193637b0798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "679a1110-facb-4016-a2e2-e3a98645b3a6",
        "cursor": {
          "ref": "d0fad268-d713-42a5-a5ea-1a565a991961",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "38989cb8-83cb-46db-b79b-7a728f535d9d"
        },
        "item": {
          "id": "679a1110-facb-4016-a2e2-e3a98645b3a6",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a7a0c1ee-cd0b-4455-a05a-f55f4c162f39",
          "status": "OK",
          "code": 200,
          "responseTime": 206,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "8fae05ba-8ad1-429c-9e3c-8f83f758776d",
        "cursor": {
          "ref": "611adac3-b9f9-4374-8805-8cd63339b417",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "9ac39b13-fe9e-402f-a832-7ef54717ff49"
        },
        "item": {
          "id": "8fae05ba-8ad1-429c-9e3c-8f83f758776d",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "75b59ebc-9135-4c97-af4c-69d7d8a90d67",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "b436ba7e-d059-44e2-8646-2160d42cd7a4",
        "cursor": {
          "ref": "73ceaaf1-142f-4286-b721-6066ae35f4d5",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "0bd84d9b-1768-460f-b67a-33c944979192"
        },
        "item": {
          "id": "b436ba7e-d059-44e2-8646-2160d42cd7a4",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "f073b71f-2fab-4b83-9920-b01b1cb155e1",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "828bab10-dc02-4ef4-8a27-902fc259d0df",
        "cursor": {
          "ref": "c464b7dc-edab-408d-9734-d97d3295307e",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "0992cb01-952e-4a13-bb04-46321ed35f74"
        },
        "item": {
          "id": "828bab10-dc02-4ef4-8a27-902fc259d0df",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "aa36ab78-f085-497b-ad67-39edbb824888",
          "status": "OK",
          "code": 200,
          "responseTime": 208,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "e6bc8a81-7fbb-45ba-86f0-e50c46bbfcd6",
        "cursor": {
          "ref": "8225bf2e-62a5-44fd-b8fe-608ac45065b2",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f6e42e3f-1ebd-4797-bc29-8f3ae4028bf7"
        },
        "item": {
          "id": "e6bc8a81-7fbb-45ba-86f0-e50c46bbfcd6",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "70f6e701-fffc-4bb4-91b3-14df8a14c8d8",
          "status": "OK",
          "code": 200,
          "responseTime": 243,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "7ae57209-9c3e-4ab3-9d59-3811071dd71a",
        "cursor": {
          "ref": "85ddf83c-5302-46a0-9ae8-1b069a360a59",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "891d1b16-ce62-4964-ab77-387ed5075af5"
        },
        "item": {
          "id": "7ae57209-9c3e-4ab3-9d59-3811071dd71a",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "ba09efb4-3456-4bab-9ac7-36a180c0e067",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "37a57cf8-60c5-4a6c-a7b8-22afc5e6e8a8",
        "cursor": {
          "ref": "255e8b72-5f48-423d-872e-90d8b599d4fc",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "26f8fd67-7362-4345-b726-b4b4fc714000"
        },
        "item": {
          "id": "37a57cf8-60c5-4a6c-a7b8-22afc5e6e8a8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "5a5f5eb7-71cf-4baa-9e22-bfe046b87a82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaaa74b5-acd1-406a-8652-30b4a35f70c0",
        "cursor": {
          "ref": "68ad7ce3-403a-4f45-a8e1-93f25379abfa",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "60ac4d68-fdbd-4e8b-a191-aec97f9a34da"
        },
        "item": {
          "id": "aaaa74b5-acd1-406a-8652-30b4a35f70c0",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "439098ff-fc53-44ad-8ffb-104ad04dd615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9bc3409-48d7-42b1-a655-b3e339f54b14",
        "cursor": {
          "ref": "5f4890e7-6ebf-47af-a6e2-50b1264c3663",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "389b5775-4bb6-4a0f-bdfe-90bb2da2872a"
        },
        "item": {
          "id": "f9bc3409-48d7-42b1-a655-b3e339f54b14",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "2be7ea9a-2765-49cf-9e2b-162cb6836518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c046a30-a372-498e-9666-69ba2684cb72",
        "cursor": {
          "ref": "fd399115-c962-4702-a6c1-6bf4db60625c",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "4634f399-7676-45bd-a32a-4bb04281d316"
        },
        "item": {
          "id": "4c046a30-a372-498e-9666-69ba2684cb72",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "345f0410-6114-4287-92fb-5cd231ffd157",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca0a66b-e7e3-4dfd-9eb0-562b26c4fd06",
        "cursor": {
          "ref": "1ae62578-5de4-458b-831b-e9935a93db6e",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "cd7bbfe8-c586-40f1-b593-3367779e0815"
        },
        "item": {
          "id": "6ca0a66b-e7e3-4dfd-9eb0-562b26c4fd06",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "358542c3-1be3-4d26-be85-faeae1c3bb34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed3d1fe3-3a55-4996-8f59-52f995529137",
        "cursor": {
          "ref": "d2c6debf-3c5c-44b9-bda3-9e373243bfe5",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f7c32e1b-a8c0-40c3-b3f2-e99425a4beda"
        },
        "item": {
          "id": "ed3d1fe3-3a55-4996-8f59-52f995529137",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "19709847-ee3f-4d8e-8924-0be0550bd8f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9c45a1b-987d-4c89-9935-2b9d42b9c0ae",
        "cursor": {
          "ref": "050fbbbf-43b5-4361-99f2-37a000c3f3fd",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "62c0a5e3-ac11-4ffa-a1da-2d86e2185c90"
        },
        "item": {
          "id": "e9c45a1b-987d-4c89-9935-2b9d42b9c0ae",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "1f5e0a61-ffb2-4425-a2d5-682d54bfc482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "685f2676-ee92-4e4d-a9a3-ef772ae74bd4",
        "cursor": {
          "ref": "4d9306bb-b796-4a8e-8483-2fdcd9797ce5",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f51c0d80-5f38-458b-aef8-90dcd09a41d9"
        },
        "item": {
          "id": "685f2676-ee92-4e4d-a9a3-ef772ae74bd4",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "983e2cff-e9ba-4ac2-a16c-b71bb7f2a1e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6942eab3-21a3-48a9-9b0c-7794a96e651f",
        "cursor": {
          "ref": "11bb84ef-be94-45fe-ab03-e3a8a19aaf5e",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "fc076df7-f8d8-4f60-a77b-09709ff35cc2"
        },
        "item": {
          "id": "6942eab3-21a3-48a9-9b0c-7794a96e651f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "53501f35-bf1c-4ab0-b430-b29c951b2dd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9cf860f-9ee4-48b9-abd9-937d5e8f2f3b",
        "cursor": {
          "ref": "0f5f1481-e2ed-41af-af96-15b884467c17",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "d0659a8d-68b3-4553-af34-8cba1e226006"
        },
        "item": {
          "id": "b9cf860f-9ee4-48b9-abd9-937d5e8f2f3b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "dd7ecbe9-c01e-41c5-8fad-080f764b1914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df84130a-3611-40c7-9fb5-e5d5fbe22754",
        "cursor": {
          "ref": "fff318bf-e5f6-411b-8d43-d9bd7bbde320",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "55dff4bd-7cf3-4617-8d47-9fb053aa4834"
        },
        "item": {
          "id": "df84130a-3611-40c7-9fb5-e5d5fbe22754",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "3d4fce0e-3bd2-4df8-bba2-99109575126f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c28e9d2a-24c5-4e20-b4e0-62eded3a1b69",
        "cursor": {
          "ref": "0b7b1072-1e4e-40bc-8b8e-404da1382d3a",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "685ed89a-dc7b-4d6d-954c-f412bbb719fc"
        },
        "item": {
          "id": "c28e9d2a-24c5-4e20-b4e0-62eded3a1b69",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "bc2e3b0e-7769-4c04-b99a-fec51a7728c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64f2f4a1-73c8-4650-abe1-75d6d5b27ea4",
        "cursor": {
          "ref": "5c7c5a4c-445c-407d-9d83-4b65160c0834",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "245c77b0-1e3b-402d-9377-db2d23aee058"
        },
        "item": {
          "id": "64f2f4a1-73c8-4650-abe1-75d6d5b27ea4",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "8b7d2775-71b6-4139-aa2c-085290fb28fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ef80942-4f82-47a0-b3f0-eae1dadc6919",
        "cursor": {
          "ref": "4c3a6d65-43f6-4395-a31a-367eaa018a0d",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "b512a60d-cf26-4879-9e13-0e749fe8278d"
        },
        "item": {
          "id": "6ef80942-4f82-47a0-b3f0-eae1dadc6919",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "c393c0ab-672b-4e1b-a592-f2bdecc06b6b",
          "status": "OK",
          "code": 200,
          "responseTime": 174,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "7f2927cd-dee5-4fd8-b7a1-c44c84311be1",
        "cursor": {
          "ref": "a6c4e0e5-c2bd-4aab-ac97-ef5bbbdf3f0f",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "81bb1d3d-5f3b-47ab-ba11-970ab7dd464b"
        },
        "item": {
          "id": "7f2927cd-dee5-4fd8-b7a1-c44c84311be1",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "f0dfd816-387f-46fa-86f2-333fd6bf2016",
          "status": "OK",
          "code": 200,
          "responseTime": 268,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "3858861e-71d3-4101-9463-053de30b2c07",
        "cursor": {
          "ref": "2ec2b0ef-1499-4969-9f45-540f4ea4d0fb",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "7df66a16-6c1a-46c5-8a93-c01b9e6cfa5f"
        },
        "item": {
          "id": "3858861e-71d3-4101-9463-053de30b2c07",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "73e35022-2382-40c9-a14e-89f2da421e21",
          "status": "OK",
          "code": 200,
          "responseTime": 188,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "18ac675c-55e3-4fbb-a346-9df0cfc18b27",
        "cursor": {
          "ref": "35ad2749-bb9d-44b9-8596-caecc88adf8d",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d9151c4f-5013-458b-a117-d838d4aa573b"
        },
        "item": {
          "id": "18ac675c-55e3-4fbb-a346-9df0cfc18b27",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "bc4329f1-2f76-4ad3-91cb-fb2ca981aa4b",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "4ac29bf8-313a-457b-994e-308ecabb72ec",
        "cursor": {
          "ref": "12e87532-5168-4e1c-b993-3037e41ef5bb",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "e1f8f651-e7c1-4fd3-a2f7-87afb6c991d9"
        },
        "item": {
          "id": "4ac29bf8-313a-457b-994e-308ecabb72ec",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "0cf7d06a-3be5-44c2-924c-8e09cf76a28c",
          "status": "OK",
          "code": 200,
          "responseTime": 215,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "afb9fdcc-f7ad-4ad3-aa2f-8518cc471de3",
        "cursor": {
          "ref": "dad3f9ee-3cb5-43a6-9beb-46f767ba492c",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "df3134a1-9144-445e-944c-0c4e0a358438"
        },
        "item": {
          "id": "afb9fdcc-f7ad-4ad3-aa2f-8518cc471de3",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "71d16708-93d8-4e16-95d7-8a691bd3533d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5508d21e-ff33-4efb-9a12-790d28ef727d",
        "cursor": {
          "ref": "bacc02ca-7ab3-4b71-9118-82bf1a351862",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "82b44a4f-fe8d-47b9-9064-76df42d0b134"
        },
        "item": {
          "id": "5508d21e-ff33-4efb-9a12-790d28ef727d",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "8948d51a-2494-43ca-948f-7b8002b21d01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2397b47-e752-4a82-9d1d-a840a538f4dd",
        "cursor": {
          "ref": "e32a7cee-e628-4fe3-b50f-dbede5ea6ed7",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6500505e-09b3-458e-965e-0700a3b7c1c6"
        },
        "item": {
          "id": "a2397b47-e752-4a82-9d1d-a840a538f4dd",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "34797927-be1c-44d3-832a-8d0c339de997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "631da17e-e68d-4dba-90ba-dde544fe0c35",
        "cursor": {
          "ref": "4fa29561-288e-4fd0-b93b-755d72fc84f6",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "fe251a90-b15f-4678-9f08-d5ad8f5e1206"
        },
        "item": {
          "id": "631da17e-e68d-4dba-90ba-dde544fe0c35",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "46555cf4-ee42-4f73-ab1b-141073be24b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf1d6c6b-3c5e-4c50-aec1-e14b226fe7be",
        "cursor": {
          "ref": "8b6d8984-5a11-4770-931b-2c9365ecbb36",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "417c7967-771a-4323-ba70-f4c6eed87d08"
        },
        "item": {
          "id": "cf1d6c6b-3c5e-4c50-aec1-e14b226fe7be",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "11f33f22-36c7-44df-9de3-1a44dc5ce121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f191858d-0153-4685-9fe7-a22b5455f4da",
        "cursor": {
          "ref": "82386dce-5d92-495b-8b05-71bc68cf2adf",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "acf45b89-c253-4d55-87f2-a99413c3ac7e"
        },
        "item": {
          "id": "f191858d-0153-4685-9fe7-a22b5455f4da",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a42c70e9-fc42-4a34-8a62-d99f0145fa5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dd42247-60e7-449e-b1a2-b7e4517c3ffe",
        "cursor": {
          "ref": "ce245ade-5d69-4651-84ca-4947f861abed",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e93ace70-540e-456f-9c8f-ff4f1abf8fde"
        },
        "item": {
          "id": "1dd42247-60e7-449e-b1a2-b7e4517c3ffe",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "45ea6840-f73b-40f6-92fb-4e7640bb462a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e15264a0-b328-4cc2-b3c3-84410632f990",
        "cursor": {
          "ref": "872dc225-5def-4357-a042-4b7ac5fe8da1",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a593cddf-0b81-431a-b4cd-21094136d3dd"
        },
        "item": {
          "id": "e15264a0-b328-4cc2-b3c3-84410632f990",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b457b4b2-fd0a-4f7d-b555-9e4cea8f1492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8975784-5824-49a4-a8e5-f3bff7166e0f",
        "cursor": {
          "ref": "6f19ab1a-ced4-40c5-895c-c77c71100d24",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "ce37e4d4-dfbe-444d-aa18-4f620dff2ed5"
        },
        "item": {
          "id": "f8975784-5824-49a4-a8e5-f3bff7166e0f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "79f52bd8-8c7b-4d4e-807d-e2ef010a6e73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c8fc4a8-7328-4f1b-ba7d-a2d361ef634c",
        "cursor": {
          "ref": "69a962b3-f92e-4107-a94b-ba0067ade4ce",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "33131036-793a-4feb-8a00-2efbf7bfe248"
        },
        "item": {
          "id": "0c8fc4a8-7328-4f1b-ba7d-a2d361ef634c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "3f660b7b-ebaa-455c-8806-81a6113cd310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8d88389-10cb-46a1-9013-608116bfc2e7",
        "cursor": {
          "ref": "48498233-c6dd-4259-a167-5a49debf1ddb",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "3b01d872-6f0a-481f-b056-e1f69075b6c4"
        },
        "item": {
          "id": "d8d88389-10cb-46a1-9013-608116bfc2e7",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ddbe46cb-c5bd-4bcd-8864-fd4ca4976e89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d15b8c-e4fa-4e10-8c8c-c267a80dea26",
        "cursor": {
          "ref": "1da35d72-2702-4e25-ad92-a5997c05b837",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "8ec9d31e-58a1-463c-9612-9a122b1f79f9"
        },
        "item": {
          "id": "28d15b8c-e4fa-4e10-8c8c-c267a80dea26",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d7eb8b9f-6a28-4c6e-b98f-488dea4c2165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10d39e53-ec85-40bf-9158-5475c329df8a",
        "cursor": {
          "ref": "9537e68d-c248-4663-b089-02c3d49848fc",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "df9e2269-c823-4be4-a746-b6cabd2b8fe8"
        },
        "item": {
          "id": "10d39e53-ec85-40bf-9158-5475c329df8a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "93ae08b6-7182-4d73-adc1-9d099cc1c642",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd6d0b39-ef1e-46a2-842c-ec291d7fecde",
        "cursor": {
          "ref": "c60dbed4-f7ac-4003-b926-5bd6c5b6f0d0",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "8bb2cc9a-d7a5-40f2-af16-7785986b7ada"
        },
        "item": {
          "id": "dd6d0b39-ef1e-46a2-842c-ec291d7fecde",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "99c163fb-a136-46a0-a49a-e0ce032fa144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5c67430-7530-4fb7-ad4e-52c606dadd9c",
        "cursor": {
          "ref": "fe38ce62-13d1-4de2-817c-559340c33f07",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "5ac8e9af-d098-4213-ab89-1d232c7e2f37"
        },
        "item": {
          "id": "a5c67430-7530-4fb7-ad4e-52c606dadd9c",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "bae00e84-96dc-4b7e-8df6-99271e710d12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e15cc86-6333-4d12-b71d-a06dfc4773ee",
        "cursor": {
          "ref": "c071abf7-44aa-4f9c-ba07-68621c08e1e0",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "a8d520b7-6f2c-4b06-9884-1b2423d691c9"
        },
        "item": {
          "id": "4e15cc86-6333-4d12-b71d-a06dfc4773ee",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "336b130b-8d60-44cc-a3a7-b4115a0622c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f59a97a9-7f65-4175-a436-c94946edf1d7",
        "cursor": {
          "ref": "a79939c5-0537-4566-9877-c9dab2e5997d",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "c0a1896d-9918-47b7-ae51-69842fc0e0da"
        },
        "item": {
          "id": "f59a97a9-7f65-4175-a436-c94946edf1d7",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "524ab6cb-8742-488a-865c-754807dfd308",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44b7c5ee-447c-45c1-94c2-a6d7aa8e330c",
        "cursor": {
          "ref": "d1961af9-732a-4242-96e2-3ef56e7eda13",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "34138d6d-59ca-4048-b6b2-00ff8a946d9f"
        },
        "item": {
          "id": "44b7c5ee-447c-45c1-94c2-a6d7aa8e330c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "5a04c95f-a193-4e4a-9e6a-d8b7f1dbd634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be66ef7d-c81a-4153-a67a-45749d431d77",
        "cursor": {
          "ref": "c064d98e-7da8-4bf7-9451-42ee7cd8fe8f",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "9707812b-9cd7-428a-93ae-267f99729eda"
        },
        "item": {
          "id": "be66ef7d-c81a-4153-a67a-45749d431d77",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "6e1093f2-5c2f-4aa0-85c8-4fbbbc53778c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bebd1ea-8407-4d41-b08e-6e7fb2264fe4",
        "cursor": {
          "ref": "957fdc9e-8b21-4840-90f8-db06b858bfb8",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "46383c81-98b0-4f6a-b66a-7cb5bae424b9"
        },
        "item": {
          "id": "8bebd1ea-8407-4d41-b08e-6e7fb2264fe4",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "78e89fa7-4810-4f42-ad0a-588b9a8239f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "323689e8-61ae-46b9-8268-33dee9228abb",
        "cursor": {
          "ref": "77a755c3-e764-45f9-be71-a04a6447332f",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "bcc76665-fd1e-46ab-be3c-31ca19039b9d"
        },
        "item": {
          "id": "323689e8-61ae-46b9-8268-33dee9228abb",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "28ffb1c0-5808-4d1b-9797-f010038136e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "947555d7-5548-4031-926b-cf7262bc0a15",
        "cursor": {
          "ref": "fac5f6b3-ab14-4851-bbc6-5d1b269afb1c",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "39247cc6-afc5-4864-87aa-a9d2d87a26f6"
        },
        "item": {
          "id": "947555d7-5548-4031-926b-cf7262bc0a15",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "25a3efc0-7c08-42f4-8e81-682d32bfd0d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c3a479e-37ed-4bf9-af7f-4abbebcaa5f0",
        "cursor": {
          "ref": "93b4a901-3d25-465d-8b0c-ab16f3700b5a",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "b12deb88-90ff-44ad-8751-22b64166a97f"
        },
        "item": {
          "id": "3c3a479e-37ed-4bf9-af7f-4abbebcaa5f0",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ee5aa5b3-7c7a-488d-a1d7-70a3ad5ba1f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "153adbb8-03a8-4c7c-8a26-7d0788811716",
        "cursor": {
          "ref": "7d3dd2c9-1832-45ba-b142-588e204564cf",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "7174450a-075a-4e36-abff-5d11c37f48e1"
        },
        "item": {
          "id": "153adbb8-03a8-4c7c-8a26-7d0788811716",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "32da8906-97e5-4108-9bcd-c0088067a6aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a30e797d-066e-4440-9bc3-3488cd5ba8a5",
        "cursor": {
          "ref": "63515cdf-da57-4034-8c2c-ca82e1592f90",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "6d9614d0-a9dc-4523-b4f5-08c5d204f5fa"
        },
        "item": {
          "id": "a30e797d-066e-4440-9bc3-3488cd5ba8a5",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "4be770e9-9081-49df-9d0d-24a9013e28a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f810799-e29f-4f02-a584-552471eb424b",
        "cursor": {
          "ref": "d3a4352e-9ff3-4b05-ad77-5666788b0c98",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "f9836b45-4a06-4e77-92f7-f83f983521a2"
        },
        "item": {
          "id": "8f810799-e29f-4f02-a584-552471eb424b",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a70eecdb-5c18-48b6-bc4e-c08df2aec085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18dbd158-5333-49c8-bd29-d257815bb052",
        "cursor": {
          "ref": "94f1e546-ab50-46a3-b0b3-35eaecebf0b9",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "ae4e0892-50b0-4b6e-8319-fb57a416ac5d"
        },
        "item": {
          "id": "18dbd158-5333-49c8-bd29-d257815bb052",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "afcc12e0-f04d-4570-8529-3ffb6a76181c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "279f12bd-2372-4a59-ba47-e6cb0a41700b",
        "cursor": {
          "ref": "eb6ceaff-ce23-41df-aff3-926a0d14c94b",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "79ccc581-c6cd-466a-bdf7-f774520892c8"
        },
        "item": {
          "id": "279f12bd-2372-4a59-ba47-e6cb0a41700b",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "5cccb166-24ab-4c9e-9149-b7d4044f873e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe938643-ffda-4773-8961-8b64238d7997",
        "cursor": {
          "ref": "9f2e2073-a822-4aa7-91b3-00864c59ca8b",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "7bd7b4b1-1f4b-4fac-8f0e-7bb83fa79de6"
        },
        "item": {
          "id": "fe938643-ffda-4773-8961-8b64238d7997",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "b6c0ed51-0a34-4e71-bf82-46d6b224c865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4869e75-493d-4815-ab7d-e2c289f3a1f8",
        "cursor": {
          "ref": "5fc84285-bc32-4f24-a694-6603ce61ad7f",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "e9c44520-3c6e-4824-b09e-135b7d48caf9"
        },
        "item": {
          "id": "d4869e75-493d-4815-ab7d-e2c289f3a1f8",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "cb4ab0b8-75bc-4995-9e2e-241dbc6d4fdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd4b22d9-c972-45c3-b508-210add634383",
        "cursor": {
          "ref": "74406d0b-3e77-4b7d-851a-075498c70bc0",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "cd0ae627-13a5-400f-8f3f-249fb0b1fe4a"
        },
        "item": {
          "id": "cd4b22d9-c972-45c3-b508-210add634383",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "aebe691d-268b-4f94-950b-8e0c95f20b7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "307117fb-b274-4265-9f23-56372024bdac",
        "cursor": {
          "ref": "b78229cd-984e-4a14-adf2-4969033c83da",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "1c3728fb-7f4d-4de3-a2b1-6ea510f991e2"
        },
        "item": {
          "id": "307117fb-b274-4265-9f23-56372024bdac",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "eb6dac24-907c-40e1-adff-a3f35cd04b5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cf7e158-0ac5-49cd-9e71-59c86a300015",
        "cursor": {
          "ref": "3df4961d-5267-4656-a17d-b44d45115860",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "c19c0f89-7c18-4923-b9bd-3c24c8548876"
        },
        "item": {
          "id": "2cf7e158-0ac5-49cd-9e71-59c86a300015",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "6c10473e-458e-444a-bf3f-a9de6eaa1780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d8fd381-e9b7-455e-a1c6-2448dac6eb80",
        "cursor": {
          "ref": "634ccc72-fb6c-41b4-9d75-d9189c45e407",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "7407681e-f78c-4dda-b989-6c40da27aa22"
        },
        "item": {
          "id": "3d8fd381-e9b7-455e-a1c6-2448dac6eb80",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "70f2380e-380a-4591-8f1c-b6558793c130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "102dc6b2-9eb0-49dd-9af5-7aa7673ecedb",
        "cursor": {
          "ref": "7e86c6fe-f003-4520-9135-08eec62d19de",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "e4fb3204-24da-471c-bc12-9371804fd200"
        },
        "item": {
          "id": "102dc6b2-9eb0-49dd-9af5-7aa7673ecedb",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "adc62c14-f268-4b7c-863f-97d4fb07f5f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48ebc7ae-4de5-4318-99ef-55126c5dbf62",
        "cursor": {
          "ref": "f927076e-d291-43d2-ac12-0b787d86ca37",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "5e0ceca0-c27b-4a8f-b72a-00923309a2d6"
        },
        "item": {
          "id": "48ebc7ae-4de5-4318-99ef-55126c5dbf62",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "c1dd38dc-4a73-4849-b305-334908508b0b",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "1f06bedd-8240-4ac9-9a6b-4882ac93a9d4",
        "cursor": {
          "ref": "4f719f62-8080-484e-8938-c0084e08cc57",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "26f8cbb0-1282-4024-ba27-c043b310db17"
        },
        "item": {
          "id": "1f06bedd-8240-4ac9-9a6b-4882ac93a9d4",
          "name": "credentials_verify"
        },
        "response": {
          "id": "619845c2-150d-4b47-96a2-e7d7fd54439c",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3972dc26-aa41-405c-b66e-b61a467a7395",
        "cursor": {
          "ref": "e4b1d6a3-a915-4737-bda4-9103d1443b6d",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "845b2dcf-8432-4325-92d3-b569915feff3"
        },
        "item": {
          "id": "3972dc26-aa41-405c-b66e-b61a467a7395",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "9b014caf-e4c7-4716-84f9-a689af090b7f",
          "status": "OK",
          "code": 200,
          "responseTime": 199,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d5880f-6332-4b8b-9c34-72e46fd58023",
        "cursor": {
          "ref": "90748980-3af3-41c0-ba1e-519bad0fb068",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "0fddc57c-e506-45aa-9c05-15d4d35302c8"
        },
        "item": {
          "id": "97d5880f-6332-4b8b-9c34-72e46fd58023",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fb7b07c7-7606-4ebf-b926-ebf645d198be",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d5880f-6332-4b8b-9c34-72e46fd58023",
        "cursor": {
          "ref": "90748980-3af3-41c0-ba1e-519bad0fb068",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "0fddc57c-e506-45aa-9c05-15d4d35302c8"
        },
        "item": {
          "id": "97d5880f-6332-4b8b-9c34-72e46fd58023",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fb7b07c7-7606-4ebf-b926-ebf645d198be",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09a893c9-1269-4551-9dbc-bd90a2506b41",
        "cursor": {
          "ref": "eb7149c2-7b1b-4004-a98c-d277cf560dde",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "60620210-2066-41b8-9a14-ad75ef8ad016"
        },
        "item": {
          "id": "09a893c9-1269-4551-9dbc-bd90a2506b41",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "585612ac-a605-422e-a5bf-b73335b33dfa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be9fdf71-abc9-42b5-8fcd-f5783b254f21",
        "cursor": {
          "ref": "3256490e-8699-46b0-a2ce-531922d8b2ec",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "693aa327-d99b-45c1-921c-6838843f0ac0"
        },
        "item": {
          "id": "be9fdf71-abc9-42b5-8fcd-f5783b254f21",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "69433c42-5eaf-428c-bfb2-6dfb8fbb2895",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}