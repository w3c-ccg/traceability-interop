{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "101dfd11-ebc6-4d9b-982d-c53845da1b87",
        "name": "Clear Cache",
        "item": [
          {
            "id": "25251b5a-ab74-4cbf-bd3a-8198337ac01e",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4af079ef-4920-4c6d-ac89-e0c16f874f08",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "204beb23-5605-49b8-a138-e69fc6076f86"
                }
              }
            ]
          },
          {
            "id": "02e4981d-3834-458d-835e-ec03f247c543",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1e351df2-9d31-421d-b3fd-f65d1fd9d23e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6c549019-72b5-4967-b370-e114f851278d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "9dbbe2f1-4a74-4b9b-afca-36eadf1269b9",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "a53f8143-8553-4c05-95fb-c3c1b197dd2a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4202ea34-9494-4b9f-9eeb-40f29d48f5fc",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6bd7372c-7abf-403a-ae19-7cd0c6a94634",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bb427b55-6c4c-4d64-a69d-23234ec08a36"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "516b2dff-5875-404f-8cb4-e126bd9c3593",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f861f9f6-c619-460e-9ad0-965d9e8def9c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5f59df82-d8ed-4c1e-8799-efc02a6b0588",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a59a62b1-7ac0-4339-bcf3-a341f8988a07"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1558d69e-8faa-4596-a02b-1e1acd773a8f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "cbe5445d-968c-4540-8790-9b10bb937fba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5b13e55b-a276-45a5-895a-2f620f7f0b90",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ea76a371-efac-4655-bf0e-7801de2788a4"
            }
          }
        ]
      },
      {
        "id": "7c7eb471-c5d1-469a-b1cf-ddb319218b37",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "b4cfe75c-cbd9-41ff-978c-1ec5f7bbf1aa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a735266b-2bd1-489a-9dbe-6db5fe57e7c5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fee73e26-898a-40c2-974f-fcda1523d8e9",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4091fd3c-ede5-4d3b-ac12-e04724126978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ed8ca9f5-2291-4736-acd0-4ddc68337f37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da4eb4d2-a3c0-4966-89e6-c2365ac78a7f",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d9f492e-f5b7-4476-ac74-96e1f9f923f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9781470e-3875-4acf-8507-78db715a55a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c069970c-5534-47ad-a960-75a8147dfde3",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fb938c7-a753-4f9a-ae47-4a54ae500e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "21a14fbf-e356-48b6-9d53-2344f0266dd0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "39664a24-3e5f-42ae-a312-73a0f93ac942",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cbe4c058-d682-4e81-beea-e4d13ab37a6f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "674c40c4-ad1b-43f3-bc0d-b74eb8fe5b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe21cc88-6a34-4720-9da5-8ccea1d8fa10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0dffe45-0d1e-4ce6-8099-1385e5621679",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "666d7aed-faf1-46e3-b632-80e339db24bc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6f41922f-ef07-424f-8680-53f92bf8d60e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b2a5770d-4e82-418e-b136-f6104f300de2",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0dd2371-9f18-4a19-9823-cee28902d500",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "a32e13f8-5ad2-43bb-a55f-aec4e05b209d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b37b007e-b9db-40be-a3f8-fa5ed06804b2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "630a8f1b-f267-4c70-af2e-40cc8c88b50b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fa2b1f44-057e-4e03-933a-55399bba9369",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0697eb27-f1e0-4beb-b7d4-60ea13705e22"
            }
          }
        ]
      },
      {
        "id": "385f14a2-e4b0-4653-9abd-6238d82773cf",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "517604fe-a600-4751-b07d-57f58e9007b0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8152849b-48b0-439f-a4d1-4b72ae34f84c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "59203fae-d3d2-4c9b-b8b5-db1769f19a60",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "615e68c8-0ff6-4794-b13c-38a785e4f50c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dc111f3-7d0d-43a5-9575-7bdecc3c42ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ca488cb-5acc-49aa-9462-06af1be82435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2ea440c-1466-4b90-a599-7cd5a4e401e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "254aad85-5083-4b08-b757-fc8c26417577",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dce5e64-2a74-4a40-8100-1e94d915e870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9123e473-8fb8-4df7-b3fd-9940f7ec9287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3115f6f-24fe-4afd-bc6b-f2ece2a4f758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f3f6531-87ac-49f6-860f-3ab30ea54a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6339473-393e-4e92-9270-60294664f89b",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c3b5907-0b10-41fb-a70b-030d7b2a3894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2bcc3f9-87c0-43a5-8ce0-7591ca50ee9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c44eb8e-fc79-4e7a-bc19-177249eb71f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d475486-9a5f-4ab9-bdbb-ba28a75deecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6affdfce-c0f8-4f30-8112-ad9cbe94c9ab",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0730ab26-5779-4837-9cff-8376bfae464b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "276c59b6-052c-426d-9a88-6e193c5f5610"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "863e33b0-1188-406e-bd5a-5b59456b0c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "176212aa-bfe7-4e28-8ac6-644d9b67025e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01c313d9-9208-49b5-8904-508720b7efdf",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0794b617-ed2f-4395-921f-7d3d61ca920a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e66d625-24e3-4b34-bc0f-a159118bf223"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d9bdeb5-7391-4459-b715-7848b7774e24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94b7a53e-4bf2-4174-98ea-65acadb9d0aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0077143-883c-4244-8190-6abfb471794b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba91fc6-bb67-4c1e-b623-28bc817ec487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4375d36-f4c0-4428-963c-05f4377242dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4423cb3-ccab-4273-95a2-e4ab49cd7976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1a9cc95-ebe4-4922-8a6b-3a5812232c49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ddb2d5e-ce78-4dfa-ab8e-fee172c79ee5",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c0be313-0c05-4a1e-b5a7-589111bbb1fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1dc94bc-0ca5-4e17-bc11-8e89fc873ffe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1332dc83-b75f-4717-b7d1-9aa6a7196f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a23b27c3-c04f-4f00-92fc-afefcd337371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7c75800-29a0-48f6-8d4e-d6678ebe751d",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f95da91-ff2a-4522-9343-076eba1f4fdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b65a26b7-fb76-4dd9-999d-bd2275e903c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bdefdc7-d663-400c-8c22-9f24a771fd22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62473bda-8240-4eef-a406-68452cb7392a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6016f3e8-f884-42a6-a13c-b6c37b2726cd",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d49e87c-c3e5-4a51-9ac3-7664267f22e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "744e3967-99ee-43ae-888c-bb860b5a21a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b90b49cd-b35a-4bef-aac1-8e13a6fc2b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e09d2b1d-813f-4ea8-95db-f2556579f39f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e847a0d-bb18-4830-8f49-69add8d95353",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1718e2c-ca29-457c-889c-0a432a885dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c2f8465-d0f6-4667-bcd6-92b30b0ef028"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f152873f-801a-4af8-8358-c4cf51cdd681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6977f9d7-448b-4201-a80b-d70e27e43142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17032113-cb58-451e-8e66-28258cffcbcd",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "024c5e1a-8937-4434-8305-832e988a5656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "135a6cd9-6a57-4561-b727-22728e3b0a04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968e921d-c207-455f-9454-bba0b8eab268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5169233-9643-4693-ad5c-8405d87b6739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c82d507f-3a79-473c-ac12-43ba33ff59c4",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a46d6ada-4b17-4f3a-b82c-787448c141ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03cff7d8-d481-41e1-887d-430ef5130a71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8f48c1d-fa04-4602-a0d1-c99f70e6502a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df33a285-016f-4b0c-99bf-3cdd7563d40d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1cfd4bb-a572-42d7-a753-89fc9e41f24e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c034e41-119c-4110-8fa8-c55b104c8663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9aef37f-d451-4a95-aba2-b19cb7026e02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c483279-41b9-4fbc-9e40-b4c10763e018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07a8a305-008e-407a-a69a-9a1fd35c8763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adcce2d2-b530-4197-9258-8ec823a1368d",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "766351fd-10c5-4009-a5a1-85b350adaa0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57fe626c-c749-49c3-997f-84f90fe9f2eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c91ce64-3f51-48a5-99f8-03ea720f5132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e564273-f37e-4c21-ba70-31c570ebd8c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43130ab0-7b0a-4c0b-a028-cfb78bec6b5d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42b557a7-274b-4df9-aabf-513a7d1bba8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ec1a5e2-76de-47d8-8c34-5d56dcd91398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67ada9df-5680-4067-8592-2547ee78de1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e2c2566b-11da-48fb-a94a-80ca9bf76a54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07d90b1e-5d6a-4a26-bbb6-a4f1140b96bf",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8db4c9d-f770-4db5-8b34-39bba51ce7a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c91fd668-4e59-4604-aabb-073acd65dfd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a50c24-fd2a-43e2-9e79-c622a071cd77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f0a03cb-7432-4696-9411-0dc35b5bacae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "035dbfe5-ab01-4507-b533-ed0343cde2ee",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1701ff3-80ca-4f49-b85e-18151cfab77b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78f8f648-c4d6-48bf-b722-d88b206946b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2479cb58-27f3-4847-81ec-9bfa3841cc4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb426bb4-40e9-40ca-bf8c-a44c9ac028b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3f58b09-885c-45c3-b4a6-b0cf33e15f89",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ba185b-d8e2-45aa-a207-4570f3f53673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8e49a4a-6e29-4325-8012-fa8d5e9055b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fa77120-62c4-434f-90e4-b12b041cbd5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8a37630-4185-4e2f-bc18-11ce49782e2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5d882cb-ded1-4a54-8672-cd8a6a1eca43",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ee817e2-3d6c-46c1-bea4-b0f066866c37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05757605-3bff-4764-83c0-57b0db34ed08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32f1a60d-58c1-4879-a821-d730de520a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8716070-b992-4533-b0a5-c42fb9dabfab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83efe34f-8097-4bab-90b2-ee80e746d912",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d627cf54-c6d6-4e82-a189-345980c26dac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29771a8b-e1a6-4a92-a6b0-e5deba8063dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6afde0ec-4b77-43f3-9f9f-1ef26c397695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "785f3c3c-f481-4b96-b0f5-d8f0c5e8154d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeaf9d7d-a872-4ae7-bbcb-cac1ec82d8e1",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "951dfde2-63cd-42cd-a5ce-f8e29b2f673e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d853d8f4-117a-444e-9ebf-a2c19d3aaa6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3622497-21d4-4777-9c1b-66cb310b40e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f31da5f7-f4ac-437c-bd39-60dc7cac2534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ced996e9-053e-4da5-9bce-65fc7e5fd5bd",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d7ef30a-d8a7-45d5-92e0-535600ea61ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c70fde98-bbc2-4552-b031-3d56bf251913"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc822a7a-f89e-41a1-b5b9-52a9fc16cf1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e188b17b-bfb9-4c43-8a28-aec8a2053034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7ec993d-e878-4a0e-bea2-ebeb240bcd22",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "073ad248-348f-436c-8535-829d70c6b666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85e38e73-4a94-49e8-9be8-30ffebae6e3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eced4538-daee-4b9f-86a6-2367a1c1e5f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2907e9fc-2b52-4426-9a52-49614af1739f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd42b4e7-bf51-4e8b-b558-32fc49f99d50",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d212fe5f-01b1-4ea5-81c9-3fe2f6759906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cafd438b-351b-464e-aa2d-9da2b2193f67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03951385-8c76-4a3d-9c05-6cc8873c6e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "602b626a-8ae3-4d92-aecd-99e70a2135bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ca79522-d5ed-475d-96ed-db7e7d82fc06",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f23a7a-0e22-44ac-a8ce-da1d195bd648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55d1d936-5322-4fbc-ae14-929111b4ecbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f887fc78-cab8-456b-b9f3-7324d10f5ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "48a36812-7836-4ca7-a632-93a30a1464c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64dfd760-d00a-420c-b587-ed0323e2a35f",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5067dc85-9f49-44d8-adf7-7541d24edad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d63a481e-a74b-4aeb-8a43-3e19232dda49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ef0f3d9-9d8a-4989-8664-c84a7e5355e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4640a99-640e-4fd2-9d4b-3f4e466a3376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9249b50-a911-48ea-a286-2d28c5167b36",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b324d5ae-ead2-4c82-a03e-6e7823cb8e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e9f4173-4cb9-4445-8984-29cf1f916f64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f3926c5-ccea-4db3-aa6c-019e6b0ad8e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a89f27c4-04e3-471c-99c2-6f269540a474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba46de3-c13d-48f2-83ee-2131fdd458d9",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06225825-3904-4e08-80c2-91dc5f98f2f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a964e17-d026-4188-b9d9-de5fe80e150e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb0a9f64-146d-460a-b123-98415f3cfcad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "769d4119-3d9f-42ed-b777-feb23d68542e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86b9ac5a-3d21-4b0b-8368-17737a21b143",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6e74f74-a2d9-4e37-8fc6-7f7f93ef055e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "343e9061-b2dd-4645-9cf3-0b8b31ef3348"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ff13218-6ee5-4fad-8ab8-c5d8fe493ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "90deb016-a9d9-4ae4-9995-e80b07d07bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f6bcff3-7223-4f62-82f9-e23fa656d329",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab8043a8-d606-4725-8f7a-c8c64448d232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc25399b-ed91-4c79-9534-d69f9675b623"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93c7e36e-afd1-47d3-b2a0-99eb4c1b4085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bbfcd4c-a419-4a19-a2b0-017147c9c481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bae97ab7-6d08-470b-beee-c4e65c390478",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b14ca6c5-90d1-470e-b412-29f7fef52c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cb9b324-f773-46c2-8c16-6585a60df6e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "295f1c6f-8439-4031-b9eb-f809bb338155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bc09a45-47aa-4379-81e3-e10822000d60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfe04732-57fc-4420-ba26-92a179e886cc",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "149e425d-cfa9-4112-a7c7-2af166410690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "955f6ff9-fcfd-4047-8c3b-88dffbdc965d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee4a7e22-469c-4284-9475-49e7aad8776a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "845cd615-557c-420d-bbc8-42238d837566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ee0723b-9a1d-4a1f-ad83-261af1ead17b",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7ab09e3-1d2e-48ac-9d22-ad05e14f6551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fb4325c-ad53-40dc-9994-8afa8c1a2e0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7da7af0-f9fd-4611-aa46-f96a824705af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4971fa4-faba-41f6-a051-b4eaf2e01cb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4af53021-053b-40e9-85d2-163ae24c0136",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dee3173e-f306-4e90-8943-3e97aa7bec66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4ab153e-aab8-43fc-9ea7-cb502fdd9a1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08d75129-3d85-4192-8b5f-43620d072907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bfc9b4b-47d4-42a0-8833-dda636fefd45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb46316-84ca-4726-99b2-be7975aa80f7",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c53e1a4f-b481-44c0-96b0-5532252fbad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "549c6fb4-1b76-430f-b2fe-c630edcf1b09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e48eb1ef-ccd7-4eb0-b3c9-bfab250e7bcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "c06430f3-14ee-4c3c-91a6-4f512b98bf2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d63e51dd-449c-4b03-9103-0b1a9686fe38",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84849d0b-a597-4d40-9ad3-7a05ebc3abb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7c87eb7c-63d1-4887-95dc-a5c9bcaa6076"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5728a7cd-068a-474c-beb2-179f15101ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f5be7df7-9796-4e87-b713-d5bee3804c87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a27bb57-32d2-42c6-8510-9c1dd31f34be",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6336591-323b-431d-9aab-2d442fa7ba2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d384ea1-8fe6-446a-8951-0ddc09391171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd1215c4-de89-4751-beca-9740f707911a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "80a409da-ade1-46d7-8ba9-0ad4e5d9345d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43bc428a-5a50-43de-b4f5-c6ef36b2c308",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c6ad98f-e532-447d-a45e-568e3e831a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37a1c908-d20e-4dec-9e9e-df663b200bec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39da5b89-86bb-4013-bb92-11617fdd2a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b08c566d-dcc6-4c05-830c-c6a44fa3e1bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69bba821-13f0-46a6-b49f-79699e9810f6",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9df5e6ee-922e-4c99-b5cc-06f4279ec308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b64f0ada-3e4c-41b4-b40b-f08626d51095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b116ed-7c33-4378-a060-ac24e9e2d302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5466416c-013b-4ad9-8e76-6df69f7588b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7acc1887-2030-4579-80a6-13181848cab4",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35d1ce8e-b135-4bf2-98cc-4e32ae13b2fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5d3d2d6-a8fc-4ede-a061-ffd1c0d28fd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c2fb4c0-fa57-4580-8587-33fc9ae16738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd38a044-8051-4d82-8501-2eadc0cd5c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27d37a73-7aac-4f17-bb9c-5598cd972662",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eadbd18b-1921-4de4-a583-885cb7aa6ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbff2ae9-ce40-4ed8-8bca-535692b0e826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59d413bd-8a4f-4915-b0fe-4ec0b241fab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e73f5dcc-1bae-4757-aef6-6626d56f2346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c298a620-037b-40fa-901c-fa8a0edcf957",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dbdf883-e626-4c03-ba62-094c872a6710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16d30a80-920a-4c7c-bc73-3d8713faa5fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3da49a9d-7561-4002-9376-f2cc2afcf059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "e4b9cc82-7a4d-4ea8-8f33-221bf905a8bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d48a0bba-7c22-4cd0-9df7-58e175e158bd",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ae33b7-3733-440e-b8f3-91be051f157b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9070be45-0d33-49bf-9ea1-29ff9901cd08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "344681e7-715c-4802-ac98-75659b215c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ffb01c4f-4da1-4a9d-b4e9-41318c335e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "501a37e4-a4a5-45b5-a12f-aeaa21d30aeb",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a6e37e5-e2d5-4ed9-8566-b4daaea3c087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "773b6a30-5f0f-49eb-b51a-0dc5ab787aad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "544a28f0-aac4-4a65-8c96-7087bacfc907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "188fd80d-d763-44fe-98e5-7c109d953535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "059402a7-3f83-45ae-9c3b-e4b0d7839e2f",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d621d4-7143-4647-990f-865395287818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58081b5f-b41c-4f0d-aab4-a2a8f91d3bb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa84023c-3486-4a76-a2a2-78c2ba6788c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba8b129d-339f-4202-afbd-c764cbfcc348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38da51ea-a2fc-4ab3-9a70-b8685132af0e",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "658f5774-fed1-4d0b-beb0-c5469993f4e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "777ff061-31d8-41b1-8f6d-e51046c7dbbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d80504ad-9cb6-40da-8a19-59a66f4e33bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aaa30ca6-afd5-4b68-a714-ca05905c2b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "157e216b-7a67-4b67-8b07-ff858afda64b",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71cebd10-8aa4-49f5-ba30-2c0af43c500c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57d98274-c2df-4ef3-8516-133a949aefd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cf7b05b-16b9-4a34-b1d4-582acdf2f45e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "59aa7e4a-4fa4-4490-a6c2-7135a74e3fc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c9b243-ec9c-4e0e-92c9-4b0254a05c32",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f454160-53c9-41b7-8c19-4567868acab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba7944a7-d267-4640-8f75-44cf4b202464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e3543fc-dd4c-4089-9b30-f3ec6186d149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccf048e8-f131-4c73-bd66-91d607692a02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30db3334-9de4-4906-98c8-4bd5fc5f2a8d",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68155c4d-b002-453d-b97b-96de9ddc1908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d32467b-bfab-487b-9292-cd5cb6770a8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "934eb910-dde5-4273-95f7-7777369e518f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c08e4ae-84b0-4b8a-b4bb-4f4c0e538aa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a0263be-61ae-4bbd-ae1d-e22142135b97",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c60474cf-7ffc-4e4e-a46a-f6bb880bb401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb1ea4fd-fcf6-4190-94a3-1fdf9cfb478b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d1c7e3-1e1b-4e86-86d8-005978a6646f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7d2ac95f-8373-4f64-872e-151a8a141d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "269cf7f4-1a6b-4ad1-be55-630c7f3d2f3c",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b3851be-1e52-40fe-87bc-6b960a6520d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70ff4993-f600-4312-b993-f926d830db7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41734986-df23-4394-86e5-fdca56af3264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0cd55ff-6a54-4db7-82d6-6dac656520c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "542d0d21-4358-44a8-b84f-d74654cf8d97",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5386312e-7062-4c3e-9423-7571ae5c351a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d44330a2-3695-4f4b-9da5-55a312e11c85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9835ec8-4413-4636-884e-750a24b2fa7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6b96c32-e95d-4a87-a877-f9b5a2165b27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d3960a2-7621-4142-a76e-a01fcd1f7c92",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "435b3e31-1934-451f-afd2-7a687eea828b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1c0df2f-a7a9-496f-b2ce-ec9a86e02faa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b259b8b-908e-4a44-95e8-691250bdbe44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c534bed6-9037-497c-b819-2488e6a62ad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad0650d-0551-4aa9-8505-3681cd79891a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6d10a4b-b53c-4f1b-b1ac-0736530a4e74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6d08c92-f91b-49ed-8e55-3ea152fb4145"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9989c3b9-b06f-4c1c-a34a-46b11d5d2a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "befce312-cfd2-45c2-b4b4-ea73e539b484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae111576-35ce-4d8e-a8c0-5a880b1bb052",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26868f3d-8b65-40b6-a666-057100b11574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0c6403a-4853-436b-986d-3af29dd16965"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8807fdd-daf1-4184-9ba3-9a9174d82895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c6a8859-830d-47f4-8bea-1a467de5a5b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "008ecfe9-549b-4edf-8802-b7fd99c8e49f",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6be3ca68-a826-48a2-b6f4-fe235e1f3f60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c88d2a15-a3e8-441f-841e-399033419e26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba24111-3916-41f6-b304-37ba8bad360a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "866aca82-81f4-4873-8d8b-f6450815d913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0185adb2-2376-424c-b54c-995fae646ce7",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5136e0a-5086-416a-9195-6a87ed4fcb02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f823a5c-3920-4e7b-b85a-279017151324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aba13d3b-0b15-4852-97db-f8c64d32d310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "69dd9abe-6867-4d84-9840-aa42cbcce493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4081d541-9120-49f0-9393-9ba485d761bf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "446d28ef-f370-4ef9-9b9f-6814650decdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e83d846-6881-4604-b610-70e6693f0bb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4389f702-b94c-4b8e-bdcc-fefb0b8664d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b11c1e2e-5f80-4057-9928-b07a7df93d7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca4daf4-445a-41b5-874c-e223f263ac33",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8903a09d-49c0-435b-8648-8514c714ba8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1044ba9a-5e6f-4744-9927-509eb00ac14b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa3dcba2-f934-4b81-bde1-ea30e221276d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ce8247d-24b2-4c02-8d9b-384bc3da0d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2053720-1b15-4c44-939e-5f09c411d69c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e645172d-502f-4a56-ac25-f64eff1b6f72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "225a7760-3c45-4c54-b819-85ac4ad06be8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89cd918e-ea21-484d-8130-fe6dfaf49225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "38d7fc45-ead9-470d-8cc5-df6122ab9f58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a316ae96-7716-44a3-ba24-7cb835f2e463",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca1a73e-2401-4de9-82bc-6da5271fb884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bd683ec-a9cd-4672-ade3-18c387fbf649"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "354d43c2-f9a6-4727-ba83-c6289d2f8353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ded18277-1391-448c-870b-aacc67fa64e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87de93f9-9993-46e0-9f34-471656a6081c",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b60bab5f-2471-499d-89ba-ffc01d0291d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "841a19e8-8988-4b8d-9e58-0376174f654b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd45d41a-9a0f-47c3-87da-8528244f68ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "34c7245d-4071-4457-aeb1-dfc31bba4bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01fddbde-34ab-4c1a-bbaf-0ef87c354a4a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "028eec04-9064-47fe-9445-2019bc033062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c54570e-f143-4f75-ab68-da7f3b8cc261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b462c214-cfdc-4fd7-93b4-7c84d345ba66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7467b012-02ae-41fa-acf3-b7737463c366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d542b09e-c71c-4433-aece-1c46467254d2",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e59043c3-12fc-4c51-90bb-7f762dfb18e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93d22943-c251-45a6-8613-3d271863b6aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "282834cd-d281-4acb-b4fa-e25ee1aa6ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "670a4639-b9ac-4bd8-b274-c69959640c7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e2b0af7-b81c-4545-97ef-94747a8712e5",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f41bce-f306-4c5e-92e7-d96cb91560e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5e8a927-7ea4-4f2d-a0dd-e71ff5d6f9d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a0d5a62-9a6a-43b7-a9ef-b4ec49a1c40e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ca2b83d-8ac4-4944-b664-60fac891e73f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1da3ca4c-d99d-4b50-bf5e-8285ab15e5b7",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b46f95fe-5d23-4897-ae9a-5376dbd50770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7d79139-a2d2-4c5b-805e-a52359b911af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "373f1db6-36b3-44c7-bcd7-bc0b9bb7c9b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e21939f7-8748-410f-b64c-abe625f7f75b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e7d411-81fd-466a-96a0-47f902ddae55",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "029ccfaf-2c87-437c-9daa-4652df847e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db376f37-a110-404d-8f16-fbe0bd3132d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd7bf4fe-5e44-4ab6-a848-db25aebf5582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c850bce2-9ecf-4edb-9ed4-82ebf06e9b43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f19d03df-f911-405e-b0ce-b9d940a91290",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fff8554-e0cd-41cc-b89f-f059fb1e0f52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5ce0b4b-370e-43f8-ac43-2966c67a209c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55aa59fa-441d-4873-bd4d-d5cbb90ba419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2ea8194-5d6b-404c-8a08-c8e204bae3b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "305755b4-b6c8-46fd-82ba-8e89446fa22a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d58646cd-d10d-4a58-983e-18fbf036b40e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21cf083e-2110-4181-9a3f-eaee00a4fd2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dadbdd96-8a42-47de-bccb-61b42d4df5f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "316189e0-d5c5-45fc-9f22-8790d655a396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6e0e7d9-4f00-41cd-9f18-21c854a4d9b6",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8603759f-f7ae-4935-acd6-f968946bd05e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1558d16-aa35-4db9-bff3-b22a01638391"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8a34d9e-68dd-4564-af71-c317f3e31b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9e666bc-02f9-4f99-aa84-289e6821f87c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49b0a764-d954-4969-8442-f5a33fcf2758",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13490ef9-960b-43d8-9877-6095fe835d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5026c735-a577-48bb-a07e-18ac79969393"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc518a20-3135-408b-ba68-b7365bc08f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c400a88e-53e0-4b46-97df-e4af4e0dd859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "969cff3a-2758-4e27-b7fb-fe0e6669e48e",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b352583-a797-4bc5-8c32-5b47e363b305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "829c5fab-8a85-4d00-aab7-edade687fd9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cd691d8-f981-4e2c-bb8f-071ea1a19dd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca87b1de-a050-4fc7-863f-218c25ee8e26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e36cb7f7-bfa7-42f2-9c01-3f1756a08c38",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cef0570-8537-4b1a-8a9b-a4cde07ec982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1e7e306-ea78-40f7-a54e-8856263c317d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "674ef9e4-09d7-4b52-8428-f9cb943a794f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5c87878-e744-4dd0-9127-dcb08c2a9620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ac051b6-bb75-4ee9-a3eb-f9ee88d1a7f9",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bee2e9f4-d99e-4d6b-baff-fb9b57f8e1ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d007512-0efe-42a8-b6e1-f6a96995834e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f48eeb95-e128-4025-b9a8-08ce64d654c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4d0db0a0-e5f9-46a2-8ce9-39b715048ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f94aaeb6-5ba8-475e-a46e-cd7ec6b7d3ed",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f96d24-52b0-462d-a947-52ee8d4b3d85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "704a247a-101f-4f83-817d-67d894f49a46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc0e5c24-1b08-43da-80d9-a156ac4ad535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7bd97d1-01b3-48c0-beb0-1ce22aeb2fd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57c3afdd-2942-4ed6-b466-e4b3a7628f7a",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "507b3c99-fd96-4d6a-8778-748274dfcd86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87705910-476f-47d5-ab3b-3b006aeabcff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d2cc4e-855c-46fd-8ded-5ca64b3bf1fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "027e7245-6e2e-45ed-b4fa-193dabdd862a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dd582e0-840c-42e2-9dd8-04d1af7afead",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fe059a9-b53f-4c3d-ad8b-7803f7bf4a07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6391afd1-a83d-407a-8859-9f1969a847ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6db0e95f-bbb8-4efb-a2e7-6e41e0108a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a04b08cc-1aa2-4f47-9988-5ae31f41736c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ff83013-606e-4fb1-91a2-f986b9d70d66",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c976dfc6-010c-454b-b943-17ee7e0d4f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf018741-01ea-40c6-8688-8c354409eba8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8d75f23-31bf-4c4e-aa5e-33e0edc4cafd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d15984af-1594-4e6d-b379-b93168275883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f6953ac-f9ef-4d3c-8ce4-a4a8e9056b27",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aed47bc-1503-48e2-bb8d-50dbc826522a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33609e55-7e7e-45f7-b488-c5f8da5cb14f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e6a3dd-9bef-4d54-b042-79ce7a5508da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "273a76ef-36c9-4349-9a96-f033e451581c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dedba4e-aa00-4fd9-b02c-d53968434047",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5735197a-f611-4195-9e9c-58d2c2a9e6af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "296a9806-8602-41ff-bb0e-ba39acf1c263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cce2fdf-fb61-4b11-a8af-84dcb32ba0dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e5727c6f-d02b-409a-b960-a9ac6fc9daed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fca17cc8-1115-4a8c-8219-6c7f19967a20",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad03f52a-7065-4540-9c55-0d4987021de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3bd17fd-65e0-4cf9-8cae-5271e737d6ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c25e17bd-084b-48d2-9fd4-503794401274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c95696ff-bafa-4f77-b3af-70017a86d0f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3427a900-2fd4-4be7-9cf5-9b5e2500ef0a",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d06d0370-d931-4de6-84f4-2dc95d7f4f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc6589ae-efc8-4534-9d52-ef654578e2e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89c569e3-3eec-4f4a-ab43-bdd7923f5d70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa15ee7a-7196-46ff-99c8-e03d04233c09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abbe4224-4ae1-4d43-be1c-e5db8294930b",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bacdcae5-e1e8-408f-8c1b-05569310474b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17321ce5-af16-4cec-96bf-7c1a62a623d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f441f1e2-ed24-42cd-996a-2bda991507c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0aae28d-c550-43df-89f7-1212ca4daff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a8a520b-5855-4b2b-9cde-1e643fb0a9ae",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc02931-ddee-4bd3-9737-d4034eac492d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ce7da42-e3a2-4584-ac70-84908eff7368"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b60cc5e0-ba2e-4b47-a72e-2ce7882b064c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a06318d3-a333-4a09-89d1-dca29798374d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea5549b-e023-4776-b626-e323199daa43",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea141a0-b5b7-4873-8cfb-9b40ebb72755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f25f518-7a99-4b6e-8a8f-e053ed261cee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b86f40-ca58-45e0-a36f-3a4ad67af869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "41a8af75-d182-4789-8abb-aeed9bbd4e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "384bb08d-4aa1-491e-8050-7a5a7a6f02f2",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0470edff-d628-4629-bc4e-ad8a50f524e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bacdbe3-b3f5-4df2-9e4f-5a3ccc0f18f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f665522-418b-438e-99bc-65739a95bd52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "322800c3-f9db-4034-a6d0-d7b803da910a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6dcd73-8c9d-4dcb-87b7-63e62b2ed546",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bedf5762-d75d-4acd-a826-c3166eed24eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "849e4d40-dc57-4a90-98a5-b24a8c632a6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4cc699b-185b-4ed5-b913-77189fae1731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "72c7cf2c-8eb8-4014-81b0-4ca93471b2ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0f14cca-72d5-4962-94d2-32dbcf127064",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "003811e1-5ba5-47a5-9b0a-4d03bd49c600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6bbb94a-acac-441a-b3e2-b86c7299cdf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f42906-44f3-4cd9-811b-412690f28862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8656ee8-2690-4fd1-9a70-bf78f01c4aee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b045c15-f923-47ce-8ae3-c82e2f46f82f",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1393484-b458-4138-9f46-119a3abb5ee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aabccd24-d7c8-48b3-bd4d-5d910ca65505"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a1c6a81-4197-4568-b12f-40cecc154ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "944ddbb7-96d5-42f6-9f06-a1f6ed2cfb74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa46d54-911c-4db8-984e-dd7e63b9767c",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce6ba09-3039-42cd-9482-0e83a5d1fe38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88c1d4b5-a709-4661-b700-245752da8ed0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85d9cc43-a0fd-4177-890d-799fc9665651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f974b4e-c579-4a2a-a87e-1781e23587cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc76cf31-097f-4064-b7e6-3753e06fc9ee",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b084eb-4c0b-48f9-b954-3c23075a05a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ada52d0a-a8f1-4655-9aa6-290d45fe9f63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "894b8cfe-b776-4c50-b83a-f6340fe1529e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "07b564a3-cb23-4cae-8250-516061b50184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f196a98-ab2e-4f88-acec-51fc1d5da310",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "943ae8d0-e3db-48d8-8ff5-dd499d3a71e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "09e83493-5054-4183-9f77-0ee73815f799"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a7ecf52-2b9c-4610-b2b9-8a5f9ce92eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b19790b5-b73c-4319-808c-38348ec51a65"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f49f409d-122a-485f-af8e-2d0b9912e705",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d602bef4-efc7-4efd-8104-8b3f16b0a00e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a91d8b9-5ea3-4184-83ee-69a0422b0cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e3daf81-9ce1-4792-aec3-96117c47221e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b918c45-3994-4397-958d-d7fca9415691",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e2ec02ee-5785-4508-a64c-4639f23c5912"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75449ae9-5875-4ac0-9587-d2c8cbf0d12a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd428b4b-6bf2-4ec7-8ccd-33a74a042107"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "089fca5f-bbdb-48a0-a3cd-ad3ad3960069",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fccdef5f-8bd2-48b6-bc8b-e5b04327e390"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "190f9320-6d4a-4551-8bf5-586eedfa9bde",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "714ec811-a524-49ba-8c0c-3e582e526017"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c6cd93c9-e825-4858-9ead-5ba45443009d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "289717b6-5d15-4a32-87dd-27d76ed4e136"
                }
              }
            ]
          },
          {
            "id": "86b0968d-b27e-4218-83e8-9fb06bb03aec",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c6b5ae2e-2c0b-474a-91a2-c26a807a5cf4",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "a1aa1394-d198-4687-8272-09691fa9c390",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a85d6d77-25df-4b3b-bbd4-2eda4103346d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "38c254bc-f554-4d5f-9de5-b9a8a7448a6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e0bbec-b16c-45fa-9d4a-1c111d899b56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74719a0b-3a80-49ea-821a-0be5cba0f04d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "78cb4178-483e-4849-bb7c-66c5a9ed1234",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "581d9a70-457f-4608-8701-0557340e93be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "027a74c6-b254-4c40-95d4-ec91bb87f313"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c638a6d6-14b6-4abe-86f5-77b576c82eb3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4e96993d-d0d6-4dcb-b43a-2a7a944c54a8"
                    }
                  }
                ]
              },
              {
                "id": "b19b6dc8-a3a1-4b8e-8431-8a480242ca43",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "da66dbe2-eb56-4fd2-9b81-cc0bf0181101",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8bcacfbf-7af4-47fe-9e34-2ad7384b1445"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "95b34030-e6ad-46a8-9c0b-380f8734d1b9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c823254d-14e2-40d2-a042-5744019c515f"
                    }
                  }
                ]
              },
              {
                "id": "74b8f631-38bf-4657-ab8d-2446b7731b44",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f78e487-fb48-4051-8227-fafe57df0336",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a14b77ed-0967-4768-bb53-6aea15cf9d20"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "11728815-df71-41a4-a92c-4fe77012e7d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "819546fc-0429-4146-96c7-0a4c257b1fdd"
                    }
                  }
                ]
              },
              {
                "id": "cc9d0275-9efd-45b5-8587-52ea9f71599e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b1dbecc-e05c-40a7-a814-b6d7abbfa9f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5fed7063-77bc-45c0-937a-0979bb0f9b10"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "adc38097-2364-49ec-805d-8608960b11ff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "1b38f6aa-eda8-433e-96e9-34039b1c9f17"
                    }
                  }
                ]
              },
              {
                "id": "01d62cb2-3752-4830-879b-1e085cfb97ad",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "610b8eda-b037-431a-9103-b51176d01fc3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d77aa388-fff7-45e0-bc71-4301d8285593"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6dedbe29-b28f-444b-ba38-b47a495a3b46",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "5f03f672-41d1-416f-889d-399efa5972d3"
                    }
                  }
                ]
              },
              {
                "id": "b4bb3f19-982d-4343-be42-4a7227df8fd6",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5b989d2-ab80-4da0-a919-85f4c0e08ffc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "385a4dba-126b-426f-bb0d-779754bbd156"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc25edfc-6c42-4f43-97fd-f50057fa6303",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "152360ce-d56a-4d60-89be-f43a515de1e2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4697a0af-c3d3-42a4-97ed-7a965450066a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bc8e6677-2439-41fe-aa94-73fea4a5ec7b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "eb70290b-fcb7-44cc-b087-b13fd8025d77",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "09abf4c8-2fb6-4df5-abe6-c41c93c3ae20"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1675a928-032c-4183-9a1f-582e3e223455",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "a461f63f-5864-4a2b-a8c9-3d3699b8d35c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "78271b26-828e-4048-84a7-05c1b83080f0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "68f77147-a5ed-4ac7-9dfc-87c22cdb530d"
            }
          }
        ]
      },
      {
        "id": "57a1c63d-39fa-401b-a5d6-01b797f9511e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "de2c704a-3118-460c-977b-731f39c82d32",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bed802cb-672d-439c-9615-bae156fbe157",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "355cb455-ee31-46a7-911e-ece9b2d70c5b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a40c9e96-2b89-4e1b-a1d0-23e97169fe22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a803ed23-0d30-4a9c-a33f-09768fcd4c00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "143c14f3-f01b-426d-8643-0c3ef5aee004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ddd8af0-ffd0-48cb-9aba-75a422ca3916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b47a7af-02be-481b-afab-63c8ac7cb08c",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "258d3cef-e902-481f-9d1f-ae054e89f80e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6c053dc-503d-49e4-bc10-16742d4bfffe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73cbd63b-78f6-4bad-96f6-321f80ee0669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a290588-b62d-4538-86f5-56fe99f9839e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e500b5ec-6252-4d50-bb77-eb7162b7f03a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddd5cfba-6f29-4f68-b350-6b00babb7cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48b87c4d-6d55-4b93-9273-c6a8b2fcff72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "423f39ad-a5d4-46ba-8f09-0c2acf3b9d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7ef3b94-5836-4d81-b841-7a4fe35fc577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35ff89d1-4b76-4b58-b470-16009b3e22ee",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09021e5b-959f-469a-a8c1-5c8164165702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe9a87d1-b990-4bc2-97c9-ce00f8349349"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e46a297d-9a1c-4b4f-834a-4f4a39fb99d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a516077-db57-480f-a26f-220863c9b11c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96ab2d58-f486-4790-a511-a51accc463ef",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "604efb6e-1218-4095-9e45-b95619c2ae03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "510782c0-b314-4398-b7ba-2f560acbb72d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde09a94-ef08-4b43-892f-dae65743c122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8a062ea-b9a0-40ab-b613-7b77bd3b6a14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f87617f8-f93a-42ed-ab45-dc85ca271161",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eb9df2a-fb6f-4ee0-9206-191f7ef9618b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87871a0b-79f7-4cc7-b8be-b652e38745fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c89e3d3-5b65-48e2-9e3d-67cf3167c49a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8187b67-78e9-4fb5-96d0-156b4462ccb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2422e828-2588-408c-81b2-69f64a6a08a1",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1cdc0ae-7545-4576-97a8-49de6bf9598a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e313cf8f-c9ea-4dc9-9022-49f071b9665a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6add3839-9ca7-4161-a848-b6a688c5330a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0bedd3c-f20c-4142-8907-a04c7916671b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dee997b-699b-42f9-9312-ed404f0a0b74",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "516ab9f4-5726-4303-9080-f66d4708f2ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "561b07c6-d3ea-45d9-80f8-467d6d03003c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3f5d6c2-39fd-4cba-aefe-a03e5d1f5f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "93aa62e4-9b7b-4c24-8983-67550cbd4248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4799290a-33f8-43f3-bf6b-62ae5dfa2a83",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e92d26b-9d17-41e5-8b77-2bb87fb8a94b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8364579a-8e6f-484b-9e7e-b502151590f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf0440ff-43d0-4a47-9c96-e57d83a7d264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b3d6c0e-0ba2-4a87-bd3d-84aecbc4e944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41f3d2e0-2ff6-473d-9447-3be28bacfeed",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91b6c68f-1ec7-42cc-8281-1fad48943550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9e212fb-d7b2-49e0-a07d-e86f33d1a9e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f0331b1-84ba-45c8-a1d9-8cdb3fddc5b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f7d319e-5fe7-4e8f-a978-1ab736418213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "028be0e8-3779-45b7-bae6-770e7e0d9962",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e26a7032-da11-4d0d-bcfd-902932920de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b14a7c97-e84b-4226-b3b4-e6083662f20d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae19253-78c2-49f1-b968-55770027e1bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "bc3ae131-1cb0-49ad-baad-84993bff2ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a381163-2630-4346-bc09-5ee049fed5e6",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3150d15-d43e-4427-bef4-2d03b99da102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8de966d9-e740-4757-b74c-b480ce36719d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "645caf33-0002-4049-a88d-54c456234dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "23587aee-4bbe-4735-a971-9aadf7dd0e14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9554983-1dfc-4e7c-981b-a65524991ab6",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5772d56-7a59-4eec-89da-6c730f21dd8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "572fa5f0-1051-4982-8061-3ebd0940ca84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "244b6636-06d4-4ee6-8ac4-beac88e1c939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d533d142-f211-4212-8df1-0dc3bc5f9b51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bf3d64a-1b3c-434b-804b-14185c82f6d6",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "939d8c54-aa04-4464-a198-a6dc0b949e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cef8af0-4ae3-43d7-9553-caa7d497569a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b2f90f-a61b-4882-ac2e-8f9d71716aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f739c1ce-11d6-40d0-a334-1f597ce8cb65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85705b9f-5a2e-4c70-8da5-469aa92fedbe",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4cc78fa-aea8-49af-99c0-ecc9a31379e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48224472-bd78-4ab7-a9ec-9ecf6bb68c11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "286c0010-f3c6-45a0-b91d-1bf517982133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "afc0fb87-7269-4529-aed4-2daccd5c0b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d62a56b5-aac0-441b-b423-c05e0475cc88",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f162790-4b01-47e4-a689-626fc9b5cae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7fce018-a799-4f79-8439-5ec78ef1a438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c257057-91c0-477e-b491-2a0efff60c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0afae959-d779-449b-8036-6278a830ef9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcc1c04b-b196-4c1a-9bec-1144651b99ce",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04120563-d04b-4f0a-b00c-2e923dc7dd62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ca15794-eda4-49b3-8c8a-0856289b79eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c6c9a4-9ce3-445c-a9f9-5fc8734b928c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "2bdb6e77-828c-4fbc-b67d-8e71054573ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19d9d9c5-1f9f-470e-adca-4a431169103e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a58d0c-6fbc-433b-9e25-527409066e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d830857d-a60b-45a7-afbc-2ffe391a9d59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c590e78-3857-4df3-9d58-ea42c96b0119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "31d8be37-2625-4405-b4c0-20de84625a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e896827-b65f-4804-b1fc-b9aa3214f35b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "872d833c-8471-4594-8f16-fe5fc0ea2a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d493be00-c3c0-4c37-ab73-9e2431753a30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef84d96-8259-46c2-8044-2b9139df37cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3d0738c-ef75-4819-93fc-267656285f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5127f9f2-f410-40ec-9d86-c58155379d80",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7621e1b8-2c18-44b6-9a76-2fd9a7d61f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91d68e5b-1b73-4af5-b366-5bd38ede4a53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d79226-d98d-43a6-9908-b39157f6d757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f6ae7c2-4b11-4690-b89a-54f997a5d921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ce4e47-5ca3-4859-ba95-70c65adfbc09",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "822b5d94-54b7-4e97-9dc1-a006a9e89d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "773b0a42-63e8-4942-80e9-288a6d347c36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bb81f63-81e0-4411-b51e-8114d7ff8816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d15f3041-b63d-4251-aa5c-0394eb84ebf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eddaba30-b2af-444f-8509-e0b994a894fb",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "391f0233-1d2b-4950-a57d-7ef30d68ec77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2124f6bd-2786-4d62-b9c6-4996001390fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89f54f7d-a424-4f9e-b115-fb07b7a3d562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e64a3d5c-0c6e-4320-bbd8-933b945db580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12274a3c-4143-4a2b-bc67-c7dcb93b7921",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "146e3856-9c6e-41c3-bc4e-097f0ebc4380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0721687-5821-4e49-ba0d-f9d7bc57fe06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a332a850-271a-4d17-9185-bbcd33477ce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ad922c4-88de-4663-8984-26e945b87174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72d9ab06-8bf9-4c98-bef1-b6c11401c08c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba7942f8-0e72-4859-a10a-ef1b6427fddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e28dda0d-2990-4187-bf76-5b51b9b8c9da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05413b33-001a-42f7-a103-89e7e84b45de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52d49544-6ff2-4005-8753-53a148560960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a9efe39-0ed8-4ce9-ae57-fb561390bba9",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ac5570f-7a51-43c8-a20c-f48cb2fc7d46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33b03ef5-56bf-429a-9ede-4e1e51b73ce5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20d74a8b-c231-4b86-9dc8-397dbc0a953a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "332518cc-0723-41ca-8694-02054e5348ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "206bf5a4-d2fe-4fe2-811b-836b024c0659",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb09a3b5-24fc-4114-ab9d-af4565f828a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "760221dd-6ca8-4cfe-8ab3-124f0c3394a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c75cb6f6-f8af-488e-9dcc-ef532ff20bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29bf5dbe-77fc-46c5-b43c-dc53b0245d5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41dc2e9d-1ced-4921-84ca-d4bfe9355842",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00493cc8-83c1-475b-8f36-63a41c6d8a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d5c8f9e-1e98-4d63-9cb9-d2062f06d699"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f3f4e5-4b16-41f0-a71b-d88716629c8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae2d41b4-4bc5-4f85-871d-3b1d08e3c833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17058f7a-4eca-4bd3-a96e-0b92173f4663",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e202459a-85e9-4bf1-9631-6adf8b16f456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3907405-f4aa-45f5-b36b-e740239d3de3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d46f4396-8a13-44ff-9af0-29a27d7e4101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b37f0db7-1a58-4cb0-a16b-a754b2e5a2c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37d234eb-2402-4906-813e-b6c8f4a4a637",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecb58282-b0ae-4c6d-aa30-dbcc2eb25d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "143a2a31-948b-449a-9d03-08d55097842f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5d7f3fc-e74f-422c-9cfc-d63b7718c643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "435f0f39-a70b-4191-afbf-d74ece6ec6e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fccbae6f-0e44-4220-aeb9-1f66b5298dbb",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5f48887-e517-4f4f-b0a6-2003146c8c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ce470a7-aadb-402f-9687-db91441984e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7335509-0ab3-44a7-ac51-bb7db00d7337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f676bb09-43b6-41ae-8ea4-12c07cb850af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dad3b19-5578-4953-aac7-6f78c4d99057",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e25926d-e137-4287-b35a-7437f0573d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e86a0789-bfc9-4c53-92cd-5b15b1cdf24c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbc71052-963a-4e98-804c-4dae5ded36d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33e54cc2-a577-4b9b-b228-f5f103670e80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58147df5-3e31-4383-b506-bab344b97859",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67718a24-e69a-4009-a751-ec69f7ce48db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f33e28e-61aa-4a40-846e-2ae3b22a9b62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b9a308f-4348-435d-a774-e518c7c8e99d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbda73e3-71d9-4f71-a718-845778d81751"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c0198eee-eb2b-49b2-97d3-69e0668ca01c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ba0549ad-3894-4257-99bc-507ca7c24433",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e1b47f-c212-4d05-870a-d4076dc0477c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5399c0e7-7f31-4031-94fb-2088d931e547"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea12a117-52a4-4606-82ee-d732e9035062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "427a0565-2ec5-46a2-8480-79a13fb8812a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "304a07ff-e5bf-4743-914c-052fc5ad6186",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "918192c8-5cd2-465d-b461-4ada86f113ca"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "998c949f-6e02-4aef-92e2-49d1522f8700",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "77a691f6-6792-43a4-a435-e1219430e09c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7d89ee56-efc9-492b-ae6d-d6d4cb0d27ad",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c6fb3585-9d79-431b-b96d-d8a21e26ee7c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "19c45c7b-6c7c-4a10-bcee-f6470cbb0042",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1e1f9181-f600-4762-9720-37b91bc65ee4"
            }
          }
        ]
      },
      {
        "id": "19c6110b-4840-487c-96de-a7757d8c6c97",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "87b4d93f-1b79-4cb7-a8ea-e1b3e8bd46a7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "76648b63-34d4-4286-ae0a-fce5043e5e06",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "71882436-0acb-4166-b5df-272ed35cc434",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a8e3c1-b95e-4180-887c-25112f135851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f37fc021-927c-484f-b396-5dc3643a7c8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42cfd705-e9a7-40f4-b084-22f313ca8411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1f1c3c1-4474-4de4-b6eb-e93e4f3e61b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b981792-98a9-4f15-bd5f-0be5a0a04386",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ec44ac-e157-4363-9c16-a6e3e583f353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5ec38df-2ebe-4fa7-b297-6da06bae3924"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1982e4cf-3b55-4a8a-8e89-ee5b4ae470a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3749476d-e371-4b8a-91fb-0212fb62e238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beea35a0-af1e-4838-b8dc-d9f27920ac56",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c0aed88-a70a-4c67-acf0-c4a9022ae061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9948bfbf-e414-4cf5-b1ba-91b162a66414"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7cb28d3-2c9d-49a8-896f-cb3eddbfc579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "af09bd7c-4b0c-4cbb-905a-1f11b2335c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f66badb4-1f0b-4a42-8d55-472a58461666",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b38be6e-4309-4b95-94c6-528f68c3e4ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b90cac37-1551-41c9-970c-583a8c667c0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31a381cb-e7e0-41e0-a8e9-c410d62e249e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9419290-5fd9-40aa-9840-a349d2d35dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e15f0e-11ee-4c5a-b0d7-bc669c25b3aa",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "981f2be7-3748-43f8-94ef-9dd8425601c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "184d2b3f-c6bc-404a-ac64-774c985e2a2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a38053a1-729c-4de7-a469-40e1d3c67377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0dddd471-338b-45c3-a396-80cbd426757f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "145d03f3-2a5c-4602-9eba-3e43c9930565",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f15f8aa0-d655-4b1f-98c5-da79cc0d6e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41c49f9c-ddb0-4795-83aa-d8cb4096429b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fddacc92-0cc0-402c-96f5-53c87f7bd25f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3dd4e3d-c028-4963-a38e-183cef0a6be2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8225b82f-d0d3-4772-b634-0be213ce2f5a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc4b125-cee0-454c-ba40-07e8f6be9f51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "633c3a24-1d6f-4d52-9666-40497fb5e3ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f79ae0ae-0f85-40f5-b26e-69e2f95e05e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "dabf2ad9-740d-4a1a-a174-5fef04ee9ff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a18e1e45-7f6b-4974-9733-415fb5974938",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b0ffc67-1f68-4afb-b155-a39b5d1d560a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41f0f7c1-6d69-4510-96e0-3321f3898be9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fb186ee-2c31-468b-850e-0b2c102c101a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4a29870-f5a7-4503-aae1-143880dd3412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2df553e-3fe6-4628-905f-d5c1bffd63e1",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba2f1a2-6f1b-4305-a401-efebeaa273f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "105b9d6c-2f12-4df3-91ac-dc41cc12d2f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b253439b-9916-4852-9bf9-1e8abae5e963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "731b57c6-2adc-40d0-b8de-cf6c2f8bf4f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04c5df68-b420-483a-9ae5-dd34afeeec08",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b9395cb-73b6-4900-902f-4d48833dacee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd987e92-39ff-4061-ac1a-9e341bd7fee7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de83a9fc-6330-44f8-8d05-a6d0e5425975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdf5017e-f215-4cbf-bd6a-7086d576e2e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d45c87f-c8d9-41f3-8de6-97cd05c9926a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd4ba190-fe99-4465-938c-d52955c2aaaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6106957f-97f6-4c42-9dac-8f1f4c291409"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89d75d44-8460-4182-97ae-9f115f7cae63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ac0d683f-9703-467a-a6bb-d8dfedd69081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0ddcc2b-2447-41eb-b331-5aad84d68116",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef4f8c69-a8d9-4287-8487-b413d5bec2d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6746a3e5-8195-49df-af30-1d03027133b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2442b8d-5e27-40d8-9c68-a7edf640436a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f087402c-6ccf-4be0-808a-4506e3d7cec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dceb0ce1-9fa1-4607-93ec-170ee6bdfc8f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feb48e0b-9771-4db3-8e81-3f8541b6e0e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0380187-01d1-404a-bb7a-5445d0a36a55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b72035-3eb6-447e-9fb2-48d5b9bcdf9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "71ed525d-bbec-44b0-b34d-e5365ad897a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70786a7e-5006-449c-b0bd-ad77c1329986",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca1dd14c-8999-4970-8eac-6209caddc697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3e389df-cb02-4804-95de-2d591ee3b1f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8525c40b-d2a1-41bf-9e32-1dd9400a07ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d97aa1e5-9d95-455a-8388-7eba590eac50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0923fc-bd04-4960-932d-847515794f34",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c537e7-220e-4911-a11d-3a938e4da60c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04bf087f-4c76-4a8f-9d1e-b473e24afaf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7763e5b9-faac-4dbe-9e46-49c755d2e718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "33b6e4d3-9b58-488f-9d89-6a378a5e1e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b2e67a-f4e0-4f53-9de1-e0c90deeec9e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0492164-8b43-418a-ada2-522e95bfca73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b60dfaa0-a185-41a7-8b68-e34810eb8040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a57137-f448-4a4e-aa03-4a732c315d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "665194e7-1caf-482a-98ec-8ea38c4775d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12cd9483-781a-471d-bfce-66c297031388",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e766467e-bd95-4d49-bc64-b6b42b23685c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6babd29b-58b4-4652-bac9-2014431241a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6888a661-a1e3-4b23-a8dd-acf7a9192c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d9bba55-4d4a-4991-9fa7-5688f98e9a31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17297b98-92fc-4c56-ab10-50dd9f406d40",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83180ede-baa2-4a7e-9302-bb22cd59af36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58bae358-3e34-44e5-abec-99365b6f714f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21170baa-b24b-4816-bc13-b63368f67068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "943e048c-ae44-4b0d-a578-b8577eec9fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0349c936-8aa0-4e7b-aa55-459399022170",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c5410e5-2a73-406f-850b-4905eb522cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66d30812-6f24-4baf-880b-f2d774dcd122"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eef8384-af6f-4ce5-bda4-48197b50c307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6155f355-c35e-479b-a2b6-5a51fe1c13d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f9cfba9-5826-499c-adc1-09ca1dc30797",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca5d45e1-4d2e-4c08-a635-c89c26934e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "018a0fc2-c039-457c-9f69-cd858ac9f13e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42967fc8-dbbf-4eaf-a4e8-80cf6b089e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "172e79c9-bdd8-4f22-92b3-99d2938fee31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7969ca7-7c4c-4f8b-9104-02bf7395223c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaceb723-1867-40a2-a34d-e877c391c34c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe2ce33b-f1f3-434f-81b2-a495476ad620"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3c9d60b-bbe4-4499-8d37-9b2fd562c462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "00fcd199-2373-43df-a211-71cc6a796241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5bf800f-474c-49a0-bd74-6d8e95c5b407",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76330ce5-8c07-401c-b27d-04b791c265d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17e12d9e-91e4-4605-b3da-6f5e56c35074"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cd9c375-f484-4ac5-9180-8f63ea0b427e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "298fd439-70cc-4025-a1d5-d9e646f3433c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "397c16a2-9ead-45b1-b2cd-7cd9673d596e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f162e8ba-4ed6-48b3-8b1d-70ad3a6e7929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f19485b7-3bb9-4dfe-8ebf-c1eb06427a38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42d109dc-8d97-465b-aef9-b9374f59a644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38bac229-74fc-4199-8c05-9bb7a4d0013a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "197793eb-0f3f-49f6-9a72-33f5a98dbf4d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a38918b1-eef1-454a-9831-f2623565dd83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "176d161d-4f6e-43e0-8d0a-2b417beaede5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99471609-e8a2-4a5e-be70-25f74211d1c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dff9d52c-19e2-4ea2-8b81-b4bee363708b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e486e02-ea48-4d5c-836a-a1a984cebfa1",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce6b03c5-89b0-4e81-ab49-826646e96e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16cad921-e252-4a9b-84fd-e3299d9a7d16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd04532-1e08-413f-98a1-af22c10f3d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d47fb79e-cfc6-4064-bf81-0259ea1367ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dbb4e96-5480-4efc-8e94-4d7c5404d0dc",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e914313-23e6-470d-8c0f-b5f39051bdd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f935417-8b71-46e5-99a7-bbb6f9985422"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1e16bce-bd2a-4f43-a8c4-22555ef00917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0addf076-3e29-4749-8476-736fc7c3b00e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "570c4114-5716-4842-bf3f-9efc16a15935",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f6fde89-c835-477c-98d0-5a218c94cdbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42c9dd7b-a32a-468a-8d03-c61034d7c391"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed48a210-856e-4188-8de6-ad09d92b3520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "813cec96-8efa-47e7-905b-4487cbc17360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90bdc2eb-d96c-44b0-86d4-6b509efad87a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f94a27f-a3c3-42dc-afb1-eeffe2636d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85ca8cf4-dc26-4026-a475-756b514f954e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "944eba9a-31e8-4c92-aada-914a80ae1072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd1ac330-7bee-4d9e-b444-37f98b4c0b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16197f21-0d7a-4c52-8a17-a754c1b96dd3",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd7a151b-bf6e-441d-b542-321165ae2931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17d08db2-7736-4623-bd98-f1691793157e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83e885f3-d686-4c04-aeba-8dc1c5207bb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2dbd392a-1517-4ce8-ac8f-f484435234c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57a818c0-b024-45dd-ae06-4d395f48f225",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f160b48-5afb-4524-ba0c-bca1d480de6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82384c1d-7a3e-4796-a90b-8841a73da626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a20ce67c-f2ec-42c8-9215-fdd195265da2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "374bf7ef-ec40-4160-8d6d-72a82915f681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9542ee6-3d5b-4734-96ab-ecb367b0c969",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c90ba0d1-e5cf-47ec-b0e5-cbd51a786000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a19c118-41f9-4243-ad33-5a2756a55fe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3277c691-159c-42ef-a241-c67730f9f14b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6afd3149-f25d-4abf-b6f7-34772f0c0f86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a313a8d-7ae2-436b-b81d-dd822b13c4f0",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddf82966-1ec2-49fe-b49d-205f8f490eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d2d3830-b86a-43f9-b276-a11cc6be4e71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44a3fff1-f5c1-4651-9b6c-6e646b9e583f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7da5e142-6758-4c5e-aa5d-6106449dad55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f83123bc-d772-426a-ae6e-7ea83f9e3a61",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a473c42f-637b-443e-9465-d44ec29a2a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb9edd64-060e-4efa-b566-19b134102576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af9cc7e6-dd29-4eb1-8113-c3e004dd3714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7f433d4-5f44-4965-ac19-c289dee3dae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89d3769e-e680-4219-896d-650b61410b50",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "187b6337-1928-4689-8547-3aca9dbff0c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d9e455e-d605-4d99-b870-14abf4365db4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "773d93f8-4782-41ef-a499-14511844af69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f456fc9-673d-4951-8d70-417cea9b23d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1da33348-1c3e-4e5f-9ebe-9758e7e7aed1",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "208fadd6-3049-4213-8017-d4e1e377c17d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4326bb31-1bc6-4c31-8b98-6534f502374c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c6c37e-9ab1-4b3f-b8e7-8bc3479e06d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bd61876-a12f-4b34-b63d-3615ffe992da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db40ede-2cb6-413a-a538-3b176a0c0956",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e04d12-1721-4851-80e9-ad71acf1bd6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d8bfea0-5a87-4103-b7a7-34d3075befa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b857899-5185-4ffb-872a-2026cf63fcd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7be94dae-7c8c-4b6a-9770-64a018df1bb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72c6abb2-ee72-4a9e-bae6-9b09145cf0e0",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23632909-90db-499e-b21d-cbbda62b5720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ce1e504-1363-463e-91ae-a2053da77dd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09cdd7d8-3355-41bc-bc76-4022f25a6896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5da5e67a-2e08-432b-a459-8f128c54eaa8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "df7fc09c-83b6-42e4-ba62-297ca887337e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1688e024-712b-4c5d-900c-b20d0dea2f9e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8353daef-6514-49b7-a8be-80b9718008c5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6d3ba67e-e2db-47f6-8f91-2f0acd100518"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c238d904-afd7-4a1c-968b-3370e2be4723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f4702ef0-eff5-45af-bddf-05d65742b162"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a573fa4-9446-4bd8-8768-d031ced00961",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc77f6d8-53cf-4418-afc9-90302a0e6944"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c7eb23a5-bcf0-44a2-88b9-fd9c398c8d7b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "094273a5-99c7-469f-9c2d-6023979dd48d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "52a1d01f-f600-4c77-bfa9-5b89591bcb71",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bb8e9530-69f4-4f45-925a-cbf1964baf44"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b67bd6dc-3c7d-4a58-b6ef-4b53f366248e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0e027a18-c82e-4dcd-a1db-003815667609"
            }
          }
        ]
      },
      {
        "id": "e40ecd36-6190-41e9-bb14-f80b767dc8fc",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f9effc35-48d0-4b03-aedf-5c3e16b5a011",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ed313fd4-0ad3-4990-af69-25f801072fec",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0d07c672-3df2-4451-8b6f-83e5de12006b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26a23ac9-282d-4294-9cb9-538c110ccf30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "844afa64-8a02-4e16-8f2f-79cee56a74e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7464056f-3783-444d-87e0-b37ebdd311c1",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25fe2930-378d-4783-9836-585cb7083d4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccf0ded3-7b22-42b1-867b-f843a6898260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe6efe5-b26c-4d18-9718-4acde1bd0414",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f45ac82a-61fc-4a8e-9ca7-afff9507591f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34048153-def1-4dbf-bac5-b438fd976e3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38f9228-eca6-401a-9699-c0088bcff8d4",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f1c01ea-006d-4ffa-97f7-f60cb0900f88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "904dce7a-a16d-4a56-a05b-e3a9270de537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "220e08ca-f986-4149-8cab-a5547aba3cab",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e2c750b-7c39-4911-8c66-8135cde5e537",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc57ed37-cce9-4aad-bb8b-63532a08dd7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fb62189-e6b6-45e8-8fae-44b141206c3c",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43f16e70-b9d3-4934-aecd-0e74ebff9c37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23e7659b-83d4-4476-9892-90bf8dd0ed84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67decd36-fc14-4d7b-95f5-a9067f6c8b08",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cad63bac-3d99-4255-ada9-76e3c7f827c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cacd501-4bac-4bf6-bac6-9ff1f8fcbe01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e281d145-e65c-4a80-b9af-8a44d0ed00ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7527b201-14df-4806-b69f-143f0d5f71f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd46f159-7498-410a-ad31-ef1ab9ca6797",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ecfc237-745e-4643-975f-e94df4c97921",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98e8933e-a1c9-4b76-b53c-56acf1af0e19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c78c3c7-42d5-4514-896e-31342e9dc7df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "574d9ce4-0d10-42b0-8abe-9f87bfa7f703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72bfa4eb-6047-4e7e-80d8-5be164e41080",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0635d822-fd6f-4f6c-aecc-dcc620fa265c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1583312-9755-4c8f-9d9b-b3f6078a5978"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca17072f-79e5-4122-ac4d-a07cc41c80a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80d4cb89-51fd-423d-897d-678108a2b7a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9096f3c3-40f4-4e1a-bc21-81e0a8cd4fa0",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7218325b-7ae3-4e9f-b6bc-8dd060905968",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b86b7ce-c86b-48dc-9ccc-af4ff1eeb20d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee8269a2-5500-417a-b1d9-aff4206b7593",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "316c6aef-82f0-4142-8a1c-d1d0ff2d9b88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a29641a3-4e39-4c5e-a401-77f2e83d637c",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d71c8e53-3997-485b-a4fb-880141888b98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9ecd20f-4a4d-4603-a1a5-b4125f16292a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9808b66f-4d64-406f-ac38-304d563e29d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27217b3a-5bfb-44e1-9c4e-facef15089f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06f51c10-a6eb-4a3a-94c9-66d88ab96c95",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07a96371-8f60-4f42-8e7a-c36f445500c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ab1eaa0-e3f2-4e78-b228-68481d0ae29c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed2f2a29-e3b1-484f-af1c-ba69c426bc30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63858b6f-1af5-44f4-8ea4-b3523c66070d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2950c7b-31d5-41ba-8cc4-2ee743a0bb03",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3386c02b-c1e8-4cad-b0f2-2a7687a10a2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0883ef3-4e08-4cc1-8c86-02ae2f6b4beb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ea3f30b-2a3a-463f-a808-986d7f92dad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f37c0044-e6e2-4216-a425-9202a090f449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67f8abb1-0d21-4574-b04b-40028ea5fae7",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18b15f73-124b-4d25-9b33-fc2ed6ccb4bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5061c0b-d51f-46e4-9023-be92d05af7f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2507f68b-5586-459e-9c63-22285e24175d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e89e5cea-c0f0-42d4-b346-811be312f7f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e6b06b-8122-4dda-891f-b1e0f1e46558",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fae9b54-7d28-4bc1-84f1-0420cba53c16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "000daf53-d660-4871-9ff6-ab6bcea105d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a70ed4aa-16bf-4c39-84e5-61d8c65c9bd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "120f0a09-a1c5-4fee-b89f-f4bec7936c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf566507-1e40-44ba-a868-72f07b83958f",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c097673d-e8be-4fda-8f62-560b4a0f6e54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e7d25c9-ad1d-445c-a7bc-78368c302390"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5a4d7c-3bae-4ead-af60-cf68510d0a13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58bf6b5a-51cf-4a81-8288-c5871558f8f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef707b6d-8717-429e-96d3-893ba1d6a985",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92193545-f844-49ac-9fc0-4a4d25b4f51f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3499043c-2e5e-4599-ac69-a1f462265511"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "231b49f6-3dfe-4c12-ad48-8a9f2da8063c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f2ee7d9-2e1f-40be-af9c-a6404ec85b5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d68515d-dccb-4c51-a8b1-c4e983c35cd7",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c14ac4c-a62e-4ef0-bfd4-fd0d41a4eee2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b1d0360-6c4f-4332-aec3-cae2175096b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7adf9c8-2808-48db-a965-bba2096bd5f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13bace48-7db3-4ab7-9891-190726c9042c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "966df45a-7f51-4264-b4d6-02d82776f54d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "175c477f-306c-48a8-80c2-d2fda7cd8459",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "213e1e6a-ba5b-4ddb-a0cb-d1ae271b8837"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8483970b-a88c-4480-adc7-5d6a44ebe931",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cce5492d-34a5-46c1-be5e-33b7b52fff1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25592c25-01ed-44af-abe9-da1e1c1eb50e",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "111ec43a-2ef0-46c1-84f6-b6b10918a95a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "593a0561-25b0-4f4e-81bb-3143d2af7a70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1372e218-0d36-40f0-8a8d-d11aef8963f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb30574a-b0c6-48fa-8a9f-29688ccc5035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7297dcf1-eabb-4cbf-805f-996bab8e9002",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f5314dd-9ae1-4a18-88df-74f0e0fab08a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2afd8463-0152-4134-87d0-5a4efa5039a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7621791-bc9b-44da-bb48-83974b23ae5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7000956e-6928-4fe7-b8b7-2d023e09c06b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d52e0040-7e21-4a61-99c4-5781c5f0b870",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35019701-c183-4073-b7d4-1d33c1468092",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b41c646-6963-4a3f-bb60-a36eac9342bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e035337-3a8a-4776-879f-a6037fd2433d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4fca1e0-2bff-467f-9525-591ad205869d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2469414c-de52-4d9e-ab6c-c4b2f616ba3c",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7a38974-bd5e-4931-b2c1-61be682b8e15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0470fc65-75ef-489a-9e22-6be1dcb5a454"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a475d7f-2468-42e0-9167-56f442b69076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aa73af3-810f-495a-9c14-379cd06ed8b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af7ba24-d7eb-4403-9053-5d5d23c1d819",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cb0669b-709a-4c4d-bf90-5d15878304b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c53566f8-4582-43e9-90a3-1403fef84dd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "449611b6-ab65-435a-88d0-efcb77395a62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13a60a70-e063-4184-82c6-c05e9eedb71c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5760f30-9c40-42df-bded-fd7131d12cbf",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b34c5625-c375-4086-909f-5d131ae8da90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1220d327-9aee-41cd-960d-9902e405ffd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3be89745-a2b7-437e-9724-3f71e169b45f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f46f728-c958-49b9-a896-7e650db57cb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3037278c-9d4c-41cd-9e11-27e71cfad799",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "642ae988-7f75-46b6-a456-9941f1438290",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26223733-8e23-48c7-a0f2-01ec9096a3df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2346fde4-cef9-437d-8a9a-24243b083524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af2c1092-c12e-4473-8921-d2bdd2d5e142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99557536-87a6-44a0-be95-4129b84ea310",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e065bdc-27bd-48a3-a13a-d12ccf7fa92d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fef0271-a106-4e2d-947a-bf4b5503ae8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ad315f1-c72f-4cc1-be9a-da5b4c4743da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f251196-c51b-4974-9ee8-a6de5dcae9c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c06ca52b-265d-4d0c-a017-3d41940e6921",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ab4ed5-3787-4a32-88e1-fbdf44d2caec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0872d812-abff-4d9c-9179-1294d9e68f9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "782b187b-71e2-4d56-8795-4560ae6ed04e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cf05936-3f4c-494e-8883-ee3c2cf4d9df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6104fbe-8f7a-4a22-ab6c-129344df415d",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c292ab-9cc7-4e7e-a519-03f07b71090f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08dcf464-cb0f-432b-8d40-1cfa5588e55a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ef7196c-6b72-455c-a2ed-889693095733",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50d21700-f3ed-4d27-b0e2-155a14277757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f4fb79d-5d96-489b-b96b-d55eb9ac2a85",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c1b878e-f9f1-4802-9b0e-e6a91caf9a26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09743408-4091-4a90-89b9-2064ff750947"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ece2d3b-f679-4132-aad6-380cb685dd4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "221b3aba-d47f-4572-b0a1-c64215290d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c01ed4-a3bf-4ff4-9ef4-3a6b9e913d77",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03c7999f-15ac-491d-8f15-69dc6b612b0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c30cf503-639b-4701-a6ca-c0a0305ff663"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e34804b7-b677-4234-a278-0a0b42ea1547",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46578d7b-8bd5-4f9c-9701-bd0e8f7cf782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a760861-9324-421b-973e-798ae35ae3e0",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afb0c339-485e-462b-9f00-8a45ac22c4c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84882dae-e2c3-4d3e-bde4-9b99379c0c99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c791b68-1001-4356-b192-efc08957a0bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13a1a6b6-49c8-4d1f-9550-f66217ed03d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68ebd664-4b5c-4381-aa42-4f3963169912",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d9465a-582c-4c96-a187-26bb664972d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bd15d26-4402-447f-848c-cc45a61eecb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ea58268-89a8-4415-a5e2-2b5d35d1e835",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39f7b26e-0793-4214-bcb1-86e102631785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40c95cc2-b4a9-4350-a595-754ab6f32910",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f5e113f-6533-4a96-a721-8456a92e60fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5547ad48-a179-4316-8107-15fb750c389e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "379c292b-fa32-4dc6-be8a-eb62976c2921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae2c35dd-28cd-412c-8750-70abf30667c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fe9a0f3-a128-4d6e-b8d3-1b3ee0eab3fe",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d3509e-13ab-4a56-8a91-eda744eaeef5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26905166-dc03-4299-9f39-1f12af5c4064"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a89636a-2736-41f5-aed3-182362cc5531",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8cf9ffc-3197-4018-8d53-a88337ef50b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1726124f-f645-4217-a10a-a1a5bc110a7d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b467ff93-79eb-4a1b-9f75-9ca49cf9d0cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9ff4eb5-9f5e-4721-9a5c-8011aaddead3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6df2493b-ca07-41f6-94ab-626cbb637ffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ce8320c-3605-4a26-983c-3ba16db447c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee5210a2-3f22-46fe-9ba5-bb6cec2dd355",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "230ab74b-ffc8-4e13-b4ee-8f4b4bbf2d2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77864df4-e4bb-47ad-9231-c1e1e4caf415"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aedef49-920b-40b4-9e20-1e6511290180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "593b71d9-ffe7-4aea-a21c-60699c1b607f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a272250-f206-4257-9ca0-35eb06860d03",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "584a38f2-bb6f-4433-ae27-8eccb3dad983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa6b08f5-1848-4df6-91c4-4d2d13c3abc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80789c8c-842d-4e25-a486-036305b3d8a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fcfd0f5-3a85-4d7b-8dfa-aae6578c8c6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b540825-0138-4538-924a-b8446f01338e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4169c500-4f7e-4734-a599-3980632583b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a20b5071-563e-4f4a-82ac-b670123ce0cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d97cfe-17c2-44eb-b2ec-86b8f88a47c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf9b20e2-45c3-482b-bcf5-51171a547b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5235873-a0b6-44fd-aaab-38b064631cc7",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb528bf-aa28-4ac7-a5e7-651005cb4cb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a421ca23-b747-461b-82d1-18e6713cde44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6178771-abfe-447d-881c-bd43cb0d6c6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6612ebe8-e7fb-4451-9842-ddc4b2d9a398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8062d368-e7ce-4724-adf1-73ecca801c38",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5577ae96-0895-408a-81cb-0c860253f57b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8214686e-1476-4ba7-b707-b1e8e2cedcb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc6529c8-7a12-4159-ba9c-bd173fc1bb12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8d473ff-cfa4-43d0-8d55-c6e50b1f364b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dbf6f9d-b93c-44bd-a879-492dd7ede3ad",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0001d8ed-6d90-4411-8d2c-39b21b831d8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f5dc043-57a1-4d1c-a491-717c7fc969ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a7d5fae-3e1b-49cc-a64d-fcf7ba4046b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6865ebb-46e3-44b1-9a8e-5a02d631aea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eba6e0e4-0705-4f62-99c0-702b5068438c",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c24d4131-0104-4334-b570-a7dd943807f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d792e4b8-6b69-466b-9d7f-994dac2ff992"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f45b44ad-80d5-4cc7-8e9e-680985c866ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15bf3924-0130-45c0-a8d5-a8274eca7144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee6943ce-8c0d-4f37-83d1-46d62f79ac13",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b3fb28f-ec01-4c91-8ce0-3b4df739f493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53223992-0fb2-4eb5-b218-d4c012e46636"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c622ec37-9626-4832-b6a0-31751014f911",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1bb5535-551a-4507-907f-9748f2074313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2927468d-2705-4353-a0ae-3d4249d5541c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d76ee0-c272-4ea8-b029-4f9afa3006c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51d63f4c-6b4f-4c9a-bc17-ec101a1fe3f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad6ac21-6414-42cd-96cc-07856502f133",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f6ead9e-81bc-454b-80c0-bb37b2ffda2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f49d9c0f-1077-4022-93c6-bdc5bb0ad9c8",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf0d5749-947b-4840-b111-e56894e49eb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ff14116-252a-4bf3-a642-2774d0e14a95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f68498d0-d3a1-4f17-8756-d59ba5db38a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89297feb-67d4-4267-88df-bb2ecaf39786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05cd8af1-dbec-4bdf-9c37-2a449e34e9ff",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd9856d3-13a5-4711-96a8-ed7b24a4c4e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b4506ed-d5e4-4e26-ae9b-7e8a701b1177"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64ce7367-c48a-4a29-9b3f-3f0097d12f31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2ad5f32-1fe4-4370-930a-89fe60077123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5be794-2296-4dec-835c-5746a81c29be",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1edad201-623e-4a30-9edc-8dcc283432a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "117f2441-ed81-4ee4-8ca1-ee63d47d33af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "384843dc-69a7-420b-8322-408ade23a227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68636588-7bda-49d1-97f2-a0fd62242b48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a73ecac-b60a-4218-bbbd-b423988520cc",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d452943-e4e1-449f-8c62-af480951dfaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a597cb85-a2c8-4a5e-82a8-48a0df467f96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "500abc89-7efd-4028-84c6-b151e385c389",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9485006c-649a-4459-8a0f-fa7b181537c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a39f0c6-06fa-4143-8d39-a24a703a6533",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df95309-4b86-481f-adfa-96dd191d2f82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00156231-1c0c-469a-ad2c-2bfcdb90028f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89dc7c1c-8a36-489e-8320-943101bb3656",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "168490b9-60cb-4909-b4ba-1dceebda51de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65fc115f-5d9c-4714-b012-f67f713161d3",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e4db2be-2002-4ced-bbc5-f264b0ccaab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80753f68-e497-4b53-91dd-9643d36ad5a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82e29dd0-3542-41e1-998e-0bd3bc9b5663",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ae16de1-5815-4c7f-8928-d82161d727df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da60bfdd-13b4-4394-a07a-07737e52e073",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19c51e3d-6983-449f-92e7-3e4cf898cd05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e391050e-aa07-4eda-8508-f37bddc17c74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55955dd6-a034-4fca-bfa6-afcdea79fcf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32b359c0-724c-43f0-aee6-53549e17d4ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2e9c9ed-e7a4-4a96-b6b8-e4d6ae675e35",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7695344-b712-4e8c-9cd3-79d5014cbbab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a900dd73-305b-4023-ad24-c4d23f0e00bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6071dbbe-bf2a-4c89-a3a9-6d7e33989e2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec98f0de-58ba-4bd5-ba33-fd5f22e3cc4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a6c6709-3c58-4639-8779-14b8baa8eabe",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acab16ec-996f-4dee-8fea-4523d8e5f2be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a81057ee-38af-4e99-beb5-3aa1bac316c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a56ed0-1409-4b30-9543-f60fe5e1d626",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c254ed4-d306-4231-947e-1173d839f100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aada290-fd33-41ec-880d-886d76fffc95",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c762482f-1f52-4643-acc7-4ffab16470e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fd37afe-5473-4453-8945-16edd1672554"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21e4afa0-8c49-4b1c-9e1c-6cc2b21cfbda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e866c8c-949e-48ed-a8ef-b7201d5701b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4de81bcd-7775-4e82-aec8-e5b02ff9e786",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77126de4-13bc-4976-89b6-a5249c1eec89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4a88341-1b82-4bea-839b-de5c9af7e202"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "858c3317-b158-4c13-86b8-d70fb5cb84eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b74c19b2-90dd-408f-b9d0-76c093eeac18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab729d67-de01-4332-8645-a926b92ab83c",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f987b445-52bb-44d3-993a-f58252e80f29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf9078a3-8c48-4e3c-80d7-c8abcf2106d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fbaa9f0-b7ea-4aae-b509-60655a815f1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb2a6941-6a62-46b1-ae6f-a7190c5ec986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c7048d2-b1b7-4211-8349-301be13d907b",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b7d859c-8118-4b75-aca1-eba76c782c72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30fa29bc-f93d-4d6a-abda-b6a3b4ac8c85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "594ecd98-6c51-4115-a231-c4b84a66711c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edb5fa5c-2334-4e12-8551-a4d47f7b3121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a91f9214-f060-4f58-b7fc-0aeb8289f721",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f5ddb7-0a10-4941-ad29-178371ac0049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f46357b-29b2-46b0-8e6d-63721300520f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdb28ebe-9ed4-4561-8781-4bd303c0cb3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9957655b-3e23-4ed2-a483-35040558444f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "188c727c-68e1-40bf-8fd1-7796ca395c4f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae720e52-531d-4ba0-bb99-5bbcca0feec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca955584-4e45-4573-b80a-f1d73bca6e39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f3d60fa-b870-42aa-94c9-386a5117f0f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a24b1b0-e5e4-49c6-99d6-4a7d936a8e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91c3ae85-720a-4b4d-ab84-f3ec8482dd99",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72123226-9c9f-43d5-a613-cc30d4c1d52b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3c8a0e6-3452-4ce1-934d-756614548bd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68b0a4e3-b2d7-4038-bf10-e36fc519963f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbf5cdd6-85fa-40d6-a84f-ea58432bb2bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d97aa677-cecf-4a1e-b0aa-86ebbce133d0",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8525be2b-7969-49ca-8174-3c6a42e08795",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ae46806-9a4a-4919-bda8-3a2b73fdc86f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a16ef5-3b95-4199-9bba-50ccaf635b3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f2aafb0-4aef-4993-8696-5c3bc2c7cdfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f45e2c6-c540-41b2-8fe1-e568008712e2",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "256a6fb2-d1dd-40c1-95ba-3b9097168a97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b582815-9b56-4ad4-ba58-f7bbf6c9ce2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00b47753-f84b-4bdf-b481-93881673b169",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5783db58-7cdc-450b-9d3b-402648b6c7bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bb4cb0d-e9fb-439a-9851-e280b3244303",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f1fc381-dcdb-4f43-9a4f-aa96aeef5877",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8161053e-fb3f-42f4-9f73-7798c1c0a781"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d9086db-83ca-4998-a2d0-cfc195b6a141",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46034337-9f4f-47e5-af3b-7bd66984e6ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0748024d-e16a-46ab-a3cd-955f25d57724",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f147e66-f0d6-415a-afd5-1efe2bf8c465",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aed11273-c53f-4e73-9718-1a55844a5007"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88dad3a1-55a9-4f62-97e7-abde47ddace7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e36757b3-59c3-4f74-8fd7-df2f1691c526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4325819b-913a-458a-865f-e195bcbde374",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06914237-2961-4e20-ac78-8d85c9095bea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ddb01b9-758b-4aff-8639-e9cac4db1f2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d84f1e06-f02b-4996-aed0-444dbabc8aca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b72a36a5-2b0c-461c-9ee8-16aa54705957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a093ed6-6c20-49b1-907c-d87e2794c7e8",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87f1e494-3ac5-4e70-a26d-9db67fb31d7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9795772-340f-4a3c-987b-09eec0856c36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4550c02-e6c9-4321-95d6-96a7a8f7c0be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f94ce9aa-5601-49e9-86e6-4c599ba15b7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d09b05f-00e7-4c39-983a-cf53c92c09de",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07998bfc-9077-4b80-8a35-24c3e4eaa1e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01b07c72-a1aa-46d0-adf6-860de2558af3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ef09ea6-84d7-4883-9c19-6aa55b7d8aa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a26bb1a0-b89c-4176-a973-124fc71f61a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f79de9ef-531f-4f82-a57c-1e74235532d1",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f47d33f-6277-418f-ac24-45215ef74b83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86fc40c9-3f45-4446-bcdb-6b55dd7fa6f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b81b2f6e-d002-4928-8e36-7917e876d6d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35214c48-84d1-4b3a-b649-30544ac327cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fb0da3f-8a6d-4aa5-9575-88848313e70b",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8551c56-f154-49f7-acad-8868243af7c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03a65754-dd80-492f-bc52-43765e309c0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34c082a6-0518-4c45-8b3d-a8e7b1ee99eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56cfd3d8-e405-42d9-8029-f3a0aae23b00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3def5d7-aefd-4db7-b518-38d55d2750e0",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "517ad8d1-5bf9-41ed-a53e-c38e52998e3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95e70f7c-ac62-470a-968b-5a35cfb6ab9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "854ce5f2-7b76-4433-925c-b9bf158a6927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f45f89e9-5461-4440-a9ae-5329c06b54ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "452e0963-2a02-4630-ba0d-4e41f52c14a5",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bda34464-c8b6-47f7-b6c3-bea44a77472f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7495f5b-da9c-48a4-9312-af2220facb8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "716f5916-b342-4903-98d2-46a2a53dbd98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bc4e651-30d5-4c2e-b6b0-450d8d2e1af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "189d71e0-5de8-4dbd-90ff-f4a823db7661",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "031c56e9-b650-4597-954d-ae2f3d9c2cf2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b15cbfcd-3d5e-4f32-b3ad-a92efd89b8b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ac72b7f-5641-49a1-9e27-f08dc860559d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24c1dcca-7939-4ea6-8c0c-3ea5bcb5e329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9381f2c3-af2e-400f-9b9a-6e07260ca146",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f202f00-fa3e-4874-8f70-8e1d1ef19b4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e130c27a-22fe-454d-9197-beb49aaff3f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34ea8ddd-3ddf-4d60-9008-d5f6ce5d5b38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb86c3aa-98ae-41cf-9865-6a8479f7b60b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa9395c-b9c4-428e-af0b-00b2ff8cfa5b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d02bdf19-ab73-4a06-8552-2c7db1a05cdb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "804aa751-dae1-418b-9ab8-ee857b2e7c15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17a3a8f7-fdb7-4277-80b5-8728ef97fb48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24426584-add8-4628-a657-faec31c94fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59fc3c13-b896-4719-98ca-e81eed01ba60",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb7d97c8-7bb9-4366-85c8-44778ec32b91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3960534e-0a82-465b-abfb-e6e42979a69c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b9ad28d-fc12-46af-b30d-cb8857554f45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30d80f29-13b5-45db-9ffb-982c3add354a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b3d686d-70d9-4c91-91d6-56275d59001b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6692ea8d-2937-47fd-b5ad-56a78c6c29ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0ec31de-3a1b-4cbe-b90b-7574f6d138ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b078cff-c17f-4aa0-8d2a-bacdaf62c54d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1d36907-6d27-4ea8-bd93-5d40353f5f4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce0024d-1a95-4cde-bb23-0e5c2f93286e",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "426e59c6-6336-4195-baed-51b1327feba1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8245b7c-2810-43a4-ba1e-b8f4588a3255"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "389243d1-03b3-411c-a2f2-1021a4f2f79a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b90a58e-e2a9-4ef8-a357-5be457834bd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b773dae0-1647-4c97-afe3-f5be4db711ef",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3dad200-58a5-4f41-b7af-89586fbfb0df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "157a9e88-189c-4aab-8766-99a8392c04f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f17ffa7-48fe-464c-9dca-b5d3dda7edca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91ba429e-65db-4f60-b4f8-c9fbb5f4e726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2763bafa-5b6e-45f3-a0e2-00b83c82d684",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "540b3112-4e78-44cc-a0d3-38e25b4e7622",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "030dc36e-e98d-49c8-9051-44e6e7432414"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88ec8602-7b4c-4067-82b1-d7ad2a0698bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8a85d84-4f2a-4e45-8ae1-2bf6061da04a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6348ab0-6875-449b-8d29-9361fc6ce4dd",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30f7ad98-ff16-4b18-af01-f2a38d6febd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "586bc7ff-893e-44fd-950c-f974c9e2d06c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20fdffae-ae03-4983-9c6e-6447c5cfcb7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f8add47-694d-401c-be40-adb895b32f6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dc42a98-187c-4ac4-a3c0-335d2cc8f302",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "960ddb8c-0e45-47f4-86af-da515225a1b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efdc175c-12fe-44ae-958f-1c7d2e31502e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa069f51-7887-4128-b596-6b2579250e67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db032beb-6d4d-46ed-8f30-e2600d4e54dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db7e8af5-ed56-475d-a4db-ffd7ee64aeb9",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f83c36a7-9f94-42d2-a2dd-f0a8d1fb396d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "174aadb7-2d11-40b3-9d20-4380b24f3ace"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f57f50-c1ba-4af1-a230-26fea3e082c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b1b0e1b-df48-46e6-afad-409a542dfc22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "340a97cf-87ce-4f06-a0e7-45e740006865",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef5f3d9-57cb-4a34-a726-7c53e4e3b39b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c25b82d5-7819-4e8b-987b-64828f8cca2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56544d1d-3883-40b9-8624-e6394765521f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fa41eb1-111f-49da-8a00-b0d28d0a4bbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "104a6f73-64ba-4f0a-bfe0-9cb9abde01d9",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c05e21de-3677-4683-a43e-3868708be842",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e798c104-cbd2-4f30-89b9-27a2633e59ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e487d7c2-79df-42a8-b1dc-0a3a64948e07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de55aebc-6bcf-4c37-8a5f-ca39746b22fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47397a2f-8298-4800-86f3-80de5c9692a0",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "474eb8cc-c2fc-425d-b770-8dcba6bae874",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1062969-fd56-4c0f-b4ea-6ccf0f977803"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df13a7e9-9305-433c-bd64-3f73523d34dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1ecdfcf-35cc-4faa-8af7-47e5ed430453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "007da453-9a25-4208-bcb3-ecc625adddd6",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aa31a8c-cd63-4e0f-b126-a504577cc901",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50120f89-3ade-4987-b99e-19dcc056b189"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "244f4687-e6f4-4f75-9c8e-986db0a5fb33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21595933-7746-47c6-8b66-eb255ad9455e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ebca0e6-ed54-4856-88e9-b3a3a12d5056",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "580e6da6-274a-4bf6-a04f-b1efdfdd179d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08149451-8883-4dd2-9106-c04020b58326"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f467c29-c8cd-48f9-88ef-9a5632acdf66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bee8fec-61d2-4641-b2ba-b59272e65bf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f209d40b-34a7-475e-9c87-69a966e556c0",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dbe44b4-8a16-48f0-965f-2929a04967d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8815a84a-4e95-46b3-b586-440f05ea545f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04dc7ed1-264e-4bab-902c-360b9b31b8a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1306416-6852-4ffc-b3b1-1b9ef6f786e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3de3b9a-e4ca-4090-b250-078db29b9ce0",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "940159f6-891c-4370-a57d-1ebbe79a3f4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92fb7fe0-7f66-4ec4-9b62-52dc943805c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ef42fa0-6d76-491d-980e-849b4c77761e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6594ee0-3338-4d26-a794-4d7e8cd3e32e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29effac5-2e81-45e8-8534-3b6dc2345002",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8267ba6f-c7e0-4831-b666-061874eadc4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2efb499-9f5e-4f10-8b1a-2d462cfaf851"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e30f3aaa-3027-47f8-ac50-e1d7c43628c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e9d21e8-88e1-4e36-9590-20354a6ce2b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b713c0e-9d53-4ea6-b846-2f6bc883892f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa95866-254c-4d86-b50d-708fb77e9ab9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4f674e5-4582-492d-a30b-03ddaad78795"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dbf86ec-412d-45a2-b513-4e0f3cc411a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5202fb9-854b-4e70-89f8-b4832fe6ffee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd8efee-7560-4bfb-a6e1-2278b8d0da2f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b8d02fb-46d2-46aa-b1d3-bce0554c06d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c5418a3-ba2a-4ba5-b468-664f566dca4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeeca8d2-15e7-4608-8928-115eac1c0444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99604a87-bea8-46ea-871f-17c62b8be69c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08dbe468-e086-4a8c-8bdf-1b4f1b7d975a",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b8f64ee-5abf-4c21-bc2a-c090a7bfb5f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5540fe9-d6b2-48d7-a3d7-fb3238fa4c55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73036f1b-3a97-42de-96ca-a5bb2d2004c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc50e75d-46ea-47ca-8dc8-903685b37174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ffc9e32-ff29-4791-8881-06477fd04b7b",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d14599e-1c5a-4cf7-b689-8afc5172be00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c55713c-6f56-46a0-be78-674adddb1630"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8f0813a-a7ff-431f-bb0f-9db75f85fe83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6f4ac83-3720-4a5a-a7fe-d0edae29ac88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5068fce2-680e-4adc-8780-895fad924827",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6766b3ef-8d4d-4d3b-8c10-02d650fd90d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e299d15-0803-444b-a587-4775c8098b7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ba68282-27f7-449c-9ca4-6de855116bbb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13d2f7d9-c8b4-4f7e-a029-2b2724031006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "844b3d78-3022-4f88-b2b8-a94d44c98a27",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c47c4f0-2bdb-42fc-8013-cb9212795df2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1045748a-6df3-4284-b5d0-572b006c510a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c060dff-f10d-45d4-871e-9a5e7fa844ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e2bce33-a3ab-4263-a33d-d9adbe74c76f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c37a2154-ed64-4e2b-aef1-158ed22e9b5a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d7139838-4258-4ca3-802e-f1ecfac801b7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "913bef42-9336-459b-891d-c3a72b5bc7a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "12627012-98a4-44a6-8708-ecba7543a3e4"
                    }
                  }
                ]
              },
              {
                "id": "ce060517-b0c4-40e6-9066-b5cce49c0c1a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "80e62f4e-d312-4180-aa19-4c3e80f6050b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f79b0e87-0b48-4ad4-bbba-007863e31411",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0e518904-ae60-415e-b5c3-c8c1d3d70ec4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ff0bee-2493-4eb6-bb0e-282e7c5b7bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f847269b-7ea1-4a78-9a29-8521fb252efe"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ef954cf-6ddb-4700-87f6-6ab93cad3bbc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "37fedc0b-d36c-42d4-b609-014fa642ae70"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ede812c-0c77-4bcc-af4c-4564fde852c6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3a7b536a-8039-4049-8eb1-1f46c71a1a7e"
                    }
                  }
                ]
              },
              {
                "id": "64ff40be-beb2-4808-9a1f-02921ff4a17b",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "03df297c-44ca-49ca-949a-e2779ac3be5b",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a571af4-6cf7-4196-8b67-9863bc585e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "a38b6c67-5a82-4b96-98d5-17615e3c922c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b5e938e-e4a6-4db9-9f61-973909b65fa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0103c74a-c080-421a-939c-023e68ff0fad"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8ec482a2-e734-41c8-b819-ce788df7c7e9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f6691899-3712-4356-adea-7d248add2b22",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8994faa7-5a94-48c0-a3a2-b6c0dae1459d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c106c763-0ea5-4679-b055-13778fed222a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e696cbe2-6d88-40ca-8a19-804497e8c6db",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1cb10dcc-ba5c-4bc0-91bc-a768aa1fc4b3"
                    }
                  }
                ]
              },
              {
                "id": "eb962fda-300f-4b38-9151-119794fcd768",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "681f9284-53da-44da-bebe-56a5871e6b06",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "01279d01-8eca-4997-b72a-027d6a48f6d1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ba443b0f-bf49-4690-903d-570aa828ea4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fbc31622-bcd5-48af-89b5-f2ba1ed2ee0a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cb71c2af-e86c-4095-b08f-e62d37e5f998",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2869d14c-f189-470c-a4c6-66f9ffc69020"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5cb0640a-8629-4f05-b442-9bfa89e70719",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6e0ea2b8-dbfc-4503-a785-9b356c96fbfd"
            }
          }
        ]
      },
      {
        "id": "ff0a5958-8745-44f9-9015-f259121357c0",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a26e462c-2537-47d8-8201-83dfbb7a8d1f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "febb5c92-281a-4235-a5c2-f064039bfbaf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "815a56fa-4473-4d01-9954-4fb0ec0853be",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de27a871-50a0-4223-9a30-80256a67083e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "22862698-ccfe-4faf-9527-782a7eed55c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4041452-7e73-4f14-bb77-4f476123d611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "01da282f-c038-4ae8-afd6-a7254858d52e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a74c548b-f627-4d6a-a15d-e0ff848ba956",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "23f905b0-e4d4-4e7a-b55e-cf9fc606e76e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d3c0e482-df50-4413-b459-0e9b1c5d282d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "acfa84ed-9bdc-433f-a09e-0ae36216c5bc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "98a1ec97-f02a-4c2e-8ded-4c4dd0508c78",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "81b19286-96eb-4aae-a21a-3660aa6fa7e2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e3eb9457-0524-45bd-ae63-d629f52c6e9d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9554e771-452f-4672-a8ec-1539c96638ca"
            }
          }
        ]
      },
      {
        "id": "5ef1e7d7-e7ff-4a70-882a-58fb544498d0",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "fde30e0e-9258-47dc-a0a4-4310cdeee3a4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "07334e7f-4dc2-4efc-b205-6fb87874fc19",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "51173ed5-8d50-45ab-9222-0ceef8c6b6b4",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1034ab40-d9d0-4bc8-9218-c3b8c341bbb1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ec8914e-6f27-4547-b83b-5afc0ff5e246"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e76adcbe-5630-4d2f-b6ee-8aedbf2d0d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31950437-b05d-4d46-8794-e7e572452e6e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36661c68-ab2b-4bc2-b8f4-852e1870d196",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba8e1cbc-4009-4498-bb08-1ab1ccbf7595"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "85e0a644-b1e8-47a1-8629-16126f841ac9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "39a6e17b-5b27-48e7-bd55-44136c7ccb6c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8731a1d5-7e1e-4ccd-be38-7e1d2c38977f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "50340a1c-3f0b-4e61-af6c-d96b4b7368c3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1b52bca5-3715-4a70-a59b-8c25fcdea8c0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3f09e4e0-8b43-4b1c-99b8-9cf1acfca10f"
            }
          }
        ]
      },
      {
        "id": "ac966027-edd3-458b-bc28-b6bde3bf7fd7",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "06d9045c-0539-4e4c-91ca-66ba886b8f1c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c048685b-6af2-4c30-89e2-5b5fed5757e2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "964f8189-9421-4580-8065-37ef828168f0",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccbea0dc-e90c-4b27-a7ba-3eb6290f6cdf",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f662a2c4-6108-4d26-b216-8610641c0455"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f00616d8-7c1e-4fda-be6f-6ebbc908f7a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "da641652-dd17-4bb3-b8a9-9795e8639a9f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f3b569cc-b0e0-48c9-a4f0-d1f6690d78f6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f50a70d9-6bff-46ce-bf64-76799429f9b7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c75a24bb-de07-4059-8e44-5dae168014d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "17b83175-6c68-44d6-9da3-a1b07caf5c5b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f1518977-b104-4235-8d2f-ba6ef08235d5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "db5ca0db-ab2c-4999-a680-29bbca7216f2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "229b3a93-834b-4490-9158-04468e9e412d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5782f154-1f37-4419-ac9d-5df79c5eff77"
            }
          }
        ]
      },
      {
        "id": "fab4710a-4ea6-4263-8d82-5b3f4d92f9cb",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f8601814-fe4c-41fe-920f-2198c122c8d7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "625713ee-86c2-42ed-9231-6a0eac7a50b6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4a3edc11-9a79-434b-a89e-82a3022d3762",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c5c154c4-7556-4e65-899f-7e0afb812af8",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "57ef15b3-b435-47e1-b536-a035bdf460e9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 58.61403508771935,
      "responseMin": 9,
      "responseMax": 566,
      "responseSd": 63.76424626122324,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1705279083726,
      "completed": 1705279110055
    },
    "executions": [
      {
        "id": "25251b5a-ab74-4cbf-bd3a-8198337ac01e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "d084938f-7b56-4701-987d-736abf17b4b6",
          "httpRequestId": "cf8ba746-9675-4a23-9bc9-42300a8a6330"
        },
        "item": {
          "id": "25251b5a-ab74-4cbf-bd3a-8198337ac01e",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "08e4e401-19af-4557-b03e-87680985a940",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 0
        }
      },
      {
        "id": "02e4981d-3834-458d-835e-ec03f247c543",
        "cursor": {
          "ref": "43da37a4-f3f4-4efc-bee2-b63da11ab6ad",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "fc0ccb9d-2189-4d18-a294-33a3ff8bf892"
        },
        "item": {
          "id": "02e4981d-3834-458d-835e-ec03f247c543",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "cbf2dcbd-0a61-426f-8b1c-ae6b84e0cdb1",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "4202ea34-9494-4b9f-9eeb-40f29d48f5fc",
        "cursor": {
          "ref": "df8939a8-2892-4f7f-bfc9-7fe06054deb2",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1e889814-743e-45fd-a580-88a732d4fe4a"
        },
        "item": {
          "id": "4202ea34-9494-4b9f-9eeb-40f29d48f5fc",
          "name": "did_json"
        },
        "response": {
          "id": "ef0ee87d-fbd1-4094-8194-5b4cdf84e2cb",
          "status": "OK",
          "code": 200,
          "responseTime": 269,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee73e26-898a-40c2-974f-fcda1523d8e9",
        "cursor": {
          "ref": "2aec166a-381c-4b49-8fc5-b99d8118cf4b",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ae378978-28b6-40e6-9e90-813df9592c57"
        },
        "item": {
          "id": "fee73e26-898a-40c2-974f-fcda1523d8e9",
          "name": "did:invalid"
        },
        "response": {
          "id": "9ac1249e-048e-42f5-9482-30e3ea0bfdbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee73e26-898a-40c2-974f-fcda1523d8e9",
        "cursor": {
          "ref": "2aec166a-381c-4b49-8fc5-b99d8118cf4b",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ae378978-28b6-40e6-9e90-813df9592c57"
        },
        "item": {
          "id": "fee73e26-898a-40c2-974f-fcda1523d8e9",
          "name": "did:invalid"
        },
        "response": {
          "id": "9ac1249e-048e-42f5-9482-30e3ea0bfdbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da4eb4d2-a3c0-4966-89e6-c2365ac78a7f",
        "cursor": {
          "ref": "22cfe3df-6121-40da-a6ce-3a6e5d4c47fa",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "42a5fb22-026e-4b9e-a708-e51a32d577cb"
        },
        "item": {
          "id": "da4eb4d2-a3c0-4966-89e6-c2365ac78a7f",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ca953881-fb2b-4961-8cfc-f5f22bfc7e96",
          "status": "Not Found",
          "code": 404,
          "responseTime": 88,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c069970c-5534-47ad-a960-75a8147dfde3",
        "cursor": {
          "ref": "34d6927b-1925-4c46-94be-94a220e8e358",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a378c0b4-ebf7-43bb-a788-da20b4457596"
        },
        "item": {
          "id": "c069970c-5534-47ad-a960-75a8147dfde3",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "395c6bb2-ca76-4232-8ae9-621f0a9fb317",
          "status": "Not Found",
          "code": 404,
          "responseTime": 42,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbe4c058-d682-4e81-beea-e4d13ab37a6f",
        "cursor": {
          "ref": "d81f3855-13de-44f5-8ed2-7c3f5d6afaf4",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "3deca7d5-76dd-4b90-b01f-a3afac83fb87"
        },
        "item": {
          "id": "cbe4c058-d682-4e81-beea-e4d13ab37a6f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b3be4768-8ef3-4b48-92d0-2a0581c57b10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a5770d-4e82-418e-b136-f6104f300de2",
        "cursor": {
          "ref": "ee040473-a887-4010-91a3-cb3e32cbf48b",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "90cb2a54-51ee-4dca-b535-951984521bce"
        },
        "item": {
          "id": "b2a5770d-4e82-418e-b136-f6104f300de2",
          "name": "identifiers"
        },
        "response": {
          "id": "3c4708db-38bc-4932-a467-d5fee31b9447",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59203fae-d3d2-4c9b-b8b5-db1769f19a60",
        "cursor": {
          "ref": "cae720cd-4665-4215-a012-eaede6f95fc5",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "90f84ac6-9ee1-496e-b80b-5f5c36f6de58"
        },
        "item": {
          "id": "59203fae-d3d2-4c9b-b8b5-db1769f19a60",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f573353e-cabf-45e0-894b-63e937b4707e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "254aad85-5083-4b08-b757-fc8c26417577",
        "cursor": {
          "ref": "9b50033a-3955-40e2-9c6b-2cc25a1a57b9",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "06af6deb-6724-4b1e-87cc-f892722d9662"
        },
        "item": {
          "id": "254aad85-5083-4b08-b757-fc8c26417577",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9766613f-44ad-4165-aeb4-84aa033e4f2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6339473-393e-4e92-9270-60294664f89b",
        "cursor": {
          "ref": "a3e070ad-94f5-4e23-b3fb-999a4c0a56c0",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "566d34c0-7fca-4076-8133-345f2389ed99"
        },
        "item": {
          "id": "c6339473-393e-4e92-9270-60294664f89b",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "fdafbf11-bf83-45e7-8aa7-8ba810792fe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6affdfce-c0f8-4f30-8112-ad9cbe94c9ab",
        "cursor": {
          "ref": "96db861b-ed0d-4b5d-b20d-47aa88c72742",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "09b0b290-fd36-4f74-8083-fe05a44bcdd0"
        },
        "item": {
          "id": "6affdfce-c0f8-4f30-8112-ad9cbe94c9ab",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "933bdf00-a91c-4dd9-8f8d-7ffca1e32cb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01c313d9-9208-49b5-8904-508720b7efdf",
        "cursor": {
          "ref": "b0a10611-437f-40ee-b722-6221a1416f08",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a6a26a6c-4858-4ac2-b68a-4728cb4c5682"
        },
        "item": {
          "id": "01c313d9-9208-49b5-8904-508720b7efdf",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "689c385d-500c-4041-b477-45b99fd282ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0077143-883c-4244-8190-6abfb471794b",
        "cursor": {
          "ref": "f4f178d2-0ed3-4f0c-8d42-bb8c1eb9610d",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6b102ca4-bbca-4ebe-b6ec-b00584a7d56d"
        },
        "item": {
          "id": "b0077143-883c-4244-8190-6abfb471794b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "b9efc2e6-c345-45ab-b8b5-0da99fdcca0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ddb2d5e-ce78-4dfa-ab8e-fee172c79ee5",
        "cursor": {
          "ref": "303b5daa-7bbf-410c-81b0-6b26eccd41f1",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f9ae3ce6-b356-413b-86e0-cb671d591a4f"
        },
        "item": {
          "id": "1ddb2d5e-ce78-4dfa-ab8e-fee172c79ee5",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "139b7535-10d8-4d0a-ae05-657e24b0825f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7c75800-29a0-48f6-8d4e-d6678ebe751d",
        "cursor": {
          "ref": "50a7eeca-b75c-46a3-a2d4-6063ba895b65",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3fc5b988-457d-44b1-aa77-617212c3261a"
        },
        "item": {
          "id": "e7c75800-29a0-48f6-8d4e-d6678ebe751d",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "687371d4-9ba8-4e5a-9fca-f400a8e1138c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6016f3e8-f884-42a6-a13c-b6c37b2726cd",
        "cursor": {
          "ref": "095310ba-0de9-4deb-9f9b-83ff9ca3dcc8",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e0ae2ce9-cdc7-4083-b6ce-159bfb082223"
        },
        "item": {
          "id": "6016f3e8-f884-42a6-a13c-b6c37b2726cd",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "7b080630-7d3b-4641-b8bc-788b6489f110",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e847a0d-bb18-4830-8f49-69add8d95353",
        "cursor": {
          "ref": "9d0ac00d-4f43-4e7f-a50e-b9fcc9e17d81",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fa03d493-4880-4d1d-af08-ac3e824b0489"
        },
        "item": {
          "id": "4e847a0d-bb18-4830-8f49-69add8d95353",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "95317594-4e24-46cd-8c7a-c15fbd516377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17032113-cb58-451e-8e66-28258cffcbcd",
        "cursor": {
          "ref": "95bf5fb7-868a-4642-860d-a12f1753bc3e",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "646fc3d4-0e3c-4bcb-b52f-8b36618f1017"
        },
        "item": {
          "id": "17032113-cb58-451e-8e66-28258cffcbcd",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "6e79902f-0aef-4528-99f3-5b64ce230d61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c82d507f-3a79-473c-ac12-43ba33ff59c4",
        "cursor": {
          "ref": "caeaa307-b5a1-4709-8537-f3eee98f16eb",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ee1507ec-968e-47cc-adb6-04cdb2da48ae"
        },
        "item": {
          "id": "c82d507f-3a79-473c-ac12-43ba33ff59c4",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "677e0464-63af-42cc-a98e-4cad6169ab5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1cfd4bb-a572-42d7-a753-89fc9e41f24e",
        "cursor": {
          "ref": "ea696ba6-4bd6-4989-a10c-1c39fbea6366",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b2661b4f-eefd-4307-aa71-cab193783f35"
        },
        "item": {
          "id": "b1cfd4bb-a572-42d7-a753-89fc9e41f24e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a015d71d-1a02-4d61-8bfb-a8e2e19cc55d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adcce2d2-b530-4197-9258-8ec823a1368d",
        "cursor": {
          "ref": "78401f48-9b8d-493b-8f3a-bdebc1eab2f1",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "371cabd1-df6c-42f3-a4f5-b6935c9cf9a5"
        },
        "item": {
          "id": "adcce2d2-b530-4197-9258-8ec823a1368d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "517b642a-811f-42ac-b730-a85172beb13b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43130ab0-7b0a-4c0b-a028-cfb78bec6b5d",
        "cursor": {
          "ref": "97d2084d-2939-4e04-93a0-4ddac40c1188",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e787118a-4d5b-4955-a994-d709f7227825"
        },
        "item": {
          "id": "43130ab0-7b0a-4c0b-a028-cfb78bec6b5d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "3d8086d3-bd70-424a-afb1-7073e8b9ee39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07d90b1e-5d6a-4a26-bbb6-a4f1140b96bf",
        "cursor": {
          "ref": "0d6c3afe-df99-4c0e-9f45-4f1b581f34d4",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a3116f23-b1b1-40ed-8d47-75b114b813d9"
        },
        "item": {
          "id": "07d90b1e-5d6a-4a26-bbb6-a4f1140b96bf",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "7789c467-56ed-404b-b05d-6fd71d195de3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "035dbfe5-ab01-4507-b533-ed0343cde2ee",
        "cursor": {
          "ref": "4aef51bd-7663-4e79-afd2-d3b206397212",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "90cc66ea-f1c5-4dfe-8d69-256294b9e91a"
        },
        "item": {
          "id": "035dbfe5-ab01-4507-b533-ed0343cde2ee",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "108d0dd6-7fb3-46f2-885a-1d93e26dc46b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3f58b09-885c-45c3-b4a6-b0cf33e15f89",
        "cursor": {
          "ref": "82d0de34-f68e-4a57-9acf-19609679d240",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "42365838-4a88-43cf-b737-ea5571f23986"
        },
        "item": {
          "id": "a3f58b09-885c-45c3-b4a6-b0cf33e15f89",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "0549268b-fe00-4142-9c6b-ee0b6c720510",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5d882cb-ded1-4a54-8672-cd8a6a1eca43",
        "cursor": {
          "ref": "90372b16-068e-4a27-a646-06d9c9700c3e",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9495ae66-6990-4f31-b654-4a5e81d8e716"
        },
        "item": {
          "id": "b5d882cb-ded1-4a54-8672-cd8a6a1eca43",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "f586ef40-489f-4b92-b0fd-07cf3d59c3c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83efe34f-8097-4bab-90b2-ee80e746d912",
        "cursor": {
          "ref": "5d45ee5d-9519-43bd-a296-ece7ff1ed58c",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c065ed6d-583c-4478-9221-478a3b600316"
        },
        "item": {
          "id": "83efe34f-8097-4bab-90b2-ee80e746d912",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "968cb236-7c0b-4c2c-8cba-8b1d588b8e71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeaf9d7d-a872-4ae7-bbcb-cac1ec82d8e1",
        "cursor": {
          "ref": "f4d87cf9-c9e3-4fc8-82bd-4310e8ef2a1c",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "40f8f94e-6661-462d-9ea5-8c3206009cb4"
        },
        "item": {
          "id": "aeaf9d7d-a872-4ae7-bbcb-cac1ec82d8e1",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "0fc4bd73-f848-49ad-9252-6ea55a97d577",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ced996e9-053e-4da5-9bce-65fc7e5fd5bd",
        "cursor": {
          "ref": "01a13542-0ae2-4110-a103-17070116324f",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e279b12d-91df-42c9-bc50-2baa5f9cf622"
        },
        "item": {
          "id": "ced996e9-053e-4da5-9bce-65fc7e5fd5bd",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "210f84c5-b402-4eb0-9829-9792d6a592a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7ec993d-e878-4a0e-bea2-ebeb240bcd22",
        "cursor": {
          "ref": "c18943a6-bd03-47f6-a545-e66918076e56",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "da350d8e-abaf-4384-8db0-2d2f6d8ecaff"
        },
        "item": {
          "id": "a7ec993d-e878-4a0e-bea2-ebeb240bcd22",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "a80bc0fd-7d23-42b5-ade8-f294302ca635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd42b4e7-bf51-4e8b-b558-32fc49f99d50",
        "cursor": {
          "ref": "7f028537-d878-4576-a793-f865e752331c",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "feb0b28e-ae9e-45aa-b768-23e4bdec5491"
        },
        "item": {
          "id": "dd42b4e7-bf51-4e8b-b558-32fc49f99d50",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "6bcf2b9a-2be4-4f7f-8db3-eb1b01bfaadb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ca79522-d5ed-475d-96ed-db7e7d82fc06",
        "cursor": {
          "ref": "40a56888-3693-4b55-9885-29bd291ce3c2",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "fadd7852-6ca5-47c9-91c5-5daeecf13ba3"
        },
        "item": {
          "id": "0ca79522-d5ed-475d-96ed-db7e7d82fc06",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "9c81d26c-d3d6-4a6d-952b-56c4fd065906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64dfd760-d00a-420c-b587-ed0323e2a35f",
        "cursor": {
          "ref": "8a2a9ae2-2ac0-4a55-865d-46bbb5b570c7",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f2bc306e-c9e8-42d1-a7e2-7f980acff690"
        },
        "item": {
          "id": "64dfd760-d00a-420c-b587-ed0323e2a35f",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "0e94633c-a619-42ad-afc1-b1f377107526",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9249b50-a911-48ea-a286-2d28c5167b36",
        "cursor": {
          "ref": "4569c0a9-690d-4148-8b46-03c729c504e0",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e50be0ad-7222-43c4-9083-3be15858cbfe"
        },
        "item": {
          "id": "f9249b50-a911-48ea-a286-2d28c5167b36",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "1ef1d5c2-4c80-4cca-baec-12d5fc5f07c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba46de3-c13d-48f2-83ee-2131fdd458d9",
        "cursor": {
          "ref": "bc917fb2-bccf-4570-b764-a970e9646a30",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "fd20610c-8c82-420e-9292-736509968330"
        },
        "item": {
          "id": "3ba46de3-c13d-48f2-83ee-2131fdd458d9",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "d01144f3-15e5-472f-b274-53aabd81eb3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86b9ac5a-3d21-4b0b-8368-17737a21b143",
        "cursor": {
          "ref": "5f05d932-67b9-429a-bf19-ba1bb3cb2ad6",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "228233e4-ca9f-4511-8ba2-e35a5764a44a"
        },
        "item": {
          "id": "86b9ac5a-3d21-4b0b-8368-17737a21b143",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "ee61d47f-e2fa-45cf-8198-7ae2282d8446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f6bcff3-7223-4f62-82f9-e23fa656d329",
        "cursor": {
          "ref": "578c6e38-b1fc-4a4b-a87c-8dc230c15553",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9847238c-6b4b-450e-9b32-12beca665252"
        },
        "item": {
          "id": "1f6bcff3-7223-4f62-82f9-e23fa656d329",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "1fc56da7-6294-46d1-9d70-342ca5b3687e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bae97ab7-6d08-470b-beee-c4e65c390478",
        "cursor": {
          "ref": "3a171f5b-be82-4e14-9369-2ed6b9ed6fc8",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b16a0106-31c4-4b53-9660-eb335d59a242"
        },
        "item": {
          "id": "bae97ab7-6d08-470b-beee-c4e65c390478",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "03c0435d-67a5-498e-bc89-1f09a317b071",
          "status": "Created",
          "code": 201,
          "responseTime": 566,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "cfe04732-57fc-4420-ba26-92a179e886cc",
        "cursor": {
          "ref": "6b97647e-f3c3-44be-bbb7-53b3a90cccd3",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "19a72ed7-6c10-4ed7-8106-f972ece11d97"
        },
        "item": {
          "id": "cfe04732-57fc-4420-ba26-92a179e886cc",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "6959258d-77f6-44e5-b58f-2315381fc239",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "9ee0723b-9a1d-4a1f-ad83-261af1ead17b",
        "cursor": {
          "ref": "6b2b7cc8-eb6a-4ab0-a5d9-055cb0574950",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "55419519-c068-442e-80c9-82271601ad2d"
        },
        "item": {
          "id": "9ee0723b-9a1d-4a1f-ad83-261af1ead17b",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "3e72be2e-2a2e-45dc-8c7d-b297d9c4ebd1",
          "status": "Created",
          "code": 201,
          "responseTime": 223,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "4af53021-053b-40e9-85d2-163ae24c0136",
        "cursor": {
          "ref": "965a8d70-e346-4839-9f6b-a7dc5d6a327a",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "b236234f-a02a-4812-8ae2-7ab90f512442"
        },
        "item": {
          "id": "4af53021-053b-40e9-85d2-163ae24c0136",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "bbe55fc8-bae1-4001-8428-cc41533cbd38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fb46316-84ca-4726-99b2-be7975aa80f7",
        "cursor": {
          "ref": "5c86f91a-04e6-4387-9a72-4639d409a3fa",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8145cca3-6fce-4362-901d-2b3ed66af8bc"
        },
        "item": {
          "id": "0fb46316-84ca-4726-99b2-be7975aa80f7",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b14e9009-944f-404c-8c8d-caf103abf2d1",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "d63e51dd-449c-4b03-9103-0b1a9686fe38",
        "cursor": {
          "ref": "e7dd2c84-8a26-4d71-9974-d954acce86f5",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "3fef8769-1f16-4ca2-be56-c055f0514373"
        },
        "item": {
          "id": "d63e51dd-449c-4b03-9103-0b1a9686fe38",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "1aedd2dc-90c4-409e-a685-df199762e54a",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "0a27bb57-32d2-42c6-8510-9c1dd31f34be",
        "cursor": {
          "ref": "b699e2a3-8fe6-42e3-a59c-3cb0efc40431",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2e6aead7-904d-413c-8383-b7afe7147765"
        },
        "item": {
          "id": "0a27bb57-32d2-42c6-8510-9c1dd31f34be",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "ea3d1f2e-d7a2-4c45-a6be-4060766e315e",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "43bc428a-5a50-43de-b4f5-c6ef36b2c308",
        "cursor": {
          "ref": "3f9270cb-3f1e-4ba4-b8dd-35cbed3e4dfd",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6102ff86-898d-49e6-be63-06f98e2c7444"
        },
        "item": {
          "id": "43bc428a-5a50-43de-b4f5-c6ef36b2c308",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "423e7afe-cd03-45a4-a8db-cb51ee59fc39",
          "status": "Created",
          "code": 201,
          "responseTime": 221,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "69bba821-13f0-46a6-b49f-79699e9810f6",
        "cursor": {
          "ref": "9300ecfb-3535-4eb0-aee8-48b8a4840d75",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8b49d6c2-cfd2-4a73-8b39-8ac68c2cd723"
        },
        "item": {
          "id": "69bba821-13f0-46a6-b49f-79699e9810f6",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "6d8be3f8-3d99-4ecd-bd37-75119829543a",
          "status": "Created",
          "code": 201,
          "responseTime": 225,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "7acc1887-2030-4579-80a6-13181848cab4",
        "cursor": {
          "ref": "ffceae80-e20d-405b-9327-a0c3902457e6",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5d75f049-822c-4400-aca7-d34f950d9a34"
        },
        "item": {
          "id": "7acc1887-2030-4579-80a6-13181848cab4",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "29474297-1b8b-40d2-8557-4a52dd90f620",
          "status": "Created",
          "code": 201,
          "responseTime": 217,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "27d37a73-7aac-4f17-bb9c-5598cd972662",
        "cursor": {
          "ref": "49eb5102-279b-42b5-9c3b-1667baf8b4aa",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "9d30cc1a-6fc8-4cad-b5a1-7a90f9455185"
        },
        "item": {
          "id": "27d37a73-7aac-4f17-bb9c-5598cd972662",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d6a2e924-21e7-42cb-bfca-239c4a392dfa",
          "status": "Created",
          "code": 201,
          "responseTime": 216,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "c298a620-037b-40fa-901c-fa8a0edcf957",
        "cursor": {
          "ref": "84aecaf7-6044-4d0a-bd4c-93ee53927deb",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "415cad38-50be-41da-b3e9-c53cefe45154"
        },
        "item": {
          "id": "c298a620-037b-40fa-901c-fa8a0edcf957",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "149a7d51-8972-41a7-bb1d-048fb3d1bdd3",
          "status": "Created",
          "code": 201,
          "responseTime": 205,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "d48a0bba-7c22-4cd0-9df7-58e175e158bd",
        "cursor": {
          "ref": "6e8bfdc1-2a9e-4ed2-9af4-6f85e9ad3165",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "9877a91f-550d-462d-894c-a2caf64e4a46"
        },
        "item": {
          "id": "d48a0bba-7c22-4cd0-9df7-58e175e158bd",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f1f96fc0-5f67-4547-b600-e63b5b261a87",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "501a37e4-a4a5-45b5-a12f-aeaa21d30aeb",
        "cursor": {
          "ref": "8ce07ab7-08fa-4d18-83a5-ec3fee40b598",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "acde902c-497e-4691-88e0-bb37c419e23b"
        },
        "item": {
          "id": "501a37e4-a4a5-45b5-a12f-aeaa21d30aeb",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b2db529f-0ca2-4a0f-a559-8d452145a87b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "059402a7-3f83-45ae-9c3b-e4b0d7839e2f",
        "cursor": {
          "ref": "fa65882b-eba9-4aca-b4bb-c8081c6eee26",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "09a92c6c-e54d-4c22-bf7d-018078ae2501"
        },
        "item": {
          "id": "059402a7-3f83-45ae-9c3b-e4b0d7839e2f",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "7cca965a-893e-4fb0-bc1c-6214e3828f1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38da51ea-a2fc-4ab3-9a70-b8685132af0e",
        "cursor": {
          "ref": "18bf0556-7ab7-4de8-862a-fcee7ac184d5",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "270d63f6-b106-4841-a4ce-400fb8701df6"
        },
        "item": {
          "id": "38da51ea-a2fc-4ab3-9a70-b8685132af0e",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "3b728c5c-0f0a-4fc7-8b07-ce1dba25365d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "157e216b-7a67-4b67-8b07-ff858afda64b",
        "cursor": {
          "ref": "01912dab-48da-4238-9470-18e437178cfc",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "8933814f-302e-4ff8-ada4-ef54e9f8f0d4"
        },
        "item": {
          "id": "157e216b-7a67-4b67-8b07-ff858afda64b",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "489af43e-384c-4809-927e-2969ba471e53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c9b243-ec9c-4e0e-92c9-4b0254a05c32",
        "cursor": {
          "ref": "adff2e4d-3c7b-45e0-b2bb-77ac555fb61d",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "95c0f50f-98f7-45d5-aa2b-1f0fe3bed97e"
        },
        "item": {
          "id": "66c9b243-ec9c-4e0e-92c9-4b0254a05c32",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "13e7ac42-67df-42ba-a160-0c94e8ca041e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30db3334-9de4-4906-98c8-4bd5fc5f2a8d",
        "cursor": {
          "ref": "9b6b6327-5202-4ed4-a041-553e548d7d1a",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "3253ed72-7f45-48f0-a880-827a376fe341"
        },
        "item": {
          "id": "30db3334-9de4-4906-98c8-4bd5fc5f2a8d",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "43fbb090-7b86-4686-8083-6cb50ae24765",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a0263be-61ae-4bbd-ae1d-e22142135b97",
        "cursor": {
          "ref": "62c34174-0074-4b2a-ad2c-1e98f9b4bc4c",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f6a3f180-65a5-4edf-9af8-f06c8f03f5a8"
        },
        "item": {
          "id": "6a0263be-61ae-4bbd-ae1d-e22142135b97",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "33043a68-b69b-4fd6-bba0-69b298c9f313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "269cf7f4-1a6b-4ad1-be55-630c7f3d2f3c",
        "cursor": {
          "ref": "6cc9c126-c648-4bfe-9fa6-398d350136d1",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "061c5374-a1be-4677-b4cf-840b2049227e"
        },
        "item": {
          "id": "269cf7f4-1a6b-4ad1-be55-630c7f3d2f3c",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "65892bd3-7515-4213-ab58-5224bac62a8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "542d0d21-4358-44a8-b84f-d74654cf8d97",
        "cursor": {
          "ref": "3d603ca7-3777-413a-8a75-d7d74b004968",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "eb861499-e60f-4ac6-9600-0e0393162e22"
        },
        "item": {
          "id": "542d0d21-4358-44a8-b84f-d74654cf8d97",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d3da88cf-157d-42c7-805f-dba4a501b7a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d3960a2-7621-4142-a76e-a01fcd1f7c92",
        "cursor": {
          "ref": "cb773394-8a9d-4999-907b-0db89d6ffce9",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "8ef5375b-388c-4f1e-9de7-29b3736d5954"
        },
        "item": {
          "id": "1d3960a2-7621-4142-a76e-a01fcd1f7c92",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e9a3ad6c-9b0d-40b2-ae57-2dea8591d8cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad0650d-0551-4aa9-8505-3681cd79891a",
        "cursor": {
          "ref": "cabb3deb-5002-4e84-b412-02126b6fc2da",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c53b47fe-1ab8-469a-854d-4c24edc1cb88"
        },
        "item": {
          "id": "0ad0650d-0551-4aa9-8505-3681cd79891a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a2e8a76c-4f38-47ac-8ca1-7668e0bf0bcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae111576-35ce-4d8e-a8c0-5a880b1bb052",
        "cursor": {
          "ref": "1f4b6840-abec-433e-9623-65881dcd508c",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d3e66178-54df-4601-a43b-11aa848eae77"
        },
        "item": {
          "id": "ae111576-35ce-4d8e-a8c0-5a880b1bb052",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e9b4c8df-6c5d-43aa-82a3-7b2f55b72520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "008ecfe9-549b-4edf-8802-b7fd99c8e49f",
        "cursor": {
          "ref": "cb15289e-a286-4c16-bd09-fe5eeb9d5712",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c19d70e4-e2f9-400a-8c5e-f3106a69109c"
        },
        "item": {
          "id": "008ecfe9-549b-4edf-8802-b7fd99c8e49f",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "d88ec79a-43db-4706-9884-56ccc13e473d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0185adb2-2376-424c-b54c-995fae646ce7",
        "cursor": {
          "ref": "b1f4577f-2c7a-4eb0-9e42-6680fa551335",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "2ddefb88-af0b-4291-9fd7-4c195947a0d3"
        },
        "item": {
          "id": "0185adb2-2376-424c-b54c-995fae646ce7",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "712b26a0-3898-4cb0-9e5d-31a6577d1bf0",
          "status": "Created",
          "code": 201,
          "responseTime": 217,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "4081d541-9120-49f0-9393-9ba485d761bf",
        "cursor": {
          "ref": "c41754b2-467b-49e1-a182-d91f7ea89011",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "a4246490-1db2-4961-a438-31c1caa1eaf0"
        },
        "item": {
          "id": "4081d541-9120-49f0-9393-9ba485d761bf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "60bfa774-d22d-4331-bfe9-780ecddbb2a9",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "eca4daf4-445a-41b5-874c-e223f263ac33",
        "cursor": {
          "ref": "1db8aa67-5fa8-45d8-b1b2-d3795bb65246",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "2c91d61f-30b0-4121-984f-47fa0b6bd645"
        },
        "item": {
          "id": "eca4daf4-445a-41b5-874c-e223f263ac33",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "dac9171f-ec00-4525-9274-c807844aa8aa",
          "status": "Created",
          "code": 201,
          "responseTime": 227,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "b2053720-1b15-4c44-939e-5f09c411d69c",
        "cursor": {
          "ref": "55b12a86-f663-4925-9188-d99d6ff38458",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f7d73904-c152-4870-a675-97232766ce24"
        },
        "item": {
          "id": "b2053720-1b15-4c44-939e-5f09c411d69c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "2a310abc-ec57-4ac6-b519-19a3406f05fd",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "a316ae96-7716-44a3-ba24-7cb835f2e463",
        "cursor": {
          "ref": "8731a227-58ea-4191-aa4b-d925df95c90d",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "af449a91-ad38-4923-b785-df78552860ff"
        },
        "item": {
          "id": "a316ae96-7716-44a3-ba24-7cb835f2e463",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "e9bd21a6-beae-4110-b92a-70626e060ae0",
          "status": "Created",
          "code": 201,
          "responseTime": 225,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "87de93f9-9993-46e0-9f34-471656a6081c",
        "cursor": {
          "ref": "1d2043ae-f545-4f77-94c4-1cb88cee8dd2",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "cad1eff4-c830-4c4d-aed3-b548c18b44f6"
        },
        "item": {
          "id": "87de93f9-9993-46e0-9f34-471656a6081c",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c7d4df42-91b5-4d67-82c1-b8d9267b1fff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01fddbde-34ab-4c1a-bbaf-0ef87c354a4a",
        "cursor": {
          "ref": "5fb59fe4-834c-471e-b615-459ae7a9bc58",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "a84a2fb9-10f8-44dd-8a0b-f2c171c8ffb8"
        },
        "item": {
          "id": "01fddbde-34ab-4c1a-bbaf-0ef87c354a4a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "7e77b828-eb7d-473f-8148-7367b0894326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d542b09e-c71c-4433-aece-1c46467254d2",
        "cursor": {
          "ref": "9d7b9b8c-11cb-4dd5-b27f-f59af8a65ccc",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "53fe3bfd-e0dc-4a58-ae24-29ffd26b356b"
        },
        "item": {
          "id": "d542b09e-c71c-4433-aece-1c46467254d2",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "9788572e-5b68-4746-9733-8b30cb2eecd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e2b0af7-b81c-4545-97ef-94747a8712e5",
        "cursor": {
          "ref": "03bb7e6d-1062-44c3-b864-ac48a2cc10fa",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "584287ee-b874-4652-b63b-c5d66d2ae76b"
        },
        "item": {
          "id": "2e2b0af7-b81c-4545-97ef-94747a8712e5",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d32f88d5-5da8-4210-b798-c27fa86c50c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1da3ca4c-d99d-4b50-bf5e-8285ab15e5b7",
        "cursor": {
          "ref": "bbc1246e-83dd-4c14-aa55-6c73c853b453",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "f9d66b08-8471-4804-a374-0cc7a72d9137"
        },
        "item": {
          "id": "1da3ca4c-d99d-4b50-bf5e-8285ab15e5b7",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f9bc669f-39b2-45ae-aae0-f39607ff843e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e7d411-81fd-466a-96a0-47f902ddae55",
        "cursor": {
          "ref": "e97ea8f6-cacd-4540-a028-fd5fec284255",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "f6638e9e-fb20-4e00-ac74-400f78dd323d"
        },
        "item": {
          "id": "91e7d411-81fd-466a-96a0-47f902ddae55",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "4e36dfa4-ed9d-4dd9-8b11-bd2658dd1a92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f19d03df-f911-405e-b0ce-b9d940a91290",
        "cursor": {
          "ref": "c35e4845-5929-4241-858e-a267b10a7649",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b5546593-23f7-41d1-ad53-5dccefcf28f2"
        },
        "item": {
          "id": "f19d03df-f911-405e-b0ce-b9d940a91290",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9941b6e9-74d7-42ef-9284-938714228129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "305755b4-b6c8-46fd-82ba-8e89446fa22a",
        "cursor": {
          "ref": "0975dc04-c0e7-467c-86c1-e1e43893eaab",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "d742f098-4d36-4765-a55a-4c3f05fee120"
        },
        "item": {
          "id": "305755b4-b6c8-46fd-82ba-8e89446fa22a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "91f1b71b-c774-4a81-913d-80fe1185be2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6e0e7d9-4f00-41cd-9f18-21c854a4d9b6",
        "cursor": {
          "ref": "61a32df0-2033-410c-bdd3-e502f9fee367",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "7a5af8b3-30ee-4ef7-802f-11406f9fd496"
        },
        "item": {
          "id": "d6e0e7d9-4f00-41cd-9f18-21c854a4d9b6",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "97446a71-22f5-4d6c-83a9-dde484837f10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49b0a764-d954-4969-8442-f5a33fcf2758",
        "cursor": {
          "ref": "58211c21-776e-4b06-9129-01c6d25c21a7",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "8a01dca4-6ee7-47e3-9573-aa1d700ec11e"
        },
        "item": {
          "id": "49b0a764-d954-4969-8442-f5a33fcf2758",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "a37aa6c2-b6d1-4008-a553-4ebd7f661041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "969cff3a-2758-4e27-b7fb-fe0e6669e48e",
        "cursor": {
          "ref": "5fc97eab-0b15-40ef-a838-8036ce82dae6",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a809dc94-ff4f-43b6-a068-1f39427283af"
        },
        "item": {
          "id": "969cff3a-2758-4e27-b7fb-fe0e6669e48e",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "111e2660-a7d1-441d-b666-9fb9628acc5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e36cb7f7-bfa7-42f2-9c01-3f1756a08c38",
        "cursor": {
          "ref": "a71605b0-3aad-4c00-9c73-c9a5c61d48d3",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "db8c17af-4562-4063-b7cd-e71f80526fe4"
        },
        "item": {
          "id": "e36cb7f7-bfa7-42f2-9c01-3f1756a08c38",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "acf18750-1041-4ff1-938a-05b709c9bbfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ac051b6-bb75-4ee9-a3eb-f9ee88d1a7f9",
        "cursor": {
          "ref": "7e1bc0c1-d794-41d0-84f7-53a3c3523b90",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "38b8889c-4fc3-4a68-9147-123407504c98"
        },
        "item": {
          "id": "6ac051b6-bb75-4ee9-a3eb-f9ee88d1a7f9",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "439b2968-25df-4a93-b0e7-4cc967a3a503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f94aaeb6-5ba8-475e-a46e-cd7ec6b7d3ed",
        "cursor": {
          "ref": "38507ec5-7a13-49a6-915b-dac2284300fb",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "7e26b7b0-88f1-4f31-aff6-14431d510e6d"
        },
        "item": {
          "id": "f94aaeb6-5ba8-475e-a46e-cd7ec6b7d3ed",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "6d3f216e-0108-48c5-8ddd-c6170e3bca6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57c3afdd-2942-4ed6-b466-e4b3a7628f7a",
        "cursor": {
          "ref": "f5614b5a-1996-4d27-8334-4b5f94cff3b9",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "8f5a02d3-f784-4d54-8afa-741015887984"
        },
        "item": {
          "id": "57c3afdd-2942-4ed6-b466-e4b3a7628f7a",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "fde8b7f9-9037-4ab1-8fa1-9fb27519ed1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dd582e0-840c-42e2-9dd8-04d1af7afead",
        "cursor": {
          "ref": "923b52c1-0699-48b8-9e83-1b8b9b550327",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "0c7b9e96-6906-4062-b41b-062e43884398"
        },
        "item": {
          "id": "0dd582e0-840c-42e2-9dd8-04d1af7afead",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "9809885c-e1f9-4349-8951-dad27f65f249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ff83013-606e-4fb1-91a2-f986b9d70d66",
        "cursor": {
          "ref": "ec8204d2-30fb-43f4-b98d-8aa9f8efce51",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "efe89f33-cb06-4290-b89b-4b5bae457099"
        },
        "item": {
          "id": "0ff83013-606e-4fb1-91a2-f986b9d70d66",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "341bacf3-ddcd-439d-906d-ad54648bfd0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f6953ac-f9ef-4d3c-8ce4-a4a8e9056b27",
        "cursor": {
          "ref": "a917f9fa-26e2-44e1-b8a0-bd9de0ae986e",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a1d36e60-d92c-4530-b252-60a6e09dffff"
        },
        "item": {
          "id": "9f6953ac-f9ef-4d3c-8ce4-a4a8e9056b27",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "21edeea4-4e5b-436a-8c6b-2eabff77ac5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dedba4e-aa00-4fd9-b02c-d53968434047",
        "cursor": {
          "ref": "f2ca09f5-46c4-40d7-a381-922fedce7355",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "2e8c5b62-4ecb-46fa-9efc-e23e85ba80dc"
        },
        "item": {
          "id": "9dedba4e-aa00-4fd9-b02c-d53968434047",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "fbb40fe8-0962-49a7-b741-21daa6e5f8ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fca17cc8-1115-4a8c-8219-6c7f19967a20",
        "cursor": {
          "ref": "ca93fc79-c5a9-430e-a359-7e5f83cba0fd",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "befe4f5d-e4e6-485d-93ec-c2dbec9181c6"
        },
        "item": {
          "id": "fca17cc8-1115-4a8c-8219-6c7f19967a20",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "83e8805f-7951-42ca-b2e0-78a80f80f31c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3427a900-2fd4-4be7-9cf5-9b5e2500ef0a",
        "cursor": {
          "ref": "b73a928d-c86f-43fa-b286-f6388f1d8d70",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a5b4ea09-8920-4890-83dd-c62c04dae850"
        },
        "item": {
          "id": "3427a900-2fd4-4be7-9cf5-9b5e2500ef0a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "b8d5d638-58fe-4291-8a36-d1d68ae37981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abbe4224-4ae1-4d43-be1c-e5db8294930b",
        "cursor": {
          "ref": "e2497ba4-f1a2-4059-bcb5-bfba3b1b3645",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "5328b5e5-fcdc-476e-af91-941a87b8b0a5"
        },
        "item": {
          "id": "abbe4224-4ae1-4d43-be1c-e5db8294930b",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "7d4d61c2-faf5-4bdb-a8c2-bac1077fca37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a8a520b-5855-4b2b-9cde-1e643fb0a9ae",
        "cursor": {
          "ref": "c3167bae-6e2b-465d-b5aa-3d5ae2e21790",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ac86d657-7076-4878-8770-2cab9abe4248"
        },
        "item": {
          "id": "2a8a520b-5855-4b2b-9cde-1e643fb0a9ae",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "2b5ce1cc-261b-4ca4-b5b8-0b050ce99ebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea5549b-e023-4776-b626-e323199daa43",
        "cursor": {
          "ref": "4a87ec7e-68b7-4791-b429-e36d1c93217e",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "cba51890-917f-4155-b31e-142d8bd5194f"
        },
        "item": {
          "id": "0ea5549b-e023-4776-b626-e323199daa43",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "380e2905-be4b-47f3-951f-7058db74e535",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "384bb08d-4aa1-491e-8050-7a5a7a6f02f2",
        "cursor": {
          "ref": "188662a0-ef6d-4747-a6a7-1bb9ceff2bff",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "25a06751-8384-469e-9a0f-fce3d8ec859f"
        },
        "item": {
          "id": "384bb08d-4aa1-491e-8050-7a5a7a6f02f2",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "9adf7834-53bc-486a-8d27-1c632caf72c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6dcd73-8c9d-4dcb-87b7-63e62b2ed546",
        "cursor": {
          "ref": "82b41ac0-4105-4dc7-abf1-52605677bf7b",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "fd80bba2-16f4-4654-a7fa-63808e3884d3"
        },
        "item": {
          "id": "9e6dcd73-8c9d-4dcb-87b7-63e62b2ed546",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "0accac44-7bda-4113-953a-6582b906bb1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0f14cca-72d5-4962-94d2-32dbcf127064",
        "cursor": {
          "ref": "db025710-a090-49e2-ac95-556956b2cea1",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "ae474a3a-1655-4b65-b7ba-6934d432a5b8"
        },
        "item": {
          "id": "b0f14cca-72d5-4962-94d2-32dbcf127064",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "53dddbfd-9450-4a8e-9314-f248d292bc9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b045c15-f923-47ce-8ae3-c82e2f46f82f",
        "cursor": {
          "ref": "ee1baa38-a12f-4f67-bee4-66c6e5dec0bd",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "2104a238-dc3b-413d-aafb-af5316542e09"
        },
        "item": {
          "id": "7b045c15-f923-47ce-8ae3-c82e2f46f82f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "6dddc41b-a2ed-4657-97fd-f8b06ecff897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afa46d54-911c-4db8-984e-dd7e63b9767c",
        "cursor": {
          "ref": "0d2222cf-8f37-464e-91d9-9827d495ca49",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d9326663-b0c5-4f17-853a-117fd57b1213"
        },
        "item": {
          "id": "afa46d54-911c-4db8-984e-dd7e63b9767c",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "9e4f9463-621a-415e-8f60-51e54bd76825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc76cf31-097f-4064-b7e6-3753e06fc9ee",
        "cursor": {
          "ref": "276f8d5e-d755-442a-96fe-04ebae73c523",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "7bffbd9d-1d3e-4e5a-a268-cf1cbc79abb3"
        },
        "item": {
          "id": "dc76cf31-097f-4064-b7e6-3753e06fc9ee",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f41ada41-896d-4263-b512-55436ee952d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f196a98-ab2e-4f88-acec-51fc1d5da310",
        "cursor": {
          "ref": "5da05779-5202-4080-bbe7-61dcf24cad85",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "4e7cda80-9cb3-44e3-af2b-281df66ab27c"
        },
        "item": {
          "id": "2f196a98-ab2e-4f88-acec-51fc1d5da310",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "a6541dcd-c47b-45ad-a3e7-5dbd143eb0fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d602bef4-efc7-4efd-8104-8b3f16b0a00e",
        "cursor": {
          "ref": "fdebcdfd-dac1-4c5c-aa14-9c01a59e3d02",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "3cdd7616-ddff-4e4a-a53d-d773c863b88c"
        },
        "item": {
          "id": "d602bef4-efc7-4efd-8104-8b3f16b0a00e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c7017e45-2cc7-4cdd-86c9-ec4721c422ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1aa1394-d198-4687-8272-09691fa9c390",
        "cursor": {
          "ref": "e1f8f754-4903-4eaf-9924-dc727b8b7159",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "4616ecd0-f588-40af-a6ff-0d82630d58b6"
        },
        "item": {
          "id": "a1aa1394-d198-4687-8272-09691fa9c390",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "c6e6c4a8-19af-4799-b36f-923ddaec6bbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "78cb4178-483e-4849-bb7c-66c5a9ed1234",
        "cursor": {
          "ref": "d5444aeb-b1db-4c8d-8b03-799b05f37811",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "915be4ac-9e2f-4366-8f2e-fb0bb7793eea"
        },
        "item": {
          "id": "78cb4178-483e-4849-bb7c-66c5a9ed1234",
          "name": "credentials_issue"
        },
        "response": {
          "id": "e448eb8d-1eaa-4641-aba2-d56a14ba9bef",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "b19b6dc8-a3a1-4b8e-8431-8a480242ca43",
        "cursor": {
          "ref": "194bf447-49c7-42ab-a1a2-df264fc5a161",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "30206128-0f2a-4679-8a5f-a7639e9900cd"
        },
        "item": {
          "id": "b19b6dc8-a3a1-4b8e-8431-8a480242ca43",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "581e7073-ec6b-4e51-a773-f7cc7b33201c",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "74b8f631-38bf-4657-ab8d-2446b7731b44",
        "cursor": {
          "ref": "0c3c6834-23fb-4eb0-b1fc-a4ce1f489a57",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "5f8e9ecc-9ce4-4d9f-b1a0-e66d650d4498"
        },
        "item": {
          "id": "74b8f631-38bf-4657-ab8d-2446b7731b44",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "65f71b58-f919-410a-93ce-6b407ee00df1",
          "status": "Created",
          "code": 201,
          "responseTime": 227,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc9d0275-9efd-45b5-8587-52ea9f71599e",
        "cursor": {
          "ref": "5502de3c-79d2-436c-89e9-96468c20c1b3",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "bebc31af-b45d-478e-af40-daee20576e45"
        },
        "item": {
          "id": "cc9d0275-9efd-45b5-8587-52ea9f71599e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "bd38f047-9112-4517-b423-80f0ea05d231",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "01d62cb2-3752-4830-879b-1e085cfb97ad",
        "cursor": {
          "ref": "4328e006-c5d9-4f62-a0bb-ef829d1bec53",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "3dfe8f3f-7a7b-4068-a5b2-1b7890fcd64f"
        },
        "item": {
          "id": "01d62cb2-3752-4830-879b-1e085cfb97ad",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "2b60f5d4-6945-405b-8ef0-ef1ff8d394c5",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-01-15T00:38:16.660Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-01-15T00:38:16.660Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "b4bb3f19-982d-4343-be42-4a7227df8fd6",
        "cursor": {
          "ref": "a6d292af-5bab-401b-8452-e776d5f54819",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "a97c9ef9-e000-4e59-8951-fe7e9420776f"
        },
        "item": {
          "id": "b4bb3f19-982d-4343-be42-4a7227df8fd6",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "8b97b06d-49b2-492d-9221-72cdba8bd784",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "355cb455-ee31-46a7-911e-ece9b2d70c5b",
        "cursor": {
          "ref": "f97ea700-f38c-4c44-8ca8-b0f80a3ada29",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "62a5dea1-8924-4d93-9eeb-9363cd6a2690"
        },
        "item": {
          "id": "355cb455-ee31-46a7-911e-ece9b2d70c5b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "85de3495-dc27-4a91-9751-7bd7b984afdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b47a7af-02be-481b-afab-63c8ac7cb08c",
        "cursor": {
          "ref": "0799183f-a3dd-404f-9142-ec1f51c8a950",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "0ddd56bc-cf0e-4f35-bef7-8074b28f5af9"
        },
        "item": {
          "id": "5b47a7af-02be-481b-afab-63c8ac7cb08c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "24e8413b-b119-4a74-b045-1b266414c459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e500b5ec-6252-4d50-bb77-eb7162b7f03a",
        "cursor": {
          "ref": "56fa2f81-904a-4d4b-844a-9ad76eea90c0",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "eac21558-4c02-49d2-a816-3662cbc56501"
        },
        "item": {
          "id": "e500b5ec-6252-4d50-bb77-eb7162b7f03a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6781c755-e665-4c25-aa72-192dc7d3e10b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35ff89d1-4b76-4b58-b470-16009b3e22ee",
        "cursor": {
          "ref": "e4e07cd5-8d88-40d8-aa5a-b7c7292d84fe",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "9ad02ec1-c318-45dd-86c3-f6551c0afb33"
        },
        "item": {
          "id": "35ff89d1-4b76-4b58-b470-16009b3e22ee",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d1860652-1807-4898-abe0-bd5107511871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96ab2d58-f486-4790-a511-a51accc463ef",
        "cursor": {
          "ref": "33a7eb9e-0c4c-429b-89a0-1db09d23d32a",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "0e2d0775-cfb3-47e3-86f8-1740075fe110"
        },
        "item": {
          "id": "96ab2d58-f486-4790-a511-a51accc463ef",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "56434711-a6dd-4dc0-a3cf-a3b5411741d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f87617f8-f93a-42ed-ab45-dc85ca271161",
        "cursor": {
          "ref": "a295603a-9ce8-4837-a6d4-960da4ef84f4",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "2de1bd02-ae38-401e-ab37-6d26133af6c6"
        },
        "item": {
          "id": "f87617f8-f93a-42ed-ab45-dc85ca271161",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c1333f1a-0071-498d-a406-eca68c4b52e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2422e828-2588-408c-81b2-69f64a6a08a1",
        "cursor": {
          "ref": "faec7a1a-5cf6-4e1f-b5ba-694bdb0ffdfe",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "93afa386-2e3e-4ec1-b34a-08a5a6edb11e"
        },
        "item": {
          "id": "2422e828-2588-408c-81b2-69f64a6a08a1",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "78c0bb50-3b27-4a4e-978c-e6afa77ad8bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dee997b-699b-42f9-9312-ed404f0a0b74",
        "cursor": {
          "ref": "f86a3320-83eb-45be-a721-5a4b711bd621",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "f4314d1a-4530-4245-93a9-75c95a15725b"
        },
        "item": {
          "id": "1dee997b-699b-42f9-9312-ed404f0a0b74",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "53bd0d6f-bc4f-4dca-9409-6d1f10614b4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4799290a-33f8-43f3-bf6b-62ae5dfa2a83",
        "cursor": {
          "ref": "85886155-a103-4005-a635-afb61089b5e6",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "35c7fa71-ac05-44f8-9f45-e6ac8bf7d920"
        },
        "item": {
          "id": "4799290a-33f8-43f3-bf6b-62ae5dfa2a83",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "edb1eeb2-be42-42d5-b218-ab6c55012c06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41f3d2e0-2ff6-473d-9447-3be28bacfeed",
        "cursor": {
          "ref": "b1210d2f-89c4-4501-b16e-5a22718ca41f",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "6fc0f897-2398-441f-8ffe-9ebd18db17d1"
        },
        "item": {
          "id": "41f3d2e0-2ff6-473d-9447-3be28bacfeed",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "33c8168c-9b5b-46f6-9470-7209753f39c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "028be0e8-3779-45b7-bae6-770e7e0d9962",
        "cursor": {
          "ref": "3aa5bbe9-6226-417a-af71-22bf774fd4a4",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "352b9107-1f7d-4074-af98-74777f33c6a6"
        },
        "item": {
          "id": "028be0e8-3779-45b7-bae6-770e7e0d9962",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9ce65d97-c15c-4d9c-a9d1-fb94ae652e8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a381163-2630-4346-bc09-5ee049fed5e6",
        "cursor": {
          "ref": "bbf57f07-4932-41f5-b4e3-003609082d41",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "07d11638-5760-446a-9099-78c1afad9042"
        },
        "item": {
          "id": "1a381163-2630-4346-bc09-5ee049fed5e6",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "5293ad83-84cf-4456-a34c-5adfbc50f351",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9554983-1dfc-4e7c-981b-a65524991ab6",
        "cursor": {
          "ref": "1eda2c60-0d09-48e9-bc95-4978946bdd19",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "84379107-3b55-4746-b42a-cbfe74f4ac39"
        },
        "item": {
          "id": "a9554983-1dfc-4e7c-981b-a65524991ab6",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1ce6fd27-8f8b-4fc3-bb31-d056cf283616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bf3d64a-1b3c-434b-804b-14185c82f6d6",
        "cursor": {
          "ref": "1a6721c5-19f7-4d0b-ba79-1c7005371aad",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "f559f065-e644-4927-b35d-e99b60e99218"
        },
        "item": {
          "id": "7bf3d64a-1b3c-434b-804b-14185c82f6d6",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0a764e16-ccc5-45f1-847b-0075f72ce4d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85705b9f-5a2e-4c70-8da5-469aa92fedbe",
        "cursor": {
          "ref": "3f2ce387-ae70-4e12-bc15-53159bba306a",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "950c8d01-1131-4974-86b5-4b1be2b48ab8"
        },
        "item": {
          "id": "85705b9f-5a2e-4c70-8da5-469aa92fedbe",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "94b9d964-0738-4294-be21-f8eb0117b981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d62a56b5-aac0-441b-b423-c05e0475cc88",
        "cursor": {
          "ref": "a6f6421f-9da2-4554-8c8c-e927112af3ca",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "cfb5990c-278d-49b1-b63f-dca75a6dc729"
        },
        "item": {
          "id": "d62a56b5-aac0-441b-b423-c05e0475cc88",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "20d20694-046c-4251-8222-668ae8bdafbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcc1c04b-b196-4c1a-9bec-1144651b99ce",
        "cursor": {
          "ref": "65973463-5b03-4709-917c-75d098d7f77f",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "43bb8b0e-7816-4b91-ba14-8e9b8f46f057"
        },
        "item": {
          "id": "fcc1c04b-b196-4c1a-9bec-1144651b99ce",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "7f2fa302-87bc-41cd-b7be-ce48c45beb58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19d9d9c5-1f9f-470e-adca-4a431169103e",
        "cursor": {
          "ref": "a9ed5083-97d3-49f5-96d1-0ba249fdf224",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c755b6ac-64fa-4690-a018-9be93bb39b0b"
        },
        "item": {
          "id": "19d9d9c5-1f9f-470e-adca-4a431169103e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "674526a2-ce5b-4625-a7c5-4413b5de5255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e896827-b65f-4804-b1fc-b9aa3214f35b",
        "cursor": {
          "ref": "e40805f4-672a-4108-9235-1829515b016d",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7dca6b72-c675-459d-b923-18a2f8acc23a"
        },
        "item": {
          "id": "2e896827-b65f-4804-b1fc-b9aa3214f35b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4d72a30d-b0fe-431c-af38-9798f22f5e21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5127f9f2-f410-40ec-9d86-c58155379d80",
        "cursor": {
          "ref": "82e89a36-97b7-4c97-b911-1207825a8e14",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "1c88438e-a429-4b38-ad1e-6a6697cd4b55"
        },
        "item": {
          "id": "5127f9f2-f410-40ec-9d86-c58155379d80",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "92e3d286-c3f4-4929-90c8-5af2f70a90de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5ce4e47-5ca3-4859-ba95-70c65adfbc09",
        "cursor": {
          "ref": "0be5e4b4-a84f-4d0e-b983-1771611279fc",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "bd7663c4-6a54-4c82-a838-ee33ff24d90b"
        },
        "item": {
          "id": "d5ce4e47-5ca3-4859-ba95-70c65adfbc09",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ac72d27d-12aa-40a3-b508-2d5528d4edd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eddaba30-b2af-444f-8509-e0b994a894fb",
        "cursor": {
          "ref": "6d181c19-6053-4c65-a8c2-3f3a91c4ba3b",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "311c4711-a575-42f3-8f64-7548a95f6f2c"
        },
        "item": {
          "id": "eddaba30-b2af-444f-8509-e0b994a894fb",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0ef3d286-a418-42a5-b670-4a4ace238ed1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12274a3c-4143-4a2b-bc67-c7dcb93b7921",
        "cursor": {
          "ref": "32d5f553-975d-41f4-9ef2-0a31e1b49662",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3db5eb85-2d67-4ba9-b644-04540d63f9f4"
        },
        "item": {
          "id": "12274a3c-4143-4a2b-bc67-c7dcb93b7921",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c00938aa-002c-467d-88b8-6f38fe1f1b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72d9ab06-8bf9-4c98-bef1-b6c11401c08c",
        "cursor": {
          "ref": "214f85a2-d422-48cd-90b1-63bb578f1f6e",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "9c36b6d5-0420-4ddf-b083-8022dba2ef6a"
        },
        "item": {
          "id": "72d9ab06-8bf9-4c98-bef1-b6c11401c08c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "36a8ba40-230d-4a11-984d-8f18b05f0922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a9efe39-0ed8-4ce9-ae57-fb561390bba9",
        "cursor": {
          "ref": "e287e055-a4bc-4f87-b98b-e4a289a1f7bd",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "ec759d28-e114-469f-88d8-07fc9e07abfd"
        },
        "item": {
          "id": "1a9efe39-0ed8-4ce9-ae57-fb561390bba9",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "8124d6f7-8532-412f-b96a-7c35c1c27034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "206bf5a4-d2fe-4fe2-811b-836b024c0659",
        "cursor": {
          "ref": "77ba1261-2923-4640-aa8e-cca654415ff6",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "2b33b103-1abc-4514-9c79-ef68739153a1"
        },
        "item": {
          "id": "206bf5a4-d2fe-4fe2-811b-836b024c0659",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8418db2f-d3e0-40ea-a094-34fc0ffc8dfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41dc2e9d-1ced-4921-84ca-d4bfe9355842",
        "cursor": {
          "ref": "fe51cba3-5d4b-49fc-ad51-7aad4a0d98d9",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "a2e81118-5d92-4d87-b2b6-ee5c5f9f29a7"
        },
        "item": {
          "id": "41dc2e9d-1ced-4921-84ca-d4bfe9355842",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "4833bb53-aae2-44c8-ba41-da3cc38c2099",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17058f7a-4eca-4bd3-a96e-0b92173f4663",
        "cursor": {
          "ref": "82fb5c1e-63de-4666-995c-c54c711baeaa",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "9c4fdd53-47e9-46f6-9f74-a13ad9f88dc5"
        },
        "item": {
          "id": "17058f7a-4eca-4bd3-a96e-0b92173f4663",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7ffd232f-6f34-43cc-9624-8bade326712f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37d234eb-2402-4906-813e-b6c8f4a4a637",
        "cursor": {
          "ref": "3de612ff-a8cf-4189-8bf4-648c3e17350c",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e54ebc15-3c8d-4b40-a2c4-ca06cac0a25e"
        },
        "item": {
          "id": "37d234eb-2402-4906-813e-b6c8f4a4a637",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1ebfa4dd-2291-4752-ae6f-6ce1de58e449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fccbae6f-0e44-4220-aeb9-1f66b5298dbb",
        "cursor": {
          "ref": "b16bc106-f92e-4d7a-9c9a-53b1e5c16439",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d120277a-e2e9-456c-9211-019b98193c9d"
        },
        "item": {
          "id": "fccbae6f-0e44-4220-aeb9-1f66b5298dbb",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "de3ab2ab-4931-4d1a-98c1-d74d0c8b7c87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dad3b19-5578-4953-aac7-6f78c4d99057",
        "cursor": {
          "ref": "75bad3d9-8d2c-4e37-a246-7744be863c02",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b3d58711-7093-4738-a403-3ded42649c51"
        },
        "item": {
          "id": "8dad3b19-5578-4953-aac7-6f78c4d99057",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4e05a570-61af-48af-8115-c765b9dc68b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58147df5-3e31-4383-b506-bab344b97859",
        "cursor": {
          "ref": "e9695175-bd7e-4cb4-bde9-3e9fef8bd798",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "43c1a504-81f5-460a-9c1d-03ae80e75ec0"
        },
        "item": {
          "id": "58147df5-3e31-4383-b506-bab344b97859",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "b18bd923-7687-43db-a39c-737d5d0b530a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 140,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba0549ad-3894-4257-99bc-507ca7c24433",
        "cursor": {
          "ref": "c8fb4ce6-09f3-462f-8400-f22943defb77",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "f682dc06-f8ea-42c5-bafe-d9da913a2d80"
        },
        "item": {
          "id": "ba0549ad-3894-4257-99bc-507ca7c24433",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c9bc7e32-f793-4596-bc3b-1aff9f4cdafc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71882436-0acb-4166-b5df-272ed35cc434",
        "cursor": {
          "ref": "4bb4f3e3-1d96-427d-b313-e4af20475961",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "165db5eb-ad4d-4853-a78b-e19dde8ed3d0"
        },
        "item": {
          "id": "71882436-0acb-4166-b5df-272ed35cc434",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c4d3edbb-7bc3-4a7f-b285-362f68592c2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b981792-98a9-4f15-bd5f-0be5a0a04386",
        "cursor": {
          "ref": "13a36b3c-2b0d-4b42-8888-1170e24f9477",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "c8b1ea22-6c7a-4124-a803-ac6735a10dad"
        },
        "item": {
          "id": "2b981792-98a9-4f15-bd5f-0be5a0a04386",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "90ce597e-5231-4a3a-b3be-5b82de3c64f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beea35a0-af1e-4838-b8dc-d9f27920ac56",
        "cursor": {
          "ref": "9d873ff6-2aaa-4903-b74d-ba2ebf6f9498",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9b46d4ee-d582-4110-b39b-098727aad9ac"
        },
        "item": {
          "id": "beea35a0-af1e-4838-b8dc-d9f27920ac56",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "78a885f0-8b22-4e3d-b803-48403094b8ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f66badb4-1f0b-4a42-8d55-472a58461666",
        "cursor": {
          "ref": "d4b85ab8-ad79-4893-9df4-3ab768a592b9",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "520c72b9-8380-4a1e-9bd8-a5486bded4b7"
        },
        "item": {
          "id": "f66badb4-1f0b-4a42-8d55-472a58461666",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c685abeb-0b7f-4f80-93c0-2a209941be4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e15f0e-11ee-4c5a-b0d7-bc669c25b3aa",
        "cursor": {
          "ref": "9de697f4-0767-4bf0-b1bd-d6558d9f83ac",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "d396a849-08cd-45b3-a268-63ba5882dda8"
        },
        "item": {
          "id": "23e15f0e-11ee-4c5a-b0d7-bc669c25b3aa",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3e509a5b-bf77-4b47-af66-ee55a5505f74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "145d03f3-2a5c-4602-9eba-3e43c9930565",
        "cursor": {
          "ref": "fff60b51-fc0d-440c-b70c-075246508b08",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "6b1e0a85-340c-49d4-987a-3664cfa14f20"
        },
        "item": {
          "id": "145d03f3-2a5c-4602-9eba-3e43c9930565",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "48cc8109-adea-4f6b-8a68-6e704df954bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8225b82f-d0d3-4772-b634-0be213ce2f5a",
        "cursor": {
          "ref": "ff0a23d7-c2ec-48e9-912a-e425bf852421",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "b9b4afd6-1dda-4bde-8b02-213b19fdb017"
        },
        "item": {
          "id": "8225b82f-d0d3-4772-b634-0be213ce2f5a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "aebbe4d4-24df-4e19-9c76-a8cf8e962885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a18e1e45-7f6b-4974-9733-415fb5974938",
        "cursor": {
          "ref": "0421a758-fe85-4fc2-b0e0-7b596e2c61c8",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d13c7f89-2c76-4c25-b13a-47399db61744"
        },
        "item": {
          "id": "a18e1e45-7f6b-4974-9733-415fb5974938",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2e34d4fa-36b4-4b1a-9a76-124d8683a01c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2df553e-3fe6-4628-905f-d5c1bffd63e1",
        "cursor": {
          "ref": "4334df92-08fe-4a57-bfac-d5ab5d83e464",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "f4936aed-3abc-4b60-8d20-639380b38414"
        },
        "item": {
          "id": "f2df553e-3fe6-4628-905f-d5c1bffd63e1",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e76d33da-f853-46ed-bd28-1e282b7399cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04c5df68-b420-483a-9ae5-dd34afeeec08",
        "cursor": {
          "ref": "f92119a8-4544-4347-836c-b1f59a3c5ced",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "350c6a27-1a2b-4849-bbd5-00a401073ca4"
        },
        "item": {
          "id": "04c5df68-b420-483a-9ae5-dd34afeeec08",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "1b3b395e-09d9-4f77-a7aa-93fe1daac71c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d45c87f-c8d9-41f3-8de6-97cd05c9926a",
        "cursor": {
          "ref": "f7ed78df-e357-4ae1-bc8c-629042035bac",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "94f4c418-dec7-4505-9148-50397aa23e98"
        },
        "item": {
          "id": "7d45c87f-c8d9-41f3-8de6-97cd05c9926a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "39a0bce3-087c-4aaf-91ba-87f82afee9d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0ddcc2b-2447-41eb-b331-5aad84d68116",
        "cursor": {
          "ref": "0218da0a-6791-454f-8684-ea01bea3524f",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "32b8a9d2-4d80-42d3-a307-1727ef5352a9"
        },
        "item": {
          "id": "f0ddcc2b-2447-41eb-b331-5aad84d68116",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ade21bce-c7a8-4649-8aed-a6a0814db4b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dceb0ce1-9fa1-4607-93ec-170ee6bdfc8f",
        "cursor": {
          "ref": "593b4bf0-0e1a-4b00-b113-d9f1f4b46283",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "af1c913e-3083-4a81-ab4b-7ee7e74a3ac4"
        },
        "item": {
          "id": "dceb0ce1-9fa1-4607-93ec-170ee6bdfc8f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "befb8b77-c7ca-40c9-972f-38de4ee09570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70786a7e-5006-449c-b0bd-ad77c1329986",
        "cursor": {
          "ref": "1404a59f-0278-4867-935d-b6fb7dc6e1c6",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "18aa1deb-4744-40eb-877e-247d95c14045"
        },
        "item": {
          "id": "70786a7e-5006-449c-b0bd-ad77c1329986",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4704eef1-e178-4011-a935-d186b11059f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0923fc-bd04-4960-932d-847515794f34",
        "cursor": {
          "ref": "ea70ddd7-23ca-45a3-98b7-a34b0c23b122",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "b6d1e07e-3b92-4400-9166-1b5ee780908f"
        },
        "item": {
          "id": "6d0923fc-bd04-4960-932d-847515794f34",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "df8e9f35-8a35-444f-9879-f465563c8b46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b2e67a-f4e0-4f53-9de1-e0c90deeec9e",
        "cursor": {
          "ref": "2dd321b8-bbe7-4810-9a28-8c5ac70b7e99",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "40b57fc6-9651-4dc4-bd2f-f819d1afc301"
        },
        "item": {
          "id": "95b2e67a-f4e0-4f53-9de1-e0c90deeec9e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "beef8983-4c7a-40f8-830f-776c8708fcac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12cd9483-781a-471d-bfce-66c297031388",
        "cursor": {
          "ref": "dadddb35-8d0d-46d6-ba6f-1c195d400c58",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c3eea790-a048-4333-8acc-d743e9f55623"
        },
        "item": {
          "id": "12cd9483-781a-471d-bfce-66c297031388",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0e45f721-41aa-4452-b094-b00630034d3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17297b98-92fc-4c56-ab10-50dd9f406d40",
        "cursor": {
          "ref": "70859b10-0610-43a4-bf30-22ee3043e8c6",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e5c7d092-1406-4d0b-93d7-8926436598d9"
        },
        "item": {
          "id": "17297b98-92fc-4c56-ab10-50dd9f406d40",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "52e814c6-d8c2-4737-a4d2-04be32a1c5fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0349c936-8aa0-4e7b-aa55-459399022170",
        "cursor": {
          "ref": "ad9c08d0-3721-4b72-b66b-02f05a431c3f",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "c759a405-4353-452b-b8d1-ff21a0197aea"
        },
        "item": {
          "id": "0349c936-8aa0-4e7b-aa55-459399022170",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f55c5310-563b-4113-a211-045592d4f3e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f9cfba9-5826-499c-adc1-09ca1dc30797",
        "cursor": {
          "ref": "c9aaa2f0-4c03-404c-80a9-892452f546f6",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "07e6cded-3bb3-4acc-956c-8990cf3d027c"
        },
        "item": {
          "id": "6f9cfba9-5826-499c-adc1-09ca1dc30797",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4866cf26-0229-4e55-9d36-1565e9f15e5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7969ca7-7c4c-4f8b-9104-02bf7395223c",
        "cursor": {
          "ref": "9f704a3f-78b9-46c5-a5e3-8a921808c6c7",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "4c0009d5-c8f2-464c-8bb1-9bd66bbe8527"
        },
        "item": {
          "id": "f7969ca7-7c4c-4f8b-9104-02bf7395223c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ee5dab52-720f-4abc-a818-dde977bb7d7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5bf800f-474c-49a0-bd74-6d8e95c5b407",
        "cursor": {
          "ref": "d8855229-802a-4c5c-adc8-45801a2372b0",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "48733c37-1b9a-4709-8347-02d3fb4579f3"
        },
        "item": {
          "id": "e5bf800f-474c-49a0-bd74-6d8e95c5b407",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "75254782-72c8-42a3-af56-c3976b3b7139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "397c16a2-9ead-45b1-b2cd-7cd9673d596e",
        "cursor": {
          "ref": "a691d704-ab80-4a55-af42-e175c9b8dd6b",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "b6f69ec8-42a9-4993-a841-e415c79ed308"
        },
        "item": {
          "id": "397c16a2-9ead-45b1-b2cd-7cd9673d596e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c53baa29-2277-4fb6-9c5f-7299b3079b25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "197793eb-0f3f-49f6-9a72-33f5a98dbf4d",
        "cursor": {
          "ref": "3c24c850-9322-4ac1-87b6-c274ff6b46dd",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "6c4a5def-37d2-4e54-b423-185cb0c82c86"
        },
        "item": {
          "id": "197793eb-0f3f-49f6-9a72-33f5a98dbf4d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1cfc3574-e2c6-4360-bb38-d603699b559d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e486e02-ea48-4d5c-836a-a1a984cebfa1",
        "cursor": {
          "ref": "aa429e48-7d2d-40f7-a42a-bbf2891de2bd",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "337d093b-cd5b-4a30-bf6b-2d6129237e4e"
        },
        "item": {
          "id": "0e486e02-ea48-4d5c-836a-a1a984cebfa1",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "9b33d583-c421-4231-a3c3-0e4f40b145d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dbb4e96-5480-4efc-8e94-4d7c5404d0dc",
        "cursor": {
          "ref": "4fa0fa91-f90b-423b-a0a5-108474ba8d1c",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "c46334fb-0ea7-46b7-a49f-098c6f75f3b1"
        },
        "item": {
          "id": "3dbb4e96-5480-4efc-8e94-4d7c5404d0dc",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "dab3ebdc-5d16-4c25-9d34-9000c5d506cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "570c4114-5716-4842-bf3f-9efc16a15935",
        "cursor": {
          "ref": "0b61d83c-e927-452a-a67c-86e6caa034f7",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "9574bd15-3b17-47a2-9ec6-74328a6a1337"
        },
        "item": {
          "id": "570c4114-5716-4842-bf3f-9efc16a15935",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3cfae605-ca6f-4c0e-b598-ee43da447406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90bdc2eb-d96c-44b0-86d4-6b509efad87a",
        "cursor": {
          "ref": "3e3d8f10-2f91-4310-8a4f-fb8ea9a2627e",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "5c154aa0-3cbf-49a7-ae00-d7570a215ad1"
        },
        "item": {
          "id": "90bdc2eb-d96c-44b0-86d4-6b509efad87a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2c4aa231-8454-495f-b911-ca5dc2509196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16197f21-0d7a-4c52-8a17-a754c1b96dd3",
        "cursor": {
          "ref": "d06a5762-2962-49ad-b8b8-19f7be160dcb",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "12f8763b-2d7d-4426-96f9-feb6dbbb7f71"
        },
        "item": {
          "id": "16197f21-0d7a-4c52-8a17-a754c1b96dd3",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "10e85f61-d8bd-4379-a7fd-7f22ea5e2743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57a818c0-b024-45dd-ae06-4d395f48f225",
        "cursor": {
          "ref": "27ba67bf-e3ae-4c39-a2cc-3a2d2d8108d4",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "cbc20c19-4707-450a-82bc-39d1e673e882"
        },
        "item": {
          "id": "57a818c0-b024-45dd-ae06-4d395f48f225",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "371348c6-2220-4d40-a4c9-7e66b4e47ab5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9542ee6-3d5b-4734-96ab-ecb367b0c969",
        "cursor": {
          "ref": "d11f785a-9daf-439a-9018-678c3cab8178",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b45a13c4-cc45-46bd-88f9-9323257fb2aa"
        },
        "item": {
          "id": "e9542ee6-3d5b-4734-96ab-ecb367b0c969",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9a303a61-02d7-4028-8786-db3002c7d258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a313a8d-7ae2-436b-b81d-dd822b13c4f0",
        "cursor": {
          "ref": "7beebfaa-83cb-460e-a7ae-66fac71910ac",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "9868f535-5911-49ff-9998-a0e69dd621f2"
        },
        "item": {
          "id": "1a313a8d-7ae2-436b-b81d-dd822b13c4f0",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "6819fdd3-7b98-4b9a-8d86-595a0027d2a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f83123bc-d772-426a-ae6e-7ea83f9e3a61",
        "cursor": {
          "ref": "accd079c-c8d3-44d4-b8ee-8a88df3886f9",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "54c7c082-aed4-4f00-bfd6-b8b002422d48"
        },
        "item": {
          "id": "f83123bc-d772-426a-ae6e-7ea83f9e3a61",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "e11b6e12-cd3e-4368-96b9-4c233f8c74cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89d3769e-e680-4219-896d-650b61410b50",
        "cursor": {
          "ref": "840778ae-4ff8-47c5-9e32-617e2b0b4978",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "fd09791f-2fa2-449b-9e61-34027580c5d5"
        },
        "item": {
          "id": "89d3769e-e680-4219-896d-650b61410b50",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "5efe8353-faa2-4067-b41d-b24fc3a1acc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1da33348-1c3e-4e5f-9ebe-9758e7e7aed1",
        "cursor": {
          "ref": "67473fa8-b1da-4dd1-9ce4-4a8626ba895a",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "f2c46d82-7515-49bd-8fb6-492bb38895d6"
        },
        "item": {
          "id": "1da33348-1c3e-4e5f-9ebe-9758e7e7aed1",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "344f70fa-8276-4c0b-8c45-b18cf1427658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3db40ede-2cb6-413a-a538-3b176a0c0956",
        "cursor": {
          "ref": "5cdcd8e8-824b-4b0a-b4a7-726cb6c7d484",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "e47cf9cd-7f5a-41df-b44c-4d5f8c946794"
        },
        "item": {
          "id": "3db40ede-2cb6-413a-a538-3b176a0c0956",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "4fe86b57-0197-40df-892c-ecb3727dd723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72c6abb2-ee72-4a9e-bae6-9b09145cf0e0",
        "cursor": {
          "ref": "e39b99f9-1484-4909-b066-02f53700ec58",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f3169139-aee9-4497-90b5-a5183b7251c0"
        },
        "item": {
          "id": "72c6abb2-ee72-4a9e-bae6-9b09145cf0e0",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "fbdbc67e-8d86-4db6-98fe-1376618fc1df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1688e024-712b-4c5d-900c-b20d0dea2f9e",
        "cursor": {
          "ref": "6c4dc4ed-6ad4-4df5-ac7a-93b1de6f3e87",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "3b16eef6-5bb8-49d5-a599-fecede33ee26"
        },
        "item": {
          "id": "1688e024-712b-4c5d-900c-b20d0dea2f9e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "638b2c4b-a50f-4b8d-9820-ac95f037a903",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d07c672-3df2-4451-8b6f-83e5de12006b",
        "cursor": {
          "ref": "e1b67116-3b63-4d14-8da0-2a724f9edf1b",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "add6c190-b591-4a8c-84bb-3e9c725c14bd"
        },
        "item": {
          "id": "0d07c672-3df2-4451-8b6f-83e5de12006b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "75affb52-2a16-4be5-a40c-01511d30de62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7464056f-3783-444d-87e0-b37ebdd311c1",
        "cursor": {
          "ref": "95976434-78b6-4f7c-84c2-f77cbaaf292b",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "051312af-d671-4877-bb17-fe6c5ea930b7"
        },
        "item": {
          "id": "7464056f-3783-444d-87e0-b37ebdd311c1",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "77a5c13d-3f38-455b-b719-7e9eb94638f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe6efe5-b26c-4d18-9718-4acde1bd0414",
        "cursor": {
          "ref": "1538ee01-9adb-48b9-8f30-533cea7a8976",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "369d3dd7-fca5-4bc9-849a-6ad694fbc87c"
        },
        "item": {
          "id": "2fe6efe5-b26c-4d18-9718-4acde1bd0414",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1d8871e0-3a28-4d74-a4d9-e31afe760b94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b38f9228-eca6-401a-9699-c0088bcff8d4",
        "cursor": {
          "ref": "1f333ea7-48e9-46cf-98de-cd266d95f21a",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d3fded60-5a7f-4649-b649-087d300ce2d8"
        },
        "item": {
          "id": "b38f9228-eca6-401a-9699-c0088bcff8d4",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "86dd3423-7295-4d31-97bd-44b1bf80d8f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "220e08ca-f986-4149-8cab-a5547aba3cab",
        "cursor": {
          "ref": "31335506-bf8e-4bf1-991d-c1127ffc6eac",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "37a89e54-866a-4a54-888c-edf3b2597c92"
        },
        "item": {
          "id": "220e08ca-f986-4149-8cab-a5547aba3cab",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "feccaa26-7519-480b-a4c0-8089c97f30b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fb62189-e6b6-45e8-8fae-44b141206c3c",
        "cursor": {
          "ref": "cb467afb-d059-4029-83a1-8cb036109d24",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "0f26d62b-8d2a-4514-b7b3-02f06a3ea312"
        },
        "item": {
          "id": "5fb62189-e6b6-45e8-8fae-44b141206c3c",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3f6fd51a-e4aa-47f6-8d37-a9f2d62721d3",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "67decd36-fc14-4d7b-95f5-a9067f6c8b08",
        "cursor": {
          "ref": "c608824b-9e38-45f1-880b-ae1d89836b03",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d3d0fccf-7072-4426-883c-3dab9e849c1b"
        },
        "item": {
          "id": "67decd36-fc14-4d7b-95f5-a9067f6c8b08",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "e7626964-7b42-4eec-845b-c3e173a8c3b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd46f159-7498-410a-ad31-ef1ab9ca6797",
        "cursor": {
          "ref": "57a7dc4d-3d22-4a2b-8561-618404e3cb64",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "df63acf2-0562-400f-a304-35a8002ddbd5"
        },
        "item": {
          "id": "cd46f159-7498-410a-ad31-ef1ab9ca6797",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ee8fd255-5f7a-4c4b-b89b-8e674e6a9ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72bfa4eb-6047-4e7e-80d8-5be164e41080",
        "cursor": {
          "ref": "b18b2af8-aff4-4e52-8df7-eea9585962e3",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "ccd49a07-f334-4586-8cfa-d7ed742bd5f8"
        },
        "item": {
          "id": "72bfa4eb-6047-4e7e-80d8-5be164e41080",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "480e9b89-c3f6-4dfe-b016-ba4f32af237d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9096f3c3-40f4-4e1a-bc21-81e0a8cd4fa0",
        "cursor": {
          "ref": "69e4f2d8-35c0-41b8-947c-eb31c812d4e0",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "4dd7d451-2d13-4b24-81af-aa7d43bf9f71"
        },
        "item": {
          "id": "9096f3c3-40f4-4e1a-bc21-81e0a8cd4fa0",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "14ac96cf-feb4-4b4a-975f-29c9be0f2085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a29641a3-4e39-4c5e-a401-77f2e83d637c",
        "cursor": {
          "ref": "ac418e64-ca70-4a40-9beb-691faf10da03",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "580a4a55-915d-4a7e-a3ef-8c63a3b2492f"
        },
        "item": {
          "id": "a29641a3-4e39-4c5e-a401-77f2e83d637c",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "c6f2b639-bdec-4193-ad04-3120536c479f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06f51c10-a6eb-4a3a-94c9-66d88ab96c95",
        "cursor": {
          "ref": "be375031-a5df-4f7b-9497-3b2caa115557",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "7ab0bed7-c20f-47ae-9923-1b47fb06e93e"
        },
        "item": {
          "id": "06f51c10-a6eb-4a3a-94c9-66d88ab96c95",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "7f92d2bc-f0d9-45b1-bf82-fc2c37c9ec13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2950c7b-31d5-41ba-8cc4-2ee743a0bb03",
        "cursor": {
          "ref": "83cc0b28-3e96-4c22-a5cb-21e0e05ec239",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "3dfc462e-49e9-4e68-b465-ef5ee794ae1c"
        },
        "item": {
          "id": "b2950c7b-31d5-41ba-8cc4-2ee743a0bb03",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2509d693-a5fe-4445-a595-c5c5a96f7df1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67f8abb1-0d21-4574-b04b-40028ea5fae7",
        "cursor": {
          "ref": "23bd871a-e388-4b20-94f6-924bbbea66f6",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "31f6a971-11f9-436a-9ff2-f4c9e4eda8ba"
        },
        "item": {
          "id": "67f8abb1-0d21-4574-b04b-40028ea5fae7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "5337cd6f-7436-4a00-9ba3-d88818af1610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e6b06b-8122-4dda-891f-b1e0f1e46558",
        "cursor": {
          "ref": "b1c0937c-25b1-4629-9b89-acb16bb1c588",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "7ec38e91-773a-4dbe-a68a-78f2af142e74"
        },
        "item": {
          "id": "03e6b06b-8122-4dda-891f-b1e0f1e46558",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "ff663d02-39f0-40c3-a4c1-85080853bc4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf566507-1e40-44ba-a868-72f07b83958f",
        "cursor": {
          "ref": "6d91b6a2-90b2-49e5-892d-07996684fb69",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "7795d693-7694-4ab5-af84-e914b69a237d"
        },
        "item": {
          "id": "bf566507-1e40-44ba-a868-72f07b83958f",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ccc31ca3-4d6c-4557-9d56-d19cd24e6f3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef707b6d-8717-429e-96d3-893ba1d6a985",
        "cursor": {
          "ref": "ecc1a8ed-e2f5-4945-9698-13596ba460f8",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "7eb7391b-3fe5-4686-bea5-ec40aec351de"
        },
        "item": {
          "id": "ef707b6d-8717-429e-96d3-893ba1d6a985",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "7814cc6a-01de-4959-aef7-9df25eb3e8b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d68515d-dccb-4c51-a8b1-c4e983c35cd7",
        "cursor": {
          "ref": "5750ece6-0233-4fb5-9c05-c3c019893b12",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "6bbb38f5-f47e-4358-980a-a06903d5d888"
        },
        "item": {
          "id": "9d68515d-dccb-4c51-a8b1-c4e983c35cd7",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "86490e2c-2ea8-46f5-af38-bec35998b738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "966df45a-7f51-4264-b4d6-02d82776f54d",
        "cursor": {
          "ref": "d997a0e4-30de-45a8-9c2a-1f0bc1b7becd",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4a728c2f-42ea-447e-8adc-b0e56c1699da"
        },
        "item": {
          "id": "966df45a-7f51-4264-b4d6-02d82776f54d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "0ddfbb60-95aa-44c8-93b4-a93487df2af0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25592c25-01ed-44af-abe9-da1e1c1eb50e",
        "cursor": {
          "ref": "34c7ec49-c7d7-42d0-afb8-77f767966921",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "13447fc1-5606-49fe-ae8c-8e7cb2fed282"
        },
        "item": {
          "id": "25592c25-01ed-44af-abe9-da1e1c1eb50e",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "d465cb1d-1b42-435f-9355-a20489dab3d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7297dcf1-eabb-4cbf-805f-996bab8e9002",
        "cursor": {
          "ref": "694fa404-f6ed-492a-9f77-27877e94b0f7",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "51d859a6-29da-4389-819f-cb3e4ca9be16"
        },
        "item": {
          "id": "7297dcf1-eabb-4cbf-805f-996bab8e9002",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f7ceaefb-21ea-48b1-8aff-be5440832764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d52e0040-7e21-4a61-99c4-5781c5f0b870",
        "cursor": {
          "ref": "97951dfb-5054-4d72-9901-ac0ce6bdbbfc",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "befa145e-5c1a-43b8-92b0-43917aff85f4"
        },
        "item": {
          "id": "d52e0040-7e21-4a61-99c4-5781c5f0b870",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "68bce62a-66d1-4f3b-96f2-35eda9cb7eb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2469414c-de52-4d9e-ab6c-c4b2f616ba3c",
        "cursor": {
          "ref": "838e45c3-ca7e-45ac-8d42-acb4a6adef05",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "14391f21-4b76-4a6f-be15-6e478406c360"
        },
        "item": {
          "id": "2469414c-de52-4d9e-ab6c-c4b2f616ba3c",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "4cecf349-1c93-4282-af31-45bcbb6106eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2af7ba24-d7eb-4403-9053-5d5d23c1d819",
        "cursor": {
          "ref": "d8125b3a-5437-412c-ae13-63c61090facc",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "1d819482-7074-4d33-85f2-8679e856853b"
        },
        "item": {
          "id": "2af7ba24-d7eb-4403-9053-5d5d23c1d819",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "b806f82d-97f1-4e60-ade5-2664cb7277b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5760f30-9c40-42df-bded-fd7131d12cbf",
        "cursor": {
          "ref": "35c61d50-b461-46ed-9042-9a17de7027fd",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "2719a6ac-725d-4b9b-9a62-fa2e9bbb907d"
        },
        "item": {
          "id": "b5760f30-9c40-42df-bded-fd7131d12cbf",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e78ba845-d51f-42dd-a975-a0356058461c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3037278c-9d4c-41cd-9e11-27e71cfad799",
        "cursor": {
          "ref": "509c5454-eb87-44fb-a542-8e180365cda1",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2617898d-e075-496e-bf0e-4ce338b59a98"
        },
        "item": {
          "id": "3037278c-9d4c-41cd-9e11-27e71cfad799",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "4b760358-3cb8-4267-9dd4-ba818b708829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99557536-87a6-44a0-be95-4129b84ea310",
        "cursor": {
          "ref": "285c9106-02de-49b0-b0d5-c29434b4c54c",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "a3a192e5-dd7c-481a-8fb6-b2987c2053b6"
        },
        "item": {
          "id": "99557536-87a6-44a0-be95-4129b84ea310",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "b1a8aed8-a8c2-4176-8090-ecc0686f4da1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c06ca52b-265d-4d0c-a017-3d41940e6921",
        "cursor": {
          "ref": "3b10d11b-9d74-48d4-b82a-c547008382ed",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "bdb4564c-11df-4e46-819a-c9535901b1ec"
        },
        "item": {
          "id": "c06ca52b-265d-4d0c-a017-3d41940e6921",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "773cd57f-95b1-4f55-9b4f-62d340b9d6bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6104fbe-8f7a-4a22-ab6c-129344df415d",
        "cursor": {
          "ref": "757e0784-5d3d-4eac-9196-80c94fd428aa",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "ab13fe14-b376-4982-a366-6e373146d775"
        },
        "item": {
          "id": "a6104fbe-8f7a-4a22-ab6c-129344df415d",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "77641d8b-8e66-4aab-8e34-346511e0f645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f4fb79d-5d96-489b-b96b-d55eb9ac2a85",
        "cursor": {
          "ref": "ee571c63-5980-4d7b-8e9c-95dda3aaa396",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f1c8cdba-923f-4790-b418-b6ef791269c9"
        },
        "item": {
          "id": "6f4fb79d-5d96-489b-b96b-d55eb9ac2a85",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "678b7dd1-0c86-415b-a164-30a8c2569dce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6c01ed4-a3bf-4ff4-9ef4-3a6b9e913d77",
        "cursor": {
          "ref": "2cd6a4da-1843-42c1-aaa4-9ee9ce1658ec",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "2399d74f-2398-4e89-aca2-5a7e17860081"
        },
        "item": {
          "id": "d6c01ed4-a3bf-4ff4-9ef4-3a6b9e913d77",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "ea09537f-a5d1-4978-be9f-84ad1831db36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a760861-9324-421b-973e-798ae35ae3e0",
        "cursor": {
          "ref": "7eb91eb0-c38e-4678-acc1-32180e8b497c",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "04d99dc8-fd58-4ccd-9ed6-c6b3e924c6ab"
        },
        "item": {
          "id": "3a760861-9324-421b-973e-798ae35ae3e0",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c8c9dae3-1387-4651-8b0a-54f2ed1afcaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68ebd664-4b5c-4381-aa42-4f3963169912",
        "cursor": {
          "ref": "520de5cd-4e5b-452e-a403-b579d6d40e76",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "83f70431-0029-4875-b0af-b7466bd35f67"
        },
        "item": {
          "id": "68ebd664-4b5c-4381-aa42-4f3963169912",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "eb26fabe-bad4-453f-96e6-22bff3a0d7db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40c95cc2-b4a9-4350-a595-754ab6f32910",
        "cursor": {
          "ref": "6a1e6e09-895d-4e10-9797-795f0b688d63",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "cd4eb5c0-579f-405c-a643-af01caf8fc83"
        },
        "item": {
          "id": "40c95cc2-b4a9-4350-a595-754ab6f32910",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "ab7b67ec-04db-4c0d-af20-10b877a61603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fe9a0f3-a128-4d6e-b8d3-1b3ee0eab3fe",
        "cursor": {
          "ref": "f7d6a815-4265-401b-a6f0-26cc46361d7d",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "6df8a79b-b831-4eee-bb1e-9b447c82b747"
        },
        "item": {
          "id": "7fe9a0f3-a128-4d6e-b8d3-1b3ee0eab3fe",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "fe39cd6e-c393-488b-a4ef-a5ca5ba703cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1726124f-f645-4217-a10a-a1a5bc110a7d",
        "cursor": {
          "ref": "566d9056-3e28-467c-949c-56419a1a8108",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b3dc8354-b5e9-4640-ab1f-9fedb66c49ef"
        },
        "item": {
          "id": "1726124f-f645-4217-a10a-a1a5bc110a7d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "55eeed1d-56a1-4255-a8ab-9cd8dc04875a",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "ee5210a2-3f22-46fe-9ba5-bb6cec2dd355",
        "cursor": {
          "ref": "7eaf0f1b-bada-46b1-a672-c4bb6bdad2a8",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "bd27b818-9de2-48dc-bcd8-8721c4907220"
        },
        "item": {
          "id": "ee5210a2-3f22-46fe-9ba5-bb6cec2dd355",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "6f9f2f44-9c97-496a-87a8-e2bd9e66a801",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "0a272250-f206-4257-9ca0-35eb06860d03",
        "cursor": {
          "ref": "64849edd-4fa1-4519-8a35-4fd4c67ab84e",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "eed6d21d-f991-4741-b020-23bcaa81019f"
        },
        "item": {
          "id": "0a272250-f206-4257-9ca0-35eb06860d03",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "24d774ba-9e47-434c-919c-715c8a888cec",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "6b540825-0138-4538-924a-b8446f01338e",
        "cursor": {
          "ref": "bb3634dc-625f-4f34-b271-6f65cd4b531e",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "2f09aa36-ae99-44b4-9d46-9bf9e47ae4d2"
        },
        "item": {
          "id": "6b540825-0138-4538-924a-b8446f01338e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a4053c37-b129-48b5-ac5d-a3728dc1ab47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5235873-a0b6-44fd-aaab-38b064631cc7",
        "cursor": {
          "ref": "0f155fe0-7829-49bc-a9d6-2f0065a09ed7",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d21b9e95-16cb-4e85-8a75-28322fbe2b17"
        },
        "item": {
          "id": "e5235873-a0b6-44fd-aaab-38b064631cc7",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "2e8dedb1-46e4-4178-ac6a-8bdba2dfc3c3",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "8062d368-e7ce-4724-adf1-73ecca801c38",
        "cursor": {
          "ref": "52ec7aad-dd28-4191-a865-6b68551632b4",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "4dbab356-a88c-499f-8161-c8cb3edb2ebd"
        },
        "item": {
          "id": "8062d368-e7ce-4724-adf1-73ecca801c38",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "02bf6413-b1e7-4222-a319-5c7bcb9f840b",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "9dbf6f9d-b93c-44bd-a879-492dd7ede3ad",
        "cursor": {
          "ref": "5bdacbee-e286-4e60-a33d-961e451ac4b1",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "15b157d4-916b-403d-af5f-29ee5a92872e"
        },
        "item": {
          "id": "9dbf6f9d-b93c-44bd-a879-492dd7ede3ad",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "30a939e5-ca63-4ea6-b891-f8ad03932a48",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "eba6e0e4-0705-4f62-99c0-702b5068438c",
        "cursor": {
          "ref": "70a36392-8b1b-4e74-8fde-8eb4a1dd201f",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "dd54e6eb-d6ed-457b-9b55-1ffd4449cf99"
        },
        "item": {
          "id": "eba6e0e4-0705-4f62-99c0-702b5068438c",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "1f8aa9b8-8cd0-4840-93c2-faa31c4722f5",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "ee6943ce-8c0d-4f37-83d1-46d62f79ac13",
        "cursor": {
          "ref": "eb6b85ce-f34c-4460-a995-992b4a07c628",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b00975cd-79a5-4de7-b3fa-64362ab28ddd"
        },
        "item": {
          "id": "ee6943ce-8c0d-4f37-83d1-46d62f79ac13",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "721b84b0-c829-46b3-97ab-b95e190d8f93",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "2927468d-2705-4353-a0ae-3d4249d5541c",
        "cursor": {
          "ref": "4c2b7862-841b-42ec-9f0a-7c0c1ef5c9b6",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "d5a306f6-9d7d-4a01-b418-e2a7950091a0"
        },
        "item": {
          "id": "2927468d-2705-4353-a0ae-3d4249d5541c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "859b3bf0-6d1d-48d9-83a8-a422dc5f2092",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "f49d9c0f-1077-4022-93c6-bdc5bb0ad9c8",
        "cursor": {
          "ref": "b0169325-8375-4ec5-8e37-f0c00974002f",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "802038f7-13d8-4882-b3c3-932bab0809dd"
        },
        "item": {
          "id": "f49d9c0f-1077-4022-93c6-bdc5bb0ad9c8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "90565a3b-ea9e-460f-8be0-151c8e214653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05cd8af1-dbec-4bdf-9c37-2a449e34e9ff",
        "cursor": {
          "ref": "511beaa2-82f4-4d42-b8b4-fbd3a842e546",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "9c633d80-08be-42c7-89b6-ef62698d95cf"
        },
        "item": {
          "id": "05cd8af1-dbec-4bdf-9c37-2a449e34e9ff",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "10be4156-cd60-4aa5-9bef-f298bb1830f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5be794-2296-4dec-835c-5746a81c29be",
        "cursor": {
          "ref": "bbabcac4-0b59-4ffb-8463-edf44d0a22b8",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "edafc1fe-6a01-413e-bc87-68e35f4f0cbc"
        },
        "item": {
          "id": "eb5be794-2296-4dec-835c-5746a81c29be",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "085084aa-475c-4e65-8ac5-c734d01970f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a73ecac-b60a-4218-bbbd-b423988520cc",
        "cursor": {
          "ref": "950d98c3-acc2-4974-8671-3d07d1698b11",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "920d6fcc-5227-466f-b7ff-9e23aea1809f"
        },
        "item": {
          "id": "2a73ecac-b60a-4218-bbbd-b423988520cc",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "64fbcafb-5ab5-4899-bd8c-c776f5486149",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a39f0c6-06fa-4143-8d39-a24a703a6533",
        "cursor": {
          "ref": "7f1fdd3f-35ef-4b54-a4d9-d8472e8f51a3",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f9404700-0a28-48de-acad-700d6578e29f"
        },
        "item": {
          "id": "5a39f0c6-06fa-4143-8d39-a24a703a6533",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "af9afb1b-29b9-41b0-bb06-e4038d3f5eab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65fc115f-5d9c-4714-b012-f67f713161d3",
        "cursor": {
          "ref": "e665bafe-bdc3-488e-8cb5-70fb39a3f77d",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "65f52ece-75a9-431b-af51-cfa2112d215e"
        },
        "item": {
          "id": "65fc115f-5d9c-4714-b012-f67f713161d3",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "9894d126-6c69-427c-a0e2-627c45add208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da60bfdd-13b4-4394-a07a-07737e52e073",
        "cursor": {
          "ref": "7f0643ec-299b-494d-a5f8-d8e611183bcb",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "8e486bf5-0ac4-498a-b009-db1377b2465e"
        },
        "item": {
          "id": "da60bfdd-13b4-4394-a07a-07737e52e073",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ac060afc-c229-419d-9e07-d349760db466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e9c9ed-e7a4-4a96-b6b8-e4d6ae675e35",
        "cursor": {
          "ref": "8441f7ba-73f1-4060-a119-832c9d646d6c",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "0580510e-d616-4270-85ca-a12a5f242e6c"
        },
        "item": {
          "id": "f2e9c9ed-e7a4-4a96-b6b8-e4d6ae675e35",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "5fac2187-e03a-4f2f-b12b-ab53a534b99b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a6c6709-3c58-4639-8779-14b8baa8eabe",
        "cursor": {
          "ref": "406437fe-1389-4308-be57-7a8abcb8445a",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "00049f09-e3a7-4635-a885-cf64a0f4cce1"
        },
        "item": {
          "id": "9a6c6709-3c58-4639-8779-14b8baa8eabe",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "8191cb20-1c49-478e-bd4d-eaaf0bf4213d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aada290-fd33-41ec-880d-886d76fffc95",
        "cursor": {
          "ref": "0751c968-5b5e-461a-a987-4e8757a9d312",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "667af39a-200b-41cc-ba08-df00d3f64de4"
        },
        "item": {
          "id": "3aada290-fd33-41ec-880d-886d76fffc95",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "295e7351-3fb6-4bf5-b4bf-6d0835899b50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4de81bcd-7775-4e82-aec8-e5b02ff9e786",
        "cursor": {
          "ref": "b18a1493-8669-4785-b394-f9e95d14a64a",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "5df7e671-57b3-46b2-a68e-e9c78e96386d"
        },
        "item": {
          "id": "4de81bcd-7775-4e82-aec8-e5b02ff9e786",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c74a1641-d676-4086-bfea-504c9c30df03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab729d67-de01-4332-8645-a926b92ab83c",
        "cursor": {
          "ref": "6c1436ed-7ea7-4535-9046-d43f2d75804d",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d905d8ee-24be-463f-857f-801dfe17c6d6"
        },
        "item": {
          "id": "ab729d67-de01-4332-8645-a926b92ab83c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "6dde26e3-957f-4574-9b93-fe3dbd1825a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c7048d2-b1b7-4211-8349-301be13d907b",
        "cursor": {
          "ref": "9f5752aa-a950-49cb-a00e-f94a44ad51d0",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "beb4c0db-6085-48d2-9cce-f1507a4f2bf8"
        },
        "item": {
          "id": "6c7048d2-b1b7-4211-8349-301be13d907b",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ecffeb43-7dc0-47b5-997d-7d3aaa35e33b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a91f9214-f060-4f58-b7fc-0aeb8289f721",
        "cursor": {
          "ref": "e0912ac2-eb76-4ddb-b341-4a5a7f5084eb",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "f59990ea-c2ae-4eef-a0df-a5d3cc13132c"
        },
        "item": {
          "id": "a91f9214-f060-4f58-b7fc-0aeb8289f721",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "8cf16011-da95-4ceb-bbb9-5f42264387c0",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "188c727c-68e1-40bf-8fd1-7796ca395c4f",
        "cursor": {
          "ref": "bfad31a4-767e-43dd-887c-76043b8c2e62",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "90e3cd1d-69b1-4a75-b24d-1b7a7e30f157"
        },
        "item": {
          "id": "188c727c-68e1-40bf-8fd1-7796ca395c4f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "fd3d32ef-ea3d-4d65-a574-5ecfde4c3d50",
          "status": "OK",
          "code": 200,
          "responseTime": 105,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "91c3ae85-720a-4b4d-ab84-f3ec8482dd99",
        "cursor": {
          "ref": "48fd3ef8-2b5a-455b-a6cf-0b93aadb481f",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f8615e15-a20c-4e93-b22a-b1cb77e7f393"
        },
        "item": {
          "id": "91c3ae85-720a-4b4d-ab84-f3ec8482dd99",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "737ceef9-aa29-4a89-9586-b02ed8b10525",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "d97aa677-cecf-4a1e-b0aa-86ebbce133d0",
        "cursor": {
          "ref": "a094c1bb-f5cd-4dba-b1d7-621ce89aaf61",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "f2d754e5-f45e-4539-993f-8f2b76d00d2a"
        },
        "item": {
          "id": "d97aa677-cecf-4a1e-b0aa-86ebbce133d0",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3de826e6-5a3b-4bd9-a675-4cdf8853ecab",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "1f45e2c6-c540-41b2-8fe1-e568008712e2",
        "cursor": {
          "ref": "e51acb05-c52d-4033-9fa7-58e8b29454ab",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "461bbd85-d98a-482f-8710-cfda951162ee"
        },
        "item": {
          "id": "1f45e2c6-c540-41b2-8fe1-e568008712e2",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "89c75748-7c1f-4071-bbe0-134d419fd2c5",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "5bb4cb0d-e9fb-439a-9851-e280b3244303",
        "cursor": {
          "ref": "9a6fc945-7c36-4f2b-9665-75b76fec4113",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "63addfa9-3c51-4909-9ea9-32c571a44757"
        },
        "item": {
          "id": "5bb4cb0d-e9fb-439a-9851-e280b3244303",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "df9e2e15-f5f3-4fee-8e7e-8a48a6454271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0748024d-e16a-46ab-a3cd-955f25d57724",
        "cursor": {
          "ref": "1dc59021-88d4-49e1-a160-812bdede3b43",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "ebe82393-9d6e-4f70-be63-101671f1dd8b"
        },
        "item": {
          "id": "0748024d-e16a-46ab-a3cd-955f25d57724",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0708592b-8856-4913-b6a3-1ba8cea8aea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4325819b-913a-458a-865f-e195bcbde374",
        "cursor": {
          "ref": "cd128ddf-ca42-46ef-b91e-3275687eb085",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "39c73a02-af54-4e2e-9db9-f8108f5dd5fc"
        },
        "item": {
          "id": "4325819b-913a-458a-865f-e195bcbde374",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1c5d4129-60a8-4344-b6da-fd3de53cb7ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a093ed6-6c20-49b1-907c-d87e2794c7e8",
        "cursor": {
          "ref": "6995f697-ad05-4f84-b850-0196a7b75111",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8ed47e36-b90b-4c48-813b-18675a106226"
        },
        "item": {
          "id": "8a093ed6-6c20-49b1-907c-d87e2794c7e8",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e57feead-000f-445a-ac72-6b40766d5947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d09b05f-00e7-4c39-983a-cf53c92c09de",
        "cursor": {
          "ref": "fb0c4cd3-9b0d-4465-8001-3f1ef249eeef",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "21b511dd-711c-4513-aa9f-b1ec1f6d703e"
        },
        "item": {
          "id": "9d09b05f-00e7-4c39-983a-cf53c92c09de",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "aaf65185-0613-4511-8879-d6d4e8114088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f79de9ef-531f-4f82-a57c-1e74235532d1",
        "cursor": {
          "ref": "7931898c-7fc6-4dc1-92f3-457feef53664",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "7a479ace-1561-4bf6-be43-3153fe8e4f44"
        },
        "item": {
          "id": "f79de9ef-531f-4f82-a57c-1e74235532d1",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "8791f787-25cd-4cba-a740-160a87f30512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fb0da3f-8a6d-4aa5-9575-88848313e70b",
        "cursor": {
          "ref": "92ad7a65-3c8e-4180-8480-046ab008ef63",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e013e656-8e12-41a3-be9f-9ed459a85558"
        },
        "item": {
          "id": "6fb0da3f-8a6d-4aa5-9575-88848313e70b",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "13ed3471-a5ab-42a9-8ce3-1b646061c90b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3def5d7-aefd-4db7-b518-38d55d2750e0",
        "cursor": {
          "ref": "2f871f2e-d09a-4acf-ad1b-744c86a4d0fa",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6ca170d0-3455-42bd-975d-0c436312191d"
        },
        "item": {
          "id": "c3def5d7-aefd-4db7-b518-38d55d2750e0",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "7b6dadb7-3789-4025-8c7c-9ae52f72044f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "452e0963-2a02-4630-ba0d-4e41f52c14a5",
        "cursor": {
          "ref": "f210dd75-7b83-4076-b3b0-88fc29fb5ac6",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "df862cfe-fd0b-4a87-9925-e2e626f460f5"
        },
        "item": {
          "id": "452e0963-2a02-4630-ba0d-4e41f52c14a5",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "05a5cbd2-0aa1-4ecd-b225-7e5e55aa8459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "189d71e0-5de8-4dbd-90ff-f4a823db7661",
        "cursor": {
          "ref": "6e6f54a0-bb66-4a99-a172-bc6580b13b83",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "8cb31bb5-bc5f-4847-8ac5-d5d4e9bdb94d"
        },
        "item": {
          "id": "189d71e0-5de8-4dbd-90ff-f4a823db7661",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "fcad1528-c54a-41d9-816d-640eedbdce7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9381f2c3-af2e-400f-9b9a-6e07260ca146",
        "cursor": {
          "ref": "f1a94c8a-88d0-4c87-9975-04cad18da7ca",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "b365840c-459e-4e35-a893-9f60339aec5b"
        },
        "item": {
          "id": "9381f2c3-af2e-400f-9b9a-6e07260ca146",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ca08cbbf-1f83-4e0d-889c-a07250e860b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfa9395c-b9c4-428e-af0b-00b2ff8cfa5b",
        "cursor": {
          "ref": "b10aeab0-9e07-4370-92f1-698636521474",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "e80cd1ce-7996-48c0-95fe-076752bd0fbb"
        },
        "item": {
          "id": "cfa9395c-b9c4-428e-af0b-00b2ff8cfa5b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "6d466a00-3862-40ad-a933-83bd8edb1e27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59fc3c13-b896-4719-98ca-e81eed01ba60",
        "cursor": {
          "ref": "b1b57468-536d-46d0-a0fe-e13d0147be29",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "d1943009-704f-44c9-97ee-9a5d85549d27"
        },
        "item": {
          "id": "59fc3c13-b896-4719-98ca-e81eed01ba60",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "1a681655-8625-470f-94f9-b221575a7440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b3d686d-70d9-4c91-91d6-56275d59001b",
        "cursor": {
          "ref": "59d2c1f9-2733-4c1b-b0e0-92dc42dfdf98",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "fd53041f-a7a2-4e61-bb35-a48cdaa4fd73"
        },
        "item": {
          "id": "8b3d686d-70d9-4c91-91d6-56275d59001b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "0579efd1-70f0-4fd9-a3e2-e268131efa32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ce0024d-1a95-4cde-bb23-0e5c2f93286e",
        "cursor": {
          "ref": "a9cf6436-1e6c-4900-a505-fd0a57a551e9",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "b3206946-08f7-49f1-8d39-8e0343e768f9"
        },
        "item": {
          "id": "1ce0024d-1a95-4cde-bb23-0e5c2f93286e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "0c64718b-6cb3-4c3b-af1d-4889b838136a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b773dae0-1647-4c97-afe3-f5be4db711ef",
        "cursor": {
          "ref": "4d32e3de-f615-4c90-a5f5-c21d3cc425d9",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "8a1c7a7b-e684-4330-896c-a606fb43aaff"
        },
        "item": {
          "id": "b773dae0-1647-4c97-afe3-f5be4db711ef",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "ff43d8eb-d02a-44ee-863e-d39d9dc4ecfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2763bafa-5b6e-45f3-a0e2-00b83c82d684",
        "cursor": {
          "ref": "6708813b-37a9-4fc8-847e-f2892bae5b96",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "6aa959ef-106b-4966-b8b8-e77b6798cc56"
        },
        "item": {
          "id": "2763bafa-5b6e-45f3-a0e2-00b83c82d684",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7210a8b0-3eb2-448c-959c-5c7d3e1250f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6348ab0-6875-449b-8d29-9361fc6ce4dd",
        "cursor": {
          "ref": "becc2d6f-d1bd-41e5-9b7d-4e86e44c49a4",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "565009f1-e085-40cd-9570-bb2187bf2571"
        },
        "item": {
          "id": "b6348ab0-6875-449b-8d29-9361fc6ce4dd",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c6b78845-250d-4ff3-9719-fb30c0e08f69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dc42a98-187c-4ac4-a3c0-335d2cc8f302",
        "cursor": {
          "ref": "fa6eaf4c-091e-46df-82aa-2dfad8c7a990",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "498ffe2a-b7cc-4c2c-8941-1b788fe84b73"
        },
        "item": {
          "id": "7dc42a98-187c-4ac4-a3c0-335d2cc8f302",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "32f380bb-3d47-4e1e-85df-93965af7c202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db7e8af5-ed56-475d-a4db-ffd7ee64aeb9",
        "cursor": {
          "ref": "70f5dc54-604d-4594-b681-fceea9f51586",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "9bdc8a16-1421-4cf1-a2b0-85ba088755a1"
        },
        "item": {
          "id": "db7e8af5-ed56-475d-a4db-ffd7ee64aeb9",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "42a119c8-2042-4f86-abb7-7519dbacf682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "340a97cf-87ce-4f06-a0e7-45e740006865",
        "cursor": {
          "ref": "1466087d-9801-4cec-ac7e-47050ba58b17",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "d81bc38e-12f2-4b5d-8d92-fb6a7aa9ffaf"
        },
        "item": {
          "id": "340a97cf-87ce-4f06-a0e7-45e740006865",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "4ae0ed73-b33e-412a-ac4a-9e3afb7c522b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "104a6f73-64ba-4f0a-bfe0-9cb9abde01d9",
        "cursor": {
          "ref": "877f3a6a-c760-4d11-9602-4e4a4f7ef135",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "e6ca81b1-263a-4492-a4c7-1ac872eb2f6c"
        },
        "item": {
          "id": "104a6f73-64ba-4f0a-bfe0-9cb9abde01d9",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "201ca91a-a871-41ca-9007-a9481d320097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47397a2f-8298-4800-86f3-80de5c9692a0",
        "cursor": {
          "ref": "763e5703-d2dc-4726-858e-f4262e2a9a53",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "c6346e81-26b0-47d9-b82c-d4f030fc2525"
        },
        "item": {
          "id": "47397a2f-8298-4800-86f3-80de5c9692a0",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "2c39d3a6-b74f-46a3-9e4e-cebba6e026c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "007da453-9a25-4208-bcb3-ecc625adddd6",
        "cursor": {
          "ref": "4d5c020f-4df8-4f22-8ff1-2a9e339476a8",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "5ea30098-a733-4fa7-8b9f-296451dd3c6b"
        },
        "item": {
          "id": "007da453-9a25-4208-bcb3-ecc625adddd6",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5e0989b4-c4d8-449a-b877-20472f6f3618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ebca0e6-ed54-4856-88e9-b3a3a12d5056",
        "cursor": {
          "ref": "cbd10f48-11b0-4df8-8584-c4e8968d9d52",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "24f7913f-08a8-495b-a46e-663f610f08f5"
        },
        "item": {
          "id": "1ebca0e6-ed54-4856-88e9-b3a3a12d5056",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "4f8626ce-b55e-4e64-b925-ecc553470e32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f209d40b-34a7-475e-9c87-69a966e556c0",
        "cursor": {
          "ref": "d9b894bb-c7c4-41b5-a93c-6b8da232e850",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "47c18446-731c-4d60-a2ff-ad29a1e7607a"
        },
        "item": {
          "id": "f209d40b-34a7-475e-9c87-69a966e556c0",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "09fd5750-d23b-4d4d-91cc-8d5eac37ec71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3de3b9a-e4ca-4090-b250-078db29b9ce0",
        "cursor": {
          "ref": "33ebb34d-f8cb-4fd6-8a26-af221aee731a",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "5d319521-cee3-46b8-a133-d92bb56e802d"
        },
        "item": {
          "id": "c3de3b9a-e4ca-4090-b250-078db29b9ce0",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "614d442e-5872-4064-8474-fd5c3f8ae9af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29effac5-2e81-45e8-8534-3b6dc2345002",
        "cursor": {
          "ref": "911f3171-cdd0-4afe-8a32-5d73108b71e3",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "386d6e10-52a2-4beb-836f-e86391472787"
        },
        "item": {
          "id": "29effac5-2e81-45e8-8534-3b6dc2345002",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9737ee54-2ed3-40f3-ac23-a3e2b48be044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b713c0e-9d53-4ea6-b846-2f6bc883892f",
        "cursor": {
          "ref": "08e75462-f230-4f1a-a467-ce5202acf94a",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "b3aa6f55-c4d2-4f13-857c-e1a68b3e8280"
        },
        "item": {
          "id": "1b713c0e-9d53-4ea6-b846-2f6bc883892f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d8ee7230-3185-434c-89d0-9e85eea7cd00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fd8efee-7560-4bfb-a6e1-2278b8d0da2f",
        "cursor": {
          "ref": "f796437c-372a-49d3-8ce5-e3ea587d1b4e",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "d6fe684d-54ca-47a1-8b28-92fb30cec83c"
        },
        "item": {
          "id": "6fd8efee-7560-4bfb-a6e1-2278b8d0da2f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "3aaf9a2d-5c06-4420-afd7-cd111ba98b23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08dbe468-e086-4a8c-8bdf-1b4f1b7d975a",
        "cursor": {
          "ref": "f334bb7c-c58a-4dfa-ad56-a09718f1bdfa",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "39558f0e-0118-4c81-bb7e-de45bf89c76f"
        },
        "item": {
          "id": "08dbe468-e086-4a8c-8bdf-1b4f1b7d975a",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "1897fd4a-0d51-4bbe-ac99-a7e315f2f94a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ffc9e32-ff29-4791-8881-06477fd04b7b",
        "cursor": {
          "ref": "9676b136-106c-45dd-adf7-219f5d30ae29",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "b9abe566-4c37-467a-8de7-7de868781e11"
        },
        "item": {
          "id": "4ffc9e32-ff29-4791-8881-06477fd04b7b",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ee77df5a-8d65-45ff-946e-dea36df8a6df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5068fce2-680e-4adc-8780-895fad924827",
        "cursor": {
          "ref": "8c709172-164e-4d00-9116-93ef277b86f7",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "95c1bff3-d52c-4508-86c0-699f51fe8f0b"
        },
        "item": {
          "id": "5068fce2-680e-4adc-8780-895fad924827",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "20261d88-fe7e-42bb-a233-251b44656c9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "844b3d78-3022-4f88-b2b8-a94d44c98a27",
        "cursor": {
          "ref": "01596f14-cdeb-44dd-b9cf-61667f17afe0",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "81f5b7a8-be4f-4683-b5ac-d0e375aa914c"
        },
        "item": {
          "id": "844b3d78-3022-4f88-b2b8-a94d44c98a27",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7bc5132c-fcb8-4532-8832-b2ff7cb12b34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80e62f4e-d312-4180-aa19-4c3e80f6050b",
        "cursor": {
          "ref": "d32b5020-1d1b-4132-9b1c-1918793f2c0d",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "92e9ea91-c21f-4d13-a978-b313a0aba0e9"
        },
        "item": {
          "id": "80e62f4e-d312-4180-aa19-4c3e80f6050b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "38911066-b271-4695-a289-57bf3f11df1b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03df297c-44ca-49ca-949a-e2779ac3be5b",
        "cursor": {
          "ref": "c51d8056-656d-46ac-90a7-bd6b6f28b427",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "1ee148f5-3f69-4969-acc2-07d54dafabdf"
        },
        "item": {
          "id": "03df297c-44ca-49ca-949a-e2779ac3be5b",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "64d342fd-a7f9-4865-a145-7f660434da7a",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "f6691899-3712-4356-adea-7d248add2b22",
        "cursor": {
          "ref": "49741878-5f7a-48b7-9fac-8ef0fa82c38a",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "8813e11a-faf3-4a5f-9bfc-94a405a77cc7"
        },
        "item": {
          "id": "f6691899-3712-4356-adea-7d248add2b22",
          "name": "credentials_verify"
        },
        "response": {
          "id": "00c8e688-40ff-44af-9458-42fabe6bba81",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb962fda-300f-4b38-9151-119794fcd768",
        "cursor": {
          "ref": "1d505f40-ea7f-4d3b-8518-d4d2d2c7a39c",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "2ce4db17-7782-4ad5-a459-494d9ee4ba31"
        },
        "item": {
          "id": "eb962fda-300f-4b38-9151-119794fcd768",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "b3b405f5-b61c-46f8-b62e-55f98849bb06",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "815a56fa-4473-4d01-9954-4fb0ec0853be",
        "cursor": {
          "ref": "da2bf3a0-1705-439d-8843-d5f94103c3d7",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "da7345ee-7909-44c2-affd-6db676b222ce"
        },
        "item": {
          "id": "815a56fa-4473-4d01-9954-4fb0ec0853be",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "75833678-ce22-46b9-9392-73846a9be778",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "815a56fa-4473-4d01-9954-4fb0ec0853be",
        "cursor": {
          "ref": "da2bf3a0-1705-439d-8843-d5f94103c3d7",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "da7345ee-7909-44c2-affd-6db676b222ce"
        },
        "item": {
          "id": "815a56fa-4473-4d01-9954-4fb0ec0853be",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "75833678-ce22-46b9-9392-73846a9be778",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51173ed5-8d50-45ab-9222-0ceef8c6b6b4",
        "cursor": {
          "ref": "ae6b9f09-545e-489c-9d8b-97d4ba0d9a2c",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "3ecfcf7f-18a1-4c34-9eff-a13831940c11"
        },
        "item": {
          "id": "51173ed5-8d50-45ab-9222-0ceef8c6b6b4",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ee430feb-089c-4872-a9b7-4b8d816c97ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "964f8189-9421-4580-8065-37ef828168f0",
        "cursor": {
          "ref": "bd99e239-a2a7-4d69-b4ca-aef0a2940831",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "c0ed8eaa-b29a-46a0-a5d8-f7b0e391b757"
        },
        "item": {
          "id": "964f8189-9421-4580-8065-37ef828168f0",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "5c5dd72a-65d2-4208-8e22-8b5b40d06082",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}