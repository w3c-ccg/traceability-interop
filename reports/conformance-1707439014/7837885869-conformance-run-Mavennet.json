{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "65892616-80a5-4375-b60c-e0ffdb473636",
        "name": "Clear Cache",
        "item": [
          {
            "id": "d87f2be6-6def-4d66-aa9d-d7c2f5f5d4ce",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3541d972-78d8-4b97-bb52-8a117f11a511",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "969d276b-5881-433e-8089-498f31e9dc16"
                }
              }
            ]
          },
          {
            "id": "1a34af02-75fa-4f73-8aca-8e8bc4b07883",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "78dec1b0-0d4f-4be5-810d-15030b3f6823",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ab3f16f9-094b-4aaf-94ec-50d4109e65dd"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1c7eca20-5ef9-4ad4-b0ef-e52abecd48be",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "52fd95d0-9678-42f1-b0b9-d856b833c360",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5c058039-eedd-4f76-959c-8159bf1e019b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ff54860e-b657-4307-a00c-ef7ca77754b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4762045c-9ba8-4138-bb55-907751ec6743"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "56290b1e-0115-434a-9be0-03ffd77443c3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5f66d790-a9b2-4f10-8995-4ff72a077f61"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "24577413-224a-4faf-8113-f9a04eb3b4bc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5a1106b8-67a4-41d2-baff-472726c7c0c9"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1638dae8-4f86-42e8-9565-38c134264c23",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "ed35aff8-4071-4c0f-a09c-9d0e77c2c68e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9aff5e29-8121-4359-8e51-184896e7fb65",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "19280f40-0557-4aa0-b163-7375d095048d"
            }
          }
        ]
      },
      {
        "id": "00a76b13-c023-4c1c-ac55-fc5cc477e62f",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "43bffdba-858a-45de-b8d4-9d0fddf6be78",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7d3ca9c7-d780-4531-8ef0-9b528ee9605c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ee048c45-0736-4d56-9010-e278f56f709d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2185595e-ae94-48a5-9ff9-3d51992927ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c16349ca-1fda-409e-bb73-94fb72701a57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3289c59-a0cc-4cef-a5ee-a7f91500dcba",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0af3471-e4a9-4858-b782-d2efeb74a8dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd1e6fa1-8bee-4d7f-8984-563101d38490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96708a32-4a52-4255-aa36-37053a14be2e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1c7780f-19f2-4c62-968c-5992a814cdc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "93132813-576f-4186-bab8-55046afbbee6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5fcf8d06-b35a-4172-8748-dea4fa8fa774",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7cbc355c-a43b-41fa-85aa-39604449f2ca",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b41ac468-62eb-4550-9d05-d32e4f737acb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a2a31096-4106-4ab2-9501-0ae2561ab673"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "712da6fb-8997-47ec-b1f2-fb5dc989ed8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a2b50d7-99b8-4ef5-a03e-0d70d8b2f999"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5cac9017-39c4-4811-860f-938f106acb5d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "635e1577-6f5d-4bcf-93c5-be5de2145259",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b59be4b6-fcda-44cb-9eb4-7656a1209cdb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "36d0591e-b39f-44d0-a899-9236d6603fe5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c3991007-3fd7-4bde-b0b7-9e9750db7d22",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "9c1475db-9a0d-456b-8bfc-02a9c5a05d27"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b609c118-4fe1-40c3-945a-e04c0996e8df",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e876bd29-b601-49f9-8188-d7307d767dc2"
            }
          }
        ]
      },
      {
        "id": "77499607-8fdc-401e-9fb4-278cba2eab87",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "b095d04c-d258-4622-b7be-dafff06b8031",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2ef760b8-3ba8-4660-b176-2e2622675221",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "3a7ec173-3eed-4215-b918-ea5678c0b657",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e0984cb-67b4-4876-986f-332080c7be9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6875565-1a74-42ad-8e25-f768357c5f62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66d4f219-94ae-469d-8dc6-f4a88618f15c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3cd791c0-d7a8-4849-8343-6806249021c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26a2e312-9c66-4be1-a6cf-a52370c84c3d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdd7c20a-6bc9-47d8-9a35-3147be905918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34064c7e-383e-4819-aa3f-4fddff42c175"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7355e67-8512-413d-9d4d-eec562480d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67c74526-6dd6-4693-9700-2db17e701a8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b3f4842-0a63-4cb7-88ef-3f886206dc3d",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98bb75b6-11d3-4ed5-982f-f2a47878bb65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79290af5-e2e2-4468-abf3-e4560cbfe9c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0105be5-763d-42e3-a8f5-21f66e6d0cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6689fc03-ed8a-4602-9a7a-8792fa9b5d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f991f3d4-c399-4cfc-a2f5-81fb810e4fc7",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a46e0a-82eb-48f8-a66f-443d96c6e22d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2465cc4-2f14-4794-8c3a-bb74fec7ad23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f1a3f7-9cc0-4417-bd6c-7dbafac14a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b0b7d5c-3d89-4bec-bceb-0c475dee03a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2603a2cf-b8f9-4751-9a2d-487b55129b9e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7ad9ea4-7ca9-4615-ab9e-bd1046853260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "004e3b38-e1da-49db-81fb-9559cde6a99b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c0d56f-59ff-403f-8f8c-46429aeb3a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73c3cb22-cb0a-4d14-b723-fe37e9fd2d11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f2f79ec-b8a9-4ade-a41c-d9dd0e075b9b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51073d11-f513-4258-84e5-09c47fe6b86f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eff0dc7-9269-4c8f-9a61-50bfbed27c65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "820c75b8-b678-4c8f-9389-91517ccfb6ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "34d9879d-ece0-4927-827b-926d0059ef53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4916d79-aa59-47dc-9086-77e41fcc5557",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a38a80-6ffc-4542-9264-e68833a98e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33cb6032-e84c-4cee-a354-40e87a1bd426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c807e0ae-8710-4ad6-9497-9eca47ff39c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d3eec40-99fd-4339-be5f-1fd85798a2ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c4c464d-d8ba-4d69-8873-b20b3e41e3ec",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c6b011a-eb30-4d48-990a-3d575e83cab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38e45e8e-84f6-4335-af48-c8a85a569e49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e09d8907-3c46-43f8-aced-113fdab89995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0d602608-dc17-4527-8e4f-51fc367dee6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75654913-8d76-4cbf-994d-4140e130e5df",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4a4f8dc-2a1d-4b6c-88a6-56abccdff134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fea96b49-d445-4ba1-9960-26b3aad97e30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4be780b0-75ca-4179-9f74-84e50e779ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f7935b5-05f6-4a6a-b9cb-f3c65caa4548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "152e3e33-7c55-4f78-8239-7506dbb30590",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1efc572-4d4c-4283-9046-7455a3e4eb1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5fabafc-93e8-4463-9867-825d1de6b356"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c64b2832-a638-44e1-9ddb-92b1cd27c897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "234aaa74-8b86-4550-bf43-12f09491756e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdefc241-e0eb-479d-97f5-a1a58443a80f",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96bb9006-2f27-4076-ae68-e7ada1b24182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f751ea86-013d-4097-9d4f-d0641885135c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c3621c2-1ef5-4604-9628-5a84e0aaf9f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b35cd22-b3f9-4f30-b171-fbc540654a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "806e97b6-f8ef-4ede-98c7-9b9e1472d483",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f4d2707-fd8b-4a41-9c4f-31b45d4f46f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41d20bf4-c1e0-462f-beb9-b7a9bfcde85e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3940cc6e-aa62-4f9f-8202-ee92f21b4fda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f5d1d8e-9b37-47dd-b09e-9705f774431f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "957d9dcf-03ba-4cb6-9339-61b25cf4f6a8",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a03dd1-a60f-4417-9a7a-6bf5b131ba5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4498823-cdee-4c60-bb1d-6355820dce3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "170cbc1c-bb27-4d0f-85e1-21000b54e9dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d06f1e07-59a9-4ae0-b64b-f606fc674a95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25120ae8-e5fc-4f30-9d96-59522af5db1a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4322e71-1a58-4006-8cb8-89ebe4ed426a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8ede215-c088-49e9-a16e-c5b4b7c7a8a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e48479d4-ef8a-4124-ab3d-387e9e2d777d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98b14ed2-e5f8-4527-ace7-c0768d5be2e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8f0eb89-6aab-4bf3-9578-6d681235cc40",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1674f919-fcb9-4787-a0ae-87b4dcfa09a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a8dcee3-4cff-4b23-886e-e93605fc6f91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d120b7-faa4-4cd7-9077-a75231af4582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d26f866-4bb7-4b2a-9234-9c2cc44eb6c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a186bd87-9fc4-4af3-a307-cf3c2c72c275",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70e5945d-1b80-457c-8af5-387cae44ac6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ba5d365-81c0-481c-884c-780fc332f01a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "717d1a54-694d-4130-90c1-fdbe598656b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6b30fcbd-3234-4c90-86b1-cee0dc997513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "790c41e1-3c2a-4aab-b695-0534c255c0ec",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06eb093e-c3d5-42e2-9ba5-66510fea172f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d62af957-a234-4f2e-9d5b-e518d8476e6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00951a8b-4744-46b3-9f93-57e7fb4eae3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5a6d5184-bec4-4c2a-a3d7-2090e59988bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29369151-53fc-483e-9497-5a69c7cb8775",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dc8b8ac-c94d-4faa-9b02-f625e8b39686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6783724f-2777-44b2-934f-8449067cc342"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "849ad58d-8fd9-4656-86e7-3b9960923cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8954c0d0-8921-4cf2-ae30-25177b10d1e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08a93e8f-f251-49e6-a938-ae8203d681f4",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d79ca4c-1170-4bab-8861-fc04a51ffac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a312fb56-3c07-4dbc-a361-7abbe209917e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce7e0c2-85a4-442c-9df5-3d0c0a906b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "248cb954-9140-40ef-a9ab-c47e6ccc1b0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f45e147d-5c0a-477e-9674-d5232d7abd78",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a14cfd-6cf0-47ca-a62f-0a846b379949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec81518f-4487-4e14-9417-1fe0e0c11af8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad57ec11-fc40-41af-8b85-06ac592ad3f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "baf40007-9eda-4545-ba9c-bd588f19fd81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7645660e-a16e-459a-bfaf-76801a0b810b",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b50b00-d5fa-4252-9c8d-0f73d729ff70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f442b40b-8cdb-4d51-ab13-87f05059c541"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de76dc18-ce14-4e01-b1c7-b151682fe2a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba46d3f6-a9cd-4d05-98ba-292415904019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3a16885-af67-4a80-b98c-20918fc5a035",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d50ddbc4-349c-4a33-880d-1646f711f309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "550c6bef-d52e-4d71-9ce3-04128a72ba0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b404a0-6e5a-472c-9949-3de4180de191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d57e75ba-0a60-474f-b83f-c5ac6b143bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8010d9d-34c0-485d-82f2-3c2f29fe1d54",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4200a7a-236f-4e8e-b4bf-e113764c8d1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "080d5846-5d8d-4872-a54a-1dab58e424dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8c22b08-5798-4f96-bbd9-a2a7616b8a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2376dd08-20eb-4c1d-a732-576d0625dc5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ffc9318-9988-462b-ae19-bb7af154d65c",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8586cfe-7a95-4b05-8abd-93d565ef66fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a3a8042-b29e-4d05-87c7-ec2ea6196161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03201281-03cd-4126-80c1-e06d5a0497c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c70f95b5-3b1d-4e12-9dcd-63accc4f617a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c01999e0-1fe1-400f-b590-74325dae9975",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "380c1b86-83b5-4241-ac32-cff0a48753b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6d15de0-8a48-4b1d-b82c-15e6a1f8e600"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dcfd75e-2ede-45ee-953c-e8878c7bfd12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "26ccc75d-e260-4eb3-8619-b80050108a50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49d320ae-b3b4-44a8-b92b-accb8831bfe7",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00ef1c92-89ff-4476-b905-650169e57822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80f8edc5-a7b8-4a85-8aef-0e2ebcc0b5a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7872c141-f2ef-4520-be99-8a476b2b7c3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd458ace-aec3-4732-ab3d-fff3af11e4a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc2dfe32-6382-407a-b7e4-3b7c70ca010e",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3f63f3e-0055-4d4c-b9f6-a92c4201f485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27c4fe80-1439-41ab-9075-aab2b93f34d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e52e23d4-5e1b-4e85-8978-2805b709f22d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d2221d3-906f-4180-8987-7bd17fd0f297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc289161-39a3-4975-a37c-36b7ed58b0ff",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5738fcaf-1ccc-4cf6-ac31-cfe2dd01c41a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90c20f7f-dad5-4209-b7d7-f62c504fa7e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59144c09-83b9-439d-9bf1-0e49b89cdac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bec7637-4726-4454-a55b-68498022f363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a644c147-7598-4336-8788-1631f56f3e48",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0200ae2-48a9-4a01-8c25-51dee048cd2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abac548f-88f4-49ee-935b-52854568dca4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aafae54-9b11-4077-8191-a0a71bed202f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8b9f08c-00d6-443a-8230-1497f1ff322a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b51f927-25d8-43d4-a60a-f525acba9f09",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06cb9513-d9b9-41d2-a7fc-3f5ae625bd54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1df8005a-1932-4496-8562-4b0d8c4b69d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9635f364-0154-4591-a2ac-eacd9d4532d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "d333473a-b6c6-4abf-8974-193d1bcefa18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8db86d13-7dc8-42ca-8d3e-7822fed0e546",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1771cdd8-0660-43f6-9556-8f798f9d3525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5264811-148c-4a21-af32-bfaa5305cf40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88fbb1c2-21e7-424d-bc47-1fe92939d9bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "343defcb-9d2c-4811-acf4-96ef84a305ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fe38802-5bf8-467b-9c6b-bc5bc74ad73c",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c75a95-0ad5-4eac-9fc7-b46c1faa8de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef89cf4f-19e4-48c3-8192-a73006aec722"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32f9a34a-f2ca-4f06-97fa-cfc184eb5165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "167de118-f05e-491c-893c-c84c8b93269a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c6e46c6-0a31-42d2-8c81-6f5f18d5e67a",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "603c737d-5feb-44ed-89de-22aa48577a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29d47f3c-b8b1-42f4-ac74-5c5f0e946be9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb90d0fe-63ff-41e2-9649-04b14063ffed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9dae3046-a9cd-42af-ab85-b7b135493dc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b0e51e0-fd39-4947-8b92-67c67fcf11fa",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa431546-2d86-4696-8624-3b973aacc9d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50f07a3d-3af6-430f-9bfa-0f61b9461940"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca731260-58a3-4b8c-8fde-f22516a15735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "922dfab4-9191-470f-8f58-fb37ef362136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cc0584b-c083-4147-9591-f5a03addcddb",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c45795-5881-4df2-bee1-a75b382947b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56afaf8c-700d-4f93-91a6-b1c21acc1bf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f5debfc-a338-4f64-b10e-ccac4255f5ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "1a047e71-9878-4c13-be71-b0f962307eb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b678bab5-f1b7-42eb-a365-73f18048727e",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b3e4c9-0bae-4b32-83d1-a9b8bb4cc20f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bb130a84-b7e3-445c-9461-88529d2b2ddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcf5ef03-c046-425e-a43f-441fd65a3ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "83c40d75-bf92-4323-b110-3fe5ea8ef996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b930d0-f0bc-439f-b82e-bb17c09e0ad0",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f05a4ac9-8e6d-4b91-82f5-d80114d38c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cc7e8fe-c1e1-411a-b876-9575d3db03c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57959628-7d94-4d45-bd32-0b3461874cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e357768-90d4-4e53-87c1-005b4cd89b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a69b74f3-3042-4ec8-88b5-7d49c08fc2ef",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "186c5b55-5d3c-4505-ad45-3000dbebb0a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a83790d3-6377-4243-9610-0e21ecee2848"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b48098c-e51e-42c2-b548-757a354873cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b87ba7f-9aa9-4ddc-b283-1ba216be24a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee9dda1-d2ed-4986-a9ec-750d8850b41f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6730958-62c8-474b-ab78-351e596daef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47ff83b1-c0eb-48af-a6d7-ceb86ea3640c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c056cc-ff41-446d-8537-2413466392be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c7921e2e-f0fe-4d54-9eec-eb9191eeb746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9019946f-9b6f-4ac1-bf75-1da48702c20d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f495177-3406-407d-8825-271a38f41e1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9930267-b6d0-42bb-9082-16914ec41192"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efa2e34c-e105-4334-b39c-f2b82c19cd5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "85d092f6-33dc-4be8-a9f5-78f4bfa566ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5133149e-4b7c-438d-ba39-d85a60919ed3",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52c89457-8a52-4e67-a92c-da386c765c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0b77e34-37de-442d-9b74-1c703bdc1e0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41b35832-1c34-433e-af95-eef4565fad3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "753aed90-9ef5-42be-9bd2-4f6dfcf22d6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01701764-60bb-4240-ada1-ccc87de56b68",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f4ef4b0-4949-4417-b2e9-6d026f55a57c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e56482d1-0ea5-40b5-bae9-4ac9cf9503e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92fe5513-2c34-4ec2-b04f-df900ff33f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "caa4e098-2f44-44dd-9059-05b254c1eb09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c599df-f7fb-4c1d-a188-1feabbea6c01",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "772a80d0-953f-4b38-89c3-5177917ee0dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6899970-48b2-44d3-9d46-ae629d13e3f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e692d5b0-32fc-41e5-8c40-488ba576a258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ae0a6f8-c6cc-4367-8d60-151c8b769724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ea8044-463f-44d0-9cd8-e60eb23298de",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a45494-030e-4ab9-bdcc-adb2c160cdd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9779d31-5fc1-4b80-83d9-a4d3d8e9293f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06c73cd0-cebe-4ddc-9a7e-ffd228dcf835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e04ee23-0f96-46e7-9b62-66b01e8bb653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c1ed166-575f-4c6d-a3c3-767fc6c6f3a9",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca59218-26ce-4c5f-8ee6-e3374f944d12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e89c4df7-bd2d-4d3c-9600-3d3267c47637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38ffef39-9ad8-48dc-ae6b-7d1407ba012f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef506813-9665-4c8e-bc30-81d7babd07e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d0b7a6a-30b8-4cd7-a0cd-e91043331bb3",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "920e93f7-d052-4565-b882-28d4897449f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebf1330b-0f97-46be-b91e-b94464e4fb83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "327b5860-d264-40a3-9c4b-9a314fc33006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5607918-b69a-4494-be45-5769eb0aafcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edf3ace9-ed6a-4543-ba2c-0da983f50472",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82a7b972-b33c-49ba-8b87-ca11e5fa22af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74356d45-970e-4246-9831-5d4257a15a76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0750b7b-3451-40e8-941a-5c1e7ece7b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5a199ef-dad0-4875-8eee-670890388c13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b32921a1-d3a2-4ebc-88c3-1a23e1354d0a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "269c81a5-6a3c-4fe6-9d2e-79061a09d868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1953c116-7dc1-40d3-b9ff-89d7e6e4bc55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d0d4dac-f4e0-4109-a599-58171ca1a560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b994679f-83a4-42b6-9a81-f921963c42af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b318466-848e-46ae-9d23-07466572a742",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b8bee2-4804-44cf-8952-e995a9e7f3b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c1e8ce1-8d10-4fd0-a856-8e20d0db12d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdb9508d-07e8-4f4a-b925-9db5c3d0c9e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "09de5239-f648-4243-a85c-35ee3b4bb620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "177a71bc-60af-4858-9b05-a8ac4a7a851d",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acaf0165-58f8-412d-aadc-2a7d9509f969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4528e082-8b05-4321-bcda-7dc966c7733c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbea44cd-4b60-406f-b59f-7669236545cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "483449ff-06ad-4aef-b23f-20d5c09ac28a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb625cb4-d3df-4dc9-9f96-10c984f1ce46",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f08518dd-b5ba-4ac2-a025-ca0cb1961296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84058900-ad99-464d-9eec-707ebd77bec1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26dc0028-20b6-4da6-b569-823879f6dd33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7d62cdc-9fc7-419d-8a1d-cac797e51dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85ef735e-3020-451e-837c-d1f70fa7d124",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ff4549-bb89-4019-9f59-96ca5990419a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1bed938-45fc-40fe-9e04-17844c2529fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ff23339-c237-4434-b1ec-7dda9192513a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8681950-37bc-4d11-8f72-db0f1edf641f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a37cd621-b0d8-454e-8a2c-37403ceb0271",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9f4f391-1d42-48f5-8938-41455f38901a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f60f23c-bd68-4dad-99cd-a95aeb82f817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ab9b9e-a395-436d-b9dc-9e583c3a8445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "daa78358-c847-4412-b3fc-ef171f08d51d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d11988a2-6966-4e8c-bafe-fb251444b81c",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90649652-2c4e-4556-b3d8-09eee93f3a2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ecb8438-b0ee-433a-90d2-3df9b9253221"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eef7ddf-34b9-4667-aafd-2c3e7ff0207d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d16f082-d7e3-4732-b123-c039f0b4bec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02730c46-1987-4a9a-9c9f-d8ea5c21903f",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd0c887e-450c-4ce9-801b-1ed28d7ebfac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d6e95fc-1989-44a2-a547-61d3d0c0df52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18938298-9bd8-4374-b7c5-decc99a626b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1507231-fb48-4325-b399-70e6106362bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a8ca89-682f-474c-84e5-12474c491fd4",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dc83b5f-38e6-418b-ab14-8f0268286211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a41135f4-13d9-4805-bc36-1cab5969921e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68d2ac69-db87-46fa-86b6-5c5cc520677e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "1421388e-eaac-4c70-a68f-9ff620c1e948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de5dd468-8294-4450-8b8b-4696990f6536",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c32656eb-361a-4aaf-8e16-27934c308e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4075925-1e17-4713-9f5a-a26b5a2c817e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4c846e4-8e89-4ddf-869d-a5c7fca2fae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "89e1f64f-ab5f-4361-b063-79b2eecdd0d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d43a4848-a557-4085-a863-05677cd9790c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79299e0d-bf2c-44a0-a1bc-0e2e8da07ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1815417a-2dd8-4e99-91b1-231f8e73d89b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b9199a5-af9e-4d9a-a2e2-e870f75dab7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "511129ec-7b6d-4071-a570-6ea9b17532a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6828ff70-0634-4d9b-9ec6-b01ab1acaf64",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f0934f0-5787-4c33-aeff-a1a17750a57c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b88731f2-d837-4532-bf48-bfc86b9ef4a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7149cfd1-45f3-4fd8-86c8-07b5534b3165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f24cb83-182f-4619-ac8c-c80d94011d92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc8702f7-a44d-442a-a427-e3da9078086e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ff4941f-459d-4e14-853a-5cf3a9595c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1274206c-c566-4d86-accc-4d32afeed072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b696d4d-8abf-4e85-8541-c8b9dc1e3543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "72fe3630-6307-4a14-8b6b-7c7105c30f30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a66a109b-9b78-4c68-ad0d-c332f41e342e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "161cadba-4613-43bf-999a-b913e3c861f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56848c87-0a07-4ab0-a85e-bb3f180d79a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "937371eb-2c63-481e-a240-7eda0d9c7649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3bc600b-6ec6-44cb-a301-b5a25c1f43e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9c9d3d6-c3a7-407e-9687-68367dc8bcf9",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e2f185d-7cfb-49fb-9eec-3cf5c85304f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12c09cd4-1357-49d8-929d-b9ed14a0659d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ec3213-54d2-4b70-8682-1ec2972f137a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4e0f153-ff63-46f6-b32c-3f7706e2364c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23fc46fe-dce0-41ee-83ba-b71e56d25578",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38801797-83fc-4cd0-b420-0e53489f5295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c50f1937-8f66-4e5b-a4c9-3d5706fb7fa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "593894d1-12e5-4ed3-a375-3b0dd415190c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "785410e1-971c-4d9e-a118-9ecccfa81acc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a2a055e-0dac-45db-b894-6aa698218e17",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5d4a28a-ac0e-4841-876e-570ceed32a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e38b2046-81b4-4182-a475-0aa33fd2f149"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "145623ba-fd21-427e-9232-3d9e0edddde8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7db3d78-49dc-4de4-b138-07b46eb0a827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4c32785-fef2-4d98-b7f8-bff9256adadc",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "300068a7-51f0-4da6-a877-93581ef0c5ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d476499-caf7-40c0-8559-90f941e3ffc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33dd2b53-6101-4a90-9e06-6285d0a07a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "86807252-a80b-4819-98d6-e22a01583c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "321defea-9cdb-4ae9-93c4-854ec30b57a2",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13ae6f68-0824-4dd8-8b5c-7683aa5f48b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91907a82-b496-45fa-9bdf-f54531e18cf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc4b6c84-f279-4c95-bc83-f83bdf3ee42c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bdfe78a-e4c5-4327-b51a-50112fb7824e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8035a3a9-5c53-4367-94d0-782e26c275c3",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6528b18f-9760-4f9f-a590-e9f8ba90e084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29f54ab2-4eeb-49a8-a941-3f2961f5d96c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c63a7d81-66a8-472f-9c05-fe2ab73757eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ca790150-5e04-4561-9f21-39e5b4e0d9db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8585c42c-8796-420e-aa3f-afbb8da285d3",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "260bc7e6-4b00-4526-a229-5048a9180aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1f19c15-692a-47d8-aa1f-66156a7c1e34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2becb5dd-2678-4b9e-b10d-ccfbb3c71445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "73c49f43-b3d1-4366-8c04-43eee48dcfe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "871191dd-87e6-4795-85d6-656ca1d967ef",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d249b002-06e9-4db2-850b-9cca1794a775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57b24f68-b4a7-4d1a-a91c-baa5058ea1b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84acf1b4-7199-4396-b4d0-2c756970cc96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a78a683-dc84-4257-8bfe-a9dcfc99cc40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59819a27-8177-4ea6-a11f-60dcf19d5d48",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db7a8cd9-bffe-4123-947b-1fd7448b3970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e179212-2981-41b3-ae82-2cbd7ab78f06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "723230eb-6ba7-4306-9473-8798ee79c91a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "12f6bf60-f2cb-4f59-9f02-3dd8b69ffbfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6b31eab-cb8d-4f57-853d-e86587363a3c",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07c60524-2eca-4505-bf3e-9468027616cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "501e15ac-2a44-4114-bdf0-9ef82e60b041"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4381c54b-1087-4161-b750-ca86c9f4304d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd443012-0cac-4c4a-b063-db56b951768f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29715307-2c4c-428f-a710-7e9b06de4557",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3805e71-9527-49ae-9df7-13a5fb728e79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ae019c7-1f23-4da5-94da-7bfbd65def1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee851473-e8fb-476b-9e09-5eabefcaa78a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a76a645-0584-44f7-86dd-49c65b2301ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bcf89f5-0ccd-4979-851b-a2fa9bbfd5c4",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be7f3092-06ab-4fa8-ad83-0a15a9e2aa29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d3d53c3-5158-44dc-8cc8-e9ed146805c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a3ce14b-0b06-495f-acc7-9c803946cc0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "04c625b3-b63a-4a00-bc1d-b4620926e264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33fbf180-d8d2-43e7-bd74-31af36f0b62d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc3f08a2-b6dc-4f9e-b467-16616b2e4ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7ac051f-5e08-4f85-93bd-4838c63fb1fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee99b1c2-791c-48e2-9418-3960523029e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dcfb90a4-c1ae-4e3b-b588-310b53bfddf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "154d1c46-14b6-4efa-a7ab-d3e54ba84331",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "def65e9f-681b-4a09-b8e9-c8dac9e2b4e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bfb4a30-d29a-45da-9773-3d1e79e3d65d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d64e5320-3e82-4a10-8da3-2912ccf05312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f721229-e90b-410a-98d1-cfd89d1b649c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86ad54fb-c1fe-4f26-ada2-0f535d678831",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e07bc3b1-92a5-485f-a086-4931fa6924bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e102ec8b-b9f2-4503-abd5-7a29659f1f4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65681aac-0150-44ec-8369-a519faaa37a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "13634537-4a04-472c-bc1c-2e04fadaec47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c768612c-ebf4-4e28-ba97-aac5819bb928",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6d3d5cc-a3e5-4922-8e3a-314049482c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3752cd3-7512-49d7-baf2-df1921edb4e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba40cdb-6d4a-4b38-9a12-436e12f1858e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d085282-fadc-48ca-999d-149f4fead1f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7daa743c-1685-4e6a-849e-b54d6dc7e96c",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "623aecc9-eee0-4193-bb01-8af34959a4c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de6a09ba-5bf0-4a68-aea7-96e356b2ce25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8642fe1e-b497-4f59-8b5e-a1732e95b299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "96620c01-c2df-4d4a-bdfd-95ae3f283426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7592f330-3e52-4512-983d-8ca25d51875c",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93afade4-8450-46db-b127-ff4f5d246ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f68caa0a-e155-4f7a-9973-9d7cc86819ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b626ab5-686e-40c2-b760-62c0a44562d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf7d9138-b425-4be6-9176-60042a08fb8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7d53204-4223-4cbf-ab5b-867815c095cf",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e704ccc6-dd44-474c-9f56-c5de174fe4ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2995149d-cf1e-475e-b658-19816350dc30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68cb5573-b293-4895-b25d-6b2c88d683b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1c0d3977-66d6-4cf4-8dfd-9e5e8a4fec26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23dac195-47e2-40a1-a660-7cba27df985d",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "568433be-fc78-4f27-9f30-ba2b4b86cd4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c4abae9-a2d1-4906-8413-df65fc01edd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a9c0742-e78b-4785-b6cc-ba9f52edf616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae99bd38-d5d2-4388-8f45-daea7967eee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ffcf0b-0d77-4589-acf5-e2b9feccf804",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2edd66f6-d202-4e5e-8998-c2e2f5268053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6104814-a1b2-47dc-b188-bed993077956"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe49d50d-5440-4488-9c7a-a259ed14b796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd887ffd-a58c-4d15-bed3-eb0f7a093a86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "884a2344-77ff-4302-aebf-51fc14185c17",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a3e43e8-9553-4ac4-80e2-eb352a30922b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a05ae097-60ac-403b-ba9c-34b225b7869d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5930dc9d-bfe4-406c-b293-f5ecebbe5c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e1e1b9f-f4ab-4338-8727-2e52fbe85d5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede9484a-9550-4619-a55c-a3338a3bc757",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9af92c7-9691-4778-afd0-226d692c448f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15a42078-7f23-491b-a40f-74498be6ab2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78ed4651-cf53-4702-bf3c-47ac6cf70c03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f03b5bf8-2848-4744-bfd3-debcf4b326e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b3eca5-c592-4ea9-9da1-94f06c3a9972",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "420cdb41-20bc-42f3-91a8-3a404a0f523a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f79d4f79-b8f7-43cc-8bba-e55926e94b89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8debf46-273e-4462-9868-7a14bf373d06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "22c241bb-9ed7-42f0-b949-220f14531567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09dc4c8d-8d09-41fe-aa6a-3f14f981ec58",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae794e22-71ea-443b-9fd8-afe56154f6fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed21818a-96a2-402c-8ac5-77f28a360cdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd1caf47-e249-4fc2-8051-ee5384275d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "afca58f2-5ab2-483d-a9c4-5cefb239a094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21a58621-d514-42a9-b1a5-c3b1a616344c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f5f157-6936-4578-907e-deb8a3255895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f89d14d-ba0b-40f6-a229-28f42a716b1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abb870b9-757b-499c-a07d-34c6077738d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6600b4c0-ba72-48d8-9ada-926a929cd77e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa7bf397-e57a-47be-a098-54b3dbcc6067",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8ec19f4-a5db-4363-a552-323476222cd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e0a44d3-6f9e-488e-ae8b-89a33cfe68b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f6a5202-388c-4c5d-8cb1-a238563647dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e6e7c0b-edbf-46da-acb4-4859e2ad9246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efe946a7-d0a1-4bf4-9c97-f131e3d06a40",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7af1b0b-6a5c-40bf-a366-3164447010f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc53802a-0b0c-4997-8e18-858eccb36196"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e45faea7-c366-49df-a00c-51d50de239ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2f096a0-2e8a-44d9-8283-c711f973d52d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa200717-39c5-4b63-bf43-6959800fc47c",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff9354da-be25-4c85-a25d-bc9328f2914d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "982f380f-27bc-4aa0-a89a-a7535d8e9890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6559298-0a9e-41c6-ab20-7903a85beee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d8fa745-d10d-4663-9cc0-261893d7386e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8593f9f-44d3-42a2-baa2-fecb92f29b98",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb50186-4477-46d8-92b0-6c44742313f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "431d5fb7-5ae6-4edf-9a90-e686fcbd7286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91220558-25ea-483a-bddf-536450a9cf41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "63541936-dd93-4046-b836-a9fbc28728bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a4fc626-7b07-4213-ba05-07b8afcf7fab",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "420013fb-8cab-43b5-8580-ee498a7a96a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d5b7f427-d3f1-4dc1-bb50-1515830c7093"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "654499cf-2c90-4732-9254-948b15a01095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "97cf1afc-8f9f-48bf-bd60-a7b6cf614dea"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d8d74265-c9ec-4505-8803-3565c3f01cfb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2d3e3b7f-8045-4960-9288-2d4b6b2592b5",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "098c6ee7-9d5b-46e6-9a38-ce63f17f2439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad2da3a6-6d01-40e5-befc-d63e84e3001f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d0a9321-66cf-4f2c-a94a-9dde7da28704",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "06cf1723-c3de-42b5-9ac5-9a6fa5b7900e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19ebaff1-f3fe-4f2c-b641-5c07cb119ed9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "23302d94-1b5b-4ee9-91c5-5be7be4c29ec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef2f72b0-f323-4405-b394-7d8bfaff5022",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a937cea2-c912-4fd8-b710-592c48f70585"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4ef29d1d-9dd2-47d0-9e0f-09cbd4e8830d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6404f925-5de4-4721-9703-d8a5e65601c7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9803d444-1a3f-455c-b999-97362a4d5d83",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "02d2bc29-2ca7-4ae2-a59e-e5d378aabc23"
                }
              }
            ]
          },
          {
            "id": "3b6e0e58-b85d-4868-a6c0-dabed5ad96a7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5396986a-be73-4778-b7bd-07d7cffe311c",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "09854df4-e328-49fe-9e7e-71e2a5623a2c",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af49f81-6835-4459-8973-0cc6bbcd7438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "953b5b7b-338b-480f-b0ab-0d6e89c32dac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "342d30be-8818-44d6-a4cf-33229149b604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "808e4fe5-9084-4a6a-b19c-38d867099ee7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "96a4cb88-942a-4fbf-8f12-5f5fdf44a0f8",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "79ac49ae-99fc-44b1-a7d9-6b0bf33a22a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5fca57cb-824d-42ba-bbdf-1aa0aa540436"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19e1fa60-6094-4567-9e28-dbb0d7310810",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bb17b5f1-2cc5-4a02-afc7-1297d7f95299"
                    }
                  }
                ]
              },
              {
                "id": "8f004d53-b8b5-46de-ba8f-048c59800758",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2e2852b-ca12-4440-8cc1-e383413300fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "77884815-614f-46d2-8266-965f01fc2062"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "52dc3d98-6084-47ff-92ab-9a43ca95928b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ea99fd78-8a64-495a-947a-15545b7031aa"
                    }
                  }
                ]
              },
              {
                "id": "9429867c-156f-4e88-b018-96d122626ce4",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "82eef4d1-703d-4f4b-9cc8-3eddcc719d95",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3c1879c6-cdcf-4fd7-964d-da4694e95f00"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "80556002-341c-4d2c-a8e5-780706df7690",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "de65cf6a-dd4b-43e5-9029-eae3b6ebd07f"
                    }
                  }
                ]
              },
              {
                "id": "d131b20d-58b1-44de-b20e-c4decbc7de7b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "589ad9bd-2a0a-44b1-88c6-d21e55ca06ef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4786d065-56d8-418f-9e13-35a9df8c3b54"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e4ff0d6-f438-4b7f-9b76-4e42b278c4a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "c1ad65d6-6d57-4c30-8636-adb065715036"
                    }
                  }
                ]
              },
              {
                "id": "cac00d3b-cab4-40d1-824d-573ecc77e51e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8d5b6df-574b-49ca-aa83-6db100d61e01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "afbdb74e-36a9-47ab-b01e-a140c14af3cd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "68c80345-9ea5-4a92-b3f2-349f73c0f72e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "90aeb99b-3520-4ec3-a82f-a5ab7036334b"
                    }
                  }
                ]
              },
              {
                "id": "cf65ca04-36b3-4dd8-a446-cc901b6bb050",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f1b086e-4dfa-4cc3-a9ff-4754bfd50ad0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a15b48e6-185b-469d-a82f-db6d149654a6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ab9cf42-7131-4965-8182-da64c925c53e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7f80a13f-8a3b-44d8-a405-8ceb74a4a79f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "76227a76-8eaa-4938-83f9-f99214e28098",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "acd7c7f0-0853-4533-ba7d-1a2efaf0f733"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4d77fd40-8ffa-4e48-ac8c-76b76e74980b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3870a1f3-2c4c-4bb5-9b8a-d39deb3c0a80"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e7937c15-aa86-4b31-bdc9-9d83f1fc3ab8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "57d64c8b-b895-4017-acd3-19d719871ce5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ab98154f-06f4-4713-be88-004a7bb6193a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f62c2fc3-7574-461c-9e21-e49fee35f875"
            }
          }
        ]
      },
      {
        "id": "07092c18-090e-491b-9050-809beabd5511",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d45f4691-6a32-4056-8fad-b3a833a72b5b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d0add75b-4124-49b5-b549-c93a9e407634",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e5aad354-fe69-4a8f-83ed-f1bd637506a3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "083ba717-cd74-424b-b392-6e632f02e6bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f878dc58-1bc3-48a7-9d3f-19b618cd6a4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a547b09b-94ce-4b68-9537-fb312808fd94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "2dbc6525-1a0d-48b4-894d-098ee3433ff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60e09287-672f-4538-b95c-f65fb98270f6",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6147d635-687f-48f6-a3ad-ea1eab9a4947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "027854a5-2ebb-4fcc-b7c5-f7c6c21fd1ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce67321-dc6b-4aa7-ac72-df191f1af8c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "856b5a3e-0f2b-4a2d-95ca-1d09c47136db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7045fef8-3550-4b30-8907-05f1139917bc",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e39a93a5-81e0-485b-9322-3f4322d3afe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea0d4c60-0a3d-4c1f-bec0-d1300da8f772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57a7ab93-fe04-43c0-a27c-0f5d69c06abe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9c8441f-b63b-472b-be48-e80850590c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "803ed7e8-e915-451f-8197-7751ba93fd9c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d77a734b-4377-4a8b-ba61-a8bf486faf9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d5c0cb6-c001-415a-a81d-0e022a6badbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27beecd4-27ea-40b3-a754-eb075318849f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "13ff7b53-f30b-493a-b00d-812db4c2f759"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b27b127b-9946-4d45-afe5-5bfe6e6c536f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b39f29-7931-469e-ba49-29715d572da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ac6d3b5-8a0d-45ff-8f0c-2853b92af69a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a82e9cab-1f4e-48a8-8b6d-e009970fb805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bad2508a-9e68-45c5-a302-514e1e8b6d5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b509f62-20c4-43d8-a9b8-363b09663c2e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc8861c-bfd4-4b79-a3a5-0d7a188ff028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b84f675-d0b6-4756-a41b-56aabad50cda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cfa02e2-3c9a-4ba8-a59b-e31035912692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b291430d-0d34-4388-a5ce-0009d5e46811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a22ede-189b-4aa3-a7e5-d7b8bf72f2d1",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c674e3f-d2e8-4414-9762-1d440d84550f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c7d9279-6661-476a-bb54-549f35cef71d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb34965-7bc7-47cd-904d-1adbf335e1ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfbe35d3-e267-4d84-aece-5f4477ae44d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af290401-7646-4149-a939-0d93621829ea",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5221fea-fba4-46c9-b56a-06885a2383e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d23374ab-1fb3-49e5-bb7c-d1deb5f291b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd95e240-2288-404a-90e6-a636669142eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ddbb972-d9fc-403b-a63c-4fc51a19ff45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69352b0e-6466-4336-933d-9bfdc1c73877",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c874e5-02a7-4683-bbe6-fb85fbd3d329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27f87b23-df8f-4034-8559-50585829ba14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "146026c0-63aa-4ad2-9fae-798e29fbafa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "322905ba-b72a-4017-9097-d9798c31bb66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d79a5804-25fb-4852-99ea-16e62e9c2c5c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d07d44d2-dd68-4609-952f-897865d1f086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9814885-51f7-487b-9800-255a2d60ef70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4227263-fd97-4816-9194-075868e0e3a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "649047a0-8bee-4541-862e-0b61867df6cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00601ca4-3bd2-4d2d-a31f-2801f3b060e6",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "325c2db6-884c-487b-b31a-6b4ac96cb5a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75525085-0bc3-4794-92ca-0b1782149c65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811d7427-9b4c-4dc8-8882-a9a7515e7f24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "384eab59-dba8-40c0-925c-80d9eaccc2d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc834fae-c1a6-496a-bb9d-3832f6c40ea4",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb592dd9-55e4-4797-8e31-07a380844e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f634f1a-9f74-4db9-ba5c-ff2a3bc10950"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38c17945-4e38-4ec0-bebf-d8ac1f0a4430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8e479c8c-2810-476b-bb79-5dba8e6d1b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2845c03-65c9-40d6-a2c9-883e657172b8",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e0e272-1f0f-405e-9dd2-35a6bc2b6271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "628f46a8-f422-4411-9b09-5bff85c3e257"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1359b412-3cb3-4674-be52-cc5b07a298bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba4d7bb0-0733-4b72-83c7-600595ffb18e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b16cbc-f399-4f54-b0e1-3625ea14af08",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a93b1b9-7e78-4089-97b1-28cc1180c899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a867fa22-61a7-49c1-ae3d-dae422c34cf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c745de-7b86-4506-a374-29f0c8462e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "410ae5d4-539b-4256-ab46-25a2e86dc753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70617307-032c-4e28-8d02-df31276605c4",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f7bc21-31ab-4166-a093-1ea61ebc0cdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b849eaa4-dddd-439f-ae05-3c0005c9e444"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a341281e-fd94-44c1-9429-140bc0a9a7d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0db4651a-83de-46f0-86a9-8775fcab83c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae93c57-2e0c-4c8d-b179-d367ac07c4fc",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0afec8d0-8ad0-445f-9c8f-4c7368710b0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43411000-ac95-4113-b80b-623ddbac0a39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "124fe644-07d7-4d2c-9e3d-7b5c54c2e877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e326b113-a788-4880-8157-3ed422ab7412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1153e754-a462-48c3-a090-bc01ad46caba",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef8afbd-15e6-4aa1-b6c4-3d204df1df78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbd752e3-8f0d-45ea-a70a-63c63ab6ea4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9d6be12-959a-4803-b1fc-341fc0e5d785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fcd739c-d14b-47b0-b402-ba0143f54bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d19beab5-04ee-4fbd-9fb8-a4e6b9cca12e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "953371d1-7554-496b-9606-945cfce34b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d16f749-124e-4933-86c8-f7449857b089"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "582c5a27-3cbf-4881-a6ed-49e4f7dcb088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "739c34f9-1e07-4801-9e64-bcb2dd9a7b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d222dd-58c2-4837-a76a-3ee847778b1c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9860b897-a163-4727-b43c-84d4f27c9f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa2e6cab-ecea-42ef-8da6-e54b6e95dd39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2682a4a8-2e6b-4d5b-83cb-53e912d6b2fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71dda1dd-08bd-4ad4-ab09-b5ba43e9be43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2384f8ab-7274-48a2-b24d-e68d3ba894d8",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "758e6c46-b921-4f70-b6ab-b7529eb2b23e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6a8096b-2805-4f17-b95a-9896ec77f7f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c737530-62f2-481a-b3e2-80a42046b8f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b45ba98-adc7-4e3f-be6b-028757688e39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f54ff56a-87d3-4d23-b537-8526c463fc79",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f5540d6-fa9f-4afe-a180-145898684da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31f4496a-a3fd-4e46-84df-3ab2a1a159c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ac93333-c256-4d43-9d12-dd947811dd73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06487c65-8ea5-418b-8d20-1f10751ff2c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2db8ad3e-5154-41c0-acb3-fa4c5dd58582",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77968406-025b-4ced-bc68-dba86ce6ad2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "348db1b6-6bf6-4a61-abfb-abfe1097ab5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "985f350d-2206-4577-bb9d-7a172e40fb8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2af5d0b6-893e-43b7-b9d6-f214cc806ed8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9acf8a06-9d95-46e5-9297-34ffcf5eed1c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf6db344-0beb-4af6-8953-76135f833545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "116bf89c-377e-4a8a-890d-df543924d3fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ae53766-cab7-4a35-9437-141218ccc34f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3650eb7-ee71-4475-9bfe-5fffde1b69f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e173ca54-b8c6-401b-a21c-663ec6fe1459",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10ff3978-aa63-4737-8258-129a4bda7946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f0ec0c2-3c40-4882-bf62-20afdce9f771"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba221853-2505-4571-8e2c-13a2d02ab12e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47f77405-5e93-4377-8864-3f0f5958ea02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e0d9352-349b-420c-93bc-4612594c9930",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d89fee0d-79ef-43da-a1f3-ee24ea230cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21cb9d8e-e2c4-4a81-b4cb-cfb10f634469"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46cf277f-4d54-42f1-ba77-d93a74f53885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "67c65242-bc0b-402f-8daa-d6b43e28782e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f6eb73e-682a-4c5b-90fe-297d91632434",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed78f56-819f-4d5f-89ac-d301df114869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8758ce50-1fca-46e3-b42b-567a1a30c48b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "124dd572-502d-4c79-bf2c-aadc58a1cd94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e5901cf-9bb2-4672-bf6d-9e47f9b86aad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41e8fe64-3ac1-483d-94a2-9b552a1ddbdb",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8cd6b0d-3c65-4d0e-979f-171f0416020f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9579f254-b843-42f4-89b0-2b6643cf238f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04bdb9cd-3d86-4ff4-95a7-c90052a78af7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f650abe5-6a4f-467c-b492-5833f7a068d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ff460fb-942a-4979-a6ab-cfddfd83b4e9",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a061475-849b-4a67-b19a-7f1f3bdf5ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7bea89a-55a2-4098-865a-d00383e216d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a35c8a5c-f12f-4a4f-b933-adb5232ef5cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebd7d1c8-b352-41ab-9d82-b670dd7843d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af624601-f89b-4485-bb18-d40584b336eb",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a60aa6e-6693-4974-9611-60e539b1706d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa7ae03b-4370-42dc-989e-2386949c5a6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79166ae7-ab52-440d-80b0-64eb68a70b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "615b55eb-81c7-42a4-bb78-5bf3b4e9e808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "750998f5-cbb3-4ba1-94e9-6ef2a3b98422",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f24234a3-dc5d-4236-a273-45b9c30f96da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18fbb9ea-7422-4485-9612-b29070f37a11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19e4a35b-7d36-45ce-9d02-924d8322956d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8c1fc90-9933-4567-a713-7dcfac1313ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c274b9f-9209-4bc8-b9dd-504f1044235d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e7f556-21e3-4649-9a67-3603774ae981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c10fe70-6637-4411-897d-76d1c807917c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "012b6d5f-c18f-487b-86d5-cc1139fa5375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8be13a1-5dfb-4435-96f3-81932d095885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f0c9134-38ba-4928-adad-5e11753ef314",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4b0ace0-c5e0-4313-8f74-02f6705d629d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98e7aba0-6856-4560-b531-84a8cdfb9fe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64074ba3-444f-456b-a858-409ab9660492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d169fae-6cc8-4eb5-8e61-fd9ad692f933"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d8cc7a7b-8ee5-44e6-9d6a-6619b03e6414",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ed83198a-e701-4a50-ba06-3cd77ce5d79b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "384d88ec-1875-4dcb-8e99-ec1f97d86c8f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b8044211-10dd-402a-8f48-f3ae244e936c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98054793-f74f-443a-b36a-b22ee1d6a309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "471b4dde-5ccd-4007-a2b8-9dbbb5500a6e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe5ed481-f95f-4968-b480-deaa10d8ae5e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5bfff235-656a-413c-a501-7e955be582a9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f8bfa60-775f-459f-a31a-e9ae71cf262b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "190b67f0-a2f6-4233-8fb9-74c5007f1c4f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0d114484-17bc-44ea-814c-19336fba6362",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "19c173ed-709a-42e8-bae4-dfaffbe1edcf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5c4f4ab6-4fd1-46ec-8fa9-c8b84723da87",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e71c22c7-6820-4de6-9237-469c4dd43402"
            }
          }
        ]
      },
      {
        "id": "356db78a-3e1e-4eea-b64e-eca0e0c291aa",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "23cce550-73f7-4129-a2ec-d68615f245e1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a8714435-e8cb-4b05-8727-e755aa035eae",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a1cc12a6-2594-4ef0-b486-db089aee173a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1de5813-4123-4979-a329-557d4d0bf900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c0fe074-6df1-4b8d-abb8-ed152bf28113"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf8a58c1-e5ab-4796-8b08-856ce93e8c3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "839e1c07-3b9b-43ad-b6cd-1f28540aa45c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f77a890-1b73-4a34-be42-c70809aec0cf",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66ad209b-2676-4f3c-8274-7c945ac56824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "781a48ec-0493-4da2-af8d-db4ac918a808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3d6fff2-b1d7-47a2-b72b-1fee9ac6df5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "65154db9-53f7-4a02-83e1-0367231faa8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b435231d-3799-409e-a341-f01b5fae1c24",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4216c3-adab-4fef-9203-12232f26df55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8ba9c1c-9058-46ae-a2d4-a56ad06cdb4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b06fbeee-c027-45f2-8720-11f77ac519d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "98daac2b-02d1-48fe-8274-edf208fddcad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab19fab-c4fb-4e9f-90e8-3442c8d9cf5a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e3f7cec-fe70-415a-b0f5-7cd8ec47bd22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7f5d406-288b-48b8-bc66-239ea7d35884"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "400f2b8b-1cea-4ef2-a892-e03b7b647da2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "de4023e7-2dfe-44df-bf2a-2adf63dd1571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac36383d-9ee3-4f3d-a83a-80dd3471808a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e6ba45-8ce8-4da2-81f5-42ba3f969c08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2790c934-db97-41c3-b4c2-5539385a9b01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36fcba49-cbb7-4f23-825c-71396c09b10d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "52f78103-3686-4488-b6df-f43dd25310e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3dbc57b-9d73-4834-9431-8544beea5b84",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "560962f3-4110-4d0b-ac9c-e121fe875784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d527faff-dcc0-4b14-b9e6-70d1de97a3a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a092846-5a15-41cd-b581-09a5a507180b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "96c17aef-9da2-401b-b839-cfe1262e29b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a906709-98b3-4a99-b998-7b0d84856593",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17f372a9-0c74-4e6e-84e5-204b10428472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b311475d-4f50-4c53-bb05-b3d678b37809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b270a12b-b038-4dcc-90ca-39d2d5b3cb58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b7ccb83-e3e3-4010-9a0a-2027d9f5ac4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7698ea2d-d912-4706-ba1f-ab9f8ea447c2",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd1261dd-58b9-4061-84a3-82436232e3dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a765f9d2-8141-49dd-b0dc-2a036183b6a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "140f3e41-244e-4425-aab6-ca7cff8b27d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "64c80302-ead8-415c-ba92-939633913501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc385de-aeb5-44a5-860e-46c112b2a115",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dd0e01d-fe8f-4ff9-8843-b6337c11d474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eb75658-8398-40cb-8077-2f786035417f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a8b4485-64fd-4534-99e8-1054d6595d28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fcb8a341-7af7-4c10-9c81-fb2b2b59d25b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3227213-4f4d-4ccf-be2c-9e4aace7c0cd",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e52c59c-f813-4485-b011-50485eaf9a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41396eea-b032-4c21-b74e-28a9a1643634"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b73fd4bc-7b8a-4b50-a247-7762d6a5415f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "08bf8354-650f-426b-ab1e-61b1473791d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8079b3d-ba40-47ed-b514-e171a83f1692",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8acc6cf2-33ab-4060-b919-6e90fb50cdff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "328415dd-990a-404f-b402-1083d68f538f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d1c16a-fde7-441b-97f0-658ba3670df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "227533dd-8afc-45bc-9957-02573464c88c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c28e6e5-d83a-4636-95b5-fe7a8f8ac96c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb647e0a-010c-4151-96ea-753046cc9495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b7f9480-5d5e-4e30-ae05-60fa49a6d422"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad885392-7500-416b-8743-54b1a3b0eea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e4f64c91-c451-4994-b591-809d28c8fd73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "457a474d-9883-445d-8bae-56e823313b9a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d0b384a-ddff-454b-8059-3a99a01c0f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dd572e6-0157-40e7-aa2d-18e87c5868e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82abeeaa-79d1-4851-a28c-dede7d8303f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "21c98e5a-9f31-4ae1-a59e-33e3699e9c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24469471-f2b2-407e-9517-5930d46b8a21",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "432e5ea9-4649-4487-93bf-12384db6f1b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abb6a1ef-5549-40d6-8b97-08c16de548e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7252c20b-6495-4add-98ad-f466b3d8bd3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca1a0614-13f4-4c14-bdbf-4f1dff8ab2d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a45d6d8f-5cc2-47e9-a053-fb1e97bf087b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "237d041e-bd08-4da3-82be-ad2612b49b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9cfe716-00e6-4a5c-887c-f13f41fa9fae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c1d3c7-c02d-42f4-80e7-eaf5123b7e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "914372a2-aa60-4a60-820c-8f0b7d237d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0813155e-4cb7-45ae-8b1b-0d28c18e3c24",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8525a3ad-c716-4c99-bb6a-7fdd1bbf0dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baf1971c-4237-4b07-ac4c-c235ee9112f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b282b41f-b596-4aed-b886-a95d36b0b049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "028f5035-75b0-4839-8dd4-a59b82741dc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed147868-6b00-49a6-adc5-bce68f90fc32",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20270b28-39b5-49d7-b280-caf2ee1b6d58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b59503e-7c02-49ce-85ba-fd5c5e7c758a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1077aa49-f06d-44ec-8b48-a2b21158efde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "94d5875d-f723-4bc0-b4a8-9258cff2a3c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af36b6c5-e310-407d-a444-3e3b71a1bb20",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3571fb08-3e30-4df6-8a15-543a1f75b203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f41d177a-4806-421e-b950-b6933446b77a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66b95715-2a76-4957-baf2-a1a1429c4912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "78c6d5c0-bcdd-4f5d-bb69-140047f7e6ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4380f07-711f-480b-9f93-da9c30524128",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f71173-40ff-4d05-ba8e-2e0ac71a6cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92ce390d-3476-4944-8f20-eb8a90558938"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "411fb716-3a81-44a1-8ade-cbf3ee10775e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "532a01e0-1053-40f9-97e0-29565dc6fe08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34335802-ea3a-49e0-b3e6-c33021093953",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fcd36a2-ef7f-41e5-842a-f6adb0eae079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37eb508c-cace-4329-888c-950bc6be1334"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9cd07fe-04b9-4b08-ac3e-a4b53f0d6248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4977ef0-0fa7-415c-b5eb-fda4c40bc24a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fd7e8dd-4d13-4f13-a6a0-2d8068313ad6",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08bf6ec7-e990-4670-9fc9-4869c70ea894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1702af1f-0a52-4cf2-8e7c-19bc89795d2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f4c42a-724c-48f5-a404-9accb635495a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9d9cddd-4248-49db-b830-d6092a179f3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd4828fd-565c-43a4-9d19-e5226e9eb2a6",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc3395b0-c020-41fd-b52c-b3a725da0bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0226ed3e-37c5-42f9-989c-447be32f8408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bae3e8d-2e6b-4362-ac58-1b3585aecca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7042201e-6b2e-4dec-b3a2-6fffe95c2122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eabf3ca-5e78-4cb3-87c1-29188620fb62",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "828d0781-8f5a-4d13-a36a-0a88ae212b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95c030f3-c132-4d16-b380-155f340532b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8d5bb0e-3be9-4c19-ab14-38b61a4f7646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b84ebfe-095c-4e02-818a-f39b44a06a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "779e46ac-1352-4cea-9889-387685ef081c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67f1ac8c-cf24-4d8e-9f7b-815f8db560a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21946619-b520-4d00-b659-1eabfba56d34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea50d471-b673-4b61-a02b-72cb3a91dfeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7515445f-46ab-4e99-89bb-2bb067aee23a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "128421ad-b1c2-4675-a6b2-50d3c858d138",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d1487d-1653-4049-96bd-f5f29ce63795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "042ced54-77fb-4711-95f6-d272d371c68a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "229e130e-4854-4137-ac02-e2aecad675a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3acd230c-46fd-41d6-81bf-02fdf49d87ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8582ca84-a80e-443d-9ff9-51c27b4ab281",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad576d47-b4e5-4490-a204-4c0dc99c7200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d73ac111-3204-4588-bcc6-33696f1fc2fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0963755-416a-4f3b-a4fe-f9558d8c105b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0dd46dfd-e9f7-4429-9af5-3988964dc524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c1cfb0-09f2-449d-affb-994a06095f66",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb216b29-403b-4f38-8f4e-7ce634a7a88c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7113c58-1959-4612-ab84-f921f1011388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a481cf-5f17-446d-bb88-18fa6f3e65b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe4c4800-a07a-4ea5-a3cf-e64b943cadb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a94b88b2-2d40-45c9-822e-118b1f1ca607",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0802158-78ab-4781-bc95-ac9a75e30ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89f561fb-7fd3-4d72-b30e-f7782633ab1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c48cc513-cfec-4a26-bc71-872a005a482e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c88e8a9b-31f7-48c4-8169-3d96deac0f2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2df8faf6-493e-40c2-a10f-f49a72455a54",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8967849-266d-481a-8f33-34af049b7eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d10ca72-c6f1-4609-8041-2a7b2dbb44f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "883bc91e-b4a2-4f7e-8db2-32a3fc83dbb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "067d0836-81fd-4092-8a08-afa7be8aab0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab17474e-5123-4fea-8929-772108734f31",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1318269b-97d2-491a-8caa-00c6b71d5abf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae3bf9a6-e909-4f45-8379-91b05550a5d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "274f6d53-553d-4688-a8a7-a922addaf3f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac7ee6b8-1856-443a-8612-579c6ff3ec86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1620f9c-e136-4770-b887-ae595d930fda",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a8735d2-7ce1-4529-b490-520ee2abb5fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33ee4196-1e20-473a-8ff1-1708a81caf60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b50eae25-ed28-43b4-acee-615bd8954aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e2c083a-4f50-4ad7-a639-e95d0c5d0cb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c580929-1d63-460e-827c-ba3cecca2bbe",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc34a597-fe10-47d3-b8c7-4aaf4a3f9fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94625308-10df-4722-9427-4e9e9107983e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f27fd67-7cfd-4b2e-b4c2-115b7b911060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffac5c44-9254-4d96-96e6-a8f359580225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d59fae1-8931-4c73-b016-ea2089832f94",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0343fa5a-e642-4b18-869e-413eb84cf686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bb7fd72-c60b-4633-b677-6bd3e3e34527"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a0d680e-b039-4bb2-b486-0500407b6188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1693ec2-9192-4c3c-b23e-c027e264448f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96631bef-fbc1-4017-9bbe-8040ca72325d",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73bae4ae-3801-4f8b-a217-03f9c385678c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eb3d719-815c-481c-b9d3-92c16b762e8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da5fed72-6ecd-4664-92a7-d1145d3f8e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d94dda13-004f-429a-8d36-727da39b053b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c0b8f53-a1b1-4d33-95f7-2e510c939242",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91b48370-5fae-48fb-872f-ff4de0295a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "219cea63-0b8d-4bc6-8998-83b68680c1a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f38b133f-15b7-467d-b53d-1836d4398601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72fbc938-40cc-4896-b0d5-6b33aeaa76d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aa5a362-4e66-4713-b53f-79a2c2c85002",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f266f0-522f-4792-a3d4-ead5bd94b969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5b85747-291f-4c0d-823c-49373a3b00c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94174fa0-edcb-43de-885c-fc059e085bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7aa7b835-87ee-4ff7-aa2b-2740e4bb9cd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5160aa65-ab70-4cf3-99d0-f3589aed74c9",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92746302-a8a5-49b1-b6d2-1a38db967e9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a358b7e-e88f-4241-b51a-eac804345238"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "607f20d8-e748-440a-9254-437d98fb2697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc61fec6-3d5e-47bb-b1ce-b3c6a52350cd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "44f38b2d-6507-4c5e-b65a-4a6c23aeeeaf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2f87ec8c-c2e1-4ca8-a84c-f16fc9b094bc",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75ba52b3-acf3-4b2a-a293-1238a48e339f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "24fd1ad5-41b2-4050-baf4-3c19aaa30180"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f658ef7a-318a-4f3b-a498-1df06a3068a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "11d95c8f-806c-4de2-9f79-c583995d9c68"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "984d7d27-0edc-4d0c-9a80-5f45e06b4c2c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "765fcf0e-29a6-41cc-969b-28a9004847a1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5814a449-450a-437f-92f5-ca83359ebb60",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8c6702c1-9c04-4817-b7be-d4b7d4036aca"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a18d1554-89c5-430e-be33-70413a4a5ff5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "65a0e4a8-c235-4b6c-8eef-651654557129"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "80c96d13-e3f0-4962-a846-086333a6611f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3b19d2c9-9a59-4428-ab8c-4f1294d77dbf"
            }
          }
        ]
      },
      {
        "id": "0d04105b-134e-4e04-b70e-10330abe2790",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "aec061cc-77c5-4165-9a66-225559d3e425",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b2439fcc-5c8d-4e2e-8720-11d32f43f4c2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b3479f7f-dc98-4361-8629-c93e40aaee25",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c182bb4f-b360-4213-bd1f-2d85f160054a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4c10a84-788a-4c77-a680-952c03a1a7ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5811636f-6917-49bc-a603-b66a38a2cbbb",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d70a5f7-011a-4370-a319-98410d0c2118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "583f830b-33f6-4b30-938e-31c6351709ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebcfccd5-7f70-4248-af91-c3ccf7aca311",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97c40d50-4f2f-4b20-a4bd-cd2e5c869471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2a625e8-47c8-471e-8490-c1697942f379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a12aa22b-f249-4646-8270-a0e80f8c09cb",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb6a7368-3540-4265-878e-d7f239b84db7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b93b047d-28e3-4176-8ac6-29e6bc01c6c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56844f76-f54d-4c08-8c30-2d4307455371",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2468c15-4c57-44f2-824a-70c3aa0bd71a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "649c3c02-b74a-42f7-97cc-94a349430d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a3c0445-1d26-4aad-9f8e-1defca179f62",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a877c1dc-8f9f-43f7-8032-f7b9bdcdf259",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0fa4303-4999-4bf7-9b1d-c9e893985a50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c44c3f88-1b56-4e2e-9939-f1afa07c2060",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f62e3217-0fd5-4cbd-a989-6378fb88b717",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca5467fc-df2d-4642-82d7-68669c932dae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72605fd3-6f08-4783-89f2-e18bb7a7cfa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2cff886-12cf-4de7-8467-2fbc93f6fe5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e68d88ea-8d83-401e-8500-a228304ef168",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef12c04-72d2-442c-8634-269064372a9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5772dd13-3209-486a-831c-0a52fe72b7ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c5a5de-f407-4e02-bf69-4a655745bfc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24f93e5c-d4fc-4037-99a7-c91ee80851d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6500be4-640d-4e11-87a2-92ce1067cb28",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0bf5d3b-f4bc-4900-8115-f4cc017b223e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8fe5a63-b002-4937-bd1a-e3e70abd2d4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6487e4ed-6835-4606-99ef-7bbeeff075f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d07a09a-4e5c-4513-9c1c-cd97dd9545d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4298af6-cf96-40ad-a8ea-447949fcc574",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "760658ae-c47d-44a3-a9be-6c0b9aa646cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53e95640-48dd-4abe-a40f-74ae0699385b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ec8483a-14a1-4009-ad65-aa77145e8419",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec2edef1-7a62-4782-9a52-1c3862271c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2df9e563-09a1-4233-bd27-d7483e656952",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "236f6a04-2f13-4ec7-bde2-9f7efa460fa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c7c98e7-ad16-4c7c-8b20-fa1dc0c1a17c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "522c407e-f30e-4b36-bde1-02503a491150",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4773fd1-68d2-4b0a-8cec-3623cc72922e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eebb074-e272-41a6-b14c-d63f70d54a82",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff20fef-ce1c-4b0a-91bd-755eeb54d44d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f27368a8-632f-4a4e-978e-77db050393cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "763191e8-bf41-499a-b42c-7476c9f11062",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92c6a442-a281-4c58-aeec-f53a88744bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621d4c40-1166-440e-87d8-c73acc5c01d7",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b53cd4c8-31e5-4c34-915b-b48e2acd35df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d929798d-3959-4a33-9140-ac7999f20de3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ea48946-d655-4cd0-beeb-0b59869e8264",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "250a79af-c113-477b-badd-b63bacdc7812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9fcadd5-27c0-4b5a-82ec-c03e9f5d0a09",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e9bf7b8-106f-460f-8cfe-daa73ae162aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "746cf8ea-adce-4f90-ae43-8eff4de0aa64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d43e519-e780-46da-9d3d-9560f63b3c51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e867e999-f59a-4b18-ac9f-24df89db8dfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a807e8-262a-461d-bc22-4333db55b516",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76208495-e7e8-4e28-b351-549dcf20a422",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9dc4516b-11d5-48be-8a8e-e58b74f0d61a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42fb7045-24b9-47fe-a13f-c73bbf3ce923",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e0f1040-7933-4337-bb32-3b9038215707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cada5b84-fe53-4695-b9f0-1408767afa03",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97bc8311-e6b9-4905-ba51-c030fa6d2171",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be1b8848-e365-489f-8049-23deee42e5be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "799cdccc-e380-4557-9177-a023a3b91567",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1053331-d9bc-498a-9bc6-aff706b0dc34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7d64414-e559-4f2c-b9a4-9e955a53fa77",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38d01602-7c6c-43fd-b6a3-69afdd0f7938",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4b9c8f3-074c-499f-89bb-93115eef8043"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6ab14ec-bda6-46a1-b092-1e72a78a5fdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95830801-6e34-495c-b36f-34c5d98cef7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c77088bf-5e4b-4902-a6a1-467e91fd5e86",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45349ec7-0abe-4dad-a205-ec5cefe2e1c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0baa193-e9be-4e13-a57d-7affd57b8b2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d28abe-8591-4319-a630-e5405635e910",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fda13c3-6757-483f-b961-9f48c4810986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "485ddece-d103-4489-94bb-a23d46df20ef",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "247144c0-581d-4478-ba4c-c9a8e1be69bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50385fad-c6d0-4fb2-8096-d20379028ed8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc9b354b-4883-4493-bf46-151e85584b94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae0677ed-5f8e-455c-991c-178243e07fb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11c8d023-af2f-4f0e-b4c5-8df01ce0fa99",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba59f8d2-b366-4fe5-8353-949a560651eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a2e3f7d-3a25-4cdb-a8cb-6b0f17be01d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53438aa6-ddd7-495c-ad85-be045fc78231",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "432506bb-4cc8-4e46-9361-c90e0081bd12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6b5e2d6-b9ef-4d03-9f6e-99f4b49ba0ae",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7296c65b-20e4-4164-8559-1d1fa5e46885",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b3116c4-8c75-4ba5-85b4-5973a01c6b43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "413aee00-87b7-486e-898d-6b789da4b26a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f2bb915-3f6c-452f-8503-a656a86a10d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fce4c852-9049-4573-89b4-e47fcad7ac03",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe10ccdb-6fc4-4250-b99c-2b698fe5f607",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fb0990b-8fc8-401b-808c-301a5a9f9d2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a47fcd6c-7e5a-4e85-ad4b-c1aae61b8f5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "975333b8-71b4-4ec8-a201-37fc011ae0d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53d6b9ae-eb7a-46aa-ac0b-1c3e1ab377a2",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4e0a62e-2f32-4693-8bf2-25ba85db5aac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e86dd104-e947-4e12-98b0-d48455eb4277"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b585f62-380e-4412-9244-52ac1f017e05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e3893ef-2dbd-4abf-bab5-9b881a64753d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02b32ef1-3d2a-4f9d-9213-6c438130e433",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "880b6a69-d3f2-4021-a30d-066a2028b8ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16300937-f12c-4663-93e4-fed0b99d8406"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d738c9ca-07fe-4c47-b742-77d6aee0f835",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfeb9f87-d590-4334-88b1-f9513a0874b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7324c5d-718d-44c1-bcef-97579ed4b333",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40079d08-3bd1-4f62-94fe-17129b611980",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07801d2e-7699-4403-956f-a7f951899b9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb63b16-8ae2-4347-8e55-35ffa2f890ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fcd3d60-c349-4f9b-be0a-88b27ee0fd85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8fb473e-98b4-442f-bf7f-a94ac6e08d8d",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75585a0a-a3b6-4654-a002-6f984569f674",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23a4c773-a771-497a-a64b-e5bfd21258f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bfcc91f-3b30-4c8e-a193-833fc65c7442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac4e4473-6842-4247-8eb7-4484dbce2834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83964664-8676-40af-805b-e16bce878c01",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b68cc10-cab7-4fc6-a570-e12148aba6dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1add63d-bb25-41a0-a22d-dba271e76fd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7cc0304-d870-45cd-9917-9dc09f5792a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d449802-b03c-4b03-8843-f6d1307de0ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec58c97f-e6b9-4ea9-b407-488bb356c1a6",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1e8bf39-2241-4be4-a96f-fcb2b88f552f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eef5bca-8b82-4126-960c-b5ec3e9c01af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b5815a9-37be-44cf-a8d7-4a6ad615e57b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe40cd6b-9c90-4d44-902a-76f2bb93a238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f8b2bfe-840b-4b27-b70e-b825a6110da5",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30fef670-3c6e-4a5f-a4f4-394e6b148cc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7429e568-a5b4-40db-add6-2c12d1554fbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b6fbd0-8bc5-43a3-88ff-da6ba4cb0bd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa50a0cf-bc39-4cf8-ade5-2096a7bd5ce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1808083d-4beb-46bc-91ad-6fa84cd4b205",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "184c62b9-5821-4b62-a94d-3eac54079cf6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "221b0b93-0bfb-4b1f-8cf0-9027d690e510"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91b1067c-ac1b-464f-9e8e-ddf330552653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db3bf30e-ec54-46e7-a4fc-f1507a194da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a5fb917-c70c-45fd-9f79-15a9a4dc08af",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ca922c-8003-4061-9ac6-ea5796f73e72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7874e5c-2509-4c2a-8c31-cd0276a17891"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82040e5-408b-468e-a7c8-1645a3365817",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a242c99-1dbc-4d50-b9d1-059b2a5c4dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6410e478-028e-437a-bd89-460f96f0b363",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f962775-1330-49d0-b220-c57e52366566",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1174e62-a154-416b-b5bb-1abfc6677bf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d81b31ce-985a-4639-800b-ae80fa3eb6f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cfe56fe-f853-45e3-865f-9a49e534f6c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "953eff6c-a6d5-40da-8121-85000c6fa9c0",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f640d549-da0f-4625-834b-0bf006c7cea0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "700e7843-8b93-45b9-8f48-cab1cc1bd4c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ef3651a-7563-45b3-998b-db5be946792f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa260fe7-de12-4809-a676-3e88cf2857c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24cc6f22-4ec0-4f93-ab4e-0daeeac03812",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd6400a-c5b1-40ac-a564-1869ea90b3c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02829693-1e5e-4e22-b98a-f13d21c39915"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2498f2c-8056-4ffd-8940-37b3381bfb91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd4cc081-e39c-4556-a23a-d73636f2b320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "177a4573-9099-4570-afa3-a3a71eadab9d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dab5acd-e1a8-44ce-aefe-c58d8044f757",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c01f9fa-f757-460f-a132-a2efc0a43a99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0bf89c7-ffd5-4d03-9de2-0b202be0f9a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3849de9d-b2c5-4c9c-96d7-3175d4d4b849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "782384f1-ef6b-4972-b3d3-9005dcdff1ba",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1dc7592-8cc4-4134-bfcc-1f0ed6d13a6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfdc40ae-bb0c-4269-b773-39caa77839a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0e731fa-eefc-443a-80c1-9e5a632d6051",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48070538-2f59-4579-972c-0661829d3424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "905a47a3-0d2f-467c-9bf9-047518974aee",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74f62fa0-2586-447f-bfda-f889a9de67f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77c0a93c-70f5-4d2b-80db-d51b8d645ba2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb45854e-0466-494b-816f-e2fd73dba138",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7b83388-5b4f-47d3-b242-5e5c797bc288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "663620e9-292d-4e2d-a1c5-cd1b943e30ba",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f17893-fe2a-4990-94e6-4d346929d95b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d0582ed-3b16-4439-99c0-9316b4966e75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6858b24d-d9be-4eb5-b69d-aaf5adbb1e40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e4b725b-4296-4d03-97c2-34c94be2769d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec8841a1-8b59-4dc4-ab0f-0edb8ad49b2a",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a98c31c4-8f79-42bc-b6d3-c7a2e1607cdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1ffc083-e2b5-473b-b140-afa8ef3498af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb25cfb4-9a2b-4cfb-a953-9938e443c32c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b9b92d4-5676-421d-acb2-67f1f37da772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "694513f5-20c3-4fa2-99c3-7376a08db8be",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc29219b-7d17-4c01-b6ce-efa035411229",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b478890-6e20-4f30-963d-ad8fee05497a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f335a876-e6fd-4b81-9f3e-8ff2ba202a26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e72ce3b-93a0-44d2-9f4a-bcafe0f5b823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fde94ce-ae2f-4302-a4a7-2c994d50aec0",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe1d066-1095-452d-afbe-722f0fc4eee5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8fadaaf-0afc-42a0-b2d0-9fbb2eec136f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd0694cb-1b4a-4dc3-96a3-ef689395ea0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06f5282c-235e-42c7-a5e7-bd1a71ddae20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e857f81-5754-4015-9392-b57942ef758f",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1fc0ac-2ab4-461b-8f77-451503c094da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf24d2c3-cc5e-4fb9-8563-141cd2eefae8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5946195b-d6a8-467a-8d75-780c818b64f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52db45bf-ee2d-4830-a73f-9c10207de948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1a08d4a-1e28-4c75-bcb6-aa447cd4e111",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12e876fc-a88e-4bc3-b621-13fc62479c8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc877c85-a908-4242-8259-578b01e31776"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a98a05-8c1a-406b-8377-3c6f41e3a4ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd89a5c1-8df6-4d24-a87a-f641f9efe79d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e64606b7-3c0c-4ee8-b3c3-3359cc95a4c1",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf2e3184-4c4d-48d5-8b2e-00b9ec12306a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b548860e-7e70-4423-8b43-1f50e1ce44f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ead69113-f961-4bc9-bdcf-ca5541acd1c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c30c5112-05cc-4540-afcf-85cabfc7ad10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbac836b-44e2-450b-80c9-131d9ab7f520",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8101a57b-4cca-4d98-8fc8-2dee9c10f0c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63ab9ec0-46dc-4478-8932-a04108306d47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b7d93a-c8d2-4427-b478-67fc20492e0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8993ad93-62bd-4efe-97bd-fb04133cd2f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91cad3c2-3148-4b05-85c1-60f8b47b869e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d96324b3-8657-4f54-8cd2-bd765840a570",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e9b94e3-282e-4c19-8b6d-c61209fda783"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92065d91-89ba-4016-a3c9-f8434f67d132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9109894-c88a-489c-82e6-b19ceaab34e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c6d873e-de5f-45a5-8aa1-6c230ecc838c",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db67ea84-1c2f-4aa8-bfcf-92c8adfb9229",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "512a0726-0ab4-4315-a5f0-8260ce6d4c75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f8e6e0-ab7d-430e-8f67-ae7443d93565",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5051d7f3-49dc-46d8-82b8-db901c7a5d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a5a0db3-12fb-48aa-8977-acaec5f5be87",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f161589c-c4a8-477a-98d3-2109e6416046",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6822849e-7d94-476c-98ef-a99b341f059d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdc98bdd-2402-4b25-999f-541c597ce4ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64e152c5-6c98-4f6e-83fd-4ad7f3994864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2310348-3a5c-49be-879e-932735d9fef6",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6995e3e-6cfc-40e5-a578-73bdd80aac72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a243081d-d7d1-4818-8151-1f8523396a0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05729776-196b-4061-a129-4b2c4d695ecc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d7f1fd6-a30a-4b8f-8daf-fe6eb17c9a90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffebef2f-7281-4003-a8bf-0776a6e498fe",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3df9a1c-6908-4002-974b-70e913903faa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7069eeaf-ba35-4527-b84e-36a26afc2d14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1a2cbf-2d2d-47ec-9ab3-7aac389415ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b3df5b8-a957-4319-a537-4cf341091755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e601f7-5518-4b25-81f5-f37349907095",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3226c0cd-76ab-4393-9fb3-5ba539c09c80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09543dbc-9603-425d-adfc-4b591e2213dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8873ad86-9ea5-419b-a816-f8af5352947a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "900053a0-cc6b-4187-b173-ff6c877f7382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d549288-3134-43e1-9411-84e66d620340",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c790ae7-4b37-49f9-b583-2dbe5087b90b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a72218e-e3ed-4980-afe3-7c9cc11ab91e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69fa0d93-c99d-439a-8a26-0554ca4dc87a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6971c54a-6830-4b27-9fd9-a10862109599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c85a50d-57cf-447b-9406-0f5fe800dd75",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a0dfe4d-7434-4659-9495-d9f4fa3ab4c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "443d1428-28cb-4595-97e7-2b54a735d489"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82ef72e7-eb95-4050-b1ae-795dea5e9be2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "007b8bf1-a65f-41d7-a434-564a23139cab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d899e22a-0641-43bf-869a-20b3e0ee20ff",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adce3985-89a9-4b15-bc62-0867d2bf2c38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8ee7337-c224-4a34-bf45-df5d77a3fac6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e93513a9-2389-4a1b-9e77-da4868a5c672",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eed7f0d8-407a-40c6-a384-c3792d126638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4eb8731-f1e3-46d0-912f-757df1eaef6c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e773a841-1de7-4ff8-b20d-a802def16709",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5e976c1-a22e-4c4b-8580-d40a123e3764"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9277391c-0e5d-45a7-b5d1-0c1ae5a72a22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f22e6a26-6055-40e5-86ab-4588a8cc81e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cff2831-62bf-4de5-acca-e87de4db4e21",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "279ad616-8300-4913-bde9-3e031b16e844",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ad7e48a-7317-42b4-9315-a3b17c46170b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45c9a85b-55e3-4a06-980b-04e3207f9bed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f633712f-9ea5-4deb-94d8-2e9c6337360c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c3cd97-0742-443c-916c-c974527203b1",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12930daf-914b-4720-b910-cad38be9e37c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b3d6b97-8096-42a4-9763-73ae38403952"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9942bb16-fa26-46cb-8b2a-2dccc86d9537",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce6cc0db-7a8b-40d0-a77d-1fdb3b1bdc1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dcc6c2a-de70-4260-b777-5299ee46d67b",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bc21967-176a-4bdb-8185-a96a80b9b121",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b3bff8c-04d6-431e-97b5-d5915ba45687"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab95508a-8a56-49c0-a2b3-849c8755954c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8222e54-a552-4a3f-a5f0-7ca12be90ad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "800f9f29-8094-450e-9566-fc874fd083bb",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e998602b-03b0-4eb4-9f89-5d6c3eaf014b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1ae19db-8157-4443-918d-279001c63e12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8720b42-38e0-42bb-8f29-42b05b24a1ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "537378ce-80c8-42d3-813c-f726e6a5248d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c0bef5-6640-47b8-bd60-2940b9e7510b",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d279dde-42c8-487b-872a-30cf3b9c9128",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dad38993-b6df-451f-8946-4117ac278af3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa116dc-3227-43b7-b951-6686b3ef7f14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c32c06b-6370-4f7b-87ff-f827f11ced7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83cc983d-6a47-400b-996a-4dc78b2e5855",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e95bf3c6-0a53-46f6-9049-2f38e38455b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40651807-61e2-484b-a6b2-9fdd912fbd5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19241ee2-c051-4d6e-a29c-8aa938d803b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee7e1676-60d7-4883-ba05-b3434afc51d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fd2f61e-5add-4da8-a71f-fae8936ae8b7",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aded7ddb-9d71-4681-91a8-c18705efb71b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b41638bb-3d84-4ab2-bc55-c10b4a375d7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9c85624-cb0f-4dbb-abb3-b404fcd08aff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87ca66b5-1e4f-4cf9-90c8-3d46bda0c374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e61b560-f895-4bc5-9b01-97d4d8b1d0b5",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30cfbf7a-cefe-4c94-8092-af2219163c27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7311065-f4ba-41bc-ae2b-5af30df6a993"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcd578c2-3cd4-4bae-803f-08adbd9990ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae882663-f2d4-4fc5-876a-f8d4b5fada30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ddfff5-e499-4a05-99e3-80709f990361",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee713378-d980-43a4-b26a-512f36ec94b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcac611d-20a8-4f04-ab1a-4d1548e129e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18f125ac-3e31-4114-92e5-c1d38e86e9e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bb1fe4a-8707-4769-b649-8bbe8d472f6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17c1c24-cdd5-4a19-b9ad-06d8152cec33",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8b2963b-4224-4381-961d-ed2e16ecdfb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ca09984-bcbb-498b-99bc-15fb6dc8d4f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f37946de-e33c-4c5d-ae52-1f5687214bb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6245fc3-423b-4999-9554-d325f339fba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1235302-ecc6-43a3-8416-f4cb3c1d62d7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea4a918e-5d9c-46ec-8d31-e7c5e84e9d7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbdd049e-7497-4462-8254-ed364bd51c54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "535d22cc-416a-46f2-bb35-2de61ec57456",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9457c64-67e7-4031-a84d-ea8a9acb32f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f289a219-0055-4268-a41a-fc71f5b0255a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e294e2d-b6ae-4a04-a631-8637cf2fcf1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3a7c558-56d3-409b-8b9b-583df4ffc8cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce052bc-b2e9-4f2e-80fe-d04f7a9d377f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acbf6cf7-40d8-4583-b3b5-409bdf756b98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b39ebfd-18c1-4b59-8faf-8a23566db9bb",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca425e6-4cf0-49d9-ab37-7567bc4b014c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b43cf74a-e968-4af9-8d8e-72c5fe7b7f27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13c763df-498a-44cc-b712-5b9df7af6f9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e92487ec-118c-4664-af68-e462b91d8022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d3ee40e-3111-4890-af16-479fc16c563d",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "709ed547-e83d-48c1-baec-3fb8a1e29781",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "840f21b6-bcc5-486f-b419-95589c55fe55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f103ce63-a2bf-43ab-8a72-89af41dfb7e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5200e91-77a4-4c45-bb03-43ea9da1ff78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bef0936b-5bd7-41b2-ae6f-af718218db77",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cda08882-f36a-457d-bc37-440a73107a82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21579e01-d489-42d3-bdb9-7f9e752b7f23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2e6c3b0-d2d8-435d-835b-958a2b0ca6d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a16a361-fb84-4b5d-935f-9b417438d52b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46a25ce6-aa26-40b1-91e1-72a4a56f38bd",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a22578-c2d5-46ea-98ef-09b581065a47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "973ccdaa-a9fe-4708-be28-e067c1fd3306"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b358642-06ef-4b33-a9ea-efd05855a6f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d435b429-5b64-4121-813a-413251398f4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b1ff1c9-29dc-40cb-8c5e-d4f7a9465a04",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdbe81fc-6381-412d-b9b4-948252156900",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ddc058f-ee41-42a4-93c1-89e96d585cac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e84bcedc-01ba-4fc8-a596-d456b2579e6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35857a27-ff64-4efb-9619-d5d07f1f2bb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "369cae49-5681-4301-962c-aa867bd8ee07",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2b2716d-7833-44d6-a219-55b042505a3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9354b789-8dd7-4e9d-aef7-e22d23c1f4ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "055f9f56-26fa-400f-be56-8e72d8af515e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2e04785-7896-42ff-bcdf-e8c480d4b0f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfd6d7ec-01a6-41d5-8a29-d71eb367c976",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5da072e3-fff0-4cf7-bc12-85f08784f57a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4a42a9c-9446-4de9-94a3-f811e3892195"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "137fd335-e6e9-408a-ba6d-95cc8e9d2765",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6954d33-744c-4782-8578-f27f4e933cf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fecb972a-ccc0-432c-b17c-5c2c421687d0",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae4bbff-5fc2-4582-9272-55ade5496504",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68e08a6a-31b2-47e7-a19f-6be992f16ac7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "479fffbd-b80e-48c2-bc85-b65849ce8be4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "954365a8-248f-4fe6-b519-54bebb5ce0db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab2d76c4-a88a-48f9-94c4-4cd6f809c462",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0176b688-5c44-4d92-b6b4-774682fcbc3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ee964eb-1eb0-49c1-a769-782f570a3027"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d72a27fe-d4a3-4e5e-9295-891496085f9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1a71968-3609-46dd-9f1d-740fc2549c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed027a80-aaf3-4ee5-b0bb-6c0de4d45a44",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31dfe5d0-947c-4038-bc0a-845dbfd6de60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "068fe834-edd9-4a84-8fd8-50db39a3406e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf2f047a-5b6d-4018-afe6-90d98fe62bca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be383f6a-9501-42e8-8c9d-33b77e1b3335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff58b857-d093-4567-9790-c5cfc540a0f9",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0913e16-3e8e-4718-a4ae-ddb2a02b9acc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "515146fd-470a-485d-8ad8-30d1577a679c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09068aef-080a-47da-a447-9fbb5016f4ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6a031a7-2480-4c53-a142-a11a66d97175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da771068-8566-4e61-a003-862d324f41a7",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a000e68c-992c-4f3f-bf0d-2c426dbe63bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bb1df2d-1b8e-4eaa-87b6-59bc788d2083"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da0feb0c-01c7-4fa7-b4df-34678ac8d89d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95401267-b538-46e8-96b7-bd24ab2ae63f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8be1ce5-a566-4fa3-b0fd-f77f0fd6bb85",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063296ba-fa43-445d-94e1-4aef987239d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50b4d722-1241-4a2e-a53e-72db03465a0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f5e358-934d-4f64-8a0c-342abea61cf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3e076bb-397b-4e3f-bbc5-5753fcf4a9a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0d24426-b87f-4d38-b061-b0df21dfab7e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc49c87-850a-4d70-b9d2-51b5d9478cd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ec70ad6-f0d1-44c2-bb69-75f153260e43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3afb2a0-46a3-4725-81be-99430cb720c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2cca096-feba-490b-807b-4f28d2416f01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8c9fdf7-2d1d-4c85-8fa8-79048f086943",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cc168cb-28f4-4226-a0d3-a0750b0b7e77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75462621-71e4-4dc1-814e-4979cf83dcc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d74fe3-26b3-4081-8792-8b841e6971f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec478c9c-96df-4f7e-9691-ba0a434bccf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "293fe58f-c591-4ea7-a741-e149526a4d13",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b8c5ab-eeb6-493c-afd4-096836f865c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe8e26cb-0343-45e8-bc11-a230f6e1908f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec223c60-d4d9-4fb2-9197-9536442ad9fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42547bc4-961d-46fa-962b-655bea955009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b735ec6a-3bcd-4d41-bb6b-392423f1d0b3",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d800bd3-48ed-4082-a7e6-77ff42fd201f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b84ee43-5162-479e-9b2e-e4b6e5150bfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dee816e0-08c3-4e3f-817f-849d3afc3f6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "326e4830-296e-4742-aa36-243e7aceea11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "924746d8-4e62-4b08-904b-c181feed8024",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef6155f-25f6-4311-a8b9-6cf776f46748",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5ea0b58-70f8-4586-8b49-013b99392038"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9404dca7-e392-44fd-9c6d-4d297d4c6d08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02cfe35f-9a91-4d66-b660-e7ec11d18dcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8af9a04-e628-4d9b-921c-470b05656a22",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c9198f-3301-47d5-a72d-72475cd71585",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "859c24d8-e477-42ff-9a4e-a8c0c05e054a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a56d8768-e943-4ec7-96a8-6f5c84e91505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85c3f847-2d27-480d-86ed-115f521875fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c34374bb-a2ec-4ff3-b854-9d49aa344d64",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "517c137f-caa6-497f-b517-b2b61ef94cca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "931e0817-3b1d-4304-9543-aa27c8c477ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd5f429-4f3e-4ddb-92df-6c649421e108",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddd0ba11-af0f-4e64-b817-a75cbdf6ff42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c568cc6a-29a6-4ef6-9ed9-2a26480de43f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5974f82-50c3-41fb-beec-8db3a3dd3831",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90cee65e-bba6-4fba-916e-41c9997371fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4021c011-50ab-448e-a3fc-cf2cf734ecfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94ab0357-300a-4671-8f03-d020ea9de1ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1406a375-8030-4733-9db4-a9726baeedcb",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd894a56-ff8a-4284-aa5c-b348dafdacc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1eaa252f-fa03-4195-af64-fbaa8653bb13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bdd3a72-3e4c-45ff-b3d3-7f491604cde9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "899a182a-156b-44c8-8697-c035e35cf154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d235fb-c181-483a-aa31-f6c4d8a71a73",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "666c78a7-6d9c-4ceb-95dc-1d667b662a6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba1f35f8-a92e-4a3f-81f1-ce88f6cb3890"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aadea0ca-f601-4352-8564-af39dddaf44c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ea9b7f7-bf04-4b2f-be5b-edb8c6e3a1f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3e3e9a6-4ec9-4c51-8c96-75fdd9582180",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "617d62ad-889f-4d55-b1e8-5f2ca22c40c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9a33543-9330-479d-8c20-2d6a1ffc2369"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b5c7fa9-f311-4e35-bc77-6ed95b95af13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "805aca50-0d71-414a-8023-6ea1e741c84f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b9d6c38-3bd2-423d-8556-64a00cee5a69",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57157a61-623e-4145-8a99-25a4602b6442",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9a1f595-a3c8-4f8f-a07c-2ba36ab1212f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "082e3b0b-7070-400d-9691-8fd74fe3ac64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3d5c2ed-4031-434c-bc57-df22613d6a04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ee89de-8811-41f5-ad9d-0eed7d0932a6",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57e9cf2c-e377-4a50-a3fe-440365b0d14f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39536d31-dee1-4499-bc53-a967533208e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fc467f8-13bf-473b-8d1d-6336b1b5cafd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7e93319-bb4a-451e-8c5e-719a8de052d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7262447b-6327-4c57-abdd-6aca4f63f273",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78dbfd64-8897-4a4d-bc9c-cde7449968ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da69d939-2e5e-4f96-bbd1-940c8534fbd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a325ef8b-ed43-4a30-8b99-8b41ce667fb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8161422-0527-4bc6-ae1d-f2a8207f3a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d599f11b-d3ce-4b4e-a9e3-65f86318330f",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e3d26b7-c77b-4b56-92f1-17e622249396",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3502802-1234-4b15-8635-9ff29fc878cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7bec60a-daff-4470-bd97-1bcf05512d74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32c005fa-a01c-41d8-912a-1bacb06b0657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1578641-4c63-462a-829b-e148ea026cea",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc4896ed-0ee7-4c00-a589-0d1f29cba8de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "451cb67f-d17f-43d9-9f5a-34ef99792036"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ea9865f-1b2a-4873-82c7-a6a382852aa3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f384f425-4293-4062-b532-7701597f388d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdfa6030-cc9b-4e6d-8422-f77bba656ffe",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34d695a7-6882-4ac9-8ba0-b95d1ecdc072",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3bb1923-6f0c-470c-8ada-f2f38da4fab9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84cffd63-93ec-4a4d-bc14-a1327ed86835",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fefb08f9-fa2c-4fd2-9966-d5461651c63e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33fc48e3-29b9-4bcf-b2e1-7a0dc5c8732e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4f3499a9-aaa5-4f52-b4c7-ca2ed8768dfb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d1e1276-b50c-4762-b562-c575a3d3d7e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cd57f257-ed9f-49d8-a49e-1ec9eb251cd7"
                    }
                  }
                ]
              },
              {
                "id": "d1c5a2cf-b22a-4b95-9902-eef9415d3a85",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4ad11799-15f9-430c-b67a-a2232d10ae9e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e199d97-38ff-4d33-a727-3356a6846b1c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "eb3e474a-9a62-42b2-a7aa-fa8ba7cb8bfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d16a09-faa8-4f30-902b-b5057605b37d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc8da52b-6115-4aa9-a7dc-48b6fa4dd3b9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c2596751-2bf2-4788-9b7d-cbefe08d05f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ab1dbd4b-c9f3-48f9-86ff-09e68a9c644c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8393c703-a76b-4ba7-b897-ac1a15773d1a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9be5f39c-64f8-4b6f-bb7a-f8c28acc63f6"
                    }
                  }
                ]
              },
              {
                "id": "27482d62-3a6b-4f58-b089-a1fe4f7aa7d9",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "a1900d1f-c4ff-416b-ab9b-cbbe4b35aa78",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "084c3c0f-fc1e-4154-a0d9-b9c2f8c6bc12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "a05ecb0f-fd86-43da-9849-048a5fe139f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceaae1ae-1ea9-442c-84ae-729464b29c01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "528fa2f9-f1ad-4bd0-aea0-c65e02ce4462"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8cc117d3-8222-4aaf-b126-84b369a60a32",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6f276ce7-fd7d-4bb7-a765-e6f99bc69663",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e346605b-4c7c-4985-9f52-bee3c5dff587",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "34c0d6a9-e61b-4e05-ae4d-d150bbfdf404"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dcceea15-f3c9-45d8-a170-aa445db3be22",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "32fdfc96-9e43-4ee8-9394-943db376ac8f"
                    }
                  }
                ]
              },
              {
                "id": "6cd9fb6d-07ea-456d-abb5-16e9d8eb015c",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b9ab31c-529b-4168-bff6-096a311bb246",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6bbab485-44d7-4b50-8fc3-1af25ede1ae5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b496da3b-c74e-4d9a-bfe8-dbdf6cddf8c4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1050ce85-2729-44ee-bb82-727ffe83d968"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a0bb1267-6ff8-4860-a064-9d837a3ab949",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "3c091ab8-2912-42c3-9df3-464209737029"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "deee305d-d1af-4031-9f39-d97068610a34",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c8ad6bf7-c219-4e45-90d1-abfd2868e6c3"
            }
          }
        ]
      },
      {
        "id": "e9df3f5c-9939-4583-b3d9-9eb9f6fd7e83",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c7c963b6-c4a1-44b6-997b-516d7676de5c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "48b0d0a1-27b5-4daa-ae2c-8eb13138dcca",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dad8bf64-8fbc-424a-a24c-73c592ec7354",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a0273ec-0d89-4ea3-878f-9ffa6dd8c182",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "eeecbaf6-48e5-4ec2-bfe4-9e3253ea2a19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bad81b76-0348-4352-a19a-f4c0de5a60df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fc579d9a-71d8-4242-a1b9-694b027e6224"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "874603fa-1e05-4dcc-8156-02ee5cf9b8bd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c2873de-a20d-40ab-8af0-b4ee2df07ecc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "47c766f5-d27d-4eb6-bb2a-780dba8f4391",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1be977e0-4d68-4103-bafc-6fd349f620cb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e65b198e-bf9e-4aef-ad6d-3e0e3b3203df",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3a153eae-886c-4068-943c-ba8e1c1f9db5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1c912268-1866-4025-9919-92bb5ee989ef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d8fc0ac9-56a2-4d6e-92e3-e5c64e5071f4"
            }
          }
        ]
      },
      {
        "id": "af7047e8-3632-4c7a-82ec-b5c6cfb71cd2",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "e6e57a6f-5f2a-4d52-b17f-d93e436fd2fb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8292a6b9-7520-4bc3-8efd-09f82329ae1e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9e3a96d7-4cb7-415e-9a3f-ff25cc30b0de",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "967dc596-4951-4a16-8bb3-821ad5c28029",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d517a22-b3ed-4692-8b3c-d2eab79b2921"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "683146c0-1d3d-4a2c-93db-bb1f086a983e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "830d2b21-836e-41a7-a6e4-8982b2d07c31"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eb0fda02-ea8a-43cc-8aff-fa326a8d36e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "33b16d9b-23cc-4957-867e-8df17d650eb4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a16e398d-75e9-4293-b1cc-84b591adf9e3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "43662a88-b8fe-42ff-8711-f14b97bffb84"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "01fbb66c-1fd2-4d3a-95b9-53362f7c47a6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0481bd47-082d-42cf-848e-224d47774cd6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "58c5e70f-5aca-4d9f-9e82-b5b1d85dc3b8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8ba25bf4-80d9-41ae-987d-4d746e48a1e0"
            }
          }
        ]
      },
      {
        "id": "f08412cc-ed38-4316-93bf-e2c2de042fb3",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "df447ae6-742f-44df-b584-26d39c820bf6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "35cb3ea2-d586-44a5-9d52-793af27c1ee6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1b660ac2-3d82-4cee-a185-7f5717bab738",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60b712d9-2c0d-487c-a419-39bea872aa2c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49eb2647-9b8c-4fe9-b684-bbf315c6d1c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d27ec78-beb5-4229-a945-843eed21fce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6fb7ce02-ebec-4dd0-a8f8-fcc8bf58d675"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a32fdd7-5ad6-431e-9741-16e3b689ae28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c12feace-7737-46df-8d4f-ae9ecb372290"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "edc57b18-2036-4ef2-9e1a-71919b751e80",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "74c39a1e-8bfe-4841-8564-5246828418b6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9c60b95f-4b6e-4108-bc7f-f51bd867288e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "52741a07-5b28-4d96-8d35-3142dd0e2aee"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2fcefcad-34f2-4991-9421-c37cbb446f86",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3bc1bcbf-064f-4853-bfd4-047f8446c0ba"
            }
          }
        ]
      },
      {
        "id": "5e927ed0-e4ff-42a1-8b1b-b21f12889023",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bba3f7c4-7cf1-4baa-a289-a02ee69d3616",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "94da0310-cb7b-4030-a357-54153a5a5722",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "5e956f82-9ea7-44a3-bc2d-cca674f43b99",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8b34ca91-343a-4819-8354-7a05274c1d2d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ef6525ae-ee69-4981-87aa-586e08b0c582",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 71.28771929824562,
      "responseMin": 10,
      "responseMax": 566,
      "responseSd": 88.61195529449843,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1707438793846,
      "completed": 1707438823443
    },
    "executions": [
      {
        "id": "d87f2be6-6def-4d66-aa9d-d7c2f5f5d4ce",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1edb4e28-a553-4ddf-8b70-361c6c4ab31e",
          "httpRequestId": "f1882d23-70eb-4d99-a283-309ac3dea301"
        },
        "item": {
          "id": "d87f2be6-6def-4d66-aa9d-d7c2f5f5d4ce",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "6a1fa74e-404a-473a-b1f4-8adca3af04c6",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 0
        }
      },
      {
        "id": "1a34af02-75fa-4f73-8aca-8e8bc4b07883",
        "cursor": {
          "ref": "3dd415b9-f735-4713-8357-68d29632a018",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9acadbb9-5a07-45fb-9acb-fdff6eacbcc2"
        },
        "item": {
          "id": "1a34af02-75fa-4f73-8aca-8e8bc4b07883",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "d01e46ef-2022-43d2-b4d0-96ba059554b6",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "5c058039-eedd-4f76-959c-8159bf1e019b",
        "cursor": {
          "ref": "2f5d5e18-53c2-46bf-8a89-6107b2bb4a73",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "681a8f49-bd16-4eb4-af9e-4fa6ed4b9979"
        },
        "item": {
          "id": "5c058039-eedd-4f76-959c-8159bf1e019b",
          "name": "did_json"
        },
        "response": {
          "id": "310a60cf-d49e-481a-a012-f2c9861b6de9",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee048c45-0736-4d56-9010-e278f56f709d",
        "cursor": {
          "ref": "8d854cc4-b03d-4373-89fd-f78caa42c35a",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a3872fcc-738d-4cb8-8211-32fcb0027071"
        },
        "item": {
          "id": "ee048c45-0736-4d56-9010-e278f56f709d",
          "name": "did:invalid"
        },
        "response": {
          "id": "66d2d949-a3af-4617-9b13-37445bbf90d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee048c45-0736-4d56-9010-e278f56f709d",
        "cursor": {
          "ref": "8d854cc4-b03d-4373-89fd-f78caa42c35a",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a3872fcc-738d-4cb8-8211-32fcb0027071"
        },
        "item": {
          "id": "ee048c45-0736-4d56-9010-e278f56f709d",
          "name": "did:invalid"
        },
        "response": {
          "id": "66d2d949-a3af-4617-9b13-37445bbf90d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3289c59-a0cc-4cef-a5ee-a7f91500dcba",
        "cursor": {
          "ref": "a030a22c-b777-47ba-8f5c-85b10d1bd7cc",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "bd5a8377-39b7-48f3-b0a8-87d4a9ed2776"
        },
        "item": {
          "id": "b3289c59-a0cc-4cef-a5ee-a7f91500dcba",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "909efecd-e216-4c02-896e-a3f4b6d62c3d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 316,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96708a32-4a52-4255-aa36-37053a14be2e",
        "cursor": {
          "ref": "ead1b1c3-27b7-4998-a877-bdd2695a0834",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "96287b91-4b20-4e1e-b400-6db80c843eb7"
        },
        "item": {
          "id": "96708a32-4a52-4255-aa36-37053a14be2e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a0c65c83-a212-4958-a90f-162db1ff76aa",
          "status": "Not Found",
          "code": 404,
          "responseTime": 40,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cbc355c-a43b-41fa-85aa-39604449f2ca",
        "cursor": {
          "ref": "0ffc54c8-909b-4141-b921-92e2866d6494",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "7b922a10-6da7-4b78-af99-2d35627c8f9c"
        },
        "item": {
          "id": "7cbc355c-a43b-41fa-85aa-39604449f2ca",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ecd27e47-6c5e-4d2f-b731-8d31355e33f8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "635e1577-6f5d-4bcf-93c5-be5de2145259",
        "cursor": {
          "ref": "b63092f8-7286-429c-8e71-5ba705d3b4d4",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4f38d95f-63fd-45ab-a5ff-58698b4325d9"
        },
        "item": {
          "id": "635e1577-6f5d-4bcf-93c5-be5de2145259",
          "name": "identifiers"
        },
        "response": {
          "id": "ce74f18a-6a34-4777-8a94-54ff06a9c992",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a7ec173-3eed-4215-b918-ea5678c0b657",
        "cursor": {
          "ref": "c2b78750-e3ae-4d11-bbc0-a4a1024133fc",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c13e104c-ce74-45f1-a828-a46e3e600e0a"
        },
        "item": {
          "id": "3a7ec173-3eed-4215-b918-ea5678c0b657",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "41c59332-4d7f-427b-b6c3-fc39ac88aaa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26a2e312-9c66-4be1-a6cf-a52370c84c3d",
        "cursor": {
          "ref": "0f948cec-c24b-47d9-8219-2c8b12243907",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "27ad9270-cd22-43e3-b809-8d7cea79fc97"
        },
        "item": {
          "id": "26a2e312-9c66-4be1-a6cf-a52370c84c3d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d925f8df-c7fd-4da7-845c-2de414b685f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b3f4842-0a63-4cb7-88ef-3f886206dc3d",
        "cursor": {
          "ref": "ed77b3d6-3f14-4350-8c79-c700a8251470",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8eb83285-93e4-439c-ac6e-cb388b2ca5ac"
        },
        "item": {
          "id": "7b3f4842-0a63-4cb7-88ef-3f886206dc3d",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e2450b03-a0e1-4d7c-85e4-d428b6263fad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f991f3d4-c399-4cfc-a2f5-81fb810e4fc7",
        "cursor": {
          "ref": "ff79c27c-46e8-4375-9750-cb0a6e292a07",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "9817ef57-a35d-4067-9097-8176a17fe542"
        },
        "item": {
          "id": "f991f3d4-c399-4cfc-a2f5-81fb810e4fc7",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "2af8aed2-232a-4b06-bc23-5a08d5585300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2603a2cf-b8f9-4751-9a2d-487b55129b9e",
        "cursor": {
          "ref": "0bbb677c-b11a-4dfb-ad40-cb4fdc44d771",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e18b5fe4-5e0c-40f6-ab41-3b92f3c738d0"
        },
        "item": {
          "id": "2603a2cf-b8f9-4751-9a2d-487b55129b9e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a7cc3e2b-ac30-46c7-a061-909e1978b425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f2f79ec-b8a9-4ade-a41c-d9dd0e075b9b",
        "cursor": {
          "ref": "ef3c2916-d350-4375-ba7f-99a1b0829b14",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "428775c0-7525-4b72-ba1a-0dbaaecf5e76"
        },
        "item": {
          "id": "7f2f79ec-b8a9-4ade-a41c-d9dd0e075b9b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "8b7c2936-3a8b-48af-8522-8fad4b6979d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4916d79-aa59-47dc-9086-77e41fcc5557",
        "cursor": {
          "ref": "3f48a154-7e2c-4143-92de-2a5d6189eacf",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "020205fd-6ee1-491a-b3d0-74ebaa9aad1a"
        },
        "item": {
          "id": "e4916d79-aa59-47dc-9086-77e41fcc5557",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "7b6676ac-6910-4319-8e11-afd0307ee9a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c4c464d-d8ba-4d69-8873-b20b3e41e3ec",
        "cursor": {
          "ref": "8ac0143e-6304-47f7-83e1-9839e2496ee2",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2268f515-083f-4beb-806e-5b73adec45c2"
        },
        "item": {
          "id": "8c4c464d-d8ba-4d69-8873-b20b3e41e3ec",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "12ade86f-d7d7-47db-bd6d-9098de7e30e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75654913-8d76-4cbf-994d-4140e130e5df",
        "cursor": {
          "ref": "3b53115c-d07a-44cc-a554-92be00ed84b3",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d747d7e8-9384-4083-b56a-fed3c195da01"
        },
        "item": {
          "id": "75654913-8d76-4cbf-994d-4140e130e5df",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "50163435-9844-4771-acd3-3258efa41e53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "152e3e33-7c55-4f78-8239-7506dbb30590",
        "cursor": {
          "ref": "2c069dc5-337d-489c-b54a-c59145b29819",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c9eb4388-72a8-4901-981c-e7c7caf9b916"
        },
        "item": {
          "id": "152e3e33-7c55-4f78-8239-7506dbb30590",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "593299f6-11fa-41cd-a4d4-cfd140fe3204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdefc241-e0eb-479d-97f5-a1a58443a80f",
        "cursor": {
          "ref": "3d46b1f1-97df-4410-b3b2-5667d2ad7116",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "88c1a222-6996-448b-8d14-302cac99cbee"
        },
        "item": {
          "id": "cdefc241-e0eb-479d-97f5-a1a58443a80f",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "d5fe4c4f-9577-499e-a991-d15d6eaa9f9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "806e97b6-f8ef-4ede-98c7-9b9e1472d483",
        "cursor": {
          "ref": "5d2496ef-9b92-4d31-a60b-c32295902db2",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "83b32d28-59c4-41fc-8575-7848d3694836"
        },
        "item": {
          "id": "806e97b6-f8ef-4ede-98c7-9b9e1472d483",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f6b04778-30de-44fc-bf21-ffdd221abe08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "957d9dcf-03ba-4cb6-9339-61b25cf4f6a8",
        "cursor": {
          "ref": "2d6de62e-28de-479f-af73-a4b754193cdd",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f66fabb5-dd27-4107-9f76-33ba4996d67c"
        },
        "item": {
          "id": "957d9dcf-03ba-4cb6-9339-61b25cf4f6a8",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d52223bb-b13c-41d8-89b4-9c5451676f5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25120ae8-e5fc-4f30-9d96-59522af5db1a",
        "cursor": {
          "ref": "aeaede47-a99f-46ef-b285-5235d7e1e90a",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "1f898c07-392c-4c03-af23-2f92618c6fe8"
        },
        "item": {
          "id": "25120ae8-e5fc-4f30-9d96-59522af5db1a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "71adad94-4870-4c9e-9422-1ea2eaf6eb1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8f0eb89-6aab-4bf3-9578-6d681235cc40",
        "cursor": {
          "ref": "ea077cb9-0483-45f4-84ef-f55b8a5034a8",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5f39b621-fa92-4360-aa26-5b9471f7c23c"
        },
        "item": {
          "id": "b8f0eb89-6aab-4bf3-9578-6d681235cc40",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "74762b6d-5847-4a8f-8a5b-dfe9bdbcc6b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a186bd87-9fc4-4af3-a307-cf3c2c72c275",
        "cursor": {
          "ref": "fd7829b3-aa60-4067-a893-a4ec70ad2848",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "bde80635-6ad2-42a8-9b14-bc7c828761db"
        },
        "item": {
          "id": "a186bd87-9fc4-4af3-a307-cf3c2c72c275",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "56d95772-7d1e-402d-8511-7501f49389a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "790c41e1-3c2a-4aab-b695-0534c255c0ec",
        "cursor": {
          "ref": "1c4ecde0-af87-4d52-9d32-7ca5838e7879",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "aab72aa4-6ef9-4ab7-a978-45d3d7380f84"
        },
        "item": {
          "id": "790c41e1-3c2a-4aab-b695-0534c255c0ec",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "415902b7-e38c-4b39-8861-175488c3a040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29369151-53fc-483e-9497-5a69c7cb8775",
        "cursor": {
          "ref": "2465a6b4-c80a-43bc-9f6e-c739664fa0bd",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "eec82165-1740-485a-8714-2788cffc7b79"
        },
        "item": {
          "id": "29369151-53fc-483e-9497-5a69c7cb8775",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "157877f4-7c49-4573-b6fb-e4c6a990bae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08a93e8f-f251-49e6-a938-ae8203d681f4",
        "cursor": {
          "ref": "c1d33f6d-6101-4a16-8270-d2cec5f1254e",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "0819447e-1fc2-4f24-8f71-642d4ebca8cb"
        },
        "item": {
          "id": "08a93e8f-f251-49e6-a938-ae8203d681f4",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a982cd67-3fa7-46a4-949c-be0c94c2bc1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f45e147d-5c0a-477e-9674-d5232d7abd78",
        "cursor": {
          "ref": "4e8263eb-66ab-4723-a11f-61b1de6cd43b",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "40247e9b-39aa-4e1d-9247-a2b5418add9b"
        },
        "item": {
          "id": "f45e147d-5c0a-477e-9674-d5232d7abd78",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "376d107e-548b-4c33-8dd8-d5746b07104f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7645660e-a16e-459a-bfaf-76801a0b810b",
        "cursor": {
          "ref": "e81fc28d-e9c9-4da1-aa8f-6698a0d7303f",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "bf45c20d-bed9-40f6-952e-09db38de7888"
        },
        "item": {
          "id": "7645660e-a16e-459a-bfaf-76801a0b810b",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "3e332c21-2446-419c-a35e-553ffc44ecaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3a16885-af67-4a80-b98c-20918fc5a035",
        "cursor": {
          "ref": "127e5dc5-e4d8-4185-80f1-c3bb16809d0c",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "63c1d9ac-ab8f-4f8a-bf7d-7c5d44437904"
        },
        "item": {
          "id": "a3a16885-af67-4a80-b98c-20918fc5a035",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "466967f9-4bdc-43a2-960e-43274a81b1df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8010d9d-34c0-485d-82f2-3c2f29fe1d54",
        "cursor": {
          "ref": "6e3f6c66-0d23-4963-bc15-7077211a7a85",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "fe806671-65f9-42b2-a3d6-d888a130ff1b"
        },
        "item": {
          "id": "b8010d9d-34c0-485d-82f2-3c2f29fe1d54",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b2028642-3949-491e-93fd-2bdf651767f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ffc9318-9988-462b-ae19-bb7af154d65c",
        "cursor": {
          "ref": "0b8ab64c-2de5-4b8a-95dd-ad5f5c3d80b0",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "db2d92b7-fd4f-456e-a73d-549f0148fa62"
        },
        "item": {
          "id": "9ffc9318-9988-462b-ae19-bb7af154d65c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "554a9e9f-a9a8-4407-bba3-89f7ff2f8f96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c01999e0-1fe1-400f-b590-74325dae9975",
        "cursor": {
          "ref": "c76669f7-e228-4420-8939-76c7c66c10f6",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ef7f2ee5-18a2-4a5e-9a85-9bbe2270be8c"
        },
        "item": {
          "id": "c01999e0-1fe1-400f-b590-74325dae9975",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "f85f104d-38db-470f-97b7-77a991143e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49d320ae-b3b4-44a8-b92b-accb8831bfe7",
        "cursor": {
          "ref": "549e962b-9f48-40a6-bc14-47fc7445cfc7",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5777869f-a564-4240-8151-1fe24c470412"
        },
        "item": {
          "id": "49d320ae-b3b4-44a8-b92b-accb8831bfe7",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "56f4aa59-aed0-409e-ac8d-750531b8dd00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc2dfe32-6382-407a-b7e4-3b7c70ca010e",
        "cursor": {
          "ref": "e9cd885d-27ec-4774-9cdb-fe9a3c260103",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "34823568-6692-4cd1-a67d-ba9daf07ef1b"
        },
        "item": {
          "id": "fc2dfe32-6382-407a-b7e4-3b7c70ca010e",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "626ef02d-e109-4672-9c53-2a03323575dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc289161-39a3-4975-a37c-36b7ed58b0ff",
        "cursor": {
          "ref": "ff49434a-880b-4a17-ba48-01a6b725561d",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "ed39d512-27cc-4b45-84ef-55dcb7e89c4e"
        },
        "item": {
          "id": "bc289161-39a3-4975-a37c-36b7ed58b0ff",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "a344dcdf-a31d-466f-9851-ee860d46497d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a644c147-7598-4336-8788-1631f56f3e48",
        "cursor": {
          "ref": "6af3d6b0-6668-4adc-9a8f-24cc2cdceabb",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "96bc192d-15ac-4b64-b78d-d8865ce835e2"
        },
        "item": {
          "id": "a644c147-7598-4336-8788-1631f56f3e48",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "bb1a5d40-e4e1-4f80-b36d-21fb2b31e62f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b51f927-25d8-43d4-a60a-f525acba9f09",
        "cursor": {
          "ref": "c8a0fdfc-89db-4089-9c8a-4f7cebba4233",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "647cbcf3-5c62-45d4-8df2-ff615c5b876d"
        },
        "item": {
          "id": "4b51f927-25d8-43d4-a60a-f525acba9f09",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "82ca449a-fbad-47a7-bcbc-dbf3f16b8ce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8db86d13-7dc8-42ca-8d3e-7822fed0e546",
        "cursor": {
          "ref": "54551f1e-73e7-4f12-8e8e-5069ae100bb5",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "7013aaae-26aa-4a12-b9f5-83486b893d16"
        },
        "item": {
          "id": "8db86d13-7dc8-42ca-8d3e-7822fed0e546",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "71989806-b7ea-44dc-b604-415c0a100f11",
          "status": "Created",
          "code": 201,
          "responseTime": 566,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "6fe38802-5bf8-467b-9c6b-bc5bc74ad73c",
        "cursor": {
          "ref": "e6626478-4b28-4c7c-aba6-d3b9d8ab2d5d",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "f4491adf-71bb-49f8-bb6a-49a04daaf7ed"
        },
        "item": {
          "id": "6fe38802-5bf8-467b-9c6b-bc5bc74ad73c",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "009a7c09-a63a-4392-bbb6-51808417dfe9",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "4c6e46c6-0a31-42d2-8c81-6f5f18d5e67a",
        "cursor": {
          "ref": "506687e6-dfeb-436c-90ec-f9ad641a59a5",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f850382d-5ffd-4d82-b94e-8ca1ebc4ea78"
        },
        "item": {
          "id": "4c6e46c6-0a31-42d2-8c81-6f5f18d5e67a",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "cbf7e200-444a-492d-8f5d-08890b96f6ce",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "8b0e51e0-fd39-4947-8b92-67c67fcf11fa",
        "cursor": {
          "ref": "d581c070-55be-4890-bddf-51581db7f8f5",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "bbf1f8df-4d1c-4471-b7a9-2c7b1780acef"
        },
        "item": {
          "id": "8b0e51e0-fd39-4947-8b92-67c67fcf11fa",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "3e628d58-fc22-4538-ac8c-baf35ed02553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cc0584b-c083-4147-9591-f5a03addcddb",
        "cursor": {
          "ref": "962c813d-888f-4ad6-a8cd-1a123a17ff49",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "9608d25d-519a-4276-9981-45772c92c044"
        },
        "item": {
          "id": "8cc0584b-c083-4147-9591-f5a03addcddb",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "5d71b107-47b8-47ac-812a-696647c7e93f",
          "status": "Created",
          "code": 201,
          "responseTime": 359,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "b678bab5-f1b7-42eb-a365-73f18048727e",
        "cursor": {
          "ref": "f8ab9832-4c21-4dbd-bdfd-b0de569cf375",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "58267914-ca03-472b-a92e-1c3fcd84476a"
        },
        "item": {
          "id": "b678bab5-f1b7-42eb-a365-73f18048727e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "8c672e0c-42c0-46b0-ac15-56281f152915",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "d2b930d0-f0bc-439f-b82e-bb17c09e0ad0",
        "cursor": {
          "ref": "b6233066-6b74-4aef-b5ee-40382bf085e1",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "7344c364-564f-425d-85ef-ebb6825b6c50"
        },
        "item": {
          "id": "d2b930d0-f0bc-439f-b82e-bb17c09e0ad0",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "023421da-cd31-4013-abbc-6ac30131a49b",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "a69b74f3-3042-4ec8-88b5-7d49c08fc2ef",
        "cursor": {
          "ref": "7ebe5cff-c62f-41c1-b511-2dbd33b0c9f7",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "63667bfa-3bf2-4774-a446-62828781f846"
        },
        "item": {
          "id": "a69b74f3-3042-4ec8-88b5-7d49c08fc2ef",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "46e3a1a8-b525-453b-999b-2c89e4059db1",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "aee9dda1-d2ed-4986-a9ec-750d8850b41f",
        "cursor": {
          "ref": "df49861c-127d-47d6-8ee7-12d7c716e1c3",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8e88393b-3f1e-41aa-9d33-9c959c868376"
        },
        "item": {
          "id": "aee9dda1-d2ed-4986-a9ec-750d8850b41f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "429ec506-fe9c-40bf-877c-cac096eafd2b",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "9019946f-9b6f-4ac1-bf75-1da48702c20d",
        "cursor": {
          "ref": "f413aee3-c817-47d3-ad72-6d700a09dd07",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ed63b596-83e5-4f9f-8894-f841b2a4d3ae"
        },
        "item": {
          "id": "9019946f-9b6f-4ac1-bf75-1da48702c20d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "37d95933-e855-4660-9517-a7e790535098",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "5133149e-4b7c-438d-ba39-d85a60919ed3",
        "cursor": {
          "ref": "0a7dfa3b-9ebd-4ff3-96a6-4327b9ddd21b",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "d8441227-29dc-4574-bb54-54ae8a402862"
        },
        "item": {
          "id": "5133149e-4b7c-438d-ba39-d85a60919ed3",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "29cd3189-d70a-40f1-b07e-5b7374c5e184",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "01701764-60bb-4240-ada1-ccc87de56b68",
        "cursor": {
          "ref": "a730bf0c-d8ba-4151-8a31-45e681dc578d",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "784f2591-a48d-4380-86c0-a9098143d947"
        },
        "item": {
          "id": "01701764-60bb-4240-ada1-ccc87de56b68",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "76c3c762-c881-4786-bac5-7e0235c382cf",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "27c599df-f7fb-4c1d-a188-1feabbea6c01",
        "cursor": {
          "ref": "3865f75f-f257-453e-b16f-2f12589cf43b",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "ef905597-9f61-4066-8b7c-fa431d93858d"
        },
        "item": {
          "id": "27c599df-f7fb-4c1d-a188-1feabbea6c01",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "9b36993a-19c2-4adb-a17f-9150aa8ec103",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "44ea8044-463f-44d0-9cd8-e60eb23298de",
        "cursor": {
          "ref": "28730305-2b5c-48fc-aa0b-d8978834f042",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "991ed9de-954d-4b0a-8741-fa93486ca6c9"
        },
        "item": {
          "id": "44ea8044-463f-44d0-9cd8-e60eb23298de",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ba041b2e-b9b4-488c-af23-00eecc4b15cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c1ed166-575f-4c6d-a3c3-767fc6c6f3a9",
        "cursor": {
          "ref": "a332a5ea-d5c6-45e6-9737-35567a4c3d5b",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "ea815d88-28a7-436e-a642-d0a8b579adee"
        },
        "item": {
          "id": "7c1ed166-575f-4c6d-a3c3-767fc6c6f3a9",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "7c8101f2-5f28-43f0-a9f3-241b107cb5c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d0b7a6a-30b8-4cd7-a0cd-e91043331bb3",
        "cursor": {
          "ref": "3f4f6a62-75ca-4db1-ba10-93c695aeffa1",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "2df25bb0-b496-4343-a924-1e098f3b811f"
        },
        "item": {
          "id": "3d0b7a6a-30b8-4cd7-a0cd-e91043331bb3",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "62ea60a0-e06f-4ebf-96c5-6da8e721feae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edf3ace9-ed6a-4543-ba2c-0da983f50472",
        "cursor": {
          "ref": "93429ea1-47ea-4943-8a62-67420750b97b",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "5aec78b1-0a60-4244-84de-7cb0a60c6fc1"
        },
        "item": {
          "id": "edf3ace9-ed6a-4543-ba2c-0da983f50472",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "bcf4f932-aead-4b10-b24d-3cc15030e785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b32921a1-d3a2-4ebc-88c3-1a23e1354d0a",
        "cursor": {
          "ref": "58a95e61-0a16-418a-9932-dc75df284af8",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7e522e37-5528-4d26-bb27-54b4a1c8c3d9"
        },
        "item": {
          "id": "b32921a1-d3a2-4ebc-88c3-1a23e1354d0a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "ca56d813-5e15-4259-ad52-e837d5025ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b318466-848e-46ae-9d23-07466572a742",
        "cursor": {
          "ref": "e05bf740-e1b9-4dcf-b99c-20ea9e34e7c6",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "7e998270-7257-41db-af51-24904dfb595f"
        },
        "item": {
          "id": "4b318466-848e-46ae-9d23-07466572a742",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "7a04a7f9-a7e5-4a4d-af44-829ef99c99e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "177a71bc-60af-4858-9b05-a8ac4a7a851d",
        "cursor": {
          "ref": "4166273f-be83-459a-acef-bd793401763f",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b0c3f038-950a-4228-8bed-56ac6388dbac"
        },
        "item": {
          "id": "177a71bc-60af-4858-9b05-a8ac4a7a851d",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "26a78a5c-1506-4010-8dae-0ef0b4eed780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb625cb4-d3df-4dc9-9f96-10c984f1ce46",
        "cursor": {
          "ref": "fc04ae09-c2b2-4994-8367-f5b7476e21d7",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ca7dede3-404e-4a0a-84b8-3cbc262bccba"
        },
        "item": {
          "id": "bb625cb4-d3df-4dc9-9f96-10c984f1ce46",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "51f31ff3-d2cc-4cf8-9518-628da2765528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85ef735e-3020-451e-837c-d1f70fa7d124",
        "cursor": {
          "ref": "c5e3d005-32a4-4114-a9d7-a9c1a20bcdbd",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b36927d3-1b3a-4baf-abf6-3e018e49fbab"
        },
        "item": {
          "id": "85ef735e-3020-451e-837c-d1f70fa7d124",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "9efe6417-fe86-48f1-ac2a-f29ae38a482b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a37cd621-b0d8-454e-8a2c-37403ceb0271",
        "cursor": {
          "ref": "815a159e-3f16-4c0d-8723-8fc1919d4512",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "25010b4b-707d-43b2-8679-ff72623464fe"
        },
        "item": {
          "id": "a37cd621-b0d8-454e-8a2c-37403ceb0271",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "71c32f61-a65e-40b6-a3af-06fb9ef9e533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d11988a2-6966-4e8c-bafe-fb251444b81c",
        "cursor": {
          "ref": "1741534f-988f-4257-9734-f36368edcc27",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b82bc2ee-9e65-4acf-b217-4d0a5a6f85a8"
        },
        "item": {
          "id": "d11988a2-6966-4e8c-bafe-fb251444b81c",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "84204942-8d19-4f50-b602-b1afb3a80a77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02730c46-1987-4a9a-9c9f-d8ea5c21903f",
        "cursor": {
          "ref": "f841ffc4-48bf-4539-8c5d-a1eed8122fa5",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "0a345eb9-cfdc-4268-9d6b-beb55eb39b46"
        },
        "item": {
          "id": "02730c46-1987-4a9a-9c9f-d8ea5c21903f",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "1b270d3c-c655-4c2a-8979-743dc99cc443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8a8ca89-682f-474c-84e5-12474c491fd4",
        "cursor": {
          "ref": "756743de-22a0-4fec-98e3-9f2cffdfe16a",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "61f6ba41-916b-4ebf-9e54-3a66cbb04305"
        },
        "item": {
          "id": "c8a8ca89-682f-474c-84e5-12474c491fd4",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "c64a3067-4fbf-44e9-bb77-a5707f5b0444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de5dd468-8294-4450-8b8b-4696990f6536",
        "cursor": {
          "ref": "ea41f115-42b6-488b-9ced-6fd72e4276cc",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "5de54651-ab41-4b20-8511-7f1e892c3823"
        },
        "item": {
          "id": "de5dd468-8294-4450-8b8b-4696990f6536",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "5303f47d-51cb-4a57-8af5-04eba8c331df",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "d43a4848-a557-4085-a863-05677cd9790c",
        "cursor": {
          "ref": "49e232aa-4ca0-4b55-9cbb-87e2d154a990",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b4c8b2e2-1e60-4e9a-bab6-6f87c1949ca7"
        },
        "item": {
          "id": "d43a4848-a557-4085-a863-05677cd9790c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b8e5d500-7565-4953-a636-430f89ad05d2",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "6828ff70-0634-4d9b-9ec6-b01ab1acaf64",
        "cursor": {
          "ref": "248b95e9-21af-42c8-aaef-b6335a877104",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "76d588c5-1fbe-47bc-8c7f-36fb69b6b995"
        },
        "item": {
          "id": "6828ff70-0634-4d9b-9ec6-b01ab1acaf64",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "7f869c01-1cf2-450f-9819-3a87e1fc4b76",
          "status": "Created",
          "code": 201,
          "responseTime": 356,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "bc8702f7-a44d-442a-a427-e3da9078086e",
        "cursor": {
          "ref": "bd57d0cf-5e9b-492b-a933-ae47797b2b8c",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2ffc3848-e5f2-43be-a5f2-414c00e5d84a"
        },
        "item": {
          "id": "bc8702f7-a44d-442a-a427-e3da9078086e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "81a51626-020f-477f-b963-c92daa4d4d4d",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "a66a109b-9b78-4c68-ad0d-c332f41e342e",
        "cursor": {
          "ref": "0f1c9545-b59f-486f-b069-5c47f89e3ab7",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "07634a91-0463-4f39-9855-736a64a772eb"
        },
        "item": {
          "id": "a66a109b-9b78-4c68-ad0d-c332f41e342e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a5a8aaff-445d-45a8-a41c-5963d97cfcea",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "d9c9d3d6-c3a7-407e-9687-68367dc8bcf9",
        "cursor": {
          "ref": "f1b1c8f8-6219-4380-8b88-ca262674049d",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "cf13a035-c65c-4f0d-872f-a7386182f1c5"
        },
        "item": {
          "id": "d9c9d3d6-c3a7-407e-9687-68367dc8bcf9",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "65df6886-9c7a-4971-bbdf-f6ec093e377d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23fc46fe-dce0-41ee-83ba-b71e56d25578",
        "cursor": {
          "ref": "ffa5709a-997c-4542-a581-4ff72945f733",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7c8845c5-eab8-4d59-875f-7160a26e6ab1"
        },
        "item": {
          "id": "23fc46fe-dce0-41ee-83ba-b71e56d25578",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "c9c458ab-1845-4a80-a543-9a2b3a599c3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a2a055e-0dac-45db-b894-6aa698218e17",
        "cursor": {
          "ref": "0e06d941-95a8-4409-bb89-19ca4084af01",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "752b5819-3c58-4a72-9f41-f860502cc2ba"
        },
        "item": {
          "id": "3a2a055e-0dac-45db-b894-6aa698218e17",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "e1b7b64c-7ab2-4698-9c02-05700709d5aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4c32785-fef2-4d98-b7f8-bff9256adadc",
        "cursor": {
          "ref": "769c1e1d-544b-4f5f-b8f6-2da912f7a5f2",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "1bdbecf7-d20e-42f5-a4f4-2aeff61a17a4"
        },
        "item": {
          "id": "e4c32785-fef2-4d98-b7f8-bff9256adadc",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "fdd13ba4-33c5-48af-9999-991ae7afb7be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "321defea-9cdb-4ae9-93c4-854ec30b57a2",
        "cursor": {
          "ref": "beaa9df6-97f6-41a8-abfc-37509c9c2b5a",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "8fcb2258-aab1-410b-bfb6-86f57ccf14e1"
        },
        "item": {
          "id": "321defea-9cdb-4ae9-93c4-854ec30b57a2",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "abba7755-1956-471d-bd4a-28a16ee2333e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8035a3a9-5c53-4367-94d0-782e26c275c3",
        "cursor": {
          "ref": "9c08b322-f838-4970-b7a8-412601282a87",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "7e3e4545-7707-432b-a306-d138b3f8a58d"
        },
        "item": {
          "id": "8035a3a9-5c53-4367-94d0-782e26c275c3",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "9f54a431-76ae-4c33-987c-961cf6e0371d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8585c42c-8796-420e-aa3f-afbb8da285d3",
        "cursor": {
          "ref": "90234ded-706c-44da-87d4-008350278fb0",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "bae0d44d-e3d8-4190-9a60-74a1de36fc11"
        },
        "item": {
          "id": "8585c42c-8796-420e-aa3f-afbb8da285d3",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "cacb1527-638c-4af7-ae40-b85146f3b7e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "871191dd-87e6-4795-85d6-656ca1d967ef",
        "cursor": {
          "ref": "b08011ca-388c-4196-a66b-81f982943ebf",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "92d7fb27-5175-4154-ae37-2c1a122ba82a"
        },
        "item": {
          "id": "871191dd-87e6-4795-85d6-656ca1d967ef",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "628541b6-22d3-478f-8cd3-4bae32c77058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59819a27-8177-4ea6-a11f-60dcf19d5d48",
        "cursor": {
          "ref": "66bad985-7884-4f9d-8675-2295b6ccc21b",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "64328fbe-7fd4-4117-9809-f0611516f53a"
        },
        "item": {
          "id": "59819a27-8177-4ea6-a11f-60dcf19d5d48",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "6d10607b-bfde-4ae4-b43d-5371d614a796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6b31eab-cb8d-4f57-853d-e86587363a3c",
        "cursor": {
          "ref": "198b88ba-c958-41e3-8fee-af37bb47ffa7",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f4d94fb6-81f0-4abe-95ab-ddb0e5179e38"
        },
        "item": {
          "id": "d6b31eab-cb8d-4f57-853d-e86587363a3c",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "c91c8f9a-5452-4244-a2d6-e637019658c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29715307-2c4c-428f-a710-7e9b06de4557",
        "cursor": {
          "ref": "04f57355-b266-47f7-9087-3426ce5db25b",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ebf00170-8f73-43ea-b8a0-4e1290a5f4c7"
        },
        "item": {
          "id": "29715307-2c4c-428f-a710-7e9b06de4557",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "6c4594c3-6939-42bd-a3a8-9a8be4f9c8d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bcf89f5-0ccd-4979-851b-a2fa9bbfd5c4",
        "cursor": {
          "ref": "c22a9226-4d19-4e5d-b088-2a5ea7ed5bfc",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "2110e64c-5f0f-418f-a40e-43afac417d19"
        },
        "item": {
          "id": "4bcf89f5-0ccd-4979-851b-a2fa9bbfd5c4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "79609cd0-9f7e-4063-9327-a47bb64e3b92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33fbf180-d8d2-43e7-bd74-31af36f0b62d",
        "cursor": {
          "ref": "7ec0a67e-a3fe-4553-a34e-262cda477428",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0aefa9c3-0b7c-4394-aa92-dc50d147a04c"
        },
        "item": {
          "id": "33fbf180-d8d2-43e7-bd74-31af36f0b62d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "27bdcd6b-e892-403e-832d-ef5bc6920297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "154d1c46-14b6-4efa-a7ab-d3e54ba84331",
        "cursor": {
          "ref": "3240e3ed-b46f-40bd-ae2f-5bb29738e117",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "10222c30-cd28-488f-bc31-7642af05da01"
        },
        "item": {
          "id": "154d1c46-14b6-4efa-a7ab-d3e54ba84331",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "95e74fb5-7823-452c-b9ce-349c53cf20f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86ad54fb-c1fe-4f26-ada2-0f535d678831",
        "cursor": {
          "ref": "9caa1b5a-e1e2-4af7-9771-343d23cfeac3",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "1b06216f-5271-4ce2-b0e0-65f2a4bad2fd"
        },
        "item": {
          "id": "86ad54fb-c1fe-4f26-ada2-0f535d678831",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "75c8fca8-dba0-4147-9512-da96416cc6c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c768612c-ebf4-4e28-ba97-aac5819bb928",
        "cursor": {
          "ref": "38a509b6-a013-46d5-a9ca-1cf8790ff3e5",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "7261b993-5cd9-44ce-9d2c-771a863ef7ec"
        },
        "item": {
          "id": "c768612c-ebf4-4e28-ba97-aac5819bb928",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f35f49d5-79ed-4ce1-8804-f6e5c8a06a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7daa743c-1685-4e6a-849e-b54d6dc7e96c",
        "cursor": {
          "ref": "01400c00-c63d-4120-9865-909a4820ea80",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "7131a7c3-7afa-49f1-8c50-26aae8731701"
        },
        "item": {
          "id": "7daa743c-1685-4e6a-849e-b54d6dc7e96c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "23e57f9e-34fc-4d81-8fa6-7d06e49d5764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7592f330-3e52-4512-983d-8ca25d51875c",
        "cursor": {
          "ref": "30916bbe-bc6d-4e2f-bfca-59dac9ee6f25",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "bdba33ab-cebc-4939-99f7-7981a77b4c34"
        },
        "item": {
          "id": "7592f330-3e52-4512-983d-8ca25d51875c",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "21051cb9-6377-4557-abc6-e0c61f96f6d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7d53204-4223-4cbf-ab5b-867815c095cf",
        "cursor": {
          "ref": "badf211e-6ca2-40db-8094-d52d58833441",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "7bdce6b3-d0fb-43d0-a80b-25030e37c59f"
        },
        "item": {
          "id": "d7d53204-4223-4cbf-ab5b-867815c095cf",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "d8f8b613-35be-4497-aa86-680fdf4e7372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23dac195-47e2-40a1-a660-7cba27df985d",
        "cursor": {
          "ref": "c8f91a33-f0fa-4527-bf16-06f1aacedcb9",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d638e755-a921-4eba-ba49-68a76474284f"
        },
        "item": {
          "id": "23dac195-47e2-40a1-a660-7cba27df985d",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "4f83cd51-ee27-40e8-988a-d7670cbe4b7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ffcf0b-0d77-4589-acf5-e2b9feccf804",
        "cursor": {
          "ref": "2052050d-da34-4c19-8dde-c928992be8e0",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "8d111aca-dfd6-4dd6-9abe-859717db3b4d"
        },
        "item": {
          "id": "66ffcf0b-0d77-4589-acf5-e2b9feccf804",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "9df8406c-13bf-43a3-8a41-7b8e69843392",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "884a2344-77ff-4302-aebf-51fc14185c17",
        "cursor": {
          "ref": "a93374ab-78c3-432b-97dc-1ea4540fc16a",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ecdd9f5a-25ab-4920-a0be-6c1e3b3f4d7e"
        },
        "item": {
          "id": "884a2344-77ff-4302-aebf-51fc14185c17",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "2de01e70-24cf-4dec-849f-7e8696ea4fef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ede9484a-9550-4619-a55c-a3338a3bc757",
        "cursor": {
          "ref": "f447bd8a-4a1d-4c25-9c0a-d89456ecaace",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ed26c298-f282-4590-b5e0-8336bb6c0857"
        },
        "item": {
          "id": "ede9484a-9550-4619-a55c-a3338a3bc757",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "35667e59-947c-41d6-b83a-468c00e642a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b3eca5-c592-4ea9-9da1-94f06c3a9972",
        "cursor": {
          "ref": "22972881-99cd-4ce8-bff1-73413011a98e",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6e4d6896-5e78-4579-9c34-a5683687d681"
        },
        "item": {
          "id": "76b3eca5-c592-4ea9-9da1-94f06c3a9972",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d46dcb4b-7ea7-4944-aeb6-5607f92a0bd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09dc4c8d-8d09-41fe-aa6a-3f14f981ec58",
        "cursor": {
          "ref": "6c67166a-51a3-4a2e-8f7e-9cffa8497498",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "7de57f41-d1e1-4d5a-a68d-9179aac75b14"
        },
        "item": {
          "id": "09dc4c8d-8d09-41fe-aa6a-3f14f981ec58",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "0bb3b622-5dc9-44f1-98b7-bc60c988c19f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21a58621-d514-42a9-b1a5-c3b1a616344c",
        "cursor": {
          "ref": "f2516384-c1cc-4b8a-aa45-31715ee116aa",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "17815e47-e626-402a-bd70-329ed0c477b2"
        },
        "item": {
          "id": "21a58621-d514-42a9-b1a5-c3b1a616344c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ef1cd895-8559-422a-861e-07d42c7972c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa7bf397-e57a-47be-a098-54b3dbcc6067",
        "cursor": {
          "ref": "c46bcd39-770e-486b-baed-511545ad193c",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "2a85bb6d-05e1-4c80-bf55-a9cf3163276b"
        },
        "item": {
          "id": "aa7bf397-e57a-47be-a098-54b3dbcc6067",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "3a66259e-d79a-4a07-abc7-b801058a47da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efe946a7-d0a1-4bf4-9c97-f131e3d06a40",
        "cursor": {
          "ref": "d4117eae-6e71-4749-99da-a2284e28b0f0",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "d0e269d3-0c52-49ac-a9a1-0195909c1589"
        },
        "item": {
          "id": "efe946a7-d0a1-4bf4-9c97-f131e3d06a40",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ec67b185-60ab-4afc-bb4b-ca2c15626240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa200717-39c5-4b63-bf43-6959800fc47c",
        "cursor": {
          "ref": "851c94fb-2cab-4f3b-9ec4-bb91ef2aaa9a",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "35a765c1-9e02-48cf-98b2-593dca26a26e"
        },
        "item": {
          "id": "fa200717-39c5-4b63-bf43-6959800fc47c",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "4e2738cd-7d11-4ca8-8e92-fe3eaea51f83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8593f9f-44d3-42a2-baa2-fecb92f29b98",
        "cursor": {
          "ref": "a654322e-c931-43b4-aa40-d363fc676a18",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4ba0856a-7a6e-4cb4-8b04-ce4b7a9f9e41"
        },
        "item": {
          "id": "c8593f9f-44d3-42a2-baa2-fecb92f29b98",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "96e36e80-69d0-4628-9c07-c8f2aa63c20c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a4fc626-7b07-4213-ba05-07b8afcf7fab",
        "cursor": {
          "ref": "91fda7c2-6121-4dab-9837-f74eb2cab376",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c18c30ab-c430-4411-916f-33e7f211c49b"
        },
        "item": {
          "id": "7a4fc626-7b07-4213-ba05-07b8afcf7fab",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e245fc33-223a-4726-b2a7-402c40a3cff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d3e3b7f-8045-4960-9288-2d4b6b2592b5",
        "cursor": {
          "ref": "4815c270-da26-4694-b562-92462726783d",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "8f98dd7e-6680-4b9e-a8ae-2bb6b906be20"
        },
        "item": {
          "id": "2d3e3b7f-8045-4960-9288-2d4b6b2592b5",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "49e2bf8e-1547-447c-a2aa-22c8423c94fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09854df4-e328-49fe-9e7e-71e2a5623a2c",
        "cursor": {
          "ref": "34cc7ef2-7ecf-4a58-b5bb-da10ccc79777",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "1fb8187d-e26d-4023-badc-4983f2a38f13"
        },
        "item": {
          "id": "09854df4-e328-49fe-9e7e-71e2a5623a2c",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "58a2ffd6-929c-45f7-be39-df67ca9f1249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "96a4cb88-942a-4fbf-8f12-5f5fdf44a0f8",
        "cursor": {
          "ref": "8068d7b5-a4ba-42c7-9f44-a8c3040d6347",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "ffb0b2bd-4409-48e9-a5b9-8963698a99eb"
        },
        "item": {
          "id": "96a4cb88-942a-4fbf-8f12-5f5fdf44a0f8",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4114a31b-0385-4965-881e-8eac6cea55d9",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f004d53-b8b5-46de-ba8f-048c59800758",
        "cursor": {
          "ref": "c39c9017-1e09-4371-a688-cc3a84779408",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "a5c71da5-cedb-41c6-b252-e1ace148c449"
        },
        "item": {
          "id": "8f004d53-b8b5-46de-ba8f-048c59800758",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "849735aa-884b-48f3-955d-d311ebb93844",
          "status": "Created",
          "code": 201,
          "responseTime": 434,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9429867c-156f-4e88-b018-96d122626ce4",
        "cursor": {
          "ref": "bfbcc6d5-592c-4ae2-8b01-8a168f641b20",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "af333113-4366-462f-b45f-a962f96acbe4"
        },
        "item": {
          "id": "9429867c-156f-4e88-b018-96d122626ce4",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "4574e522-123d-4b3d-bc1d-3a2c59305e6e",
          "status": "Created",
          "code": 201,
          "responseTime": 332,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d131b20d-58b1-44de-b20e-c4decbc7de7b",
        "cursor": {
          "ref": "49687162-1d58-4107-be46-75f944536e92",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "7eaddb42-da98-4756-9c5e-3c822f920865"
        },
        "item": {
          "id": "d131b20d-58b1-44de-b20e-c4decbc7de7b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "0cca0a1b-d749-46ac-ba74-616460ed1ae0",
          "status": "Created",
          "code": 201,
          "responseTime": 427,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac00d3b-cab4-40d1-824d-573ecc77e51e",
        "cursor": {
          "ref": "a1f21d9b-67c9-44d7-a6fd-fedecd6915f0",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "8814b0bf-5d37-4671-aa8d-2051b513ea27"
        },
        "item": {
          "id": "cac00d3b-cab4-40d1-824d-573ecc77e51e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d50f6166-765b-421c-9fdf-018a5a1d49f6",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-02-09T00:33:28.779Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-02-09T00:33:28.779Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "cf65ca04-36b3-4dd8-a446-cc901b6bb050",
        "cursor": {
          "ref": "b8c86ead-586c-4662-90b3-a4960b517128",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "880f9116-912a-426b-8d79-ab9c95a66d64"
        },
        "item": {
          "id": "cf65ca04-36b3-4dd8-a446-cc901b6bb050",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1b06c0ee-58ff-4f3c-b138-1f78a67800cb",
          "status": "Created",
          "code": 201,
          "responseTime": 319,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5aad354-fe69-4a8f-83ed-f1bd637506a3",
        "cursor": {
          "ref": "33634227-0e8f-471e-86fa-77b32f8ca058",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "d7edeb72-81e2-4a15-a46b-170521df7cff"
        },
        "item": {
          "id": "e5aad354-fe69-4a8f-83ed-f1bd637506a3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4afac9e2-306a-4227-b8b3-306f5db11497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60e09287-672f-4538-b95c-f65fb98270f6",
        "cursor": {
          "ref": "a834e83a-ccf1-47ae-bfd2-00ee93d61d37",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4513188e-8254-4d63-9e03-8d14d1163336"
        },
        "item": {
          "id": "60e09287-672f-4538-b95c-f65fb98270f6",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "cf71a56a-a78d-4ff1-9d29-03f65fb42cdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7045fef8-3550-4b30-8907-05f1139917bc",
        "cursor": {
          "ref": "55420d45-7377-40ac-a603-26e92874cb4a",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "f0c18834-0872-4691-866c-e4a952f8eaf4"
        },
        "item": {
          "id": "7045fef8-3550-4b30-8907-05f1139917bc",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0d8fbfd4-1998-4f8c-9ca3-47575745ab6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "803ed7e8-e915-451f-8197-7751ba93fd9c",
        "cursor": {
          "ref": "f7764640-6dba-4164-8c2e-060dc20a8eec",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c016a63f-4cd9-427b-b022-58cca9a10282"
        },
        "item": {
          "id": "803ed7e8-e915-451f-8197-7751ba93fd9c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d711961e-39ec-44d0-b16f-4108844e8d89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b27b127b-9946-4d45-afe5-5bfe6e6c536f",
        "cursor": {
          "ref": "f39ef128-8e6f-49ee-b00d-c6463489159e",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "dfb95780-b0ec-49a7-ad2b-8f48595e8e99"
        },
        "item": {
          "id": "b27b127b-9946-4d45-afe5-5bfe6e6c536f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "cb54f120-8e45-438f-b438-1f418cdda9c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b509f62-20c4-43d8-a9b8-363b09663c2e",
        "cursor": {
          "ref": "2b76b24c-9cad-4b08-93f7-f48b20f20d72",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "2d5f21a7-4ffe-46e2-8cc7-70b86484d378"
        },
        "item": {
          "id": "8b509f62-20c4-43d8-a9b8-363b09663c2e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "18bd100a-dbed-494b-892e-d30ec52a281c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a22ede-189b-4aa3-a7e5-d7b8bf72f2d1",
        "cursor": {
          "ref": "4ef5cdac-bced-4876-9468-80ed4fcce36a",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "80fd5edf-9744-420e-ada7-6a467cbddcbc"
        },
        "item": {
          "id": "a5a22ede-189b-4aa3-a7e5-d7b8bf72f2d1",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "eb40e7f8-8bea-48f6-86b3-704f41b81a32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af290401-7646-4149-a939-0d93621829ea",
        "cursor": {
          "ref": "0649b857-dacb-4a17-b012-97d730a90279",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "b52d5380-2c1f-4889-bed4-1d2266b95368"
        },
        "item": {
          "id": "af290401-7646-4149-a939-0d93621829ea",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "3b667ff2-0ebc-44f5-aa7b-b4d09af1ebac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69352b0e-6466-4336-933d-9bfdc1c73877",
        "cursor": {
          "ref": "d7ffb291-5aed-47f7-92db-0e9d2d88c67e",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1be8f9d2-5303-4328-bdd7-c70b7e1341f8"
        },
        "item": {
          "id": "69352b0e-6466-4336-933d-9bfdc1c73877",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "07fdf1e0-aa60-4857-b276-6829f7a9778a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d79a5804-25fb-4852-99ea-16e62e9c2c5c",
        "cursor": {
          "ref": "2256915e-810f-479a-b2e2-0b75f3439e96",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "6af18577-f2b6-47bf-90ee-1a3e9ad0e773"
        },
        "item": {
          "id": "d79a5804-25fb-4852-99ea-16e62e9c2c5c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "034e1200-668d-4e2b-9774-2da5508a8a70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00601ca4-3bd2-4d2d-a31f-2801f3b060e6",
        "cursor": {
          "ref": "3c447372-3b1f-4023-8a17-41e6180a6726",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "1c21eb24-9615-47a6-afc7-3c3ab8f57c1b"
        },
        "item": {
          "id": "00601ca4-3bd2-4d2d-a31f-2801f3b060e6",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e20b999b-ab29-43d2-b620-afdd2e8410d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc834fae-c1a6-496a-bb9d-3832f6c40ea4",
        "cursor": {
          "ref": "c5cf4edf-49b6-4ec0-b03f-a6bc56414bcb",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "bac055ff-fdb6-4e9d-b89a-0743f62b3fa4"
        },
        "item": {
          "id": "bc834fae-c1a6-496a-bb9d-3832f6c40ea4",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d87acb78-9fc5-4b8c-a939-8b63c0d23fcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2845c03-65c9-40d6-a2c9-883e657172b8",
        "cursor": {
          "ref": "1d233832-c0d2-42a3-b321-06de14209d36",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "123d7e45-c1ad-460b-ae16-9269f1579140"
        },
        "item": {
          "id": "f2845c03-65c9-40d6-a2c9-883e657172b8",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "96bda77e-95ad-4ffb-80c8-51ddefd6dd96",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 86,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "78b16cbc-f399-4f54-b0e1-3625ea14af08",
        "cursor": {
          "ref": "043d199e-e54f-4aef-b0e0-21784fe4a487",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "c5b3088e-1110-490f-8093-52ed1b76a5a5"
        },
        "item": {
          "id": "78b16cbc-f399-4f54-b0e1-3625ea14af08",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "192adf3a-4590-47d7-831f-129e2447dd0d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 112,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "70617307-032c-4e28-8d02-df31276605c4",
        "cursor": {
          "ref": "3dc31fa8-552f-48a4-8918-3ef1102ee77a",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b1798730-e993-4a52-a4bb-6a8aecb6f206"
        },
        "item": {
          "id": "70617307-032c-4e28-8d02-df31276605c4",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f0daf345-0be9-49a0-9c63-2a624b544b6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae93c57-2e0c-4c8d-b179-d367ac07c4fc",
        "cursor": {
          "ref": "ef88e275-ff34-4869-961d-acf39030f782",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "8b28af6b-54a7-4c47-9a6f-1f3fa8a1afad"
        },
        "item": {
          "id": "9ae93c57-2e0c-4c8d-b179-d367ac07c4fc",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "73677455-58e1-473b-a603-d77acf5b25f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1153e754-a462-48c3-a090-bc01ad46caba",
        "cursor": {
          "ref": "f552cfcc-01fe-4344-885f-49585de5f780",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "d95d1a6d-58f1-43f6-9405-9a80b5dcbb5e"
        },
        "item": {
          "id": "1153e754-a462-48c3-a090-bc01ad46caba",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "fe871f30-993b-46a9-a39d-7f3d142cd638",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d19beab5-04ee-4fbd-9fb8-a4e6b9cca12e",
        "cursor": {
          "ref": "c956e989-0f8d-4bcb-82d3-4b7190c0f4db",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "19246e7d-127e-4307-b316-946955694069"
        },
        "item": {
          "id": "d19beab5-04ee-4fbd-9fb8-a4e6b9cca12e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a7915ad0-3be4-4448-9919-ee72cef6ec4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d222dd-58c2-4837-a76a-3ee847778b1c",
        "cursor": {
          "ref": "9262c031-a141-46df-9ad4-3d11362bd36d",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "cf734a7b-b648-46ac-a286-52e15d208ad7"
        },
        "item": {
          "id": "d1d222dd-58c2-4837-a76a-3ee847778b1c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "28585428-8bf1-410c-9e30-b94d3fbf7bf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2384f8ab-7274-48a2-b24d-e68d3ba894d8",
        "cursor": {
          "ref": "a40cf69f-194a-4491-ab69-291515054da4",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "15abeeb4-9bea-49f3-ad22-37def0352d04"
        },
        "item": {
          "id": "2384f8ab-7274-48a2-b24d-e68d3ba894d8",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8bcdc5f0-416f-42df-b3c9-97a4a4335b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f54ff56a-87d3-4d23-b537-8526c463fc79",
        "cursor": {
          "ref": "5dad7d71-a22a-49e9-a9e6-69de63b810d5",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "fbbe6fbd-36e0-48d3-b510-bb1cc7535a3f"
        },
        "item": {
          "id": "f54ff56a-87d3-4d23-b537-8526c463fc79",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "79f138d4-db2f-4b0e-9ca6-60d882202a5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2db8ad3e-5154-41c0-acb3-fa4c5dd58582",
        "cursor": {
          "ref": "96ee99c8-3aef-4f2e-85bd-1b2593e4e694",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "41f6550b-92bd-45b3-a338-65cd301f7ce7"
        },
        "item": {
          "id": "2db8ad3e-5154-41c0-acb3-fa4c5dd58582",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "6d4e4163-a9a6-4a0a-b973-e58bae95de8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9acf8a06-9d95-46e5-9297-34ffcf5eed1c",
        "cursor": {
          "ref": "22f8f716-af54-4f31-9405-df2445d3a90f",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "1f2e2933-4211-4dbc-a28e-f095ada58866"
        },
        "item": {
          "id": "9acf8a06-9d95-46e5-9297-34ffcf5eed1c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f424d7f7-4d26-48ca-8d15-47f1157c615e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e173ca54-b8c6-401b-a21c-663ec6fe1459",
        "cursor": {
          "ref": "b7cda3d0-36a3-4dd6-b01e-be15f237f42d",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b3bee748-be17-433b-8b3f-f12993193609"
        },
        "item": {
          "id": "e173ca54-b8c6-401b-a21c-663ec6fe1459",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4fb31166-b0b1-4bb1-9bb3-62b16d99960d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e0d9352-349b-420c-93bc-4612594c9930",
        "cursor": {
          "ref": "471deff0-ef2a-468a-9557-fc1890844af7",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "e1140992-e9ec-4fa5-a928-c6b571b17be6"
        },
        "item": {
          "id": "5e0d9352-349b-420c-93bc-4612594c9930",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ee9a15c5-6257-4b78-b499-4b66581994c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f6eb73e-682a-4c5b-90fe-297d91632434",
        "cursor": {
          "ref": "46def833-cf01-420c-a664-e5648170da53",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "37999dca-5483-4636-a024-f10a90c4b6de"
        },
        "item": {
          "id": "6f6eb73e-682a-4c5b-90fe-297d91632434",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ecf1cc7d-51f0-4990-a67d-9b8b6667ad4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41e8fe64-3ac1-483d-94a2-9b552a1ddbdb",
        "cursor": {
          "ref": "0228ea3f-d38d-4a1a-bdb1-3c8a9da06f34",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "24452139-e013-4ba2-a1d4-846ca4637f82"
        },
        "item": {
          "id": "41e8fe64-3ac1-483d-94a2-9b552a1ddbdb",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "5d18fe21-35bf-45c5-ba4a-33dba9f8bd2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ff460fb-942a-4979-a6ab-cfddfd83b4e9",
        "cursor": {
          "ref": "93f2f040-3996-4182-9cb1-677e44ce0241",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "cc7871b9-9749-4a47-8e43-ad403c823833"
        },
        "item": {
          "id": "6ff460fb-942a-4979-a6ab-cfddfd83b4e9",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f1fd0048-e5a1-4419-b0b5-424dfd75e652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af624601-f89b-4485-bb18-d40584b336eb",
        "cursor": {
          "ref": "57a1ee7c-e848-4297-8c4f-21692c5a0be1",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "479312d7-0a9d-4c97-8b91-06f594fec155"
        },
        "item": {
          "id": "af624601-f89b-4485-bb18-d40584b336eb",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e3f7b6ae-762b-48ab-9cce-db760c204e37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "750998f5-cbb3-4ba1-94e9-6ef2a3b98422",
        "cursor": {
          "ref": "cf4a3bce-306f-466f-8854-1044692d01db",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "f88532e8-3f7d-4e00-bea8-f761d9c5c8fa"
        },
        "item": {
          "id": "750998f5-cbb3-4ba1-94e9-6ef2a3b98422",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5341e264-80c1-4071-a24a-045e1d514c0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c274b9f-9209-4bc8-b9dd-504f1044235d",
        "cursor": {
          "ref": "091e25e2-96f9-434c-a1b9-0d36eb20f6ac",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "e542c8cd-2081-49d9-b04f-96a8231f9c44"
        },
        "item": {
          "id": "3c274b9f-9209-4bc8-b9dd-504f1044235d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "3ef2152c-2409-43a9-b4cb-b8ca2c3f7d4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f0c9134-38ba-4928-adad-5e11753ef314",
        "cursor": {
          "ref": "305cbc16-8741-4c78-b6b0-50addf07e954",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "687e6816-99fe-4af7-bc07-187352569b1f"
        },
        "item": {
          "id": "0f0c9134-38ba-4928-adad-5e11753ef314",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "29d15594-a715-4746-af09-0607942764fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "ed83198a-e701-4a50-ba06-3cd77ce5d79b",
        "cursor": {
          "ref": "f3bd3585-026c-419c-aa8d-4cc548555826",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "05d638b6-fe42-4246-bd9b-3c5557f0f0ef"
        },
        "item": {
          "id": "ed83198a-e701-4a50-ba06-3cd77ce5d79b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "193a8b41-0dcb-4a10-b6bd-60c105a6de09",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1cc12a6-2594-4ef0-b486-db089aee173a",
        "cursor": {
          "ref": "a65d65ac-3dab-4cdc-942d-3b797c68fca0",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3087cdc0-07f5-4acb-8c43-af445c35ebaf"
        },
        "item": {
          "id": "a1cc12a6-2594-4ef0-b486-db089aee173a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0395a8d4-b477-4db9-a12f-be609ca330f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f77a890-1b73-4a34-be42-c70809aec0cf",
        "cursor": {
          "ref": "2ab57358-9208-49b4-b45c-68f3c77cb54b",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "25bc7b3d-13b5-4a19-b178-21fdf5d71d9b"
        },
        "item": {
          "id": "0f77a890-1b73-4a34-be42-c70809aec0cf",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d9c90e66-6a58-4d5d-9125-61699ae1f3bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b435231d-3799-409e-a341-f01b5fae1c24",
        "cursor": {
          "ref": "1d4028ac-3172-4c9a-8254-4258c2a69fff",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "3942b50b-d0a8-440f-9b7f-0f3a7633f43d"
        },
        "item": {
          "id": "b435231d-3799-409e-a341-f01b5fae1c24",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "44f387aa-c96c-4024-89bb-4d631bc67ac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aab19fab-c4fb-4e9f-90e8-3442c8d9cf5a",
        "cursor": {
          "ref": "17faa836-99c7-4ba1-b549-5fcbef44c156",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2476ebf8-d1a5-4a9b-95cd-92de3c55510f"
        },
        "item": {
          "id": "aab19fab-c4fb-4e9f-90e8-3442c8d9cf5a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "23fdb890-835f-4707-abe5-9b32856b3f5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac36383d-9ee3-4f3d-a83a-80dd3471808a",
        "cursor": {
          "ref": "fef30190-8007-4707-812d-828bd8e04443",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "c750e807-fbda-4c6c-9072-5809aaba67b4"
        },
        "item": {
          "id": "ac36383d-9ee3-4f3d-a83a-80dd3471808a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8f4ffc00-97a3-408e-a131-2e53d632c72e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3dbc57b-9d73-4834-9431-8544beea5b84",
        "cursor": {
          "ref": "448a3ef0-7364-4ecc-8227-a974c6983fc3",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "e872f69e-661f-4f89-8b52-056ecfa0bff1"
        },
        "item": {
          "id": "d3dbc57b-9d73-4834-9431-8544beea5b84",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "43662654-9152-4a55-9b64-74a2c74a9389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a906709-98b3-4a99-b998-7b0d84856593",
        "cursor": {
          "ref": "bb9539e2-c14a-40bf-8a4a-e4469666e0b8",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "6f4ba38e-6b4f-4bce-b2d9-45ec9cc32bd3"
        },
        "item": {
          "id": "2a906709-98b3-4a99-b998-7b0d84856593",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "19f3a0bc-4122-4b00-8f46-b0aab53fa3de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7698ea2d-d912-4706-ba1f-ab9f8ea447c2",
        "cursor": {
          "ref": "6fd4bea4-58a4-4102-8c61-aa4a1f7f8c2d",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e6cf7395-42e2-4d77-b476-937f3d59d67f"
        },
        "item": {
          "id": "7698ea2d-d912-4706-ba1f-ab9f8ea447c2",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "27087543-ab57-421d-bc67-2dab7eca86b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dc385de-aeb5-44a5-860e-46c112b2a115",
        "cursor": {
          "ref": "a7ffcb9c-22bb-4e03-9f11-548d72c18cef",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ad59a3ac-0bfc-4516-9c06-19d7aeb53ffb"
        },
        "item": {
          "id": "8dc385de-aeb5-44a5-860e-46c112b2a115",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "be9c2ea1-302b-4ea0-b487-dbb48f830879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3227213-4f4d-4ccf-be2c-9e4aace7c0cd",
        "cursor": {
          "ref": "ed39c42d-418d-4d0f-bd3d-c876538c0d77",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "75e20a8f-995d-4f3c-8241-16c91dbd92a8"
        },
        "item": {
          "id": "d3227213-4f4d-4ccf-be2c-9e4aace7c0cd",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8f6d8754-9d6f-4f62-a8b4-8b3cf71ab1c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8079b3d-ba40-47ed-b514-e171a83f1692",
        "cursor": {
          "ref": "89ec6cc5-c632-4b27-8c56-2a0d1beeefde",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "5858245b-5bf4-4627-89bc-a12cf5a10a3d"
        },
        "item": {
          "id": "f8079b3d-ba40-47ed-b514-e171a83f1692",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c19878e0-2c35-4cb1-92ca-7075688f3133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c28e6e5-d83a-4636-95b5-fe7a8f8ac96c",
        "cursor": {
          "ref": "59d72f32-b48b-4ad3-8f94-b20cc0f5b30d",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d6498d55-3471-4018-b858-27edcd285466"
        },
        "item": {
          "id": "6c28e6e5-d83a-4636-95b5-fe7a8f8ac96c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e6fbd743-7be4-43f4-92c8-fe4906e28298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "457a474d-9883-445d-8bae-56e823313b9a",
        "cursor": {
          "ref": "3a8c11a5-e865-41db-85a0-b4ec5cce99e5",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "d05d8319-f476-4631-be6a-8ad7fc292352"
        },
        "item": {
          "id": "457a474d-9883-445d-8bae-56e823313b9a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "70f37fb8-4674-4ce5-a845-b8576abfe1fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24469471-f2b2-407e-9517-5930d46b8a21",
        "cursor": {
          "ref": "260e6573-ebf3-4b88-b0c0-b3769a00f944",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "d6c5a44b-c344-4b11-9b51-65af3f08d1f1"
        },
        "item": {
          "id": "24469471-f2b2-407e-9517-5930d46b8a21",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8ba2af1f-35fa-43b3-915f-910a7287dfc1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 80,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "a45d6d8f-5cc2-47e9-a053-fb1e97bf087b",
        "cursor": {
          "ref": "983c4a10-f0b9-4d53-b554-9105352add8c",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "79292416-fa60-4c47-abfc-dd7ed1d998e7"
        },
        "item": {
          "id": "a45d6d8f-5cc2-47e9-a053-fb1e97bf087b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "049d2e57-6f56-47ba-b706-edfc8a5c9461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0813155e-4cb7-45ae-8b1b-0d28c18e3c24",
        "cursor": {
          "ref": "e0b6b62f-dfc5-46d6-959b-1605ac160d19",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e1876645-8185-4134-a613-9fa5078807fc"
        },
        "item": {
          "id": "0813155e-4cb7-45ae-8b1b-0d28c18e3c24",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "290456f8-0ae7-4476-a07e-e024fa25c725",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed147868-6b00-49a6-adc5-bce68f90fc32",
        "cursor": {
          "ref": "2cf347ad-5511-412a-9cb3-658ceac821a9",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "682fede5-08a1-440f-b074-ca16508ad389"
        },
        "item": {
          "id": "ed147868-6b00-49a6-adc5-bce68f90fc32",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "308bb8fd-c0ed-4cd1-9942-7ac6e497a477",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af36b6c5-e310-407d-a444-3e3b71a1bb20",
        "cursor": {
          "ref": "fbcbbb56-32fd-4dc7-9fe3-c4947a24a01e",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c0b960ba-bbd8-434a-9595-6c0b07d8ff1e"
        },
        "item": {
          "id": "af36b6c5-e310-407d-a444-3e3b71a1bb20",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c0e586c4-c0ee-43a9-9101-f61dc6870956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4380f07-711f-480b-9f93-da9c30524128",
        "cursor": {
          "ref": "00a728e0-dbfb-42c2-9839-fe114aa7f3e6",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "c45f96f7-aeb1-4c51-8ca2-26f5d9682a9e"
        },
        "item": {
          "id": "a4380f07-711f-480b-9f93-da9c30524128",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "19aed995-d8c7-4e2a-9c54-1581ea3419d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34335802-ea3a-49e0-b3e6-c33021093953",
        "cursor": {
          "ref": "92824030-3925-4c9f-a9fd-b529c4a7edf2",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "bc3aab7b-282c-43c3-b6a2-d9f4ced37ecd"
        },
        "item": {
          "id": "34335802-ea3a-49e0-b3e6-c33021093953",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7ee03ca5-42e9-4e34-b81e-467641171dba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fd7e8dd-4d13-4f13-a6a0-2d8068313ad6",
        "cursor": {
          "ref": "bbfb6031-7b8f-4972-8c50-b5fb8384d5fb",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "593130b2-10bf-4a4e-b8a3-044201a44511"
        },
        "item": {
          "id": "2fd7e8dd-4d13-4f13-a6a0-2d8068313ad6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ea1ce550-ab83-4211-8155-ae3615bcedb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd4828fd-565c-43a4-9d19-e5226e9eb2a6",
        "cursor": {
          "ref": "38b3abe5-b5c9-4a9a-afe3-2782d56604cf",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "bfe8428a-81a6-4452-93c8-debaf91c363d"
        },
        "item": {
          "id": "cd4828fd-565c-43a4-9d19-e5226e9eb2a6",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ac3a350e-9298-46f8-8b14-f7864943fb57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eabf3ca-5e78-4cb3-87c1-29188620fb62",
        "cursor": {
          "ref": "694bc538-3f73-4ef8-b333-bd9fab065d90",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "9254bb16-0236-4acf-ba3e-e9da5be76dce"
        },
        "item": {
          "id": "7eabf3ca-5e78-4cb3-87c1-29188620fb62",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a3c4ca3c-9036-4e57-b689-ddb6164e7ed2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "779e46ac-1352-4cea-9889-387685ef081c",
        "cursor": {
          "ref": "3770c3d7-1056-469b-8294-3507f91bd078",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d8ca28e6-168d-4570-a2f4-1fcf2f513fa5"
        },
        "item": {
          "id": "779e46ac-1352-4cea-9889-387685ef081c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7d49b33c-e4c2-4b76-b86f-fda543ed5794",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "128421ad-b1c2-4675-a6b2-50d3c858d138",
        "cursor": {
          "ref": "46a6ae13-95e4-4a0a-b576-bc8580c016dd",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "8903c0d2-155d-4650-b9c4-7ec8c8d64c7f"
        },
        "item": {
          "id": "128421ad-b1c2-4675-a6b2-50d3c858d138",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "92432111-9437-4dd4-9866-f49241ffc6d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8582ca84-a80e-443d-9ff9-51c27b4ab281",
        "cursor": {
          "ref": "4653674e-122a-4c37-9340-c4756ca8af09",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "6f1bb31d-d5f3-4891-8a28-8ade3265c840"
        },
        "item": {
          "id": "8582ca84-a80e-443d-9ff9-51c27b4ab281",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "45818f05-dd34-4962-a737-58a6dcea9234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c1cfb0-09f2-449d-affb-994a06095f66",
        "cursor": {
          "ref": "cee4d6cd-ea0d-4126-86e0-02649cb22a06",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c53e2f93-3708-488b-ba1d-4a2d4a72b03e"
        },
        "item": {
          "id": "e8c1cfb0-09f2-449d-affb-994a06095f66",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f43eb4fe-a455-428b-a9df-4ce0f38f599a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a94b88b2-2d40-45c9-822e-118b1f1ca607",
        "cursor": {
          "ref": "480d3a08-18e3-4fc9-8cc0-b846ffeba82e",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ce77b5fc-d5db-4201-a2f9-a72254d165e2"
        },
        "item": {
          "id": "a94b88b2-2d40-45c9-822e-118b1f1ca607",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "121f1661-dca1-49bb-8e80-60df857b9642",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2df8faf6-493e-40c2-a10f-f49a72455a54",
        "cursor": {
          "ref": "0f32a869-59a8-4f7b-ae77-509af0ecaf02",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ed1cdd5a-7cf0-452a-b725-4304e8101dfd"
        },
        "item": {
          "id": "2df8faf6-493e-40c2-a10f-f49a72455a54",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e4442476-a017-4066-8561-ad2e88c9e985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab17474e-5123-4fea-8929-772108734f31",
        "cursor": {
          "ref": "71302be5-11e6-47f2-82a7-014851c79dab",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "1563f6b7-d61f-417d-aa7a-00f480dbf5be"
        },
        "item": {
          "id": "ab17474e-5123-4fea-8929-772108734f31",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "ab177f4f-fdb6-4576-99d6-3cbe27ba6a7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1620f9c-e136-4770-b887-ae595d930fda",
        "cursor": {
          "ref": "aec20b3b-2e6d-4f19-8074-0ae1752cca09",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "fd47fda1-e79f-401d-af28-c75d5c1a6676"
        },
        "item": {
          "id": "e1620f9c-e136-4770-b887-ae595d930fda",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ebdf323f-9073-4c33-a0f4-542c6bc2a911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c580929-1d63-460e-827c-ba3cecca2bbe",
        "cursor": {
          "ref": "db169b2f-e55d-4b6f-922a-31be4c103e3b",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "3e30428b-17cd-48f2-a0ff-e8d15cba2851"
        },
        "item": {
          "id": "5c580929-1d63-460e-827c-ba3cecca2bbe",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "4ea375e0-0895-411e-96ae-2ed043e8b1c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d59fae1-8931-4c73-b016-ea2089832f94",
        "cursor": {
          "ref": "c83a5dcb-42be-4f44-b477-d3d48b4413c9",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "c347bde9-6fcb-41ab-a10f-15576004427d"
        },
        "item": {
          "id": "2d59fae1-8931-4c73-b016-ea2089832f94",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "e2b86546-2ee0-487f-b456-58dc0da96854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96631bef-fbc1-4017-9bbe-8040ca72325d",
        "cursor": {
          "ref": "569fa5af-fe10-4150-98a1-2eaef5d59269",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "fb29387b-5571-4eac-a4ba-153f87707247"
        },
        "item": {
          "id": "96631bef-fbc1-4017-9bbe-8040ca72325d",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "9328a409-be80-4f9f-8a7b-20838b097490",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c0b8f53-a1b1-4d33-95f7-2e510c939242",
        "cursor": {
          "ref": "01a621c0-e1f3-4524-9920-1996b25fd0ae",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "dd0f1866-fb76-4aa1-9eb1-f257b440d7bb"
        },
        "item": {
          "id": "7c0b8f53-a1b1-4d33-95f7-2e510c939242",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "6f15b713-3cd5-4bfb-abb9-04c7f8e4f71c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aa5a362-4e66-4713-b53f-79a2c2c85002",
        "cursor": {
          "ref": "4ad66887-0934-4eb0-9fe1-4c76af873f79",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "752b370f-05d1-4351-a495-d2f984048613"
        },
        "item": {
          "id": "4aa5a362-4e66-4713-b53f-79a2c2c85002",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "2af4882d-6910-4d4b-8b5c-bb027534381d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5160aa65-ab70-4cf3-99d0-f3589aed74c9",
        "cursor": {
          "ref": "3d6202c8-e00a-4aa2-83ff-bd6c59e7ee6c",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "cb540837-2405-47ac-bbde-223fd54c71d2"
        },
        "item": {
          "id": "5160aa65-ab70-4cf3-99d0-f3589aed74c9",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "7ae08831-04d0-460f-a966-e6258bf62727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f87ec8c-c2e1-4ca8-a84c-f16fc9b094bc",
        "cursor": {
          "ref": "f9b3ef40-31b9-429d-826c-830aa86217f6",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "52e12717-8f59-4c4e-b45c-117d9ebbf9e5"
        },
        "item": {
          "id": "2f87ec8c-c2e1-4ca8-a84c-f16fc9b094bc",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "0d2d6147-0c97-4dd7-a3df-1e5505c68886",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3479f7f-dc98-4361-8629-c93e40aaee25",
        "cursor": {
          "ref": "936be068-1ab3-49b2-982d-44a6df788c4a",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "0c415f76-33df-4baa-a216-fc36ff921ce0"
        },
        "item": {
          "id": "b3479f7f-dc98-4361-8629-c93e40aaee25",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6cefd059-eb45-40bd-ad18-dc22dd097b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5811636f-6917-49bc-a603-b66a38a2cbbb",
        "cursor": {
          "ref": "8a2302b2-fa05-4b1b-a2ea-d0e03459a4b1",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "39ed7cff-5dfe-4165-b300-db15254ef39b"
        },
        "item": {
          "id": "5811636f-6917-49bc-a603-b66a38a2cbbb",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "8c91759d-eb26-4b9d-9825-fd5399a4e509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebcfccd5-7f70-4248-af91-c3ccf7aca311",
        "cursor": {
          "ref": "9bf01a3c-1110-4a8b-bc43-ac8a7e263eec",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "bc5ed675-c095-4768-afc6-3fbbe6db6731"
        },
        "item": {
          "id": "ebcfccd5-7f70-4248-af91-c3ccf7aca311",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8ee68a65-1873-42f0-b413-755c3dfc61e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a12aa22b-f249-4646-8270-a0e80f8c09cb",
        "cursor": {
          "ref": "019bf017-7d98-4dc8-91b8-055db3e2b832",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2c90f34f-4bab-4246-aeb1-2918681f6c88"
        },
        "item": {
          "id": "a12aa22b-f249-4646-8270-a0e80f8c09cb",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "693decad-293f-4401-be2c-6f348813c8bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56844f76-f54d-4c08-8c30-2d4307455371",
        "cursor": {
          "ref": "9c490b80-072c-4d99-823c-64b0772ebc44",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "d960dd11-1bab-4dec-bd67-ca1f85e8e077"
        },
        "item": {
          "id": "56844f76-f54d-4c08-8c30-2d4307455371",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "18139fa5-72e6-45b7-9a3a-2cac5ae4ca86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a3c0445-1d26-4aad-9f8e-1defca179f62",
        "cursor": {
          "ref": "4a652136-3624-41c8-baa4-b338159a260c",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "6090c7c9-1ec5-4dde-bef7-06ab02989a04"
        },
        "item": {
          "id": "9a3c0445-1d26-4aad-9f8e-1defca179f62",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "50963953-d6be-4945-92f9-4e63c7bc8c05",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "c44c3f88-1b56-4e2e-9939-f1afa07c2060",
        "cursor": {
          "ref": "944f85fc-5464-4845-9007-ded7183979c7",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "cf44f399-0203-47fd-b3ec-595952849d18"
        },
        "item": {
          "id": "c44c3f88-1b56-4e2e-9939-f1afa07c2060",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a756180b-a4fc-435c-ae45-225dd36bd445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e68d88ea-8d83-401e-8500-a228304ef168",
        "cursor": {
          "ref": "2e289f61-0dfb-4c38-9259-36577936e56c",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b2a15ef9-a5c3-4166-b372-5d5d53b139b9"
        },
        "item": {
          "id": "e68d88ea-8d83-401e-8500-a228304ef168",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "e2cfb132-492e-4042-b024-058b4a6eab5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6500be4-640d-4e11-87a2-92ce1067cb28",
        "cursor": {
          "ref": "d2bc5840-ec18-4aa5-9832-b3b490c89cde",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "8a1121b3-3dd9-4ed5-a4a0-8f517112f203"
        },
        "item": {
          "id": "d6500be4-640d-4e11-87a2-92ce1067cb28",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "16355b0f-8819-45e9-8820-232c821eaf06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4298af6-cf96-40ad-a8ea-447949fcc574",
        "cursor": {
          "ref": "650c2005-b972-4dc4-b04f-5c42ab2af320",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ddd512bb-84ee-4c21-9ef3-a04edd7e7362"
        },
        "item": {
          "id": "d4298af6-cf96-40ad-a8ea-447949fcc574",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "1c47a1d2-7053-4a1c-ae1d-8c00fbe38ee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2df9e563-09a1-4233-bd27-d7483e656952",
        "cursor": {
          "ref": "f845ed61-69d7-4baa-ba4e-8eb2cf8a127a",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "d44692d6-6f4a-41a4-bc72-c992dff1f5d3"
        },
        "item": {
          "id": "2df9e563-09a1-4233-bd27-d7483e656952",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "c7b7507a-9f36-46d8-a63f-db1bfed41e81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eebb074-e272-41a6-b14c-d63f70d54a82",
        "cursor": {
          "ref": "db9fa61b-a9ee-4075-a9a7-05b5c8d2f493",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "e9b661a8-5795-48ac-82cc-a74e3ea4ad7b"
        },
        "item": {
          "id": "7eebb074-e272-41a6-b14c-d63f70d54a82",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "ecf7ac2f-4cae-437e-b818-eb396bea0236",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "621d4c40-1166-440e-87d8-c73acc5c01d7",
        "cursor": {
          "ref": "dd980ce0-624b-4a46-8f27-97e6cdb875e1",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5ae7f88d-1382-43af-b34f-32913d0d0e0d"
        },
        "item": {
          "id": "621d4c40-1166-440e-87d8-c73acc5c01d7",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "3fabf396-528d-42f1-aa63-846e0ea9070d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9fcadd5-27c0-4b5a-82ec-c03e9f5d0a09",
        "cursor": {
          "ref": "6f3a6edb-140a-481b-bc49-8e0c736b4867",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "a5805ebb-0a1b-426c-a4c1-8aec0b90a943"
        },
        "item": {
          "id": "e9fcadd5-27c0-4b5a-82ec-c03e9f5d0a09",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "112a1d28-50a1-47e1-90af-0fd9fe6742c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15a807e8-262a-461d-bc22-4333db55b516",
        "cursor": {
          "ref": "9f8dab88-db11-4cdb-87ee-53c155b62e83",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "7163827b-0e93-407f-9e7c-98dd858cc7ba"
        },
        "item": {
          "id": "15a807e8-262a-461d-bc22-4333db55b516",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "e1e58ac4-4c74-4750-864b-28973317630e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cada5b84-fe53-4695-b9f0-1408767afa03",
        "cursor": {
          "ref": "317d4879-3f7c-4291-bd8d-52b19234e480",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "9ff02dbc-456f-4e4b-8d63-46cfc248eeec"
        },
        "item": {
          "id": "cada5b84-fe53-4695-b9f0-1408767afa03",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "b539369f-61b2-4ea5-b2f2-b86d7f044d3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7d64414-e559-4f2c-b9a4-9e955a53fa77",
        "cursor": {
          "ref": "4540fc97-e56e-464b-a0bf-b98502d32367",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "e14d5413-40ce-4283-bccb-7c6fcdb790f1"
        },
        "item": {
          "id": "d7d64414-e559-4f2c-b9a4-9e955a53fa77",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "7ef691dd-393a-4af3-9647-5e64c29a523d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c77088bf-5e4b-4902-a6a1-467e91fd5e86",
        "cursor": {
          "ref": "2d18d3bf-ddc1-4f88-aa8a-be47fc3a58a4",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "40cb22c3-be5c-4472-a959-cf70ea9d6f8d"
        },
        "item": {
          "id": "c77088bf-5e4b-4902-a6a1-467e91fd5e86",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4c39488f-0e8a-415b-ab6d-2ae406164c36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "485ddece-d103-4489-94bb-a23d46df20ef",
        "cursor": {
          "ref": "cb3a7174-0853-4c24-9ca6-e579a3284c98",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "fdbbbb72-92e5-4cde-923a-a1fdb5cf57a9"
        },
        "item": {
          "id": "485ddece-d103-4489-94bb-a23d46df20ef",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "b6688ecd-4bfc-4508-a0ec-3731885c5668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11c8d023-af2f-4f0e-b4c5-8df01ce0fa99",
        "cursor": {
          "ref": "c19cc345-f7f6-400a-aa9d-30be014d9b7b",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "24860932-c2ba-4eda-9830-de83560ecaa2"
        },
        "item": {
          "id": "11c8d023-af2f-4f0e-b4c5-8df01ce0fa99",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "2ba8c405-aa85-4ecf-a7b3-9df4c64aa766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6b5e2d6-b9ef-4d03-9f6e-99f4b49ba0ae",
        "cursor": {
          "ref": "2b7cf00f-d4d2-4832-a4ce-a6f5c9f81031",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "10903529-51ac-440e-9b50-c212a8f8cf03"
        },
        "item": {
          "id": "e6b5e2d6-b9ef-4d03-9f6e-99f4b49ba0ae",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "7f9e948f-3cc6-404d-bb1e-9c2884090cb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fce4c852-9049-4573-89b4-e47fcad7ac03",
        "cursor": {
          "ref": "79ddcfe4-9fee-4334-8845-55a67ba7b5e1",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "83152376-66c3-4f69-824f-d4da09ba85c0"
        },
        "item": {
          "id": "fce4c852-9049-4573-89b4-e47fcad7ac03",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "b7703002-52c5-40d6-9177-1ff3049df540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53d6b9ae-eb7a-46aa-ac0b-1c3e1ab377a2",
        "cursor": {
          "ref": "09bc7d82-1d40-4b68-b43f-599965443f74",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "cd2aa8bf-2e2e-482c-a5e7-a256a852e342"
        },
        "item": {
          "id": "53d6b9ae-eb7a-46aa-ac0b-1c3e1ab377a2",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "2a3fe9a1-ee2d-4ffd-801e-6e00a9e52dd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02b32ef1-3d2a-4f9d-9213-6c438130e433",
        "cursor": {
          "ref": "5e5e7388-48d8-438c-9fae-0a7732926763",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "2b28f356-24ba-4585-ad87-2c8959dd8774"
        },
        "item": {
          "id": "02b32ef1-3d2a-4f9d-9213-6c438130e433",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f577b4c6-4ab9-4356-a2c8-013d698d4e13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7324c5d-718d-44c1-bcef-97579ed4b333",
        "cursor": {
          "ref": "1a509476-35ad-4195-a929-49c90ed3eafc",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "590f51c9-6531-4a78-9d6f-a5a7cc97b4dc"
        },
        "item": {
          "id": "e7324c5d-718d-44c1-bcef-97579ed4b333",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "21945bef-a06b-48a8-a9c2-a23b0587ee0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8fb473e-98b4-442f-bf7f-a94ac6e08d8d",
        "cursor": {
          "ref": "3cfae09a-438b-4dda-98f7-78229c1e2287",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "6b3e3da7-54dd-473a-a614-bfb856b6a16a"
        },
        "item": {
          "id": "c8fb473e-98b4-442f-bf7f-a94ac6e08d8d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "0cf33698-2d90-4523-9a0d-73bfbfdf2479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83964664-8676-40af-805b-e16bce878c01",
        "cursor": {
          "ref": "6eaabd81-cd9b-450e-8235-8fc95dde45fc",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "cf26298f-0738-4c6b-b74d-38a06f551676"
        },
        "item": {
          "id": "83964664-8676-40af-805b-e16bce878c01",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d9c80906-2be7-4591-a3ca-588b7efaf71a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec58c97f-e6b9-4ea9-b407-488bb356c1a6",
        "cursor": {
          "ref": "3b4f530c-a334-4cbe-9ba1-de9fe465b59c",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "aa7c6e83-6545-42d2-8071-15941cd9b3b8"
        },
        "item": {
          "id": "ec58c97f-e6b9-4ea9-b407-488bb356c1a6",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "dadcbfed-ac03-4833-ac79-2ee6fdcb5809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f8b2bfe-840b-4b27-b70e-b825a6110da5",
        "cursor": {
          "ref": "51ee753d-1686-4259-8204-49bd86ec5101",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "43a37dc6-8222-406a-8982-93520d8c1bf3"
        },
        "item": {
          "id": "2f8b2bfe-840b-4b27-b70e-b825a6110da5",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "499c86da-3600-42c3-87b9-5d697dd6c0a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1808083d-4beb-46bc-91ad-6fa84cd4b205",
        "cursor": {
          "ref": "bba0cb9b-28c8-4d92-aacf-21931104fd13",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "00ce2e77-9025-42d8-a6e4-8c6e9d02fe28"
        },
        "item": {
          "id": "1808083d-4beb-46bc-91ad-6fa84cd4b205",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "bf4fa15a-47de-47dd-a7e0-d675197fc380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a5fb917-c70c-45fd-9f79-15a9a4dc08af",
        "cursor": {
          "ref": "e766bf0c-908e-407b-95ff-60a0b5fc2c38",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "2877b140-0ed6-42f4-ae10-b9f39cd5671b"
        },
        "item": {
          "id": "3a5fb917-c70c-45fd-9f79-15a9a4dc08af",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "3b1640f8-4fde-42a1-b6f1-b5a603659381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6410e478-028e-437a-bd89-460f96f0b363",
        "cursor": {
          "ref": "d9103eae-5a8a-42cb-bcf4-37f0d2dd3f93",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "73b85f7a-884d-4057-9528-75cf7605e1ea"
        },
        "item": {
          "id": "6410e478-028e-437a-bd89-460f96f0b363",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4488ca29-3a09-47aa-b82f-793236ce5f21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "953eff6c-a6d5-40da-8121-85000c6fa9c0",
        "cursor": {
          "ref": "5090b339-bfb0-4180-aa63-37a2d7399e21",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "8da95565-59af-46a1-bb10-214580ad5035"
        },
        "item": {
          "id": "953eff6c-a6d5-40da-8121-85000c6fa9c0",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f85ae43e-b773-4cc8-9709-22e8b825ff70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24cc6f22-4ec0-4f93-ab4e-0daeeac03812",
        "cursor": {
          "ref": "9b6ed182-32bf-44d7-a2e4-d4d559b4daf7",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "8fa296f1-df94-412e-8335-dc24e09a807e"
        },
        "item": {
          "id": "24cc6f22-4ec0-4f93-ab4e-0daeeac03812",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "3adcd923-93f4-4b6e-989d-cc4f3b4c5028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "177a4573-9099-4570-afa3-a3a71eadab9d",
        "cursor": {
          "ref": "adec5980-037c-41bf-b27d-95502f48896a",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "2eac0080-1e07-44ec-919c-bbccbc555e04"
        },
        "item": {
          "id": "177a4573-9099-4570-afa3-a3a71eadab9d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "82eef891-4be4-4014-a078-8d63a37475d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "782384f1-ef6b-4972-b3d3-9005dcdff1ba",
        "cursor": {
          "ref": "d94472df-3b02-4af9-98f9-59c61df37ed7",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "587b666e-2e76-48f1-9535-ab6dd624c313"
        },
        "item": {
          "id": "782384f1-ef6b-4972-b3d3-9005dcdff1ba",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "6cc6c26f-16df-4d6d-a81a-8a04f6303115",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "905a47a3-0d2f-467c-9bf9-047518974aee",
        "cursor": {
          "ref": "0f49ed5f-e29b-42dd-ad7a-c96b82181e3f",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "239107cc-0329-412c-a8bb-39c755201dac"
        },
        "item": {
          "id": "905a47a3-0d2f-467c-9bf9-047518974aee",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "7a77ceef-6714-47ef-98d9-8d7713c2f177",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "663620e9-292d-4e2d-a1c5-cd1b943e30ba",
        "cursor": {
          "ref": "080ff26b-891c-4e03-9c77-bcf3b8c9c5b1",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "99c80813-2137-4fc8-9cd3-80388782de1e"
        },
        "item": {
          "id": "663620e9-292d-4e2d-a1c5-cd1b943e30ba",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "b5180074-2f52-429a-b9b6-c0ef7fc5a7f3",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "ec8841a1-8b59-4dc4-ab0f-0edb8ad49b2a",
        "cursor": {
          "ref": "bd41aa69-8a67-4e4e-b9f9-51dc90f39b81",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "8a53545d-f380-4401-bba9-8e681565be6f"
        },
        "item": {
          "id": "ec8841a1-8b59-4dc4-ab0f-0edb8ad49b2a",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b56dc40a-7b8a-4ef8-89c0-3725cf1c195c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "694513f5-20c3-4fa2-99c3-7376a08db8be",
        "cursor": {
          "ref": "a8e45ac8-9330-4b4d-ace3-67abe455894e",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d03fa437-a44b-4604-9b46-125f02adb831"
        },
        "item": {
          "id": "694513f5-20c3-4fa2-99c3-7376a08db8be",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "4365ae4e-1c81-49b0-957e-7016a96ead05",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "3fde94ce-ae2f-4302-a4a7-2c994d50aec0",
        "cursor": {
          "ref": "b1e68263-54ab-40f9-a99b-f46b9865eaa3",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "92597a8a-c0e3-44c7-803f-e3e0dd38a668"
        },
        "item": {
          "id": "3fde94ce-ae2f-4302-a4a7-2c994d50aec0",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "0540a142-1d7b-44f9-9fa1-3c42fd4d1587",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "1e857f81-5754-4015-9392-b57942ef758f",
        "cursor": {
          "ref": "9c020756-9891-468c-9649-c4f493f8bb2c",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "3edeea99-ea26-42b5-b1a3-7615f8b831be"
        },
        "item": {
          "id": "1e857f81-5754-4015-9392-b57942ef758f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "df16f6e2-3047-4973-ab43-0f179f503b57",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "a1a08d4a-1e28-4c75-bcb6-aa447cd4e111",
        "cursor": {
          "ref": "4ae40e59-c4f4-48ee-a2be-31d4f04cd76d",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "3d61acf4-6975-4d7f-b914-34b5979d34f6"
        },
        "item": {
          "id": "a1a08d4a-1e28-4c75-bcb6-aa447cd4e111",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "2196fa4d-4bd1-45dc-99b6-afdfef7bf1d5",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "e64606b7-3c0c-4ee8-b3c3-3359cc95a4c1",
        "cursor": {
          "ref": "30438a16-9444-4e94-b5db-3d0de1eb4d01",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c0a1a7c0-8cdf-4612-a63b-0b1e2da186b7"
        },
        "item": {
          "id": "e64606b7-3c0c-4ee8-b3c3-3359cc95a4c1",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e29975e5-ea09-4a0c-ac67-70584eb438ff",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "fbac836b-44e2-450b-80c9-131d9ab7f520",
        "cursor": {
          "ref": "59ad7d13-88ba-47bc-862c-e58fcefc1333",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "1076677b-0e90-46d3-8184-04524999b3ba"
        },
        "item": {
          "id": "fbac836b-44e2-450b-80c9-131d9ab7f520",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "93f0cf8e-495b-4454-8436-6b0fde52df6d",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "91cad3c2-3148-4b05-85c1-60f8b47b869e",
        "cursor": {
          "ref": "b86da63e-2e7a-49a3-93b0-7e955b11370d",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "4cabd665-13d4-4e07-83d4-8e5455f4b3a6"
        },
        "item": {
          "id": "91cad3c2-3148-4b05-85c1-60f8b47b869e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "fd9e1773-3acb-4b35-b76f-99b448a04c66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c6d873e-de5f-45a5-8aa1-6c230ecc838c",
        "cursor": {
          "ref": "9820b850-22cd-4cf4-8e69-1392c935ec99",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "8c8a8929-1561-45f8-8aa5-5c7a50421f49"
        },
        "item": {
          "id": "4c6d873e-de5f-45a5-8aa1-6c230ecc838c",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "baa7bd48-da7a-4b9b-af90-a09c1c3cd135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a5a0db3-12fb-48aa-8977-acaec5f5be87",
        "cursor": {
          "ref": "64810312-6cef-40a7-b6f0-64d0353b43ca",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "4186f067-6964-4632-9cf9-6bcd2e0b3476"
        },
        "item": {
          "id": "1a5a0db3-12fb-48aa-8977-acaec5f5be87",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "6e010e3f-ed1b-4609-b03b-a9921e1a85bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2310348-3a5c-49be-879e-932735d9fef6",
        "cursor": {
          "ref": "20f2ab87-d1d9-4b4f-8248-299d168af806",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "bda514e3-c39f-41cb-a068-b4776ae62d4b"
        },
        "item": {
          "id": "e2310348-3a5c-49be-879e-932735d9fef6",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "def5033b-f461-4b0f-b3c8-8fa43c163244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffebef2f-7281-4003-a8bf-0776a6e498fe",
        "cursor": {
          "ref": "8b8819f3-7e9c-4c48-b222-8a7638a1a089",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "141bf944-4d2a-4525-93e8-ecbfd1584574"
        },
        "item": {
          "id": "ffebef2f-7281-4003-a8bf-0776a6e498fe",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "8e9970b8-d04d-4bf9-8af3-51cce65a2165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e601f7-5518-4b25-81f5-f37349907095",
        "cursor": {
          "ref": "3689d12b-b4fd-4445-adf9-2fbde19d6eb5",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "d8a50c6d-752c-4dbb-9fac-099e75d19f88"
        },
        "item": {
          "id": "57e601f7-5518-4b25-81f5-f37349907095",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c8320a58-fbb3-4e96-a9b9-007d2a2b1269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d549288-3134-43e1-9411-84e66d620340",
        "cursor": {
          "ref": "0aae9eb5-bcf0-477d-88a1-035b18923d59",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "6a359a9e-f044-46a0-b58b-a05d4e8e4bb4"
        },
        "item": {
          "id": "9d549288-3134-43e1-9411-84e66d620340",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "acabcb3f-2bfd-4ce4-a451-7c429a6a3c02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c85a50d-57cf-447b-9406-0f5fe800dd75",
        "cursor": {
          "ref": "d5e77424-4c08-4be7-b2f2-f9f6ea6c3305",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "bc6f150c-97b0-4042-889b-6305840c621c"
        },
        "item": {
          "id": "3c85a50d-57cf-447b-9406-0f5fe800dd75",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "b293e200-2ae9-42e4-9012-33cc360e5601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d899e22a-0641-43bf-869a-20b3e0ee20ff",
        "cursor": {
          "ref": "f13910a8-d287-4bd7-a99f-b435e208564e",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "5fb6a579-4de6-4bd8-86ee-40e8bd084efa"
        },
        "item": {
          "id": "d899e22a-0641-43bf-869a-20b3e0ee20ff",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "5626af8b-3d62-4017-97a9-4737d92817d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4eb8731-f1e3-46d0-912f-757df1eaef6c",
        "cursor": {
          "ref": "9868d4d1-d0a0-44ff-8259-9da728f5963e",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "7bb94763-6f12-4e59-9ca0-84ef1b61519d"
        },
        "item": {
          "id": "e4eb8731-f1e3-46d0-912f-757df1eaef6c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "94d80dd6-c4eb-47ce-9db4-7c5337e77953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cff2831-62bf-4de5-acca-e87de4db4e21",
        "cursor": {
          "ref": "14f2062c-3862-4067-9362-b829a28fd4af",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "4fbad2ea-22ea-4099-845f-67d318d217e7"
        },
        "item": {
          "id": "2cff2831-62bf-4de5-acca-e87de4db4e21",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "0e899a04-af3d-4925-8208-ab7e2ce5dda0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c3cd97-0742-443c-916c-c974527203b1",
        "cursor": {
          "ref": "fca0952d-3fa7-461f-9f61-75e5c416959c",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "64ac30b3-c91b-48cd-bce2-700a4936ebb4"
        },
        "item": {
          "id": "36c3cd97-0742-443c-916c-c974527203b1",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "46608865-82c5-414c-b786-5a3015c8cdd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dcc6c2a-de70-4260-b777-5299ee46d67b",
        "cursor": {
          "ref": "b5994d6f-23f6-4960-b0d6-f15df33921b6",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "dc35e89b-8b8e-4923-89a4-78a427dd40a3"
        },
        "item": {
          "id": "2dcc6c2a-de70-4260-b777-5299ee46d67b",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "fabd353b-fe68-4ce5-a103-5748afc8a51b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "800f9f29-8094-450e-9566-fc874fd083bb",
        "cursor": {
          "ref": "55942752-00ce-4b61-9c03-7af6dc9ed744",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "302f18cb-6e7e-4067-99aa-ba15c338c80b"
        },
        "item": {
          "id": "800f9f29-8094-450e-9566-fc874fd083bb",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "995a28cd-df97-4dfd-b439-55666be304ac",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "53c0bef5-6640-47b8-bd60-2940b9e7510b",
        "cursor": {
          "ref": "9b4256ea-44f1-4150-a80d-1c7c276335ea",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "cc20cb64-4619-4c08-a465-00ffaefe6e05"
        },
        "item": {
          "id": "53c0bef5-6640-47b8-bd60-2940b9e7510b",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a8bc76bc-7383-4420-9ef2-3dbbdb67dec6",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "83cc983d-6a47-400b-996a-4dc78b2e5855",
        "cursor": {
          "ref": "cd82ab55-fcd4-4e5a-aa78-d18ba4847b11",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "eb14a91d-2e27-4b02-ad71-e583a8fa5382"
        },
        "item": {
          "id": "83cc983d-6a47-400b-996a-4dc78b2e5855",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "2abcfc26-5fe1-494c-b9b4-fb2a6c2873a0",
          "status": "OK",
          "code": 200,
          "responseTime": 215,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "3fd2f61e-5add-4da8-a71f-fae8936ae8b7",
        "cursor": {
          "ref": "38f499af-c35c-4e3c-8a50-f55f028576b2",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "43269c1f-f58c-49e0-8336-9e33d4142175"
        },
        "item": {
          "id": "3fd2f61e-5add-4da8-a71f-fae8936ae8b7",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "aad3c7fe-0f1b-474c-a68b-19971e0c3802",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "0e61b560-f895-4bc5-9b01-97d4d8b1d0b5",
        "cursor": {
          "ref": "c2a5fc47-78b1-40b0-97b5-89a9c5497ea2",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "95aa1502-3fa1-4e3d-ae88-1076895338cc"
        },
        "item": {
          "id": "0e61b560-f895-4bc5-9b01-97d4d8b1d0b5",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "5b2cf3e1-d458-4138-b2ad-454ca798ddaf",
          "status": "OK",
          "code": 200,
          "responseTime": 217,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "94ddfff5-e499-4a05-99e3-80709f990361",
        "cursor": {
          "ref": "54d9bb8a-3bcd-4536-9251-14b135af1646",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "eab0aa61-e6d0-4162-8b1f-9f87ec682ddd"
        },
        "item": {
          "id": "94ddfff5-e499-4a05-99e3-80709f990361",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "1b4d67b8-1144-4513-b4da-b5e5f20e6a00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17c1c24-cdd5-4a19-b9ad-06d8152cec33",
        "cursor": {
          "ref": "a3639a5f-e833-4610-9e81-01cc3df9d71e",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f54a1969-efe9-48f1-8524-c298acf22147"
        },
        "item": {
          "id": "a17c1c24-cdd5-4a19-b9ad-06d8152cec33",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "2d7f7f60-1c18-4366-a331-5085f715cef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1235302-ecc6-43a3-8416-f4cb3c1d62d7",
        "cursor": {
          "ref": "320ebd8d-8f87-4068-951d-54e832801772",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "e82a6c36-abc9-46a7-be4d-5bac49afcbc3"
        },
        "item": {
          "id": "d1235302-ecc6-43a3-8416-f4cb3c1d62d7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "c8fce123-cd1c-450d-92b2-69a3a8408d6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f289a219-0055-4268-a41a-fc71f5b0255a",
        "cursor": {
          "ref": "4fd1d08b-9a22-4777-9607-30d8af3a5964",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c09112ee-ac59-4507-a07b-e26fa0cf0fd8"
        },
        "item": {
          "id": "f289a219-0055-4268-a41a-fc71f5b0255a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e4581bc1-91ff-42c2-b61c-2e8629ab23b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b39ebfd-18c1-4b59-8faf-8a23566db9bb",
        "cursor": {
          "ref": "f9b49ac3-b79c-4cf9-b722-272bbf108525",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a671b3ed-22a9-4ef7-8c33-4cd8d7f1a23f"
        },
        "item": {
          "id": "5b39ebfd-18c1-4b59-8faf-8a23566db9bb",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "3b5cb381-5595-44c0-a0b1-b6d1e630955b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d3ee40e-3111-4890-af16-479fc16c563d",
        "cursor": {
          "ref": "570e1c86-87f5-423d-9a65-ba7b4676604e",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f5d0b29e-51f5-42c1-ab8e-496ad8057b28"
        },
        "item": {
          "id": "6d3ee40e-3111-4890-af16-479fc16c563d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "7e8e0723-775d-43c3-81cc-589227b6fbf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bef0936b-5bd7-41b2-ae6f-af718218db77",
        "cursor": {
          "ref": "4a681819-397d-4d97-b892-6cc5cdabdaa9",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "cfc3fec2-7677-4a2a-897d-ee71dc422a05"
        },
        "item": {
          "id": "bef0936b-5bd7-41b2-ae6f-af718218db77",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "112e1005-6ab7-4999-acba-2590e5fe13aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46a25ce6-aa26-40b1-91e1-72a4a56f38bd",
        "cursor": {
          "ref": "501f7670-7865-4799-a5f6-0e5e95b1cb2b",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4f530f91-8ac8-4cd0-b448-354626c3eb9b"
        },
        "item": {
          "id": "46a25ce6-aa26-40b1-91e1-72a4a56f38bd",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ea55c3a3-5adf-4169-82f5-86589d0b77cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b1ff1c9-29dc-40cb-8c5e-d4f7a9465a04",
        "cursor": {
          "ref": "ed3649d6-f9da-4308-b161-91068a9646ec",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "e64e45a2-368b-46aa-af1b-4d7ea8b5de7f"
        },
        "item": {
          "id": "8b1ff1c9-29dc-40cb-8c5e-d4f7a9465a04",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "41f21405-be50-43da-9031-13970356de3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "369cae49-5681-4301-962c-aa867bd8ee07",
        "cursor": {
          "ref": "0579ef07-527a-4b8a-9bb5-be0126165ce2",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "404f44a3-f86b-4038-a14a-6def467fc48f"
        },
        "item": {
          "id": "369cae49-5681-4301-962c-aa867bd8ee07",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "2c5e0385-26fd-4e39-8eb1-b5bac0f70bae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfd6d7ec-01a6-41d5-8a29-d71eb367c976",
        "cursor": {
          "ref": "eadf271b-cd8c-4fd1-808c-e7846a2c28c7",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "13f7ce99-a7dd-4b95-892c-dd3d558836ac"
        },
        "item": {
          "id": "dfd6d7ec-01a6-41d5-8a29-d71eb367c976",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "0a9b64de-36c5-4340-9e6f-94baedc5a0d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fecb972a-ccc0-432c-b17c-5c2c421687d0",
        "cursor": {
          "ref": "e25aec41-0346-44ef-a800-66dbfc5e2704",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "690817bf-9e44-48ab-ab1e-0d7e3f22efef"
        },
        "item": {
          "id": "fecb972a-ccc0-432c-b17c-5c2c421687d0",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "35fee49f-4f36-494a-a35c-c17535233eb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab2d76c4-a88a-48f9-94c4-4cd6f809c462",
        "cursor": {
          "ref": "112a4722-b904-4421-8d77-384ec56c306b",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "b73ffcfe-cdd2-44e8-9591-8294a39cf109"
        },
        "item": {
          "id": "ab2d76c4-a88a-48f9-94c4-4cd6f809c462",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "cc46b77d-3391-4069-af82-67c52eda4eec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed027a80-aaf3-4ee5-b0bb-6c0de4d45a44",
        "cursor": {
          "ref": "f04b2c88-3c8d-4fa9-82b5-90acd7edb19c",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "b676885b-3344-4dbd-81f1-15561780658a"
        },
        "item": {
          "id": "ed027a80-aaf3-4ee5-b0bb-6c0de4d45a44",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "9aaf381e-b1c6-4a01-a401-927520761f01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff58b857-d093-4567-9790-c5cfc540a0f9",
        "cursor": {
          "ref": "2598a94a-7b07-4db2-a064-e247ffd463a0",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "60542766-9e3d-4674-90ee-1d7820655e19"
        },
        "item": {
          "id": "ff58b857-d093-4567-9790-c5cfc540a0f9",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "122622b2-cbf4-49dc-96b9-696215b250f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da771068-8566-4e61-a003-862d324f41a7",
        "cursor": {
          "ref": "429edf9a-948f-4d37-93fb-90fd7c52f6f5",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "05418c05-872f-42d0-b67c-5fda9a8e2624"
        },
        "item": {
          "id": "da771068-8566-4e61-a003-862d324f41a7",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "5956d77c-1b2a-4e6f-a8d9-5fbc37fcb58e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8be1ce5-a566-4fa3-b0fd-f77f0fd6bb85",
        "cursor": {
          "ref": "f687e285-42f4-4d21-80ed-de4650cd2b91",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "bd59b972-1aa9-4cd7-9b2a-d8199c7bcbb4"
        },
        "item": {
          "id": "e8be1ce5-a566-4fa3-b0fd-f77f0fd6bb85",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "6838242a-7f4f-4fba-b193-7dd1531f875d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0d24426-b87f-4d38-b061-b0df21dfab7e",
        "cursor": {
          "ref": "0d2ff97e-29df-48f7-9e3d-7ac55f7c6bba",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "748f9619-1e39-40e1-ae54-9d219f68f521"
        },
        "item": {
          "id": "d0d24426-b87f-4d38-b061-b0df21dfab7e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e2bf881d-473e-45c2-aed8-b823a0f363ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8c9fdf7-2d1d-4c85-8fa8-79048f086943",
        "cursor": {
          "ref": "18927a11-c2f8-44c6-950e-37de7e702dfc",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "07cf8b81-d2b0-4f4e-8bf4-e718c881a923"
        },
        "item": {
          "id": "d8c9fdf7-2d1d-4c85-8fa8-79048f086943",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "8bda50c2-4051-41c0-b90a-ede8b78c41c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "293fe58f-c591-4ea7-a741-e149526a4d13",
        "cursor": {
          "ref": "6fe79362-49d3-4475-8397-8b7c7a01ca7c",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "50d83b5f-3824-4aa0-86e3-f1c27d4fafe7"
        },
        "item": {
          "id": "293fe58f-c591-4ea7-a741-e149526a4d13",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "a53ac8c9-3b5d-4277-bea4-47778603a55a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b735ec6a-3bcd-4d41-bb6b-392423f1d0b3",
        "cursor": {
          "ref": "67ab4dfc-6acb-446e-adec-283060c0293b",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "3879f13f-e40b-489b-a215-b0a0deece720"
        },
        "item": {
          "id": "b735ec6a-3bcd-4d41-bb6b-392423f1d0b3",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "93c1f4dc-9d70-468a-8123-e577b9713170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "924746d8-4e62-4b08-904b-c181feed8024",
        "cursor": {
          "ref": "97144e44-6c19-4b6f-b0e4-0d4695f13d20",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "d117227d-cf1a-4d3f-aa9e-42a35ed4ac0e"
        },
        "item": {
          "id": "924746d8-4e62-4b08-904b-c181feed8024",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "21231b74-264a-4d40-b027-12a1239d5514",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8af9a04-e628-4d9b-921c-470b05656a22",
        "cursor": {
          "ref": "7f45381c-7f19-4531-ba4b-58c2f8f6f4e1",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "bf5cb0bb-5064-4785-a6b6-8e2538164d5b"
        },
        "item": {
          "id": "a8af9a04-e628-4d9b-921c-470b05656a22",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "aff62a39-73d4-4bf7-97d2-81161bad8a0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c34374bb-a2ec-4ff3-b854-9d49aa344d64",
        "cursor": {
          "ref": "17432f56-55d7-4300-ba60-2b0704014b4d",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "6ee20755-a28b-451d-9862-07a3d4aeff80"
        },
        "item": {
          "id": "c34374bb-a2ec-4ff3-b854-9d49aa344d64",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "beb47b28-eaa1-4d9b-84d0-3c23691f7e78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c568cc6a-29a6-4ef6-9ed9-2a26480de43f",
        "cursor": {
          "ref": "bd001c0c-5ddc-4400-9554-706a3b34f985",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "664b3d99-6cc4-4664-ae07-421787634ffc"
        },
        "item": {
          "id": "c568cc6a-29a6-4ef6-9ed9-2a26480de43f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "05f431f3-2560-41f8-bc9b-5e40f0527808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1406a375-8030-4733-9db4-a9726baeedcb",
        "cursor": {
          "ref": "032d338a-a4f6-4419-a679-2c61d9bc6171",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "0cee5fac-74f9-4c4d-a7e0-2d96a8343949"
        },
        "item": {
          "id": "1406a375-8030-4733-9db4-a9726baeedcb",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "c4d16e1b-4358-4bc7-80bb-6928818bc664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10d235fb-c181-483a-aa31-f6c4d8a71a73",
        "cursor": {
          "ref": "067cf103-2d68-42f5-b694-21ad52228bf0",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "5e6995a7-074c-4a09-8301-1833f5210338"
        },
        "item": {
          "id": "10d235fb-c181-483a-aa31-f6c4d8a71a73",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "a728e351-2242-4e37-b8aa-0b61ed521eb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3e3e9a6-4ec9-4c51-8c96-75fdd9582180",
        "cursor": {
          "ref": "34e511ec-8679-48a8-b443-2ea71630d026",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "606b4cfc-1b1f-4838-84ba-b7a25178585c"
        },
        "item": {
          "id": "a3e3e9a6-4ec9-4c51-8c96-75fdd9582180",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "4d5c4068-b38c-4f1d-af6b-17a574ed2bd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b9d6c38-3bd2-423d-8556-64a00cee5a69",
        "cursor": {
          "ref": "58505c04-b54f-44fc-abf6-15780456b1dd",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "8127458f-c01a-4f74-880e-5dd267afdbc5"
        },
        "item": {
          "id": "0b9d6c38-3bd2-423d-8556-64a00cee5a69",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a69b54a7-14a0-40d4-b32a-a3e06e1f690d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ee89de-8811-41f5-ad9d-0eed7d0932a6",
        "cursor": {
          "ref": "cab3e777-be3b-4e33-8378-adfdc368fb14",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "16286c4e-9bce-4c3e-b927-abddf5d00761"
        },
        "item": {
          "id": "41ee89de-8811-41f5-ad9d-0eed7d0932a6",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "cd05c38d-6a8f-4e40-8f1b-3bff4364a6dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7262447b-6327-4c57-abdd-6aca4f63f273",
        "cursor": {
          "ref": "8eea7e03-b298-457c-a7ab-37c50c78388d",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "a6578c17-9f8c-4135-a8ed-f6f99846043e"
        },
        "item": {
          "id": "7262447b-6327-4c57-abdd-6aca4f63f273",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "bbc65154-68e5-4f56-aff9-c6db2e3e12da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d599f11b-d3ce-4b4e-a9e3-65f86318330f",
        "cursor": {
          "ref": "88d825d0-9462-4bb8-91ca-8f90a7463558",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "f0558f3f-5ff4-4bbf-b2c4-274845014cde"
        },
        "item": {
          "id": "d599f11b-d3ce-4b4e-a9e3-65f86318330f",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "a83d7f89-5c99-4cd6-b1c4-5717cd35197c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1578641-4c63-462a-829b-e148ea026cea",
        "cursor": {
          "ref": "71fbf3af-0fa5-4384-868e-f3e584fc9351",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "c232045a-d835-4488-b2d9-077b9758aad5"
        },
        "item": {
          "id": "a1578641-4c63-462a-829b-e148ea026cea",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "05d32276-5cc9-4c02-9885-5d960a51365c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdfa6030-cc9b-4e6d-8422-f77bba656ffe",
        "cursor": {
          "ref": "bc00cdc8-5a96-4f78-ad85-6266d4b07bc0",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "7b7297f8-0894-45a5-b34d-b523b0b1be0c"
        },
        "item": {
          "id": "fdfa6030-cc9b-4e6d-8422-f77bba656ffe",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "e6eb565e-4d5f-44b8-bd55-27b34b2a8dda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ad11799-15f9-430c-b67a-a2232d10ae9e",
        "cursor": {
          "ref": "e0ba00d6-8e68-49d1-ae64-a2f1c02a5c04",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "da83dc36-e414-4f3a-bd5e-2b203e6f4f7a"
        },
        "item": {
          "id": "4ad11799-15f9-430c-b67a-a2232d10ae9e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "deca725c-0243-4ce6-a43e-a7d8a952af17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1900d1f-c4ff-416b-ab9b-cbbe4b35aa78",
        "cursor": {
          "ref": "0bee128f-0d43-48a6-957d-b66778c6b6a0",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "18935915-56c9-4723-b777-3d1ed36f21c7"
        },
        "item": {
          "id": "a1900d1f-c4ff-416b-ab9b-cbbe4b35aa78",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "28c43bf3-9c70-4803-9afe-4de2aa4439ed",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "6f276ce7-fd7d-4bb7-a765-e6f99bc69663",
        "cursor": {
          "ref": "733c37bc-d33e-4540-aa9c-30b2b045f764",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "b557dc84-8052-41bb-b80d-07a374b5bd47"
        },
        "item": {
          "id": "6f276ce7-fd7d-4bb7-a765-e6f99bc69663",
          "name": "credentials_verify"
        },
        "response": {
          "id": "43b852f2-583a-4cc7-9dee-04e6afd953ec",
          "status": "OK",
          "code": 200,
          "responseTime": 260,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cd9fb6d-07ea-456d-abb5-16e9d8eb015c",
        "cursor": {
          "ref": "f09de433-b5b4-440c-b91d-f853011aa609",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "d5cfcb9f-3bac-4514-8049-788af889763d"
        },
        "item": {
          "id": "6cd9fb6d-07ea-456d-abb5-16e9d8eb015c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "bd7a8ae4-0d08-4e9d-a2a3-3dfa6e1b79fa",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "dad8bf64-8fbc-424a-a24c-73c592ec7354",
        "cursor": {
          "ref": "8bb981c4-5485-4d5a-8cfa-42f62936dd61",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "e04ed477-98f7-4901-a1c3-565cad047bba"
        },
        "item": {
          "id": "dad8bf64-8fbc-424a-a24c-73c592ec7354",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5e0d0a65-bb65-41f1-84f0-4402bc29d465",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dad8bf64-8fbc-424a-a24c-73c592ec7354",
        "cursor": {
          "ref": "8bb981c4-5485-4d5a-8cfa-42f62936dd61",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "e04ed477-98f7-4901-a1c3-565cad047bba"
        },
        "item": {
          "id": "dad8bf64-8fbc-424a-a24c-73c592ec7354",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5e0d0a65-bb65-41f1-84f0-4402bc29d465",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e3a96d7-4cb7-415e-9a3f-ff25cc30b0de",
        "cursor": {
          "ref": "26254b21-7c01-4e25-928b-094372f6aa09",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "3569ace9-1c29-4369-9374-93b72086dd99"
        },
        "item": {
          "id": "9e3a96d7-4cb7-415e-9a3f-ff25cc30b0de",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c54be7f1-d6be-4908-a3e7-623f5396b029",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b660ac2-3d82-4cee-a185-7f5717bab738",
        "cursor": {
          "ref": "bb44ba03-31e5-4e4d-8a63-c757b4a86751",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "508262a4-6b43-4b18-a662-ff7c3fe3dc9d"
        },
        "item": {
          "id": "1b660ac2-3d82-4cee-a185-7f5717bab738",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1bcd64b2-8074-4929-967a-34d4587b80c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}